{"id":"7a34e6d60c89c24bc5f77c2ada335e2a","_format":"hh-sol-build-info-1","solcVersion":"0.8.19","solcLongVersion":"0.8.19+commit.7dd6d404","input":{"language":"Solidity","sources":{"@ethereum-attestation-service/eas-contracts/contracts/Common.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n// A representation of an empty/uninitialized UID.\nbytes32 constant EMPTY_UID = 0;\n\n// A zero expiration represents an non-expiring attestation.\nuint64 constant NO_EXPIRATION_TIME = 0;\n\nerror AccessDenied();\nerror InvalidEAS();\nerror InvalidLength();\nerror InvalidSignature();\nerror NotFound();\n\n/**\n * @dev A struct representing EIP712 signature data.\n */\nstruct EIP712Signature {\n    uint8 v; // The recovery ID.\n    bytes32 r; // The x-coordinate of the nonce R.\n    bytes32 s; // The signature data.\n}\n\n/**\n * @dev A struct representing a single attestation.\n */\nstruct Attestation {\n    bytes32 uid; // A unique identifier of the attestation.\n    bytes32 schema; // The unique identifier of the schema.\n    uint64 time; // The time when the attestation was created (Unix timestamp).\n    uint64 expirationTime; // The time when the attestation expires (Unix timestamp).\n    uint64 revocationTime; // The time when the attestation was revoked (Unix timestamp).\n    bytes32 refUID; // The UID of the related attestation.\n    address recipient; // The recipient of the attestation.\n    address attester; // The attester/sender of the attestation.\n    bool revocable; // Whether the attestation is revocable.\n    bytes data; // Custom attestation data.\n}\n\n/**\n * @dev A helper function to work with unchecked iterators in loops.\n */\nfunction uncheckedInc(uint256 i) pure returns (uint256 j) {\n    unchecked {\n        j = i + 1;\n    }\n}\n"},"@ethereum-attestation-service/eas-contracts/contracts/IEAS.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport { ISchemaRegistry } from \"./ISchemaRegistry.sol\";\nimport { Attestation, EIP712Signature } from \"./Common.sol\";\n\n/**\n * @dev A struct representing the arguments of the attestation request.\n */\nstruct AttestationRequestData {\n    address recipient; // The recipient of the attestation.\n    uint64 expirationTime; // The time when the attestation expires (Unix timestamp).\n    bool revocable; // Whether the attestation is revocable.\n    bytes32 refUID; // The UID of the related attestation.\n    bytes data; // Custom attestation data.\n    uint256 value; // An explicit ETH amount to send to the resolver. This is important to prevent accidental user errors.\n}\n\n/**\n * @dev A struct representing the full arguments of the attestation request.\n */\nstruct AttestationRequest {\n    bytes32 schema; // The unique identifier of the schema.\n    AttestationRequestData data; // The arguments of the attestation request.\n}\n\n/**\n * @dev A struct representing the full arguments of the full delegated attestation request.\n */\nstruct DelegatedAttestationRequest {\n    bytes32 schema; // The unique identifier of the schema.\n    AttestationRequestData data; // The arguments of the attestation request.\n    EIP712Signature signature; // The EIP712 signature data.\n    address attester; // The attesting account.\n}\n\n/**\n * @dev A struct representing the full arguments of the multi attestation request.\n */\nstruct MultiAttestationRequest {\n    bytes32 schema; // The unique identifier of the schema.\n    AttestationRequestData[] data; // The arguments of the attestation request.\n}\n\n/**\n * @dev A struct representing the full arguments of the delegated multi attestation request.\n */\nstruct MultiDelegatedAttestationRequest {\n    bytes32 schema; // The unique identifier of the schema.\n    AttestationRequestData[] data; // The arguments of the attestation requests.\n    EIP712Signature[] signatures; // The EIP712 signatures data. Please note that the signatures are assumed to be signed with increasing nonces.\n    address attester; // The attesting account.\n}\n\n/**\n * @dev A struct representing the arguments of the revocation request.\n */\nstruct RevocationRequestData {\n    bytes32 uid; // The UID of the attestation to revoke.\n    uint256 value; // An explicit ETH amount to send to the resolver. This is important to prevent accidental user errors.\n}\n\n/**\n * @dev A struct representing the full arguments of the revocation request.\n */\nstruct RevocationRequest {\n    bytes32 schema; // The unique identifier of the schema.\n    RevocationRequestData data; // The arguments of the revocation request.\n}\n\n/**\n * @dev A struct representing the arguments of the full delegated revocation request.\n */\nstruct DelegatedRevocationRequest {\n    bytes32 schema; // The unique identifier of the schema.\n    RevocationRequestData data; // The arguments of the revocation request.\n    EIP712Signature signature; // The EIP712 signature data.\n    address revoker; // The revoking account.\n}\n\n/**\n * @dev A struct representing the full arguments of the multi revocation request.\n */\nstruct MultiRevocationRequest {\n    bytes32 schema; // The unique identifier of the schema.\n    RevocationRequestData[] data; // The arguments of the revocation request.\n}\n\n/**\n * @dev A struct representing the full arguments of the delegated multi revocation request.\n */\nstruct MultiDelegatedRevocationRequest {\n    bytes32 schema; // The unique identifier of the schema.\n    RevocationRequestData[] data; // The arguments of the revocation requests.\n    EIP712Signature[] signatures; // The EIP712 signatures data. Please note that the signatures are assumed to be signed with increasing nonces.\n    address revoker; // The revoking account.\n}\n\n/**\n * @title EAS - Ethereum Attestation Service interface.\n */\ninterface IEAS {\n    /**\n     * @dev Emitted when an attestation has been made.\n     *\n     * @param recipient The recipient of the attestation.\n     * @param attester The attesting account.\n     * @param uid The UID the revoked attestation.\n     * @param schema The UID of the schema.\n     */\n    event Attested(address indexed recipient, address indexed attester, bytes32 uid, bytes32 indexed schema);\n\n    /**\n     * @dev Emitted when an attestation has been revoked.\n     *\n     * @param recipient The recipient of the attestation.\n     * @param attester The attesting account.\n     * @param schema The UID of the schema.\n     * @param uid The UID the revoked attestation.\n     */\n    event Revoked(address indexed recipient, address indexed attester, bytes32 uid, bytes32 indexed schema);\n\n    /**\n     * @dev Emitted when a data has been timestamped.\n     *\n     * @param data The data.\n     * @param timestamp The timestamp.\n     */\n    event Timestamped(bytes32 indexed data, uint64 indexed timestamp);\n\n    /**\n     * @dev Emitted when a data has been revoked.\n     *\n     * @param revoker The address of the revoker.\n     * @param data The data.\n     * @param timestamp The timestamp.\n     */\n    event RevokedOffchain(address indexed revoker, bytes32 indexed data, uint64 indexed timestamp);\n\n    /**\n     * @dev Returns the address of the global schema registry.\n     *\n     * @return The address of the global schema registry.\n     */\n    function getSchemaRegistry() external view returns (ISchemaRegistry);\n\n    /**\n     * @dev Attests to a specific schema.\n     *\n     * @param request The arguments of the attestation request.\n     *\n     * Example:\n     *\n     * attest({\n     *     schema: \"0facc36681cbe2456019c1b0d1e7bedd6d1d40f6f324bf3dd3a4cef2999200a0\",\n     *     data: {\n     *         recipient: \"0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf\",\n     *         expirationTime: 0,\n     *         revocable: true,\n     *         refUID: \"0x0000000000000000000000000000000000000000000000000000000000000000\",\n     *         data: \"0xF00D\",\n     *         value: 0\n     *     }\n     * })\n     *\n     * @return The UID of the new attestation.\n     */\n    function attest(AttestationRequest calldata request) external payable returns (bytes32);\n\n    /**\n     * @dev Attests to a specific schema via the provided EIP712 signature.\n     *\n     * @param delegatedRequest The arguments of the delegated attestation request.\n     *\n     * Example:\n     *\n     * attestByDelegation({\n     *     schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\n     *     data: {\n     *         recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',\n     *         expirationTime: 1673891048,\n     *         revocable: true,\n     *         refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\n     *         data: '0x1234',\n     *         value: 0\n     *     },\n     *     signature: {\n     *         v: 28,\n     *         r: '0x148c...b25b',\n     *         s: '0x5a72...be22'\n     *     },\n     *     attester: '0xc5E8740aD971409492b1A63Db8d83025e0Fc427e'\n     * })\n     *\n     * @return The UID of the new attestation.\n     */\n    function attestByDelegation(\n        DelegatedAttestationRequest calldata delegatedRequest\n    ) external payable returns (bytes32);\n\n    /**\n     * @dev Attests to multiple schemas.\n     *\n     * @param multiRequests The arguments of the multi attestation requests. The requests should be grouped by distinct\n     * schema ids to benefit from the best batching optimization.\n     *\n     * Example:\n     *\n     * multiAttest([{\n     *     schema: '0x33e9094830a5cba5554d1954310e4fbed2ef5f859ec1404619adea4207f391fd',\n     *     data: [{\n     *         recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',\n     *         expirationTime: 1673891048,\n     *         revocable: true,\n     *         refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\n     *         data: '0x1234',\n     *         value: 1000\n     *     },\n     *     {\n     *         recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',\n     *         expirationTime: 0,\n     *         revocable: false,\n     *         refUID: '0x480df4a039efc31b11bfdf491b383ca138b6bde160988222a2a3509c02cee174',\n     *         data: '0x00',\n     *         value: 0\n     *     }],\n     * },\n     * {\n     *     schema: '0x5ac273ce41e3c8bfa383efe7c03e54c5f0bff29c9f11ef6ffa930fc84ca32425',\n     *     data: [{\n     *         recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',\n     *         expirationTime: 0,\n     *         revocable: true,\n     *         refUID: '0x75bf2ed8dca25a8190c50c52db136664de25b2449535839008ccfdab469b214f',\n     *         data: '0x12345678',\n     *         value: 0\n     *     },\n     * }])\n     *\n     * @return The UIDs of the new attestations.\n     */\n    function multiAttest(MultiAttestationRequest[] calldata multiRequests) external payable returns (bytes32[] memory);\n\n    /**\n     * @dev Attests to multiple schemas using via provided EIP712 signatures.\n     *\n     * @param multiDelegatedRequests The arguments of the delegated multi attestation requests. The requests should be\n     * grouped by distinct schema ids to benefit from the best batching optimization.\n     *\n     * Example:\n     *\n     * multiAttestByDelegation([{\n     *     schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\n     *     data: [{\n     *         recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',\n     *         expirationTime: 1673891048,\n     *         revocable: true,\n     *         refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\n     *         data: '0x1234',\n     *         value: 0\n     *     },\n     *     {\n     *         recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',\n     *         expirationTime: 0,\n     *         revocable: false,\n     *         refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\n     *         data: '0x00',\n     *         value: 0\n     *     }],\n     *     signatures: [{\n     *         v: 28,\n     *         r: '0x148c...b25b',\n     *         s: '0x5a72...be22'\n     *     },\n     *     {\n     *         v: 28,\n     *         r: '0x487s...67bb',\n     *         s: '0x12ad...2366'\n     *     }],\n     *     attester: '0x1D86495b2A7B524D747d2839b3C645Bed32e8CF4'\n     * }])\n     *\n     * @return The UIDs of the new attestations.\n     */\n    function multiAttestByDelegation(\n        MultiDelegatedAttestationRequest[] calldata multiDelegatedRequests\n    ) external payable returns (bytes32[] memory);\n\n    /**\n     * @dev Revokes an existing attestation to a specific schema.\n     *\n     * Example:\n     *\n     * revoke({\n     *     schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\n     *     data: {\n     *         uid: '0x101032e487642ee04ee17049f99a70590c735b8614079fc9275f9dd57c00966d',\n     *         value: 0\n     *     }\n     * })\n     *\n     * @param request The arguments of the revocation request.\n     */\n    function revoke(RevocationRequest calldata request) external payable;\n\n    /**\n     * @dev Revokes an existing attestation to a specific schema via the provided EIP712 signature.\n     *\n     * Example:\n     *\n     * revokeByDelegation({\n     *     schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\n     *     data: {\n     *         uid: '0xcbbc12102578c642a0f7b34fe7111e41afa25683b6cd7b5a14caf90fa14d24ba',\n     *         value: 0\n     *     },\n     *     signature: {\n     *         v: 27,\n     *         r: '0xb593...7142',\n     *         s: '0x0f5b...2cce'\n     *     },\n     *     revoker: '0x244934dd3e31bE2c81f84ECf0b3E6329F5381992'\n     * })\n     *\n     * @param delegatedRequest The arguments of the delegated revocation request.\n     */\n    function revokeByDelegation(DelegatedRevocationRequest calldata delegatedRequest) external payable;\n\n    /**\n     * @dev Revokes existing attestations to multiple schemas.\n     *\n     * @param multiRequests The arguments of the multi revocation requests. The requests should be grouped by distinct\n     * schema ids to benefit from the best batching optimization.\n     *\n     * Example:\n     *\n     * multiRevoke([{\n     *     schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\n     *     data: [{\n     *         uid: '0x211296a1ca0d7f9f2cfebf0daaa575bea9b20e968d81aef4e743d699c6ac4b25',\n     *         value: 1000\n     *     },\n     *     {\n     *         uid: '0xe160ac1bd3606a287b4d53d5d1d6da5895f65b4b4bab6d93aaf5046e48167ade',\n     *         value: 0\n     *     }],\n     * },\n     * {\n     *     schema: '0x5ac273ce41e3c8bfa383efe7c03e54c5f0bff29c9f11ef6ffa930fc84ca32425',\n     *     data: [{\n     *         uid: '0x053d42abce1fd7c8fcddfae21845ad34dae287b2c326220b03ba241bc5a8f019',\n     *         value: 0\n     *     },\n     * }])\n     */\n    function multiRevoke(MultiRevocationRequest[] calldata multiRequests) external payable;\n\n    /**\n     * @dev Revokes existing attestations to multiple schemas via provided EIP712 signatures.\n     *\n     * @param multiDelegatedRequests The arguments of the delegated multi revocation attestation requests. The requests should be\n     * grouped by distinct schema ids to benefit from the best batching optimization.\n     *\n     * Example:\n     *\n     * multiRevokeByDelegation([{\n     *     schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\n     *     data: [{\n     *         uid: '0x211296a1ca0d7f9f2cfebf0daaa575bea9b20e968d81aef4e743d699c6ac4b25',\n     *         value: 1000\n     *     },\n     *     {\n     *         uid: '0xe160ac1bd3606a287b4d53d5d1d6da5895f65b4b4bab6d93aaf5046e48167ade',\n     *         value: 0\n     *     }],\n     *     signatures: [{\n     *         v: 28,\n     *         r: '0x148c...b25b',\n     *         s: '0x5a72...be22'\n     *     },\n     *     {\n     *         v: 28,\n     *         r: '0x487s...67bb',\n     *         s: '0x12ad...2366'\n     *     }],\n     *     revoker: '0x244934dd3e31bE2c81f84ECf0b3E6329F5381992'\n     * }])\n     *\n     */\n    function multiRevokeByDelegation(\n        MultiDelegatedRevocationRequest[] calldata multiDelegatedRequests\n    ) external payable;\n\n    /**\n     * @dev Timestamps the specified bytes32 data.\n     *\n     * @param data The data to timestamp.\n     *\n     * @return The timestamp the data was timestamped with.\n     */\n    function timestamp(bytes32 data) external returns (uint64);\n\n    /**\n     * @dev Timestamps the specified multiple bytes32 data.\n     *\n     * @param data The data to timestamp.\n     *\n     * @return The timestamp the data was timestamped with.\n     */\n    function multiTimestamp(bytes32[] calldata data) external returns (uint64);\n\n    /**\n     * @dev Revokes the specified bytes32 data.\n     *\n     * @param data The data to timestamp.\n     *\n     * @return The timestamp the data was revoked with.\n     */\n    function revokeOffchain(bytes32 data) external returns (uint64);\n\n    /**\n     * @dev Revokes the specified multiple bytes32 data.\n     *\n     * @param data The data to timestamp.\n     *\n     * @return The timestamp the data was revoked with.\n     */\n    function multiRevokeOffchain(bytes32[] calldata data) external returns (uint64);\n\n    /**\n     * @dev Returns an existing attestation by UID.\n     *\n     * @param uid The UID of the attestation to retrieve.\n     *\n     * @return The attestation data members.\n     */\n    function getAttestation(bytes32 uid) external view returns (Attestation memory);\n\n    /**\n     * @dev Checks whether an attestation exists.\n     *\n     * @param uid The UID of the attestation to retrieve.\n     *\n     * @return Whether an attestation exists.\n     */\n    function isAttestationValid(bytes32 uid) external view returns (bool);\n\n    /**\n     * @dev Returns the timestamp that the specified data was timestamped with.\n     *\n     * @param data The data to query.\n     *\n     * @return The timestamp the data was timestamped with.\n     */\n    function getTimestamp(bytes32 data) external view returns (uint64);\n\n    /**\n     * @dev Returns the timestamp that the specified data was timestamped with.\n     *\n     * @param data The data to query.\n     *\n     * @return The timestamp the data was timestamped with.\n     */\n    function getRevokeOffchain(address revoker, bytes32 data) external view returns (uint64);\n}\n"},"@ethereum-attestation-service/eas-contracts/contracts/ISchemaRegistry.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport { ISchemaResolver } from \"./resolver/ISchemaResolver.sol\";\n\n/**\n * @title A struct representing a record for a submitted schema.\n */\nstruct SchemaRecord {\n    bytes32 uid; // The unique identifier of the schema.\n    ISchemaResolver resolver; // Optional schema resolver.\n    bool revocable; // Whether the schema allows revocations explicitly.\n    string schema; // Custom specification of the schema (e.g., an ABI).\n}\n\n/**\n * @title The global schema registry interface.\n */\ninterface ISchemaRegistry {\n    /**\n     * @dev Emitted when a new schema has been registered\n     *\n     * @param uid The schema UID.\n     * @param registerer The address of the account used to register the schema.\n     */\n    event Registered(bytes32 indexed uid, address registerer);\n\n    /**\n     * @dev Submits and reserves a new schema\n     *\n     * @param schema The schema data schema.\n     * @param resolver An optional schema resolver.\n     * @param revocable Whether the schema allows revocations explicitly.\n     *\n     * @return The UID of the new schema.\n     */\n    function register(string calldata schema, ISchemaResolver resolver, bool revocable) external returns (bytes32);\n\n    /**\n     * @dev Returns an existing schema by UID\n     *\n     * @param uid The UID of the schema to retrieve.\n     *\n     * @return The schema data members.\n     */\n    function getSchema(bytes32 uid) external view returns (SchemaRecord memory);\n}\n"},"@ethereum-attestation-service/eas-contracts/contracts/resolver/ISchemaResolver.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport { Attestation } from \"../Common.sol\";\n\n/**\n * @title The interface of an optional schema resolver.\n */\ninterface ISchemaResolver {\n    /**\n     * @dev Returns whether the resolver supports ETH transfers.\n     */\n    function isPayable() external pure returns (bool);\n\n    /**\n     * @dev Processes an attestation and verifies whether it's valid.\n     *\n     * @param attestation The new attestation.\n     *\n     * @return Whether the attestation is valid.\n     */\n    function attest(Attestation calldata attestation) external payable returns (bool);\n\n    /**\n     * @dev Processes multiple attestations and verifies whether they are valid.\n     *\n     * @param attestations The new attestations.\n     * @param values Explicit ETH amounts which were sent with each attestation.\n     *\n     * @return Whether all the attestations are valid.\n     */\n    function multiAttest(\n        Attestation[] calldata attestations,\n        uint256[] calldata values\n    ) external payable returns (bool);\n\n    /**\n     * @dev Processes an attestation revocation and verifies if it can be revoked.\n     *\n     * @param attestation The existing attestation to be revoked.\n     *\n     * @return Whether the attestation can be revoked.\n     */\n    function revoke(Attestation calldata attestation) external payable returns (bool);\n\n    /**\n     * @dev Processes revocation of multiple attestation and verifies they can be revoked.\n     *\n     * @param attestations The existing attestations to be revoked.\n     * @param values Explicit ETH amounts which were sent with each revocation.\n     *\n     * @return Whether the attestations can be revoked.\n     */\n    function multiRevoke(\n        Attestation[] calldata attestations,\n        uint256[] calldata values\n    ) external payable returns (bool);\n}\n"},"@ethereum-attestation-service/eas-contracts/contracts/resolver/SchemaResolver.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.4;\n\nimport { IEAS, Attestation } from \"../IEAS.sol\";\nimport { InvalidEAS, uncheckedInc } from \"../Common.sol\";\nimport { Semver } from \"../Semver.sol\";\n\nimport { ISchemaResolver } from \"./ISchemaResolver.sol\";\n\n/**\n * @title A base resolver contract\n */\nabstract contract SchemaResolver is ISchemaResolver, Semver {\n    error AccessDenied();\n    error InsufficientValue();\n    error NotPayable();\n\n    // The global EAS contract.\n    IEAS internal immutable _eas;\n\n    /**\n     * @dev Creates a new resolver.\n     *\n     * @param eas The address of the global EAS contract.\n     */\n    constructor(IEAS eas) Semver(1, 0, 0) {\n        if (address(eas) == address(0)) {\n            revert InvalidEAS();\n        }\n\n        _eas = eas;\n    }\n\n    /**\n     * @dev Ensures that only the EAS contract can make this call.\n     */\n    modifier onlyEAS() {\n        _onlyEAS();\n\n        _;\n    }\n\n    /**\n     * @inheritdoc ISchemaResolver\n     */\n    function isPayable() public pure virtual returns (bool) {\n        return false;\n    }\n\n    /**\n     * @dev ETH callback.\n     */\n    receive() external payable virtual {\n        if (!isPayable()) {\n            revert NotPayable();\n        }\n    }\n\n    /**\n     * @inheritdoc ISchemaResolver\n     */\n    function attest(Attestation calldata attestation) external payable onlyEAS returns (bool) {\n        return onAttest(attestation, msg.value);\n    }\n\n    /**\n     * @inheritdoc ISchemaResolver\n     */\n    function multiAttest(\n        Attestation[] calldata attestations,\n        uint256[] calldata values\n    ) external payable onlyEAS returns (bool) {\n        uint256 length = attestations.length;\n\n        // We are keeping track of the remaining ETH amount that can be sent to resolvers and will keep deducting\n        // from it to verify that there isn't any attempt to send too much ETH to resolvers. Please note that unless\n        // some ETH was stuck in the contract by accident (which shouldn't happen in normal conditions), it won't be\n        // possible to send too much ETH anyway.\n        uint256 remainingValue = msg.value;\n\n        for (uint256 i = 0; i < length; i = uncheckedInc(i)) {\n            // Ensure that the attester/revoker doesn't try to spend more than available.\n            uint256 value = values[i];\n            if (value > remainingValue) {\n                revert InsufficientValue();\n            }\n\n            // Forward the attestation to the underlying resolver and revert in case it isn't approved.\n            if (!onAttest(attestations[i], value)) {\n                return false;\n            }\n\n            unchecked {\n                // Subtract the ETH amount, that was provided to this attestation, from the global remaining ETH amount.\n                remainingValue -= value;\n            }\n        }\n\n        return true;\n    }\n\n    /**\n     * @inheritdoc ISchemaResolver\n     */\n    function revoke(Attestation calldata attestation) external payable onlyEAS returns (bool) {\n        return onRevoke(attestation, msg.value);\n    }\n\n    /**\n     * @inheritdoc ISchemaResolver\n     */\n    function multiRevoke(\n        Attestation[] calldata attestations,\n        uint256[] calldata values\n    ) external payable onlyEAS returns (bool) {\n        uint256 length = attestations.length;\n\n        // We are keeping track of the remaining ETH amount that can be sent to resolvers and will keep deducting\n        // from it to verify that there isn't any attempt to send too much ETH to resolvers. Please note that unless\n        // some ETH was stuck in the contract by accident (which shouldn't happen in normal conditions), it won't be\n        // possible to send too much ETH anyway.\n        uint256 remainingValue = msg.value;\n\n        for (uint256 i = 0; i < length; i = uncheckedInc(i)) {\n            // Ensure that the attester/revoker doesn't try to spend more than available.\n            uint256 value = values[i];\n            if (value > remainingValue) {\n                revert InsufficientValue();\n            }\n\n            // Forward the revocation to the underlying resolver and revert in case it isn't approved.\n            if (!onRevoke(attestations[i], value)) {\n                return false;\n            }\n\n            unchecked {\n                // Subtract the ETH amount, that was provided to this attestation, from the global remaining ETH amount.\n                remainingValue -= value;\n            }\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev A resolver callback that should be implemented by child contracts.\n     *\n     * @param attestation The new attestation.\n     * @param value An explicit ETH amount that was sent to the resolver. Please note that this value is verified in\n     * both attest() and multiAttest() callbacks EAS-only callbacks and that in case of multi attestations, it'll\n     * usually hold that msg.value != value, since msg.value aggregated the sent ETH amounts for all the attestations\n     * in the batch.\n     *\n     * @return Whether the attestation is valid.\n     */\n    function onAttest(Attestation calldata attestation, uint256 value) internal virtual returns (bool);\n\n    /**\n     * @dev Processes an attestation revocation and verifies if it can be revoked.\n     *\n     * @param attestation The existing attestation to be revoked.\n     * @param value An explicit ETH amount that was sent to the resolver. Please note that this value is verified in\n     * both revoke() and multiRevoke() callbacks EAS-only callbacks and that in case of multi attestations, it'll\n     * usually hold that msg.value != value, since msg.value aggregated the sent ETH amounts for all the attestations\n     * in the batch.\n     *\n     * @return Whether the attestation can be revoked.\n     */\n    function onRevoke(Attestation calldata attestation, uint256 value) internal virtual returns (bool);\n\n    /**\n     * @dev Ensures that only the EAS contract can make this call.\n     */\n    function _onlyEAS() private view {\n        if (msg.sender != address(_eas)) {\n            revert AccessDenied();\n        }\n    }\n}\n"},"@ethereum-attestation-service/eas-contracts/contracts/Semver.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.4;\n\nimport { Strings } from \"@openzeppelin/contracts/utils/Strings.sol\";\n\n/**\n * @dev A simple contract for managing contract versions.\n */\ncontract Semver {\n    // Contract's major version number.\n    uint256 private immutable _major;\n\n    // Contract's minor version number.\n    uint256 private immutable _minor;\n\n    // Contract's patch version number.\n    uint256 private immutable _path;\n\n    /**\n     * @param major Major version number.\n     * @param minor Minor version number.\n     * @param patch Patch version number.\n     */\n    constructor(uint256 major, uint256 minor, uint256 patch) {\n        _major = major;\n        _minor = minor;\n        _path = patch;\n    }\n\n    /**\n     * @notice Returns the full semver contract version.\n     *\n     * @return Semver contract version as a string.\n     */\n    function version() external view returns (string memory) {\n        return\n            string(\n                abi.encodePacked(Strings.toString(_major), \".\", Strings.toString(_minor), \".\", Strings.toString(_path))\n            );\n    }\n}\n"},"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"},"@openzeppelin/contracts-upgradeable/interfaces/IERC5267Upgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC5267.sol)\n\npragma solidity ^0.8.0;\n\ninterface IERC5267Upgradeable {\n    /**\n     * @dev MAY be emitted to signal that the domain could have changed.\n     */\n    event EIP712DomainChanged();\n\n    /**\n     * @dev returns the fields and values that describe the domain separator used by this contract for EIP-712\n     * signature.\n     */\n    function eip712Domain()\n        external\n        view\n        returns (\n            bytes1 fields,\n            string memory name,\n            string memory version,\n            uint256 chainId,\n            address verifyingContract,\n            bytes32 salt,\n            uint256[] memory extensions\n        );\n}\n"},"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```solidity\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n *\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n     * constructor.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized != type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint8) {\n        return _initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _initializing;\n    }\n}\n"},"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"},"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"},"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../StringsUpgradeable.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSAUpgradeable {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV // Deprecated in v4.8\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, \"\\x19Ethereum Signed Message:\\n32\")\n            mstore(0x1c, hash)\n            message := keccak256(0x00, 0x3c)\n        }\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", StringsUpgradeable.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, \"\\x19\\x01\")\n            mstore(add(ptr, 0x02), domainSeparator)\n            mstore(add(ptr, 0x22), structHash)\n            data := keccak256(ptr, 0x42)\n        }\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\n     * `validator` and `data` according to the version 0 of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x00\", validator, data));\n    }\n}\n"},"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/EIP712.sol)\n\npragma solidity ^0.8.8;\n\nimport \"./ECDSAUpgradeable.sol\";\nimport \"../../interfaces/IERC5267Upgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\n *\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\n *\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\n * ({_hashTypedDataV4}).\n *\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\n * the chain id to protect against replay attacks on an eventual fork of the chain.\n *\n * NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\n *\n * NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain\n * separator of the implementation contract. This will cause the `_domainSeparatorV4` function to always rebuild the\n * separator from the immutable values, which is cheaper than accessing a cached version in cold storage.\n *\n * _Available since v3.4._\n *\n * @custom:storage-size 52\n */\nabstract contract EIP712Upgradeable is Initializable, IERC5267Upgradeable {\n    bytes32 private constant _TYPE_HASH =\n        keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\");\n\n    /// @custom:oz-renamed-from _HASHED_NAME\n    bytes32 private _hashedName;\n    /// @custom:oz-renamed-from _HASHED_VERSION\n    bytes32 private _hashedVersion;\n\n    string private _name;\n    string private _version;\n\n    /**\n     * @dev Initializes the domain separator and parameter caches.\n     *\n     * The meaning of `name` and `version` is specified in\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\n     *\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\n     * - `version`: the current major version of the signing domain.\n     *\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\n     * contract upgrade].\n     */\n    function __EIP712_init(string memory name, string memory version) internal onlyInitializing {\n        __EIP712_init_unchained(name, version);\n    }\n\n    function __EIP712_init_unchained(string memory name, string memory version) internal onlyInitializing {\n        _name = name;\n        _version = version;\n\n        // Reset prior values in storage if upgrading\n        _hashedName = 0;\n        _hashedVersion = 0;\n    }\n\n    /**\n     * @dev Returns the domain separator for the current chain.\n     */\n    function _domainSeparatorV4() internal view returns (bytes32) {\n        return _buildDomainSeparator();\n    }\n\n    function _buildDomainSeparator() private view returns (bytes32) {\n        return keccak256(abi.encode(_TYPE_HASH, _EIP712NameHash(), _EIP712VersionHash(), block.chainid, address(this)));\n    }\n\n    /**\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\n     * function returns the hash of the fully encoded EIP712 message for this domain.\n     *\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\n     *\n     * ```solidity\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\n     *     keccak256(\"Mail(address to,string contents)\"),\n     *     mailTo,\n     *     keccak256(bytes(mailContents))\n     * )));\n     * address signer = ECDSA.recover(digest, signature);\n     * ```\n     */\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\n        return ECDSAUpgradeable.toTypedDataHash(_domainSeparatorV4(), structHash);\n    }\n\n    /**\n     * @dev See {EIP-5267}.\n     *\n     * _Available since v4.9._\n     */\n    function eip712Domain()\n        public\n        view\n        virtual\n        override\n        returns (\n            bytes1 fields,\n            string memory name,\n            string memory version,\n            uint256 chainId,\n            address verifyingContract,\n            bytes32 salt,\n            uint256[] memory extensions\n        )\n    {\n        // If the hashed name and version in storage are non-zero, the contract hasn't been properly initialized\n        // and the EIP712 domain is not reliable, as it will be missing name and version.\n        require(_hashedName == 0 && _hashedVersion == 0, \"EIP712: Uninitialized\");\n\n        return (\n            hex\"0f\", // 01111\n            _EIP712Name(),\n            _EIP712Version(),\n            block.chainid,\n            address(this),\n            bytes32(0),\n            new uint256[](0)\n        );\n    }\n\n    /**\n     * @dev The name parameter for the EIP712 domain.\n     *\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\n     * are a concern.\n     */\n    function _EIP712Name() internal virtual view returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev The version parameter for the EIP712 domain.\n     *\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\n     * are a concern.\n     */\n    function _EIP712Version() internal virtual view returns (string memory) {\n        return _version;\n    }\n\n    /**\n     * @dev The hash of the name parameter for the EIP712 domain.\n     *\n     * NOTE: In previous versions this function was virtual. In this version you should override `_EIP712Name` instead.\n     */\n    function _EIP712NameHash() internal view returns (bytes32) {\n        string memory name = _EIP712Name();\n        if (bytes(name).length > 0) {\n            return keccak256(bytes(name));\n        } else {\n            // If the name is empty, the contract may have been upgraded without initializing the new storage.\n            // We return the name hash in storage if non-zero, otherwise we assume the name is empty by design.\n            bytes32 hashedName = _hashedName;\n            if (hashedName != 0) {\n                return hashedName;\n            } else {\n                return keccak256(\"\");\n            }\n        }\n    }\n\n    /**\n     * @dev The hash of the version parameter for the EIP712 domain.\n     *\n     * NOTE: In previous versions this function was virtual. In this version you should override `_EIP712Version` instead.\n     */\n    function _EIP712VersionHash() internal view returns (bytes32) {\n        string memory version = _EIP712Version();\n        if (bytes(version).length > 0) {\n            return keccak256(bytes(version));\n        } else {\n            // If the version is empty, the contract may have been upgraded without initializing the new storage.\n            // We return the version hash in storage if non-zero, otherwise we assume the version is empty by design.\n            bytes32 hashedVersion = _hashedVersion;\n            if (hashedVersion != 0) {\n                return hashedVersion;\n            } else {\n                return keccak256(\"\");\n            }\n        }\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[48] private __gap;\n}\n"},"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary MathUpgradeable {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1, \"Math: mulDiv overflow\");\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n}\n"},"@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMathUpgradeable {\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // must be unchecked in order to support `n = type(int256).min`\n            return uint256(n >= 0 ? n : -n);\n        }\n    }\n}\n"},"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/MathUpgradeable.sol\";\nimport \"./math/SignedMathUpgradeable.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary StringsUpgradeable {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = MathUpgradeable.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toString(int256 value) internal pure returns (string memory) {\n        return string(abi.encodePacked(value < 0 ? \"-\" : \"\", toString(SignedMathUpgradeable.abs(value))));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n}\n"},"@openzeppelin/contracts/access/AccessControl.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\nimport \"../utils/Context.sol\";\nimport \"../utils/Strings.sol\";\nimport \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```solidity\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```solidity\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\n * to enforce additional security measures for this role.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\n     *\n     * Format of the revert message is described in {_checkRole}.\n     *\n     * _Available since v4.6._\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        Strings.toHexString(account),\n                        \" is missing role \",\n                        Strings.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * May emit a {RoleGranted} event.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n"},"@openzeppelin/contracts/access/IAccessControl.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"},"@openzeppelin/contracts/utils/Context.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"},"@openzeppelin/contracts/utils/introspection/ERC165.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"},"@openzeppelin/contracts/utils/introspection/IERC165.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"},"@openzeppelin/contracts/utils/math/Math.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1, \"Math: mulDiv overflow\");\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/math/SignedMath.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMath {\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // must be unchecked in order to support `n = type(int256).min`\n            return uint256(n >= 0 ? n : -n);\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/Strings.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\nimport \"./math/SignedMath.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toString(int256 value) internal pure returns (string memory) {\n        return string(abi.encodePacked(value < 0 ? \"-\" : \"\", toString(SignedMath.abs(value))));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n}\n"},"contracts/CommunityResolver.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.19;\n\nimport {SchemaResolver} from \"@ethereum-attestation-service/eas-contracts/contracts/resolver/SchemaResolver.sol\";\nimport {IEAS} from \"@ethereum-attestation-service/eas-contracts/contracts/IEAS.sol\";\nimport {Attestation} from \"@ethereum-attestation-service/eas-contracts/contracts/Common.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\n\ncontract CommunityResolver is\n    SchemaResolver,\n    Initializable,\n    OwnableUpgradeable\n{\n    mapping(bytes32 => mapping(address => uint8)) private communityAdmins;\n\n    address private _owner;\n\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor(IEAS eas) SchemaResolver(eas) {\n        _disableInitializers();\n    }\n\n    function initialize() public initializer {\n        _owner = msg.sender;\n        __Ownable_init();\n    }\n\n    function isAdmin(\n        bytes32 community,\n        address addr\n    ) public view returns (bool) {\n        return msg.sender == _owner || communityAdmins[community][addr] == 1;\n    }\n\n    function canAttest(address attester) public view returns (bool) {\n        return attester == _owner;\n    }\n\n    function enlist(bytes32 community, address addr) public virtual {\n        require(isAdmin(community, msg.sender), \"Not owner\");\n        communityAdmins[community][addr] = 1;\n    }\n\n    function delist(bytes32 community, address addr) public {\n        require(isAdmin(community, msg.sender), \"Not owner\");\n        communityAdmins[community][addr] = 0;\n    }\n\n    /**\n     * This is an bottom up event, called from the attest contract\n     */\n    function onAttest(\n        Attestation calldata attestation,\n        uint256 /*value*/\n    ) internal view override returns (bool) {\n        return canAttest(attestation.attester);\n    }\n\n    /**\n     * This is an bottom up event, called from the attest contract\n     */\n    function onRevoke(\n        Attestation calldata /*attestation*/,\n        uint256 /*value*/\n    ) internal pure override returns (bool) {\n        return true;\n    }\n}\n"},"contracts/Gap.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.19;\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\";\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\n\nimport {IEAS, Attestation, AttestationRequest, AttestationRequestData, MultiAttestationRequest, MultiRevocationRequest} from \"@ethereum-attestation-service/eas-contracts/contracts/IEAS.sol\";\n\ncontract Gap is Initializable, OwnableUpgradeable, EIP712Upgradeable {\n    IEAS public eas;\n    mapping(address => uint256) public nonces;\n\n    bytes32 public constant ATTEST_TYPEHASH =\n        keccak256(\"Attest(string payloadHash,uint256 nonce,uint256 expiry)\");\n\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor() {\n        _disableInitializers();\n    }\n\n    struct AttestationRequestNode {\n        bytes32 uid;\n        MultiAttestationRequest multiRequest;\n        uint256 refIdx;\n    }\n\n    function initialize(address easAddr) public initializer {\n        eas = IEAS(easAddr);\n        __EIP712_init(\"gap-attestation\", \"1.0\");\n        __Ownable_init();\n    }\n\n    ///\n    /// Verify if msg.sender owns the referenced attestation\n    ///\n    function validateCanAttestToRef(bytes32 uid) private view {\n        Attestation memory ref = eas.getAttestation(uid);\n        require(\n            ref.attester == msg.sender || ref.recipient == msg.sender,\n            \"Not owner.\"\n        );\n    }\n\n    ///\n    /// Verify if msg.sender owns the set of attestations\n    ///\n    function validateCanAttestToRefs(\n        AttestationRequestData[] memory datas\n    ) private view {\n        for (uint256 j = 0; j < datas.length; j++) {\n            if (datas[j].refUID != bytes32(0)) {\n                validateCanAttestToRef(datas[j].refUID);\n            }\n        }\n    }\n\n    function _recoverSignerAddress(\n        string memory payloadHash,\n        uint256 nonce,\n        uint256 expiry,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public view returns (address signer) {\n        bytes32 digest = _hashTypedDataV4(\n            keccak256(\n                abi.encode(\n                    ATTEST_TYPEHASH,\n                    keccak256(bytes(payloadHash)),\n                    nonce,\n                    expiry\n                )\n            )\n        );\n\n        signer = ECDSAUpgradeable.recover(digest, v, r, s);\n\n        return (signer);\n    }\n\n    ///\n    /// Performs multi revoke by sig\n    ///\n    function multiRevokeBySig(\n        MultiRevocationRequest[] calldata multiRequests,\n        string memory payloadHash,\n        address attester,\n        uint256 nonce,\n        uint256 expiry,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external virtual {\n        require(block.timestamp <= expiry, \"Signature expired\");\n\n        address signer = _recoverSignerAddress(\n            payloadHash,\n            nonce,\n            expiry,\n            v,\n            r,\n            s\n        );\n\n        require(\n            signer == attester,\n            \"Signer and attester addresses don't match.\"\n        );\n        require(nonce == nonces[signer]++, \"Invalid nonce\");\n        this.multiRevoke(multiRequests);\n    }\n\n    ///\n    /// Revokes multiple attestations\n    ///\n    function multiRevoke(\n        MultiRevocationRequest[] calldata multiRequests\n    ) external payable {\n        // Checks if every revoke request belongs to the sender\n        // The sender can be either the attester or the recipient.\n        for (uint256 i = 0; i < multiRequests.length; i++) {\n            MultiRevocationRequest memory request = multiRequests[i];\n            for (uint256 j = 0; j < request.data.length; j++) {\n                Attestation memory target = eas.getAttestation(\n                    request.data[j].uid\n                );\n\n                require(\n                    target.attester == msg.sender ||\n                        target.recipient == msg.sender,\n                    \"Not owner.\"\n                );\n            }\n        }\n        eas.multiRevoke(multiRequests);\n    }\n\n    ///\n    /// Performs a single attestation by signature\n    ///\n    function attestBySig(\n        AttestationRequest calldata request,\n        string memory payloadHash,\n        address attester,\n        uint256 nonce,\n        uint256 expiry,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external virtual returns (bytes32) {\n        require(block.timestamp <= expiry, \"Signature expired\");\n\n        address signer = _recoverSignerAddress(\n            payloadHash,\n            nonce,\n            expiry,\n            v,\n            r,\n            s\n        );\n        require(\n            signer == attester,\n            \"Signer and attester addresses don't match.\"\n        );\n        require(nonce == nonces[signer]++, \"Invalid nonce\");\n        return this.attest(request);\n    }\n\n    ///\n    /// Perform a single attestation\n    ///\n    function attest(\n        AttestationRequest calldata request\n    ) external payable returns (bytes32) {\n        AttestationRequestData[]\n            memory requestData = new AttestationRequestData[](1);\n        requestData[0] = request.data;\n        validateCanAttestToRefs(requestData);\n\n        return eas.attest(request);\n    }\n\n    ///\n    /// Performs multi attestations by signature\n    ///\n    function multiAttestBySig(\n        AttestationRequestNode[] calldata requestNodes,\n        string memory payloadHash,\n        address attester,\n        uint256 nonce,\n        uint256 expiry,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public virtual {\n        require(block.timestamp <= expiry, \"Signature expired\");\n\n        address signer = _recoverSignerAddress(\n            payloadHash,\n            nonce,\n            expiry,\n            v,\n            r,\n            s\n        );\n        require(\n            signer == attester,\n            \"Signer and attester addresses don't match.\"\n        );\n        require(nonce == nonces[signer]++, \"Invalid nonce\");\n        multiSequentialAttest(requestNodes);\n    }\n\n    ///\n    /// Performs a multi attest with relations between attestations and\n    /// assess for attesation permissions based on the parent attestation.\n    /// If refUID is set in any attestation it will be ignored.\n    ///\n    function multiSequentialAttest(\n        AttestationRequestNode[] calldata requestNodes\n    ) public {\n        bytes32[][] memory totalUids = new bytes32[][](requestNodes.length);\n\n        for (uint256 i = 0; i < requestNodes.length; i++) {\n            MultiAttestationRequest memory request = requestNodes[i]\n                .multiRequest;\n            // If first item reference an attestation, checks if sender\n            // is owner or attester of that attestation.\n            validateCanAttestToRefs(request.data);\n            // Updates the upcoming attestation reference uids.\n            if (i > 0) {\n                for (uint256 j = 0; j < request.data.length; j++) {\n                    AttestationRequestData memory data = request.data[j];\n                    // If a request already has a ref, should not change it.\n                    if (data.refUID == bytes32(0)) {\n                        data.refUID = totalUids[requestNodes[i].refIdx][0];\n                        request.data[j] = data;\n                    }\n                }\n            }\n\n            MultiAttestationRequest[]\n                memory requests = new MultiAttestationRequest[](1);\n            requests[0] = request;\n            totalUids[i] = eas.multiAttest(requests);\n        }\n    }\n}\n"},"contracts/ICommunityResolver.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.19;\r\n\r\nimport {ISchemaResolver} from \"@ethereum-attestation-service/eas-contracts/contracts/resolver/ISchemaResolver.sol\";\r\n\r\ninterface ICommunityResolver is ISchemaResolver {\r\n    function isAdmin(bytes32 communityUID, address addr) external returns (bool);\r\n}\r\n"},"contracts/MilestoneStatusResolver.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.19;\n\nimport {SchemaResolver} from \"@ethereum-attestation-service/eas-contracts/contracts/resolver/SchemaResolver.sol\";\nimport {IEAS} from \"@ethereum-attestation-service/eas-contracts/contracts/IEAS.sol\";\nimport {ICommunityResolver} from \"./ICommunityResolver.sol\";\nimport {Attestation} from \"@ethereum-attestation-service/eas-contracts/contracts/Common.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\n\ncontract MilestoneStatusResolver is\n    SchemaResolver,\n    Initializable,\n    OwnableUpgradeable\n{\n    address private _owner;\n    ICommunityResolver communityResolver;\n\n    bytes32 private approvedHash;\n    bytes32 private completedHash;\n    bytes32 private rejectedHash;\n\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor(IEAS eas) SchemaResolver(eas) {\n        _disableInitializers();\n    }\n\n    function initialize(ICommunityResolver resolver) public initializer {\n        _owner = msg.sender;\n        communityResolver = resolver;\n        approvedHash = keccak256(abi.encodePacked(\"approved\"));\n        completedHash = keccak256(abi.encodePacked(\"completed\"));\n        rejectedHash = keccak256(abi.encodePacked(\"rejected\"));\n        __Ownable_init();\n    }\n\n    /**\n     * Set the community resolver to check for admin privileges\n     */\n    function changeCommunityResolver(ICommunityResolver resolver) external {\n        require(msg.sender == _owner, \"Not owner.\");\n        communityResolver = resolver;\n    }\n\n    /**\n     * Calls community resolver whitelist to check if address is\n     * a community admin\n     */\n    function isCommunityAdmin(\n        bytes32 communityUID,\n        address addr\n    ) private returns (bool) {\n        return communityResolver.isAdmin(communityUID, addr);\n    }\n\n    /**\n     * Decodes the milestone schema\n     * @return typeHash \"approved\" | \"rejected\" | \"completed\"\n     */\n    function getMilestoneApprovalType(\n        bytes memory milestoneData\n    ) public view returns (bytes32 typeHash) {\n        (string memory type_, ) = abi.decode(milestoneData, (string, string));\n\n        typeHash = keccak256(abi.encodePacked(type_));\n\n        if (\n            typeHash != approvedHash &&\n            typeHash != completedHash &&\n            typeHash != rejectedHash\n        ) {\n            revert(\"Invalid approval type.\");\n        }\n\n        return (typeHash);\n    }\n\n    /**\n     * Decodes the grant schema\n     * @return the referred community UID\n     */\n    function getGrantCommunityUID(\n        bytes memory grantData\n    ) public pure returns (bytes32) {\n        return abi.decode(grantData, (bytes32));\n    }\n\n    function onAttest(\n        Attestation calldata attestation,\n        uint256 /*value*/\n    ) internal override returns (bool) {\n        require(attestation.refUID != bytes32(0), \"Invalid referred milestone\");\n        bytes32 typeHash = getMilestoneApprovalType(attestation.data);\n\n        Attestation memory milestone = _eas.getAttestation(attestation.refUID);\n        require(milestone.uid != bytes32(0), \"Invalid milestone reference\");\n        require(\n            milestone.refUID != bytes32(0),\n            \"Invalid grant reference on milestone\"\n        );\n\n        Attestation memory grant = _eas.getAttestation(milestone.refUID);\n        require(grant.uid != bytes32(0), \"Invalid grant reference\");\n        bytes32 communityUID = getGrantCommunityUID(grant.data);\n\n        bool communityAdmin = isCommunityAdmin(\n            communityUID,\n            attestation.attester\n        );\n\n        if (typeHash == completedHash) {\n            require(\n                milestone.attester == attestation.attester ||\n                    milestone.recipient == attestation.attester ||\n                    communityAdmin,\n                \"Not admin\"\n            );\n        } else if (typeHash == rejectedHash || typeHash == approvedHash) {\n            require(communityAdmin, \"Not owner\");\n            Attestation memory community = _eas.getAttestation(communityUID);\n            require(community.uid != bytes32(0), \"Invalid community reference\");\n        }\n        return true;\n    }\n\n    function onRevoke(\n        Attestation calldata /*attestation*/,\n        uint256 /*value*/\n    ) internal pure override returns (bool) {\n        return true;\n    }\n}\n"},"contracts/ReferrerResolver.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.19;\n\nimport {SchemaResolver} from \"@ethereum-attestation-service/eas-contracts/contracts/resolver/SchemaResolver.sol\";\nimport {IEAS} from \"@ethereum-attestation-service/eas-contracts/contracts/IEAS.sol\";\nimport {Attestation} from \"@ethereum-attestation-service/eas-contracts/contracts/Common.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\n\ncontract ReferrerResolver is SchemaResolver, Initializable, OwnableUpgradeable {\n    address private _owner;\n\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor(IEAS eas) SchemaResolver(eas) {\n        _disableInitializers();\n    }\n\n    function initialize() public initializer {\n        _owner = msg.sender;\n        __Ownable_init();\n    }\n\n    function onAttest(\n        Attestation calldata attestation,\n        uint256 /*value*/\n    ) internal view override returns (bool) {\n        if (attestation.refUID != bytes32(0)) {\n            Attestation memory ref = _eas.getAttestation(attestation.refUID);\n            require(ref.uid != bytes32(0), \"Referred attestation not valid.\");\n            require(\n                ref.attester == attestation.attester ||\n                    ref.recipient == attestation.attester ||\n                    _owner == attestation.attester,\n                \"Not owner\"\n            );\n        }\n        return true;\n    }\n\n    function onRevoke(\n        Attestation calldata /*attestation*/,\n        uint256 /*value*/\n    ) internal pure override returns (bool) {\n        return true;\n    }\n}\n"}},"settings":{"optimizer":{"enabled":true,"runs":1000},"outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata","storageLayout","devdoc","userdoc","evm.gasEstimates"],"":["ast"]}},"metadata":{"useLiteralContent":true}}},"output":{"sources":{"@ethereum-attestation-service/eas-contracts/contracts/Common.sol":{"ast":{"absolutePath":"@ethereum-attestation-service/eas-contracts/contracts/Common.sol","exportedSymbols":{"AccessDenied":[9],"Attestation":[45],"EIP712Signature":[24],"EMPTY_UID":[4],"InvalidEAS":[11],"InvalidLength":[13],"InvalidSignature":[15],"NO_EXPIRATION_TIME":[7],"NotFound":[17],"uncheckedInc":[61]},"id":62,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"33:23:0"},{"constant":true,"id":4,"mutability":"constant","name":"EMPTY_UID","nameLocation":"126:9:0","nodeType":"VariableDeclaration","scope":62,"src":"109:30:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2,"name":"bytes32","nodeType":"ElementaryTypeName","src":"109:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"hexValue":"30","id":3,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"138:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"visibility":"internal"},{"constant":true,"id":7,"mutability":"constant","name":"NO_EXPIRATION_TIME","nameLocation":"219:18:0","nodeType":"VariableDeclaration","scope":62,"src":"203:38:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":5,"name":"uint64","nodeType":"ElementaryTypeName","src":"203:6:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"value":{"hexValue":"30","id":6,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"240:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"visibility":"internal"},{"errorSelector":"4ca88867","id":9,"name":"AccessDenied","nameLocation":"250:12:0","nodeType":"ErrorDefinition","parameters":{"id":8,"nodeType":"ParameterList","parameters":[],"src":"262:2:0"},"src":"244:21:0"},{"errorSelector":"83780ffe","id":11,"name":"InvalidEAS","nameLocation":"272:10:0","nodeType":"ErrorDefinition","parameters":{"id":10,"nodeType":"ParameterList","parameters":[],"src":"282:2:0"},"src":"266:19:0"},{"errorSelector":"947d5a84","id":13,"name":"InvalidLength","nameLocation":"292:13:0","nodeType":"ErrorDefinition","parameters":{"id":12,"nodeType":"ParameterList","parameters":[],"src":"305:2:0"},"src":"286:22:0"},{"errorSelector":"8baa579f","id":15,"name":"InvalidSignature","nameLocation":"315:16:0","nodeType":"ErrorDefinition","parameters":{"id":14,"nodeType":"ParameterList","parameters":[],"src":"331:2:0"},"src":"309:25:0"},{"errorSelector":"c5723b51","id":17,"name":"NotFound","nameLocation":"341:8:0","nodeType":"ErrorDefinition","parameters":{"id":16,"nodeType":"ParameterList","parameters":[],"src":"349:2:0"},"src":"335:17:0"},{"canonicalName":"EIP712Signature","id":24,"members":[{"constant":false,"id":19,"mutability":"mutable","name":"v","nameLocation":"450:1:0","nodeType":"VariableDeclaration","scope":24,"src":"444:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":18,"name":"uint8","nodeType":"ElementaryTypeName","src":"444:5:0","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":21,"mutability":"mutable","name":"r","nameLocation":"485:1:0","nodeType":"VariableDeclaration","scope":24,"src":"477:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":20,"name":"bytes32","nodeType":"ElementaryTypeName","src":"477:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":23,"mutability":"mutable","name":"s","nameLocation":"536:1:0","nodeType":"VariableDeclaration","scope":24,"src":"528:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":22,"name":"bytes32","nodeType":"ElementaryTypeName","src":"528:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"name":"EIP712Signature","nameLocation":"422:15:0","nodeType":"StructDefinition","scope":62,"src":"415:148:0","visibility":"public"},{"canonicalName":"Attestation","id":45,"members":[{"constant":false,"id":26,"mutability":"mutable","name":"uid","nameLocation":"658:3:0","nodeType":"VariableDeclaration","scope":45,"src":"650:11:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":25,"name":"bytes32","nodeType":"ElementaryTypeName","src":"650:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":28,"mutability":"mutable","name":"schema","nameLocation":"718:6:0","nodeType":"VariableDeclaration","scope":45,"src":"710:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":27,"name":"bytes32","nodeType":"ElementaryTypeName","src":"710:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":30,"mutability":"mutable","name":"time","nameLocation":"777:4:0","nodeType":"VariableDeclaration","scope":45,"src":"770:11:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":29,"name":"uint64","nodeType":"ElementaryTypeName","src":"770:6:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":32,"mutability":"mutable","name":"expirationTime","nameLocation":"857:14:0","nodeType":"VariableDeclaration","scope":45,"src":"850:21:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":31,"name":"uint64","nodeType":"ElementaryTypeName","src":"850:6:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":34,"mutability":"mutable","name":"revocationTime","nameLocation":"943:14:0","nodeType":"VariableDeclaration","scope":45,"src":"936:21:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":33,"name":"uint64","nodeType":"ElementaryTypeName","src":"936:6:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":36,"mutability":"mutable","name":"refUID","nameLocation":"1034:6:0","nodeType":"VariableDeclaration","scope":45,"src":"1026:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":35,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1026:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":38,"mutability":"mutable","name":"recipient","nameLocation":"1093:9:0","nodeType":"VariableDeclaration","scope":45,"src":"1085:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":37,"name":"address","nodeType":"ElementaryTypeName","src":"1085:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":40,"mutability":"mutable","name":"attester","nameLocation":"1153:8:0","nodeType":"VariableDeclaration","scope":45,"src":"1145:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":39,"name":"address","nodeType":"ElementaryTypeName","src":"1145:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":42,"mutability":"mutable","name":"revocable","nameLocation":"1215:9:0","nodeType":"VariableDeclaration","scope":45,"src":"1210:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":41,"name":"bool","nodeType":"ElementaryTypeName","src":"1210:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":44,"mutability":"mutable","name":"data","nameLocation":"1277:4:0","nodeType":"VariableDeclaration","scope":45,"src":"1271:10:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":43,"name":"bytes","nodeType":"ElementaryTypeName","src":"1271:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"name":"Attestation","nameLocation":"632:11:0","nodeType":"StructDefinition","scope":62,"src":"625:687:0","visibility":"public"},{"body":{"id":60,"nodeType":"Block","src":"1449:44:0","statements":[{"id":59,"nodeType":"UncheckedBlock","src":"1455:36:0","statements":[{"expression":{"id":57,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":53,"name":"j","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":51,"src":"1475:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":56,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":54,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":48,"src":"1479:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":55,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1483:1:0","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1479:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1475:9:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":58,"nodeType":"ExpressionStatement","src":"1475:9:0"}]}]},"documentation":{"id":46,"nodeType":"StructuredDocumentation","src":"1314:76:0","text":" @dev A helper function to work with unchecked iterators in loops."},"id":61,"implemented":true,"kind":"freeFunction","modifiers":[],"name":"uncheckedInc","nameLocation":"1400:12:0","nodeType":"FunctionDefinition","parameters":{"id":49,"nodeType":"ParameterList","parameters":[{"constant":false,"id":48,"mutability":"mutable","name":"i","nameLocation":"1421:1:0","nodeType":"VariableDeclaration","scope":61,"src":"1413:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":47,"name":"uint256","nodeType":"ElementaryTypeName","src":"1413:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1412:11:0"},"returnParameters":{"id":52,"nodeType":"ParameterList","parameters":[{"constant":false,"id":51,"mutability":"mutable","name":"j","nameLocation":"1446:1:0","nodeType":"VariableDeclaration","scope":61,"src":"1438:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":50,"name":"uint256","nodeType":"ElementaryTypeName","src":"1438:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1437:11:0"},"scope":62,"src":"1391:102:0","stateMutability":"pure","virtual":false,"visibility":"internal"}],"src":"33:1461:0"},"id":0},"@ethereum-attestation-service/eas-contracts/contracts/IEAS.sol":{"ast":{"absolutePath":"@ethereum-attestation-service/eas-contracts/contracts/IEAS.sol","exportedSymbols":{"Attestation":[45],"AttestationRequest":[87],"AttestationRequestData":[81],"DelegatedAttestationRequest":[98],"DelegatedRevocationRequest":[140],"EIP712Signature":[24],"IEAS":[346],"ISchemaRegistry":[391],"MultiAttestationRequest":[105],"MultiDelegatedAttestationRequest":[118],"MultiDelegatedRevocationRequest":[160],"MultiRevocationRequest":[147],"RevocationRequest":[129],"RevocationRequestData":[123]},"id":347,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":63,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"33:23:1"},{"absolutePath":"@ethereum-attestation-service/eas-contracts/contracts/ISchemaRegistry.sol","file":"./ISchemaRegistry.sol","id":65,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":347,"sourceUnit":392,"src":"58:56:1","symbolAliases":[{"foreign":{"id":64,"name":"ISchemaRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":391,"src":"67:15:1","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@ethereum-attestation-service/eas-contracts/contracts/Common.sol","file":"./Common.sol","id":68,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":347,"sourceUnit":62,"src":"115:60:1","symbolAliases":[{"foreign":{"id":66,"name":"Attestation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":45,"src":"124:11:1","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":67,"name":"EIP712Signature","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":24,"src":"137:15:1","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"canonicalName":"AttestationRequestData","id":81,"members":[{"constant":false,"id":70,"mutability":"mutable","name":"recipient","nameLocation":"301:9:1","nodeType":"VariableDeclaration","scope":81,"src":"293:17:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":69,"name":"address","nodeType":"ElementaryTypeName","src":"293:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":72,"mutability":"mutable","name":"expirationTime","nameLocation":"360:14:1","nodeType":"VariableDeclaration","scope":81,"src":"353:21:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":71,"name":"uint64","nodeType":"ElementaryTypeName","src":"353:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":74,"mutability":"mutable","name":"revocable","nameLocation":"444:9:1","nodeType":"VariableDeclaration","scope":81,"src":"439:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":73,"name":"bool","nodeType":"ElementaryTypeName","src":"439:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":76,"mutability":"mutable","name":"refUID","nameLocation":"508:6:1","nodeType":"VariableDeclaration","scope":81,"src":"500:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":75,"name":"bytes32","nodeType":"ElementaryTypeName","src":"500:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":78,"mutability":"mutable","name":"data","nameLocation":"565:4:1","nodeType":"VariableDeclaration","scope":81,"src":"559:10:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":77,"name":"bytes","nodeType":"ElementaryTypeName","src":"559:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":80,"mutability":"mutable","name":"value","nameLocation":"611:5:1","nodeType":"VariableDeclaration","scope":81,"src":"603:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":79,"name":"uint256","nodeType":"ElementaryTypeName","src":"603:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"AttestationRequestData","nameLocation":"264:22:1","nodeType":"StructDefinition","scope":347,"src":"257:466:1","visibility":"public"},{"canonicalName":"AttestationRequest","id":87,"members":[{"constant":false,"id":83,"mutability":"mutable","name":"schema","nameLocation":"850:6:1","nodeType":"VariableDeclaration","scope":87,"src":"842:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":82,"name":"bytes32","nodeType":"ElementaryTypeName","src":"842:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":86,"mutability":"mutable","name":"data","nameLocation":"925:4:1","nodeType":"VariableDeclaration","scope":87,"src":"902:27:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_AttestationRequestData_$81_storage_ptr","typeString":"struct AttestationRequestData"},"typeName":{"id":85,"nodeType":"UserDefinedTypeName","pathNode":{"id":84,"name":"AttestationRequestData","nameLocations":["902:22:1"],"nodeType":"IdentifierPath","referencedDeclaration":81,"src":"902:22:1"},"referencedDeclaration":81,"src":"902:22:1","typeDescriptions":{"typeIdentifier":"t_struct$_AttestationRequestData_$81_storage_ptr","typeString":"struct AttestationRequestData"}},"visibility":"internal"}],"name":"AttestationRequest","nameLocation":"817:18:1","nodeType":"StructDefinition","scope":347,"src":"810:167:1","visibility":"public"},{"canonicalName":"DelegatedAttestationRequest","id":98,"members":[{"constant":false,"id":89,"mutability":"mutable","name":"schema","nameLocation":"1128:6:1","nodeType":"VariableDeclaration","scope":98,"src":"1120:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":88,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1120:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":92,"mutability":"mutable","name":"data","nameLocation":"1203:4:1","nodeType":"VariableDeclaration","scope":98,"src":"1180:27:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_AttestationRequestData_$81_storage_ptr","typeString":"struct AttestationRequestData"},"typeName":{"id":91,"nodeType":"UserDefinedTypeName","pathNode":{"id":90,"name":"AttestationRequestData","nameLocations":["1180:22:1"],"nodeType":"IdentifierPath","referencedDeclaration":81,"src":"1180:22:1"},"referencedDeclaration":81,"src":"1180:22:1","typeDescriptions":{"typeIdentifier":"t_struct$_AttestationRequestData_$81_storage_ptr","typeString":"struct AttestationRequestData"}},"visibility":"internal"},{"constant":false,"id":95,"mutability":"mutable","name":"signature","nameLocation":"1274:9:1","nodeType":"VariableDeclaration","scope":98,"src":"1258:25:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_EIP712Signature_$24_storage_ptr","typeString":"struct EIP712Signature"},"typeName":{"id":94,"nodeType":"UserDefinedTypeName","pathNode":{"id":93,"name":"EIP712Signature","nameLocations":["1258:15:1"],"nodeType":"IdentifierPath","referencedDeclaration":24,"src":"1258:15:1"},"referencedDeclaration":24,"src":"1258:15:1","typeDescriptions":{"typeIdentifier":"t_struct$_EIP712Signature_$24_storage_ptr","typeString":"struct EIP712Signature"}},"visibility":"internal"},{"constant":false,"id":97,"mutability":"mutable","name":"attester","nameLocation":"1327:8:1","nodeType":"VariableDeclaration","scope":98,"src":"1319:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":96,"name":"address","nodeType":"ElementaryTypeName","src":"1319:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"name":"DelegatedAttestationRequest","nameLocation":"1086:27:1","nodeType":"StructDefinition","scope":347,"src":"1079:285:1","visibility":"public"},{"canonicalName":"MultiAttestationRequest","id":105,"members":[{"constant":false,"id":100,"mutability":"mutable","name":"schema","nameLocation":"1502:6:1","nodeType":"VariableDeclaration","scope":105,"src":"1494:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":99,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1494:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":104,"mutability":"mutable","name":"data","nameLocation":"1579:4:1","nodeType":"VariableDeclaration","scope":105,"src":"1554:29:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_AttestationRequestData_$81_storage_$dyn_storage_ptr","typeString":"struct AttestationRequestData[]"},"typeName":{"baseType":{"id":102,"nodeType":"UserDefinedTypeName","pathNode":{"id":101,"name":"AttestationRequestData","nameLocations":["1554:22:1"],"nodeType":"IdentifierPath","referencedDeclaration":81,"src":"1554:22:1"},"referencedDeclaration":81,"src":"1554:22:1","typeDescriptions":{"typeIdentifier":"t_struct$_AttestationRequestData_$81_storage_ptr","typeString":"struct AttestationRequestData"}},"id":103,"nodeType":"ArrayTypeName","src":"1554:24:1","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_AttestationRequestData_$81_storage_$dyn_storage_ptr","typeString":"struct AttestationRequestData[]"}},"visibility":"internal"}],"name":"MultiAttestationRequest","nameLocation":"1464:23:1","nodeType":"StructDefinition","scope":347,"src":"1457:174:1","visibility":"public"},{"canonicalName":"MultiDelegatedAttestationRequest","id":118,"members":[{"constant":false,"id":107,"mutability":"mutable","name":"schema","nameLocation":"1788:6:1","nodeType":"VariableDeclaration","scope":118,"src":"1780:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":106,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1780:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":111,"mutability":"mutable","name":"data","nameLocation":"1865:4:1","nodeType":"VariableDeclaration","scope":118,"src":"1840:29:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_AttestationRequestData_$81_storage_$dyn_storage_ptr","typeString":"struct AttestationRequestData[]"},"typeName":{"baseType":{"id":109,"nodeType":"UserDefinedTypeName","pathNode":{"id":108,"name":"AttestationRequestData","nameLocations":["1840:22:1"],"nodeType":"IdentifierPath","referencedDeclaration":81,"src":"1840:22:1"},"referencedDeclaration":81,"src":"1840:22:1","typeDescriptions":{"typeIdentifier":"t_struct$_AttestationRequestData_$81_storage_ptr","typeString":"struct AttestationRequestData"}},"id":110,"nodeType":"ArrayTypeName","src":"1840:24:1","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_AttestationRequestData_$81_storage_$dyn_storage_ptr","typeString":"struct AttestationRequestData[]"}},"visibility":"internal"},{"constant":false,"id":115,"mutability":"mutable","name":"signatures","nameLocation":"1939:10:1","nodeType":"VariableDeclaration","scope":118,"src":"1921:28:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_EIP712Signature_$24_storage_$dyn_storage_ptr","typeString":"struct EIP712Signature[]"},"typeName":{"baseType":{"id":113,"nodeType":"UserDefinedTypeName","pathNode":{"id":112,"name":"EIP712Signature","nameLocations":["1921:15:1"],"nodeType":"IdentifierPath","referencedDeclaration":24,"src":"1921:15:1"},"referencedDeclaration":24,"src":"1921:15:1","typeDescriptions":{"typeIdentifier":"t_struct$_EIP712Signature_$24_storage_ptr","typeString":"struct EIP712Signature"}},"id":114,"nodeType":"ArrayTypeName","src":"1921:17:1","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_EIP712Signature_$24_storage_$dyn_storage_ptr","typeString":"struct EIP712Signature[]"}},"visibility":"internal"},{"constant":false,"id":117,"mutability":"mutable","name":"attester","nameLocation":"2075:8:1","nodeType":"VariableDeclaration","scope":118,"src":"2067:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":116,"name":"address","nodeType":"ElementaryTypeName","src":"2067:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"name":"MultiDelegatedAttestationRequest","nameLocation":"1741:32:1","nodeType":"StructDefinition","scope":347,"src":"1734:378:1","visibility":"public"},{"canonicalName":"RevocationRequestData","id":123,"members":[{"constant":false,"id":120,"mutability":"mutable","name":"uid","nameLocation":"2236:3:1","nodeType":"VariableDeclaration","scope":123,"src":"2228:11:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":119,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2228:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":122,"mutability":"mutable","name":"value","nameLocation":"2294:5:1","nodeType":"VariableDeclaration","scope":123,"src":"2286:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":121,"name":"uint256","nodeType":"ElementaryTypeName","src":"2286:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"RevocationRequestData","nameLocation":"2200:21:1","nodeType":"StructDefinition","scope":347,"src":"2193:213:1","visibility":"public"},{"canonicalName":"RevocationRequest","id":129,"members":[{"constant":false,"id":125,"mutability":"mutable","name":"schema","nameLocation":"2531:6:1","nodeType":"VariableDeclaration","scope":129,"src":"2523:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":124,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2523:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":128,"mutability":"mutable","name":"data","nameLocation":"2605:4:1","nodeType":"VariableDeclaration","scope":129,"src":"2583:26:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_RevocationRequestData_$123_storage_ptr","typeString":"struct RevocationRequestData"},"typeName":{"id":127,"nodeType":"UserDefinedTypeName","pathNode":{"id":126,"name":"RevocationRequestData","nameLocations":["2583:21:1"],"nodeType":"IdentifierPath","referencedDeclaration":123,"src":"2583:21:1"},"referencedDeclaration":123,"src":"2583:21:1","typeDescriptions":{"typeIdentifier":"t_struct$_RevocationRequestData_$123_storage_ptr","typeString":"struct RevocationRequestData"}},"visibility":"internal"}],"name":"RevocationRequest","nameLocation":"2499:17:1","nodeType":"StructDefinition","scope":347,"src":"2492:164:1","visibility":"public"},{"canonicalName":"DelegatedRevocationRequest","id":140,"members":[{"constant":false,"id":131,"mutability":"mutable","name":"schema","nameLocation":"2800:6:1","nodeType":"VariableDeclaration","scope":140,"src":"2792:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":130,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2792:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":134,"mutability":"mutable","name":"data","nameLocation":"2874:4:1","nodeType":"VariableDeclaration","scope":140,"src":"2852:26:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_RevocationRequestData_$123_storage_ptr","typeString":"struct RevocationRequestData"},"typeName":{"id":133,"nodeType":"UserDefinedTypeName","pathNode":{"id":132,"name":"RevocationRequestData","nameLocations":["2852:21:1"],"nodeType":"IdentifierPath","referencedDeclaration":123,"src":"2852:21:1"},"referencedDeclaration":123,"src":"2852:21:1","typeDescriptions":{"typeIdentifier":"t_struct$_RevocationRequestData_$123_storage_ptr","typeString":"struct RevocationRequestData"}},"visibility":"internal"},{"constant":false,"id":137,"mutability":"mutable","name":"signature","nameLocation":"2944:9:1","nodeType":"VariableDeclaration","scope":140,"src":"2928:25:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_EIP712Signature_$24_storage_ptr","typeString":"struct EIP712Signature"},"typeName":{"id":136,"nodeType":"UserDefinedTypeName","pathNode":{"id":135,"name":"EIP712Signature","nameLocations":["2928:15:1"],"nodeType":"IdentifierPath","referencedDeclaration":24,"src":"2928:15:1"},"referencedDeclaration":24,"src":"2928:15:1","typeDescriptions":{"typeIdentifier":"t_struct$_EIP712Signature_$24_storage_ptr","typeString":"struct EIP712Signature"}},"visibility":"internal"},{"constant":false,"id":139,"mutability":"mutable","name":"revoker","nameLocation":"2997:7:1","nodeType":"VariableDeclaration","scope":140,"src":"2989:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":138,"name":"address","nodeType":"ElementaryTypeName","src":"2989:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"name":"DelegatedRevocationRequest","nameLocation":"2759:26:1","nodeType":"StructDefinition","scope":347,"src":"2752:280:1","visibility":"public"},{"canonicalName":"MultiRevocationRequest","id":147,"members":[{"constant":false,"id":142,"mutability":"mutable","name":"schema","nameLocation":"3168:6:1","nodeType":"VariableDeclaration","scope":147,"src":"3160:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":141,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3160:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":146,"mutability":"mutable","name":"data","nameLocation":"3244:4:1","nodeType":"VariableDeclaration","scope":147,"src":"3220:28:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_RevocationRequestData_$123_storage_$dyn_storage_ptr","typeString":"struct RevocationRequestData[]"},"typeName":{"baseType":{"id":144,"nodeType":"UserDefinedTypeName","pathNode":{"id":143,"name":"RevocationRequestData","nameLocations":["3220:21:1"],"nodeType":"IdentifierPath","referencedDeclaration":123,"src":"3220:21:1"},"referencedDeclaration":123,"src":"3220:21:1","typeDescriptions":{"typeIdentifier":"t_struct$_RevocationRequestData_$123_storage_ptr","typeString":"struct RevocationRequestData"}},"id":145,"nodeType":"ArrayTypeName","src":"3220:23:1","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_RevocationRequestData_$123_storage_$dyn_storage_ptr","typeString":"struct RevocationRequestData[]"}},"visibility":"internal"}],"name":"MultiRevocationRequest","nameLocation":"3131:22:1","nodeType":"StructDefinition","scope":347,"src":"3124:171:1","visibility":"public"},{"canonicalName":"MultiDelegatedRevocationRequest","id":160,"members":[{"constant":false,"id":149,"mutability":"mutable","name":"schema","nameLocation":"3450:6:1","nodeType":"VariableDeclaration","scope":160,"src":"3442:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":148,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3442:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":153,"mutability":"mutable","name":"data","nameLocation":"3526:4:1","nodeType":"VariableDeclaration","scope":160,"src":"3502:28:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_RevocationRequestData_$123_storage_$dyn_storage_ptr","typeString":"struct RevocationRequestData[]"},"typeName":{"baseType":{"id":151,"nodeType":"UserDefinedTypeName","pathNode":{"id":150,"name":"RevocationRequestData","nameLocations":["3502:21:1"],"nodeType":"IdentifierPath","referencedDeclaration":123,"src":"3502:21:1"},"referencedDeclaration":123,"src":"3502:21:1","typeDescriptions":{"typeIdentifier":"t_struct$_RevocationRequestData_$123_storage_ptr","typeString":"struct RevocationRequestData"}},"id":152,"nodeType":"ArrayTypeName","src":"3502:23:1","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_RevocationRequestData_$123_storage_$dyn_storage_ptr","typeString":"struct RevocationRequestData[]"}},"visibility":"internal"},{"constant":false,"id":157,"mutability":"mutable","name":"signatures","nameLocation":"3599:10:1","nodeType":"VariableDeclaration","scope":160,"src":"3581:28:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_EIP712Signature_$24_storage_$dyn_storage_ptr","typeString":"struct EIP712Signature[]"},"typeName":{"baseType":{"id":155,"nodeType":"UserDefinedTypeName","pathNode":{"id":154,"name":"EIP712Signature","nameLocations":["3581:15:1"],"nodeType":"IdentifierPath","referencedDeclaration":24,"src":"3581:15:1"},"referencedDeclaration":24,"src":"3581:15:1","typeDescriptions":{"typeIdentifier":"t_struct$_EIP712Signature_$24_storage_ptr","typeString":"struct EIP712Signature"}},"id":156,"nodeType":"ArrayTypeName","src":"3581:17:1","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_EIP712Signature_$24_storage_$dyn_storage_ptr","typeString":"struct EIP712Signature[]"}},"visibility":"internal"},{"constant":false,"id":159,"mutability":"mutable","name":"revoker","nameLocation":"3735:7:1","nodeType":"VariableDeclaration","scope":160,"src":"3727:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":158,"name":"address","nodeType":"ElementaryTypeName","src":"3727:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"name":"MultiDelegatedRevocationRequest","nameLocation":"3404:31:1","nodeType":"StructDefinition","scope":347,"src":"3397:373:1","visibility":"public"},{"abstract":false,"baseContracts":[],"canonicalName":"IEAS","contractDependencies":[],"contractKind":"interface","documentation":{"id":161,"nodeType":"StructuredDocumentation","src":"3772:63:1","text":" @title EAS - Ethereum Attestation Service interface."},"fullyImplemented":false,"id":346,"linearizedBaseContracts":[346],"name":"IEAS","nameLocation":"3846:4:1","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":162,"nodeType":"StructuredDocumentation","src":"3857:272:1","text":" @dev Emitted when an attestation has been made.\n @param recipient The recipient of the attestation.\n @param attester The attesting account.\n @param uid The UID the revoked attestation.\n @param schema The UID of the schema."},"eventSelector":"8bf46bf4cfd674fa735a3d63ec1c9ad4153f033c290341f3a588b75685141b35","id":172,"name":"Attested","nameLocation":"4140:8:1","nodeType":"EventDefinition","parameters":{"id":171,"nodeType":"ParameterList","parameters":[{"constant":false,"id":164,"indexed":true,"mutability":"mutable","name":"recipient","nameLocation":"4165:9:1","nodeType":"VariableDeclaration","scope":172,"src":"4149:25:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":163,"name":"address","nodeType":"ElementaryTypeName","src":"4149:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":166,"indexed":true,"mutability":"mutable","name":"attester","nameLocation":"4192:8:1","nodeType":"VariableDeclaration","scope":172,"src":"4176:24:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":165,"name":"address","nodeType":"ElementaryTypeName","src":"4176:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":168,"indexed":false,"mutability":"mutable","name":"uid","nameLocation":"4210:3:1","nodeType":"VariableDeclaration","scope":172,"src":"4202:11:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":167,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4202:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":170,"indexed":true,"mutability":"mutable","name":"schema","nameLocation":"4231:6:1","nodeType":"VariableDeclaration","scope":172,"src":"4215:22:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":169,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4215:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4148:90:1"},"src":"4134:105:1"},{"anonymous":false,"documentation":{"id":173,"nodeType":"StructuredDocumentation","src":"4245:275:1","text":" @dev Emitted when an attestation has been revoked.\n @param recipient The recipient of the attestation.\n @param attester The attesting account.\n @param schema The UID of the schema.\n @param uid The UID the revoked attestation."},"eventSelector":"f930a6e2523c9cc298691873087a740550b8fc85a0680830414c148ed927f615","id":183,"name":"Revoked","nameLocation":"4531:7:1","nodeType":"EventDefinition","parameters":{"id":182,"nodeType":"ParameterList","parameters":[{"constant":false,"id":175,"indexed":true,"mutability":"mutable","name":"recipient","nameLocation":"4555:9:1","nodeType":"VariableDeclaration","scope":183,"src":"4539:25:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":174,"name":"address","nodeType":"ElementaryTypeName","src":"4539:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":177,"indexed":true,"mutability":"mutable","name":"attester","nameLocation":"4582:8:1","nodeType":"VariableDeclaration","scope":183,"src":"4566:24:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":176,"name":"address","nodeType":"ElementaryTypeName","src":"4566:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":179,"indexed":false,"mutability":"mutable","name":"uid","nameLocation":"4600:3:1","nodeType":"VariableDeclaration","scope":183,"src":"4592:11:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":178,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4592:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":181,"indexed":true,"mutability":"mutable","name":"schema","nameLocation":"4621:6:1","nodeType":"VariableDeclaration","scope":183,"src":"4605:22:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":180,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4605:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4538:90:1"},"src":"4525:104:1"},{"anonymous":false,"documentation":{"id":184,"nodeType":"StructuredDocumentation","src":"4635:140:1","text":" @dev Emitted when a data has been timestamped.\n @param data The data.\n @param timestamp The timestamp."},"eventSelector":"5aafceeb1c7ad58e4a84898bdee37c02c0fc46e7d24e6b60e8209449f183459f","id":190,"name":"Timestamped","nameLocation":"4786:11:1","nodeType":"EventDefinition","parameters":{"id":189,"nodeType":"ParameterList","parameters":[{"constant":false,"id":186,"indexed":true,"mutability":"mutable","name":"data","nameLocation":"4814:4:1","nodeType":"VariableDeclaration","scope":190,"src":"4798:20:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":185,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4798:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":188,"indexed":true,"mutability":"mutable","name":"timestamp","nameLocation":"4835:9:1","nodeType":"VariableDeclaration","scope":190,"src":"4820:24:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":187,"name":"uint64","nodeType":"ElementaryTypeName","src":"4820:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"4797:48:1"},"src":"4780:66:1"},{"anonymous":false,"documentation":{"id":191,"nodeType":"StructuredDocumentation","src":"4852:186:1","text":" @dev Emitted when a data has been revoked.\n @param revoker The address of the revoker.\n @param data The data.\n @param timestamp The timestamp."},"eventSelector":"92a1f7a41a7c585a8b09e25b195e225b1d43248daca46b0faf9e0792777a2229","id":199,"name":"RevokedOffchain","nameLocation":"5049:15:1","nodeType":"EventDefinition","parameters":{"id":198,"nodeType":"ParameterList","parameters":[{"constant":false,"id":193,"indexed":true,"mutability":"mutable","name":"revoker","nameLocation":"5081:7:1","nodeType":"VariableDeclaration","scope":199,"src":"5065:23:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":192,"name":"address","nodeType":"ElementaryTypeName","src":"5065:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":195,"indexed":true,"mutability":"mutable","name":"data","nameLocation":"5106:4:1","nodeType":"VariableDeclaration","scope":199,"src":"5090:20:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":194,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5090:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":197,"indexed":true,"mutability":"mutable","name":"timestamp","nameLocation":"5127:9:1","nodeType":"VariableDeclaration","scope":199,"src":"5112:24:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":196,"name":"uint64","nodeType":"ElementaryTypeName","src":"5112:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"5064:73:1"},"src":"5043:95:1"},{"documentation":{"id":200,"nodeType":"StructuredDocumentation","src":"5144:139:1","text":" @dev Returns the address of the global schema registry.\n @return The address of the global schema registry."},"functionSelector":"f10b5cc8","id":206,"implemented":false,"kind":"function","modifiers":[],"name":"getSchemaRegistry","nameLocation":"5297:17:1","nodeType":"FunctionDefinition","parameters":{"id":201,"nodeType":"ParameterList","parameters":[],"src":"5314:2:1"},"returnParameters":{"id":205,"nodeType":"ParameterList","parameters":[{"constant":false,"id":204,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":206,"src":"5340:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_ISchemaRegistry_$391","typeString":"contract ISchemaRegistry"},"typeName":{"id":203,"nodeType":"UserDefinedTypeName","pathNode":{"id":202,"name":"ISchemaRegistry","nameLocations":["5340:15:1"],"nodeType":"IdentifierPath","referencedDeclaration":391,"src":"5340:15:1"},"referencedDeclaration":391,"src":"5340:15:1","typeDescriptions":{"typeIdentifier":"t_contract$_ISchemaRegistry_$391","typeString":"contract ISchemaRegistry"}},"visibility":"internal"}],"src":"5339:17:1"},"scope":346,"src":"5288:69:1","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":207,"nodeType":"StructuredDocumentation","src":"5363:639:1","text":" @dev Attests to a specific schema.\n @param request The arguments of the attestation request.\n Example:\n attest({\n     schema: \"0facc36681cbe2456019c1b0d1e7bedd6d1d40f6f324bf3dd3a4cef2999200a0\",\n     data: {\n         recipient: \"0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf\",\n         expirationTime: 0,\n         revocable: true,\n         refUID: \"0x0000000000000000000000000000000000000000000000000000000000000000\",\n         data: \"0xF00D\",\n         value: 0\n     }\n })\n @return The UID of the new attestation."},"functionSelector":"f17325e7","id":215,"implemented":false,"kind":"function","modifiers":[],"name":"attest","nameLocation":"6016:6:1","nodeType":"FunctionDefinition","parameters":{"id":211,"nodeType":"ParameterList","parameters":[{"constant":false,"id":210,"mutability":"mutable","name":"request","nameLocation":"6051:7:1","nodeType":"VariableDeclaration","scope":215,"src":"6023:35:1","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_AttestationRequest_$87_calldata_ptr","typeString":"struct AttestationRequest"},"typeName":{"id":209,"nodeType":"UserDefinedTypeName","pathNode":{"id":208,"name":"AttestationRequest","nameLocations":["6023:18:1"],"nodeType":"IdentifierPath","referencedDeclaration":87,"src":"6023:18:1"},"referencedDeclaration":87,"src":"6023:18:1","typeDescriptions":{"typeIdentifier":"t_struct$_AttestationRequest_$87_storage_ptr","typeString":"struct AttestationRequest"}},"visibility":"internal"}],"src":"6022:37:1"},"returnParameters":{"id":214,"nodeType":"ParameterList","parameters":[{"constant":false,"id":213,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":215,"src":"6086:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":212,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6086:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"6085:9:1"},"scope":346,"src":"6007:88:1","stateMutability":"payable","virtual":false,"visibility":"external"},{"documentation":{"id":216,"nodeType":"StructuredDocumentation","src":"6101:911:1","text":" @dev Attests to a specific schema via the provided EIP712 signature.\n @param delegatedRequest The arguments of the delegated attestation request.\n Example:\n attestByDelegation({\n     schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\n     data: {\n         recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',\n         expirationTime: 1673891048,\n         revocable: true,\n         refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\n         data: '0x1234',\n         value: 0\n     },\n     signature: {\n         v: 28,\n         r: '0x148c...b25b',\n         s: '0x5a72...be22'\n     },\n     attester: '0xc5E8740aD971409492b1A63Db8d83025e0Fc427e'\n })\n @return The UID of the new attestation."},"functionSelector":"e13458fc","id":224,"implemented":false,"kind":"function","modifiers":[],"name":"attestByDelegation","nameLocation":"7026:18:1","nodeType":"FunctionDefinition","parameters":{"id":220,"nodeType":"ParameterList","parameters":[{"constant":false,"id":219,"mutability":"mutable","name":"delegatedRequest","nameLocation":"7091:16:1","nodeType":"VariableDeclaration","scope":224,"src":"7054:53:1","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_DelegatedAttestationRequest_$98_calldata_ptr","typeString":"struct DelegatedAttestationRequest"},"typeName":{"id":218,"nodeType":"UserDefinedTypeName","pathNode":{"id":217,"name":"DelegatedAttestationRequest","nameLocations":["7054:27:1"],"nodeType":"IdentifierPath","referencedDeclaration":98,"src":"7054:27:1"},"referencedDeclaration":98,"src":"7054:27:1","typeDescriptions":{"typeIdentifier":"t_struct$_DelegatedAttestationRequest_$98_storage_ptr","typeString":"struct DelegatedAttestationRequest"}},"visibility":"internal"}],"src":"7044:69:1"},"returnParameters":{"id":223,"nodeType":"ParameterList","parameters":[{"constant":false,"id":222,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":224,"src":"7140:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":221,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7140:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"7139:9:1"},"scope":346,"src":"7017:132:1","stateMutability":"payable","virtual":false,"visibility":"external"},{"documentation":{"id":225,"nodeType":"StructuredDocumentation","src":"7155:1530:1","text":" @dev Attests to multiple schemas.\n @param multiRequests The arguments of the multi attestation requests. The requests should be grouped by distinct\n schema ids to benefit from the best batching optimization.\n Example:\n multiAttest([{\n     schema: '0x33e9094830a5cba5554d1954310e4fbed2ef5f859ec1404619adea4207f391fd',\n     data: [{\n         recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',\n         expirationTime: 1673891048,\n         revocable: true,\n         refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\n         data: '0x1234',\n         value: 1000\n     },\n     {\n         recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',\n         expirationTime: 0,\n         revocable: false,\n         refUID: '0x480df4a039efc31b11bfdf491b383ca138b6bde160988222a2a3509c02cee174',\n         data: '0x00',\n         value: 0\n     }],\n },\n {\n     schema: '0x5ac273ce41e3c8bfa383efe7c03e54c5f0bff29c9f11ef6ffa930fc84ca32425',\n     data: [{\n         recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',\n         expirationTime: 0,\n         revocable: true,\n         refUID: '0x75bf2ed8dca25a8190c50c52db136664de25b2449535839008ccfdab469b214f',\n         data: '0x12345678',\n         value: 0\n     },\n }])\n @return The UIDs of the new attestations."},"functionSelector":"44adc90e","id":235,"implemented":false,"kind":"function","modifiers":[],"name":"multiAttest","nameLocation":"8699:11:1","nodeType":"FunctionDefinition","parameters":{"id":230,"nodeType":"ParameterList","parameters":[{"constant":false,"id":229,"mutability":"mutable","name":"multiRequests","nameLocation":"8746:13:1","nodeType":"VariableDeclaration","scope":235,"src":"8711:48:1","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_MultiAttestationRequest_$105_calldata_ptr_$dyn_calldata_ptr","typeString":"struct MultiAttestationRequest[]"},"typeName":{"baseType":{"id":227,"nodeType":"UserDefinedTypeName","pathNode":{"id":226,"name":"MultiAttestationRequest","nameLocations":["8711:23:1"],"nodeType":"IdentifierPath","referencedDeclaration":105,"src":"8711:23:1"},"referencedDeclaration":105,"src":"8711:23:1","typeDescriptions":{"typeIdentifier":"t_struct$_MultiAttestationRequest_$105_storage_ptr","typeString":"struct MultiAttestationRequest"}},"id":228,"nodeType":"ArrayTypeName","src":"8711:25:1","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_MultiAttestationRequest_$105_storage_$dyn_storage_ptr","typeString":"struct MultiAttestationRequest[]"}},"visibility":"internal"}],"src":"8710:50:1"},"returnParameters":{"id":234,"nodeType":"ParameterList","parameters":[{"constant":false,"id":233,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":235,"src":"8787:16:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":231,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8787:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":232,"nodeType":"ArrayTypeName","src":"8787:9:1","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"8786:18:1"},"scope":346,"src":"8690:115:1","stateMutability":"payable","virtual":false,"visibility":"external"},{"documentation":{"id":236,"nodeType":"StructuredDocumentation","src":"8811:1479:1","text":" @dev Attests to multiple schemas using via provided EIP712 signatures.\n @param multiDelegatedRequests The arguments of the delegated multi attestation requests. The requests should be\n grouped by distinct schema ids to benefit from the best batching optimization.\n Example:\n multiAttestByDelegation([{\n     schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\n     data: [{\n         recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',\n         expirationTime: 1673891048,\n         revocable: true,\n         refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\n         data: '0x1234',\n         value: 0\n     },\n     {\n         recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',\n         expirationTime: 0,\n         revocable: false,\n         refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\n         data: '0x00',\n         value: 0\n     }],\n     signatures: [{\n         v: 28,\n         r: '0x148c...b25b',\n         s: '0x5a72...be22'\n     },\n     {\n         v: 28,\n         r: '0x487s...67bb',\n         s: '0x12ad...2366'\n     }],\n     attester: '0x1D86495b2A7B524D747d2839b3C645Bed32e8CF4'\n }])\n @return The UIDs of the new attestations."},"functionSelector":"831e05a1","id":246,"implemented":false,"kind":"function","modifiers":[],"name":"multiAttestByDelegation","nameLocation":"10304:23:1","nodeType":"FunctionDefinition","parameters":{"id":241,"nodeType":"ParameterList","parameters":[{"constant":false,"id":240,"mutability":"mutable","name":"multiDelegatedRequests","nameLocation":"10381:22:1","nodeType":"VariableDeclaration","scope":246,"src":"10337:66:1","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_MultiDelegatedAttestationRequest_$118_calldata_ptr_$dyn_calldata_ptr","typeString":"struct MultiDelegatedAttestationRequest[]"},"typeName":{"baseType":{"id":238,"nodeType":"UserDefinedTypeName","pathNode":{"id":237,"name":"MultiDelegatedAttestationRequest","nameLocations":["10337:32:1"],"nodeType":"IdentifierPath","referencedDeclaration":118,"src":"10337:32:1"},"referencedDeclaration":118,"src":"10337:32:1","typeDescriptions":{"typeIdentifier":"t_struct$_MultiDelegatedAttestationRequest_$118_storage_ptr","typeString":"struct MultiDelegatedAttestationRequest"}},"id":239,"nodeType":"ArrayTypeName","src":"10337:34:1","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_MultiDelegatedAttestationRequest_$118_storage_$dyn_storage_ptr","typeString":"struct MultiDelegatedAttestationRequest[]"}},"visibility":"internal"}],"src":"10327:82:1"},"returnParameters":{"id":245,"nodeType":"ParameterList","parameters":[{"constant":false,"id":244,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":246,"src":"10436:16:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":242,"name":"bytes32","nodeType":"ElementaryTypeName","src":"10436:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":243,"nodeType":"ArrayTypeName","src":"10436:9:1","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"10435:18:1"},"scope":346,"src":"10295:159:1","stateMutability":"payable","virtual":false,"visibility":"external"},{"documentation":{"id":247,"nodeType":"StructuredDocumentation","src":"10460:438:1","text":" @dev Revokes an existing attestation to a specific schema.\n Example:\n revoke({\n     schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\n     data: {\n         uid: '0x101032e487642ee04ee17049f99a70590c735b8614079fc9275f9dd57c00966d',\n         value: 0\n     }\n })\n @param request The arguments of the revocation request."},"functionSelector":"46926267","id":253,"implemented":false,"kind":"function","modifiers":[],"name":"revoke","nameLocation":"10912:6:1","nodeType":"FunctionDefinition","parameters":{"id":251,"nodeType":"ParameterList","parameters":[{"constant":false,"id":250,"mutability":"mutable","name":"request","nameLocation":"10946:7:1","nodeType":"VariableDeclaration","scope":253,"src":"10919:34:1","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_RevocationRequest_$129_calldata_ptr","typeString":"struct RevocationRequest"},"typeName":{"id":249,"nodeType":"UserDefinedTypeName","pathNode":{"id":248,"name":"RevocationRequest","nameLocations":["10919:17:1"],"nodeType":"IdentifierPath","referencedDeclaration":129,"src":"10919:17:1"},"referencedDeclaration":129,"src":"10919:17:1","typeDescriptions":{"typeIdentifier":"t_struct$_RevocationRequest_$129_storage_ptr","typeString":"struct RevocationRequest"}},"visibility":"internal"}],"src":"10918:36:1"},"returnParameters":{"id":252,"nodeType":"ParameterList","parameters":[],"src":"10971:0:1"},"scope":346,"src":"10903:69:1","stateMutability":"payable","virtual":false,"visibility":"external"},{"documentation":{"id":254,"nodeType":"StructuredDocumentation","src":"10978:698:1","text":" @dev Revokes an existing attestation to a specific schema via the provided EIP712 signature.\n Example:\n revokeByDelegation({\n     schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\n     data: {\n         uid: '0xcbbc12102578c642a0f7b34fe7111e41afa25683b6cd7b5a14caf90fa14d24ba',\n         value: 0\n     },\n     signature: {\n         v: 27,\n         r: '0xb593...7142',\n         s: '0x0f5b...2cce'\n     },\n     revoker: '0x244934dd3e31bE2c81f84ECf0b3E6329F5381992'\n })\n @param delegatedRequest The arguments of the delegated revocation request."},"functionSelector":"e57a6b1b","id":260,"implemented":false,"kind":"function","modifiers":[],"name":"revokeByDelegation","nameLocation":"11690:18:1","nodeType":"FunctionDefinition","parameters":{"id":258,"nodeType":"ParameterList","parameters":[{"constant":false,"id":257,"mutability":"mutable","name":"delegatedRequest","nameLocation":"11745:16:1","nodeType":"VariableDeclaration","scope":260,"src":"11709:52:1","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_DelegatedRevocationRequest_$140_calldata_ptr","typeString":"struct DelegatedRevocationRequest"},"typeName":{"id":256,"nodeType":"UserDefinedTypeName","pathNode":{"id":255,"name":"DelegatedRevocationRequest","nameLocations":["11709:26:1"],"nodeType":"IdentifierPath","referencedDeclaration":140,"src":"11709:26:1"},"referencedDeclaration":140,"src":"11709:26:1","typeDescriptions":{"typeIdentifier":"t_struct$_DelegatedRevocationRequest_$140_storage_ptr","typeString":"struct DelegatedRevocationRequest"}},"visibility":"internal"}],"src":"11708:54:1"},"returnParameters":{"id":259,"nodeType":"ParameterList","parameters":[],"src":"11779:0:1"},"scope":346,"src":"11681:99:1","stateMutability":"payable","virtual":false,"visibility":"external"},{"documentation":{"id":261,"nodeType":"StructuredDocumentation","src":"11786:967:1","text":" @dev Revokes existing attestations to multiple schemas.\n @param multiRequests The arguments of the multi revocation requests. The requests should be grouped by distinct\n schema ids to benefit from the best batching optimization.\n Example:\n multiRevoke([{\n     schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\n     data: [{\n         uid: '0x211296a1ca0d7f9f2cfebf0daaa575bea9b20e968d81aef4e743d699c6ac4b25',\n         value: 1000\n     },\n     {\n         uid: '0xe160ac1bd3606a287b4d53d5d1d6da5895f65b4b4bab6d93aaf5046e48167ade',\n         value: 0\n     }],\n },\n {\n     schema: '0x5ac273ce41e3c8bfa383efe7c03e54c5f0bff29c9f11ef6ffa930fc84ca32425',\n     data: [{\n         uid: '0x053d42abce1fd7c8fcddfae21845ad34dae287b2c326220b03ba241bc5a8f019',\n         value: 0\n     },\n }])"},"functionSelector":"4cb7e9e5","id":268,"implemented":false,"kind":"function","modifiers":[],"name":"multiRevoke","nameLocation":"12767:11:1","nodeType":"FunctionDefinition","parameters":{"id":266,"nodeType":"ParameterList","parameters":[{"constant":false,"id":265,"mutability":"mutable","name":"multiRequests","nameLocation":"12813:13:1","nodeType":"VariableDeclaration","scope":268,"src":"12779:47:1","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_MultiRevocationRequest_$147_calldata_ptr_$dyn_calldata_ptr","typeString":"struct MultiRevocationRequest[]"},"typeName":{"baseType":{"id":263,"nodeType":"UserDefinedTypeName","pathNode":{"id":262,"name":"MultiRevocationRequest","nameLocations":["12779:22:1"],"nodeType":"IdentifierPath","referencedDeclaration":147,"src":"12779:22:1"},"referencedDeclaration":147,"src":"12779:22:1","typeDescriptions":{"typeIdentifier":"t_struct$_MultiRevocationRequest_$147_storage_ptr","typeString":"struct MultiRevocationRequest"}},"id":264,"nodeType":"ArrayTypeName","src":"12779:24:1","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_MultiRevocationRequest_$147_storage_$dyn_storage_ptr","typeString":"struct MultiRevocationRequest[]"}},"visibility":"internal"}],"src":"12778:49:1"},"returnParameters":{"id":267,"nodeType":"ParameterList","parameters":[],"src":"12844:0:1"},"scope":346,"src":"12758:87:1","stateMutability":"payable","virtual":false,"visibility":"external"},{"documentation":{"id":269,"nodeType":"StructuredDocumentation","src":"12851:1107:1","text":" @dev Revokes existing attestations to multiple schemas via provided EIP712 signatures.\n @param multiDelegatedRequests The arguments of the delegated multi revocation attestation requests. The requests should be\n grouped by distinct schema ids to benefit from the best batching optimization.\n Example:\n multiRevokeByDelegation([{\n     schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\n     data: [{\n         uid: '0x211296a1ca0d7f9f2cfebf0daaa575bea9b20e968d81aef4e743d699c6ac4b25',\n         value: 1000\n     },\n     {\n         uid: '0xe160ac1bd3606a287b4d53d5d1d6da5895f65b4b4bab6d93aaf5046e48167ade',\n         value: 0\n     }],\n     signatures: [{\n         v: 28,\n         r: '0x148c...b25b',\n         s: '0x5a72...be22'\n     },\n     {\n         v: 28,\n         r: '0x487s...67bb',\n         s: '0x12ad...2366'\n     }],\n     revoker: '0x244934dd3e31bE2c81f84ECf0b3E6329F5381992'\n }])"},"functionSelector":"e45d03f9","id":276,"implemented":false,"kind":"function","modifiers":[],"name":"multiRevokeByDelegation","nameLocation":"13972:23:1","nodeType":"FunctionDefinition","parameters":{"id":274,"nodeType":"ParameterList","parameters":[{"constant":false,"id":273,"mutability":"mutable","name":"multiDelegatedRequests","nameLocation":"14048:22:1","nodeType":"VariableDeclaration","scope":276,"src":"14005:65:1","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_MultiDelegatedRevocationRequest_$160_calldata_ptr_$dyn_calldata_ptr","typeString":"struct MultiDelegatedRevocationRequest[]"},"typeName":{"baseType":{"id":271,"nodeType":"UserDefinedTypeName","pathNode":{"id":270,"name":"MultiDelegatedRevocationRequest","nameLocations":["14005:31:1"],"nodeType":"IdentifierPath","referencedDeclaration":160,"src":"14005:31:1"},"referencedDeclaration":160,"src":"14005:31:1","typeDescriptions":{"typeIdentifier":"t_struct$_MultiDelegatedRevocationRequest_$160_storage_ptr","typeString":"struct MultiDelegatedRevocationRequest"}},"id":272,"nodeType":"ArrayTypeName","src":"14005:33:1","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_MultiDelegatedRevocationRequest_$160_storage_$dyn_storage_ptr","typeString":"struct MultiDelegatedRevocationRequest[]"}},"visibility":"internal"}],"src":"13995:81:1"},"returnParameters":{"id":275,"nodeType":"ParameterList","parameters":[],"src":"14093:0:1"},"scope":346,"src":"13963:131:1","stateMutability":"payable","virtual":false,"visibility":"external"},{"documentation":{"id":277,"nodeType":"StructuredDocumentation","src":"14100:178:1","text":" @dev Timestamps the specified bytes32 data.\n @param data The data to timestamp.\n @return The timestamp the data was timestamped with."},"functionSelector":"4d003070","id":284,"implemented":false,"kind":"function","modifiers":[],"name":"timestamp","nameLocation":"14292:9:1","nodeType":"FunctionDefinition","parameters":{"id":280,"nodeType":"ParameterList","parameters":[{"constant":false,"id":279,"mutability":"mutable","name":"data","nameLocation":"14310:4:1","nodeType":"VariableDeclaration","scope":284,"src":"14302:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":278,"name":"bytes32","nodeType":"ElementaryTypeName","src":"14302:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"14301:14:1"},"returnParameters":{"id":283,"nodeType":"ParameterList","parameters":[{"constant":false,"id":282,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":284,"src":"14334:6:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":281,"name":"uint64","nodeType":"ElementaryTypeName","src":"14334:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"14333:8:1"},"scope":346,"src":"14283:59:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":285,"nodeType":"StructuredDocumentation","src":"14348:187:1","text":" @dev Timestamps the specified multiple bytes32 data.\n @param data The data to timestamp.\n @return The timestamp the data was timestamped with."},"functionSelector":"e71ff365","id":293,"implemented":false,"kind":"function","modifiers":[],"name":"multiTimestamp","nameLocation":"14549:14:1","nodeType":"FunctionDefinition","parameters":{"id":289,"nodeType":"ParameterList","parameters":[{"constant":false,"id":288,"mutability":"mutable","name":"data","nameLocation":"14583:4:1","nodeType":"VariableDeclaration","scope":293,"src":"14564:23:1","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":286,"name":"bytes32","nodeType":"ElementaryTypeName","src":"14564:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":287,"nodeType":"ArrayTypeName","src":"14564:9:1","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"14563:25:1"},"returnParameters":{"id":292,"nodeType":"ParameterList","parameters":[{"constant":false,"id":291,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":293,"src":"14607:6:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":290,"name":"uint64","nodeType":"ElementaryTypeName","src":"14607:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"14606:8:1"},"scope":346,"src":"14540:75:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":294,"nodeType":"StructuredDocumentation","src":"14621:171:1","text":" @dev Revokes the specified bytes32 data.\n @param data The data to timestamp.\n @return The timestamp the data was revoked with."},"functionSelector":"cf190f34","id":301,"implemented":false,"kind":"function","modifiers":[],"name":"revokeOffchain","nameLocation":"14806:14:1","nodeType":"FunctionDefinition","parameters":{"id":297,"nodeType":"ParameterList","parameters":[{"constant":false,"id":296,"mutability":"mutable","name":"data","nameLocation":"14829:4:1","nodeType":"VariableDeclaration","scope":301,"src":"14821:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":295,"name":"bytes32","nodeType":"ElementaryTypeName","src":"14821:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"14820:14:1"},"returnParameters":{"id":300,"nodeType":"ParameterList","parameters":[{"constant":false,"id":299,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":301,"src":"14853:6:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":298,"name":"uint64","nodeType":"ElementaryTypeName","src":"14853:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"14852:8:1"},"scope":346,"src":"14797:64:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":302,"nodeType":"StructuredDocumentation","src":"14867:180:1","text":" @dev Revokes the specified multiple bytes32 data.\n @param data The data to timestamp.\n @return The timestamp the data was revoked with."},"functionSelector":"13893f61","id":310,"implemented":false,"kind":"function","modifiers":[],"name":"multiRevokeOffchain","nameLocation":"15061:19:1","nodeType":"FunctionDefinition","parameters":{"id":306,"nodeType":"ParameterList","parameters":[{"constant":false,"id":305,"mutability":"mutable","name":"data","nameLocation":"15100:4:1","nodeType":"VariableDeclaration","scope":310,"src":"15081:23:1","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":303,"name":"bytes32","nodeType":"ElementaryTypeName","src":"15081:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":304,"nodeType":"ArrayTypeName","src":"15081:9:1","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"15080:25:1"},"returnParameters":{"id":309,"nodeType":"ParameterList","parameters":[{"constant":false,"id":308,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":310,"src":"15124:6:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":307,"name":"uint64","nodeType":"ElementaryTypeName","src":"15124:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"15123:8:1"},"scope":346,"src":"15052:80:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":311,"nodeType":"StructuredDocumentation","src":"15138:180:1","text":" @dev Returns an existing attestation by UID.\n @param uid The UID of the attestation to retrieve.\n @return The attestation data members."},"functionSelector":"a3112a64","id":319,"implemented":false,"kind":"function","modifiers":[],"name":"getAttestation","nameLocation":"15332:14:1","nodeType":"FunctionDefinition","parameters":{"id":314,"nodeType":"ParameterList","parameters":[{"constant":false,"id":313,"mutability":"mutable","name":"uid","nameLocation":"15355:3:1","nodeType":"VariableDeclaration","scope":319,"src":"15347:11:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":312,"name":"bytes32","nodeType":"ElementaryTypeName","src":"15347:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"15346:13:1"},"returnParameters":{"id":318,"nodeType":"ParameterList","parameters":[{"constant":false,"id":317,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":319,"src":"15383:18:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Attestation_$45_memory_ptr","typeString":"struct Attestation"},"typeName":{"id":316,"nodeType":"UserDefinedTypeName","pathNode":{"id":315,"name":"Attestation","nameLocations":["15383:11:1"],"nodeType":"IdentifierPath","referencedDeclaration":45,"src":"15383:11:1"},"referencedDeclaration":45,"src":"15383:11:1","typeDescriptions":{"typeIdentifier":"t_struct$_Attestation_$45_storage_ptr","typeString":"struct Attestation"}},"visibility":"internal"}],"src":"15382:20:1"},"scope":346,"src":"15323:80:1","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":320,"nodeType":"StructuredDocumentation","src":"15409:179:1","text":" @dev Checks whether an attestation exists.\n @param uid The UID of the attestation to retrieve.\n @return Whether an attestation exists."},"functionSelector":"e30bb563","id":327,"implemented":false,"kind":"function","modifiers":[],"name":"isAttestationValid","nameLocation":"15602:18:1","nodeType":"FunctionDefinition","parameters":{"id":323,"nodeType":"ParameterList","parameters":[{"constant":false,"id":322,"mutability":"mutable","name":"uid","nameLocation":"15629:3:1","nodeType":"VariableDeclaration","scope":327,"src":"15621:11:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":321,"name":"bytes32","nodeType":"ElementaryTypeName","src":"15621:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"15620:13:1"},"returnParameters":{"id":326,"nodeType":"ParameterList","parameters":[{"constant":false,"id":325,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":327,"src":"15657:4:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":324,"name":"bool","nodeType":"ElementaryTypeName","src":"15657:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"15656:6:1"},"scope":346,"src":"15593:70:1","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":328,"nodeType":"StructuredDocumentation","src":"15669:203:1","text":" @dev Returns the timestamp that the specified data was timestamped with.\n @param data The data to query.\n @return The timestamp the data was timestamped with."},"functionSelector":"d45c4435","id":335,"implemented":false,"kind":"function","modifiers":[],"name":"getTimestamp","nameLocation":"15886:12:1","nodeType":"FunctionDefinition","parameters":{"id":331,"nodeType":"ParameterList","parameters":[{"constant":false,"id":330,"mutability":"mutable","name":"data","nameLocation":"15907:4:1","nodeType":"VariableDeclaration","scope":335,"src":"15899:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":329,"name":"bytes32","nodeType":"ElementaryTypeName","src":"15899:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"15898:14:1"},"returnParameters":{"id":334,"nodeType":"ParameterList","parameters":[{"constant":false,"id":333,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":335,"src":"15936:6:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":332,"name":"uint64","nodeType":"ElementaryTypeName","src":"15936:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"15935:8:1"},"scope":346,"src":"15877:67:1","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":336,"nodeType":"StructuredDocumentation","src":"15950:203:1","text":" @dev Returns the timestamp that the specified data was timestamped with.\n @param data The data to query.\n @return The timestamp the data was timestamped with."},"functionSelector":"b469318d","id":345,"implemented":false,"kind":"function","modifiers":[],"name":"getRevokeOffchain","nameLocation":"16167:17:1","nodeType":"FunctionDefinition","parameters":{"id":341,"nodeType":"ParameterList","parameters":[{"constant":false,"id":338,"mutability":"mutable","name":"revoker","nameLocation":"16193:7:1","nodeType":"VariableDeclaration","scope":345,"src":"16185:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":337,"name":"address","nodeType":"ElementaryTypeName","src":"16185:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":340,"mutability":"mutable","name":"data","nameLocation":"16210:4:1","nodeType":"VariableDeclaration","scope":345,"src":"16202:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":339,"name":"bytes32","nodeType":"ElementaryTypeName","src":"16202:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"16184:31:1"},"returnParameters":{"id":344,"nodeType":"ParameterList","parameters":[{"constant":false,"id":343,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":345,"src":"16239:6:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":342,"name":"uint64","nodeType":"ElementaryTypeName","src":"16239:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"16238:8:1"},"scope":346,"src":"16158:89:1","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":347,"src":"3836:12413:1","usedErrors":[]}],"src":"33:16217:1"},"id":1},"@ethereum-attestation-service/eas-contracts/contracts/ISchemaRegistry.sol":{"ast":{"absolutePath":"@ethereum-attestation-service/eas-contracts/contracts/ISchemaRegistry.sol","exportedSymbols":{"ISchemaRegistry":[391],"ISchemaResolver":[510],"SchemaRecord":[360]},"id":392,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":348,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"33:23:2"},{"absolutePath":"@ethereum-attestation-service/eas-contracts/contracts/resolver/ISchemaResolver.sol","file":"./resolver/ISchemaResolver.sol","id":350,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":392,"sourceUnit":511,"src":"58:65:2","symbolAliases":[{"foreign":{"id":349,"name":"ISchemaResolver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":510,"src":"67:15:2","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"canonicalName":"SchemaRecord","id":360,"members":[{"constant":false,"id":352,"mutability":"mutable","name":"uid","nameLocation":"232:3:2","nodeType":"VariableDeclaration","scope":360,"src":"224:11:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":351,"name":"bytes32","nodeType":"ElementaryTypeName","src":"224:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":355,"mutability":"mutable","name":"resolver","nameLocation":"297:8:2","nodeType":"VariableDeclaration","scope":360,"src":"281:24:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_ISchemaResolver_$510","typeString":"contract ISchemaResolver"},"typeName":{"id":354,"nodeType":"UserDefinedTypeName","pathNode":{"id":353,"name":"ISchemaResolver","nameLocations":["281:15:2"],"nodeType":"IdentifierPath","referencedDeclaration":510,"src":"281:15:2"},"referencedDeclaration":510,"src":"281:15:2","typeDescriptions":{"typeIdentifier":"t_contract$_ISchemaResolver_$510","typeString":"contract ISchemaResolver"}},"visibility":"internal"},{"constant":false,"id":357,"mutability":"mutable","name":"revocable","nameLocation":"345:9:2","nodeType":"VariableDeclaration","scope":360,"src":"340:14:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":356,"name":"bool","nodeType":"ElementaryTypeName","src":"340:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":359,"mutability":"mutable","name":"schema","nameLocation":"420:6:2","nodeType":"VariableDeclaration","scope":360,"src":"413:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":358,"name":"string","nodeType":"ElementaryTypeName","src":"413:6:2","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"name":"SchemaRecord","nameLocation":"205:12:2","nodeType":"StructDefinition","scope":392,"src":"198:285:2","visibility":"public"},{"abstract":false,"baseContracts":[],"canonicalName":"ISchemaRegistry","contractDependencies":[],"contractKind":"interface","documentation":{"id":361,"nodeType":"StructuredDocumentation","src":"485:55:2","text":" @title The global schema registry interface."},"fullyImplemented":false,"id":391,"linearizedBaseContracts":[391],"name":"ISchemaRegistry","nameLocation":"551:15:2","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":362,"nodeType":"StructuredDocumentation","src":"573:191:2","text":" @dev Emitted when a new schema has been registered\n @param uid The schema UID.\n @param registerer The address of the account used to register the schema."},"eventSelector":"7d917fcbc9a29a9705ff9936ffa599500e4fd902e4486bae317414fe967b307c","id":368,"name":"Registered","nameLocation":"775:10:2","nodeType":"EventDefinition","parameters":{"id":367,"nodeType":"ParameterList","parameters":[{"constant":false,"id":364,"indexed":true,"mutability":"mutable","name":"uid","nameLocation":"802:3:2","nodeType":"VariableDeclaration","scope":368,"src":"786:19:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":363,"name":"bytes32","nodeType":"ElementaryTypeName","src":"786:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":366,"indexed":false,"mutability":"mutable","name":"registerer","nameLocation":"815:10:2","nodeType":"VariableDeclaration","scope":368,"src":"807:18:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":365,"name":"address","nodeType":"ElementaryTypeName","src":"807:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"785:41:2"},"src":"769:58:2"},{"documentation":{"id":369,"nodeType":"StructuredDocumentation","src":"833:284:2","text":" @dev Submits and reserves a new schema\n @param schema The schema data schema.\n @param resolver An optional schema resolver.\n @param revocable Whether the schema allows revocations explicitly.\n @return The UID of the new schema."},"functionSelector":"60d7a278","id":381,"implemented":false,"kind":"function","modifiers":[],"name":"register","nameLocation":"1131:8:2","nodeType":"FunctionDefinition","parameters":{"id":377,"nodeType":"ParameterList","parameters":[{"constant":false,"id":371,"mutability":"mutable","name":"schema","nameLocation":"1156:6:2","nodeType":"VariableDeclaration","scope":381,"src":"1140:22:2","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string"},"typeName":{"id":370,"name":"string","nodeType":"ElementaryTypeName","src":"1140:6:2","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":374,"mutability":"mutable","name":"resolver","nameLocation":"1180:8:2","nodeType":"VariableDeclaration","scope":381,"src":"1164:24:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_ISchemaResolver_$510","typeString":"contract ISchemaResolver"},"typeName":{"id":373,"nodeType":"UserDefinedTypeName","pathNode":{"id":372,"name":"ISchemaResolver","nameLocations":["1164:15:2"],"nodeType":"IdentifierPath","referencedDeclaration":510,"src":"1164:15:2"},"referencedDeclaration":510,"src":"1164:15:2","typeDescriptions":{"typeIdentifier":"t_contract$_ISchemaResolver_$510","typeString":"contract ISchemaResolver"}},"visibility":"internal"},{"constant":false,"id":376,"mutability":"mutable","name":"revocable","nameLocation":"1195:9:2","nodeType":"VariableDeclaration","scope":381,"src":"1190:14:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":375,"name":"bool","nodeType":"ElementaryTypeName","src":"1190:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1139:66:2"},"returnParameters":{"id":380,"nodeType":"ParameterList","parameters":[{"constant":false,"id":379,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":381,"src":"1224:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":378,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1224:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1223:9:2"},"scope":391,"src":"1122:111:2","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":382,"nodeType":"StructuredDocumentation","src":"1239:164:2","text":" @dev Returns an existing schema by UID\n @param uid The UID of the schema to retrieve.\n @return The schema data members."},"functionSelector":"a2ea7c6e","id":390,"implemented":false,"kind":"function","modifiers":[],"name":"getSchema","nameLocation":"1417:9:2","nodeType":"FunctionDefinition","parameters":{"id":385,"nodeType":"ParameterList","parameters":[{"constant":false,"id":384,"mutability":"mutable","name":"uid","nameLocation":"1435:3:2","nodeType":"VariableDeclaration","scope":390,"src":"1427:11:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":383,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1427:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1426:13:2"},"returnParameters":{"id":389,"nodeType":"ParameterList","parameters":[{"constant":false,"id":388,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":390,"src":"1463:19:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_SchemaRecord_$360_memory_ptr","typeString":"struct SchemaRecord"},"typeName":{"id":387,"nodeType":"UserDefinedTypeName","pathNode":{"id":386,"name":"SchemaRecord","nameLocations":["1463:12:2"],"nodeType":"IdentifierPath","referencedDeclaration":360,"src":"1463:12:2"},"referencedDeclaration":360,"src":"1463:12:2","typeDescriptions":{"typeIdentifier":"t_struct$_SchemaRecord_$360_storage_ptr","typeString":"struct SchemaRecord"}},"visibility":"internal"}],"src":"1462:21:2"},"scope":391,"src":"1408:76:2","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":392,"src":"541:945:2","usedErrors":[]}],"src":"33:1454:2"},"id":2},"@ethereum-attestation-service/eas-contracts/contracts/Semver.sol":{"ast":{"absolutePath":"@ethereum-attestation-service/eas-contracts/contracts/Semver.sol","exportedSymbols":{"Semver":[454],"Strings":[4007]},"id":455,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":393,"literals":["solidity","^","0.8",".4"],"nodeType":"PragmaDirective","src":"33:23:3"},{"absolutePath":"@openzeppelin/contracts/utils/Strings.sol","file":"@openzeppelin/contracts/utils/Strings.sol","id":395,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":455,"sourceUnit":4008,"src":"58:68:3","symbolAliases":[{"foreign":{"id":394,"name":"Strings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4007,"src":"67:7:3","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"Semver","contractDependencies":[],"contractKind":"contract","documentation":{"id":396,"nodeType":"StructuredDocumentation","src":"128:65:3","text":" @dev A simple contract for managing contract versions."},"fullyImplemented":true,"id":454,"linearizedBaseContracts":[454],"name":"Semver","nameLocation":"203:6:3","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":398,"mutability":"immutable","name":"_major","nameLocation":"282:6:3","nodeType":"VariableDeclaration","scope":454,"src":"256:32:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":397,"name":"uint256","nodeType":"ElementaryTypeName","src":"256:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"private"},{"constant":false,"id":400,"mutability":"immutable","name":"_minor","nameLocation":"361:6:3","nodeType":"VariableDeclaration","scope":454,"src":"335:32:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":399,"name":"uint256","nodeType":"ElementaryTypeName","src":"335:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"private"},{"constant":false,"id":402,"mutability":"immutable","name":"_path","nameLocation":"440:5:3","nodeType":"VariableDeclaration","scope":454,"src":"414:31:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":401,"name":"uint256","nodeType":"ElementaryTypeName","src":"414:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"private"},{"body":{"id":424,"nodeType":"Block","src":"651:78:3","statements":[{"expression":{"id":414,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":412,"name":"_major","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":398,"src":"661:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":413,"name":"major","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":405,"src":"670:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"661:14:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":415,"nodeType":"ExpressionStatement","src":"661:14:3"},{"expression":{"id":418,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":416,"name":"_minor","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":400,"src":"685:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":417,"name":"minor","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":407,"src":"694:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"685:14:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":419,"nodeType":"ExpressionStatement","src":"685:14:3"},{"expression":{"id":422,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":420,"name":"_path","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":402,"src":"709:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":421,"name":"patch","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":409,"src":"717:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"709:13:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":423,"nodeType":"ExpressionStatement","src":"709:13:3"}]},"documentation":{"id":403,"nodeType":"StructuredDocumentation","src":"452:137:3","text":" @param major Major version number.\n @param minor Minor version number.\n @param patch Patch version number."},"id":425,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":410,"nodeType":"ParameterList","parameters":[{"constant":false,"id":405,"mutability":"mutable","name":"major","nameLocation":"614:5:3","nodeType":"VariableDeclaration","scope":425,"src":"606:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":404,"name":"uint256","nodeType":"ElementaryTypeName","src":"606:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":407,"mutability":"mutable","name":"minor","nameLocation":"629:5:3","nodeType":"VariableDeclaration","scope":425,"src":"621:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":406,"name":"uint256","nodeType":"ElementaryTypeName","src":"621:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":409,"mutability":"mutable","name":"patch","nameLocation":"644:5:3","nodeType":"VariableDeclaration","scope":425,"src":"636:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":408,"name":"uint256","nodeType":"ElementaryTypeName","src":"636:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"605:45:3"},"returnParameters":{"id":411,"nodeType":"ParameterList","parameters":[],"src":"651:0:3"},"scope":454,"src":"594:135:3","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":452,"nodeType":"Block","src":"924:177:3","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"id":437,"name":"_major","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":398,"src":"1011:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":435,"name":"Strings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4007,"src":"994:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Strings_$4007_$","typeString":"type(library Strings)"}},"id":436,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1002:8:3","memberName":"toString","nodeType":"MemberAccess","referencedDeclaration":3837,"src":"994:16:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"}},"id":438,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"994:24:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"hexValue":"2e","id":439,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1020:3:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_6f010af653ebe3cb07d297a4ef13366103d392ceffa68dd48232e6e9ff2187bf","typeString":"literal_string \".\""},"value":"."},{"arguments":[{"id":442,"name":"_minor","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":400,"src":"1042:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":440,"name":"Strings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4007,"src":"1025:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Strings_$4007_$","typeString":"type(library Strings)"}},"id":441,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1033:8:3","memberName":"toString","nodeType":"MemberAccess","referencedDeclaration":3837,"src":"1025:16:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"}},"id":443,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1025:24:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"hexValue":"2e","id":444,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1051:3:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_6f010af653ebe3cb07d297a4ef13366103d392ceffa68dd48232e6e9ff2187bf","typeString":"literal_string \".\""},"value":"."},{"arguments":[{"id":447,"name":"_path","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":402,"src":"1073:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":445,"name":"Strings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4007,"src":"1056:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Strings_$4007_$","typeString":"type(library Strings)"}},"id":446,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1064:8:3","memberName":"toString","nodeType":"MemberAccess","referencedDeclaration":3837,"src":"1056:16:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"}},"id":448,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1056:23:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_stringliteral_6f010af653ebe3cb07d297a4ef13366103d392ceffa68dd48232e6e9ff2187bf","typeString":"literal_string \".\""},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_stringliteral_6f010af653ebe3cb07d297a4ef13366103d392ceffa68dd48232e6e9ff2187bf","typeString":"literal_string \".\""},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"expression":{"id":433,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"977:3:3","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":434,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"981:12:3","memberName":"encodePacked","nodeType":"MemberAccess","src":"977:16:3","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":449,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"977:103:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":432,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"953:6:3","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":431,"name":"string","nodeType":"ElementaryTypeName","src":"953:6:3","typeDescriptions":{}}},"id":450,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"953:141:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":430,"id":451,"nodeType":"Return","src":"934:160:3"}]},"documentation":{"id":426,"nodeType":"StructuredDocumentation","src":"735:127:3","text":" @notice Returns the full semver contract version.\n @return Semver contract version as a string."},"functionSelector":"54fd4d50","id":453,"implemented":true,"kind":"function","modifiers":[],"name":"version","nameLocation":"876:7:3","nodeType":"FunctionDefinition","parameters":{"id":427,"nodeType":"ParameterList","parameters":[],"src":"883:2:3"},"returnParameters":{"id":430,"nodeType":"ParameterList","parameters":[{"constant":false,"id":429,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":453,"src":"909:13:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":428,"name":"string","nodeType":"ElementaryTypeName","src":"909:6:3","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"908:15:3"},"scope":454,"src":"867:234:3","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":455,"src":"194:909:3","usedErrors":[]}],"src":"33:1071:3"},"id":3},"@ethereum-attestation-service/eas-contracts/contracts/resolver/ISchemaResolver.sol":{"ast":{"absolutePath":"@ethereum-attestation-service/eas-contracts/contracts/resolver/ISchemaResolver.sol","exportedSymbols":{"Attestation":[45],"ISchemaResolver":[510]},"id":511,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":456,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"33:23:4"},{"absolutePath":"@ethereum-attestation-service/eas-contracts/contracts/Common.sol","file":"../Common.sol","id":458,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":511,"sourceUnit":62,"src":"58:44:4","symbolAliases":[{"foreign":{"id":457,"name":"Attestation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":45,"src":"67:11:4","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"ISchemaResolver","contractDependencies":[],"contractKind":"interface","documentation":{"id":459,"nodeType":"StructuredDocumentation","src":"104:63:4","text":" @title The interface of an optional schema resolver."},"fullyImplemented":false,"id":510,"linearizedBaseContracts":[510],"name":"ISchemaResolver","nameLocation":"178:15:4","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":460,"nodeType":"StructuredDocumentation","src":"200:76:4","text":" @dev Returns whether the resolver supports ETH transfers."},"functionSelector":"ce46e046","id":465,"implemented":false,"kind":"function","modifiers":[],"name":"isPayable","nameLocation":"290:9:4","nodeType":"FunctionDefinition","parameters":{"id":461,"nodeType":"ParameterList","parameters":[],"src":"299:2:4"},"returnParameters":{"id":464,"nodeType":"ParameterList","parameters":[{"constant":false,"id":463,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":465,"src":"325:4:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":462,"name":"bool","nodeType":"ElementaryTypeName","src":"325:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"324:6:4"},"scope":510,"src":"281:50:4","stateMutability":"pure","virtual":false,"visibility":"external"},{"documentation":{"id":466,"nodeType":"StructuredDocumentation","src":"337:191:4","text":" @dev Processes an attestation and verifies whether it's valid.\n @param attestation The new attestation.\n @return Whether the attestation is valid."},"functionSelector":"e60c3505","id":474,"implemented":false,"kind":"function","modifiers":[],"name":"attest","nameLocation":"542:6:4","nodeType":"FunctionDefinition","parameters":{"id":470,"nodeType":"ParameterList","parameters":[{"constant":false,"id":469,"mutability":"mutable","name":"attestation","nameLocation":"570:11:4","nodeType":"VariableDeclaration","scope":474,"src":"549:32:4","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_Attestation_$45_calldata_ptr","typeString":"struct Attestation"},"typeName":{"id":468,"nodeType":"UserDefinedTypeName","pathNode":{"id":467,"name":"Attestation","nameLocations":["549:11:4"],"nodeType":"IdentifierPath","referencedDeclaration":45,"src":"549:11:4"},"referencedDeclaration":45,"src":"549:11:4","typeDescriptions":{"typeIdentifier":"t_struct$_Attestation_$45_storage_ptr","typeString":"struct Attestation"}},"visibility":"internal"}],"src":"548:34:4"},"returnParameters":{"id":473,"nodeType":"ParameterList","parameters":[{"constant":false,"id":472,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":474,"src":"609:4:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":471,"name":"bool","nodeType":"ElementaryTypeName","src":"609:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"608:6:4"},"scope":510,"src":"533:82:4","stateMutability":"payable","virtual":false,"visibility":"external"},{"documentation":{"id":475,"nodeType":"StructuredDocumentation","src":"621:291:4","text":" @dev Processes multiple attestations and verifies whether they are valid.\n @param attestations The new attestations.\n @param values Explicit ETH amounts which were sent with each attestation.\n @return Whether all the attestations are valid."},"functionSelector":"91db0b7e","id":487,"implemented":false,"kind":"function","modifiers":[],"name":"multiAttest","nameLocation":"926:11:4","nodeType":"FunctionDefinition","parameters":{"id":483,"nodeType":"ParameterList","parameters":[{"constant":false,"id":479,"mutability":"mutable","name":"attestations","nameLocation":"970:12:4","nodeType":"VariableDeclaration","scope":487,"src":"947:35:4","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Attestation_$45_calldata_ptr_$dyn_calldata_ptr","typeString":"struct Attestation[]"},"typeName":{"baseType":{"id":477,"nodeType":"UserDefinedTypeName","pathNode":{"id":476,"name":"Attestation","nameLocations":["947:11:4"],"nodeType":"IdentifierPath","referencedDeclaration":45,"src":"947:11:4"},"referencedDeclaration":45,"src":"947:11:4","typeDescriptions":{"typeIdentifier":"t_struct$_Attestation_$45_storage_ptr","typeString":"struct Attestation"}},"id":478,"nodeType":"ArrayTypeName","src":"947:13:4","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Attestation_$45_storage_$dyn_storage_ptr","typeString":"struct Attestation[]"}},"visibility":"internal"},{"constant":false,"id":482,"mutability":"mutable","name":"values","nameLocation":"1011:6:4","nodeType":"VariableDeclaration","scope":487,"src":"992:25:4","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":480,"name":"uint256","nodeType":"ElementaryTypeName","src":"992:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":481,"nodeType":"ArrayTypeName","src":"992:9:4","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"937:86:4"},"returnParameters":{"id":486,"nodeType":"ParameterList","parameters":[{"constant":false,"id":485,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":487,"src":"1050:4:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":484,"name":"bool","nodeType":"ElementaryTypeName","src":"1050:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1049:6:4"},"scope":510,"src":"917:139:4","stateMutability":"payable","virtual":false,"visibility":"external"},{"documentation":{"id":488,"nodeType":"StructuredDocumentation","src":"1062:229:4","text":" @dev Processes an attestation revocation and verifies if it can be revoked.\n @param attestation The existing attestation to be revoked.\n @return Whether the attestation can be revoked."},"functionSelector":"e49617e1","id":496,"implemented":false,"kind":"function","modifiers":[],"name":"revoke","nameLocation":"1305:6:4","nodeType":"FunctionDefinition","parameters":{"id":492,"nodeType":"ParameterList","parameters":[{"constant":false,"id":491,"mutability":"mutable","name":"attestation","nameLocation":"1333:11:4","nodeType":"VariableDeclaration","scope":496,"src":"1312:32:4","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_Attestation_$45_calldata_ptr","typeString":"struct Attestation"},"typeName":{"id":490,"nodeType":"UserDefinedTypeName","pathNode":{"id":489,"name":"Attestation","nameLocations":["1312:11:4"],"nodeType":"IdentifierPath","referencedDeclaration":45,"src":"1312:11:4"},"referencedDeclaration":45,"src":"1312:11:4","typeDescriptions":{"typeIdentifier":"t_struct$_Attestation_$45_storage_ptr","typeString":"struct Attestation"}},"visibility":"internal"}],"src":"1311:34:4"},"returnParameters":{"id":495,"nodeType":"ParameterList","parameters":[{"constant":false,"id":494,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":496,"src":"1372:4:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":493,"name":"bool","nodeType":"ElementaryTypeName","src":"1372:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1371:6:4"},"scope":510,"src":"1296:82:4","stateMutability":"payable","virtual":false,"visibility":"external"},{"documentation":{"id":497,"nodeType":"StructuredDocumentation","src":"1384:320:4","text":" @dev Processes revocation of multiple attestation and verifies they can be revoked.\n @param attestations The existing attestations to be revoked.\n @param values Explicit ETH amounts which were sent with each revocation.\n @return Whether the attestations can be revoked."},"functionSelector":"88e5b2d9","id":509,"implemented":false,"kind":"function","modifiers":[],"name":"multiRevoke","nameLocation":"1718:11:4","nodeType":"FunctionDefinition","parameters":{"id":505,"nodeType":"ParameterList","parameters":[{"constant":false,"id":501,"mutability":"mutable","name":"attestations","nameLocation":"1762:12:4","nodeType":"VariableDeclaration","scope":509,"src":"1739:35:4","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Attestation_$45_calldata_ptr_$dyn_calldata_ptr","typeString":"struct Attestation[]"},"typeName":{"baseType":{"id":499,"nodeType":"UserDefinedTypeName","pathNode":{"id":498,"name":"Attestation","nameLocations":["1739:11:4"],"nodeType":"IdentifierPath","referencedDeclaration":45,"src":"1739:11:4"},"referencedDeclaration":45,"src":"1739:11:4","typeDescriptions":{"typeIdentifier":"t_struct$_Attestation_$45_storage_ptr","typeString":"struct Attestation"}},"id":500,"nodeType":"ArrayTypeName","src":"1739:13:4","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Attestation_$45_storage_$dyn_storage_ptr","typeString":"struct Attestation[]"}},"visibility":"internal"},{"constant":false,"id":504,"mutability":"mutable","name":"values","nameLocation":"1803:6:4","nodeType":"VariableDeclaration","scope":509,"src":"1784:25:4","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":502,"name":"uint256","nodeType":"ElementaryTypeName","src":"1784:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":503,"nodeType":"ArrayTypeName","src":"1784:9:4","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"1729:86:4"},"returnParameters":{"id":508,"nodeType":"ParameterList","parameters":[{"constant":false,"id":507,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":509,"src":"1842:4:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":506,"name":"bool","nodeType":"ElementaryTypeName","src":"1842:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1841:6:4"},"scope":510,"src":"1709:139:4","stateMutability":"payable","virtual":false,"visibility":"external"}],"scope":511,"src":"168:1682:4","usedErrors":[]}],"src":"33:1818:4"},"id":4},"@ethereum-attestation-service/eas-contracts/contracts/resolver/SchemaResolver.sol":{"ast":{"absolutePath":"@ethereum-attestation-service/eas-contracts/contracts/resolver/SchemaResolver.sol","exportedSymbols":{"Attestation":[45],"IEAS":[346],"ISchemaResolver":[510],"InvalidEAS":[11],"SchemaResolver":[819],"Semver":[454],"uncheckedInc":[61]},"id":820,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":512,"literals":["solidity","^","0.8",".4"],"nodeType":"PragmaDirective","src":"33:23:5"},{"absolutePath":"@ethereum-attestation-service/eas-contracts/contracts/IEAS.sol","file":"../IEAS.sol","id":515,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":820,"sourceUnit":347,"src":"58:48:5","symbolAliases":[{"foreign":{"id":513,"name":"IEAS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":346,"src":"67:4:5","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":514,"name":"Attestation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":45,"src":"73:11:5","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@ethereum-attestation-service/eas-contracts/contracts/Common.sol","file":"../Common.sol","id":518,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":820,"sourceUnit":62,"src":"107:57:5","symbolAliases":[{"foreign":{"id":516,"name":"InvalidEAS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":11,"src":"116:10:5","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":517,"name":"uncheckedInc","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":61,"src":"128:12:5","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@ethereum-attestation-service/eas-contracts/contracts/Semver.sol","file":"../Semver.sol","id":520,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":820,"sourceUnit":455,"src":"165:39:5","symbolAliases":[{"foreign":{"id":519,"name":"Semver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":454,"src":"174:6:5","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@ethereum-attestation-service/eas-contracts/contracts/resolver/ISchemaResolver.sol","file":"./ISchemaResolver.sol","id":522,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":820,"sourceUnit":511,"src":"206:56:5","symbolAliases":[{"foreign":{"id":521,"name":"ISchemaResolver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":510,"src":"215:15:5","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":524,"name":"ISchemaResolver","nameLocations":["343:15:5"],"nodeType":"IdentifierPath","referencedDeclaration":510,"src":"343:15:5"},"id":525,"nodeType":"InheritanceSpecifier","src":"343:15:5"},{"baseName":{"id":526,"name":"Semver","nameLocations":["360:6:5"],"nodeType":"IdentifierPath","referencedDeclaration":454,"src":"360:6:5"},"id":527,"nodeType":"InheritanceSpecifier","src":"360:6:5"}],"canonicalName":"SchemaResolver","contractDependencies":[],"contractKind":"contract","documentation":{"id":523,"nodeType":"StructuredDocumentation","src":"264:42:5","text":" @title A base resolver contract"},"fullyImplemented":false,"id":819,"linearizedBaseContracts":[819,454,510],"name":"SchemaResolver","nameLocation":"325:14:5","nodeType":"ContractDefinition","nodes":[{"errorSelector":"4ca88867","id":529,"name":"AccessDenied","nameLocation":"379:12:5","nodeType":"ErrorDefinition","parameters":{"id":528,"nodeType":"ParameterList","parameters":[],"src":"391:2:5"},"src":"373:21:5"},{"errorSelector":"11011294","id":531,"name":"InsufficientValue","nameLocation":"405:17:5","nodeType":"ErrorDefinition","parameters":{"id":530,"nodeType":"ParameterList","parameters":[],"src":"422:2:5"},"src":"399:26:5"},{"errorSelector":"1574f9f3","id":533,"name":"NotPayable","nameLocation":"436:10:5","nodeType":"ErrorDefinition","parameters":{"id":532,"nodeType":"ParameterList","parameters":[],"src":"446:2:5"},"src":"430:19:5"},{"constant":false,"id":536,"mutability":"immutable","name":"_eas","nameLocation":"511:4:5","nodeType":"VariableDeclaration","scope":819,"src":"487:28:5","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IEAS_$346","typeString":"contract IEAS"},"typeName":{"id":535,"nodeType":"UserDefinedTypeName","pathNode":{"id":534,"name":"IEAS","nameLocations":["487:4:5"],"nodeType":"IdentifierPath","referencedDeclaration":346,"src":"487:4:5"},"referencedDeclaration":346,"src":"487:4:5","typeDescriptions":{"typeIdentifier":"t_contract$_IEAS_$346","typeString":"contract IEAS"}},"visibility":"internal"},{"body":{"id":566,"nodeType":"Block","src":"677:113:5","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":556,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":550,"name":"eas","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":540,"src":"699:3:5","typeDescriptions":{"typeIdentifier":"t_contract$_IEAS_$346","typeString":"contract IEAS"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IEAS_$346","typeString":"contract IEAS"}],"id":549,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"691:7:5","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":548,"name":"address","nodeType":"ElementaryTypeName","src":"691:7:5","typeDescriptions":{}}},"id":551,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"691:12:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":554,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"715:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":553,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"707:7:5","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":552,"name":"address","nodeType":"ElementaryTypeName","src":"707:7:5","typeDescriptions":{}}},"id":555,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"707:10:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"691:26:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":561,"nodeType":"IfStatement","src":"687:76:5","trueBody":{"id":560,"nodeType":"Block","src":"719:44:5","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":557,"name":"InvalidEAS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":11,"src":"740:10:5","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":558,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"740:12:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":559,"nodeType":"RevertStatement","src":"733:19:5"}]}},{"expression":{"id":564,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":562,"name":"_eas","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":536,"src":"773:4:5","typeDescriptions":{"typeIdentifier":"t_contract$_IEAS_$346","typeString":"contract IEAS"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":563,"name":"eas","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":540,"src":"780:3:5","typeDescriptions":{"typeIdentifier":"t_contract$_IEAS_$346","typeString":"contract IEAS"}},"src":"773:10:5","typeDescriptions":{"typeIdentifier":"t_contract$_IEAS_$346","typeString":"contract IEAS"}},"id":565,"nodeType":"ExpressionStatement","src":"773:10:5"}]},"documentation":{"id":537,"nodeType":"StructuredDocumentation","src":"522:112:5","text":" @dev Creates a new resolver.\n @param eas The address of the global EAS contract."},"id":567,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"hexValue":"31","id":543,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"668:1:5","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},{"hexValue":"30","id":544,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"671:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"30","id":545,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"674:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":546,"kind":"baseConstructorSpecifier","modifierName":{"id":542,"name":"Semver","nameLocations":["661:6:5"],"nodeType":"IdentifierPath","referencedDeclaration":454,"src":"661:6:5"},"nodeType":"ModifierInvocation","src":"661:15:5"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":541,"nodeType":"ParameterList","parameters":[{"constant":false,"id":540,"mutability":"mutable","name":"eas","nameLocation":"656:3:5","nodeType":"VariableDeclaration","scope":567,"src":"651:8:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IEAS_$346","typeString":"contract IEAS"},"typeName":{"id":539,"nodeType":"UserDefinedTypeName","pathNode":{"id":538,"name":"IEAS","nameLocations":["651:4:5"],"nodeType":"IdentifierPath","referencedDeclaration":346,"src":"651:4:5"},"referencedDeclaration":346,"src":"651:4:5","typeDescriptions":{"typeIdentifier":"t_contract$_IEAS_$346","typeString":"contract IEAS"}},"visibility":"internal"}],"src":"650:10:5"},"returnParameters":{"id":547,"nodeType":"ParameterList","parameters":[],"src":"677:0:5"},"scope":819,"src":"639:151:5","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":574,"nodeType":"Block","src":"898:39:5","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":570,"name":"_onlyEAS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":818,"src":"908:8:5","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$__$","typeString":"function () view"}},"id":571,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"908:10:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":572,"nodeType":"ExpressionStatement","src":"908:10:5"},{"id":573,"nodeType":"PlaceholderStatement","src":"929:1:5"}]},"documentation":{"id":568,"nodeType":"StructuredDocumentation","src":"796:78:5","text":" @dev Ensures that only the EAS contract can make this call."},"id":575,"name":"onlyEAS","nameLocation":"888:7:5","nodeType":"ModifierDefinition","parameters":{"id":569,"nodeType":"ParameterList","parameters":[],"src":"895:2:5"},"src":"879:58:5","virtual":false,"visibility":"internal"},{"baseFunctions":[465],"body":{"id":583,"nodeType":"Block","src":"1050:29:5","statements":[{"expression":{"hexValue":"66616c7365","id":581,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1067:5:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"functionReturnParameters":580,"id":582,"nodeType":"Return","src":"1060:12:5"}]},"documentation":{"id":576,"nodeType":"StructuredDocumentation","src":"943:46:5","text":" @inheritdoc ISchemaResolver"},"functionSelector":"ce46e046","id":584,"implemented":true,"kind":"function","modifiers":[],"name":"isPayable","nameLocation":"1003:9:5","nodeType":"FunctionDefinition","parameters":{"id":577,"nodeType":"ParameterList","parameters":[],"src":"1012:2:5"},"returnParameters":{"id":580,"nodeType":"ParameterList","parameters":[{"constant":false,"id":579,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":584,"src":"1044:4:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":578,"name":"bool","nodeType":"ElementaryTypeName","src":"1044:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1043:6:5"},"scope":819,"src":"994:85:5","stateMutability":"pure","virtual":true,"visibility":"public"},{"body":{"id":596,"nodeType":"Block","src":"1162:78:5","statements":[{"condition":{"id":590,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"1176:12:5","subExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":588,"name":"isPayable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":584,"src":"1177:9:5","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_bool_$","typeString":"function () pure returns (bool)"}},"id":589,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1177:11:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":595,"nodeType":"IfStatement","src":"1172:62:5","trueBody":{"id":594,"nodeType":"Block","src":"1190:44:5","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":591,"name":"NotPayable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":533,"src":"1211:10:5","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":592,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1211:12:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":593,"nodeType":"RevertStatement","src":"1204:19:5"}]}}]},"documentation":{"id":585,"nodeType":"StructuredDocumentation","src":"1085:37:5","text":" @dev ETH callback."},"id":597,"implemented":true,"kind":"receive","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":586,"nodeType":"ParameterList","parameters":[],"src":"1134:2:5"},"returnParameters":{"id":587,"nodeType":"ParameterList","parameters":[],"src":"1162:0:5"},"scope":819,"src":"1127:113:5","stateMutability":"payable","virtual":true,"visibility":"external"},{"baseFunctions":[474],"body":{"id":614,"nodeType":"Block","src":"1387:56:5","statements":[{"expression":{"arguments":[{"id":609,"name":"attestation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":601,"src":"1413:11:5","typeDescriptions":{"typeIdentifier":"t_struct$_Attestation_$45_calldata_ptr","typeString":"struct Attestation calldata"}},{"expression":{"id":610,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1426:3:5","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":611,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1430:5:5","memberName":"value","nodeType":"MemberAccess","src":"1426:9:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Attestation_$45_calldata_ptr","typeString":"struct Attestation calldata"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":608,"name":"onAttest","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":790,"src":"1404:8:5","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Attestation_$45_calldata_ptr_$_t_uint256_$returns$_t_bool_$","typeString":"function (struct Attestation calldata,uint256) returns (bool)"}},"id":612,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1404:32:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":607,"id":613,"nodeType":"Return","src":"1397:39:5"}]},"documentation":{"id":598,"nodeType":"StructuredDocumentation","src":"1246:46:5","text":" @inheritdoc ISchemaResolver"},"functionSelector":"e60c3505","id":615,"implemented":true,"kind":"function","modifiers":[{"id":604,"kind":"modifierInvocation","modifierName":{"id":603,"name":"onlyEAS","nameLocations":["1364:7:5"],"nodeType":"IdentifierPath","referencedDeclaration":575,"src":"1364:7:5"},"nodeType":"ModifierInvocation","src":"1364:7:5"}],"name":"attest","nameLocation":"1306:6:5","nodeType":"FunctionDefinition","parameters":{"id":602,"nodeType":"ParameterList","parameters":[{"constant":false,"id":601,"mutability":"mutable","name":"attestation","nameLocation":"1334:11:5","nodeType":"VariableDeclaration","scope":615,"src":"1313:32:5","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_Attestation_$45_calldata_ptr","typeString":"struct Attestation"},"typeName":{"id":600,"nodeType":"UserDefinedTypeName","pathNode":{"id":599,"name":"Attestation","nameLocations":["1313:11:5"],"nodeType":"IdentifierPath","referencedDeclaration":45,"src":"1313:11:5"},"referencedDeclaration":45,"src":"1313:11:5","typeDescriptions":{"typeIdentifier":"t_struct$_Attestation_$45_storage_ptr","typeString":"struct Attestation"}},"visibility":"internal"}],"src":"1312:34:5"},"returnParameters":{"id":607,"nodeType":"ParameterList","parameters":[{"constant":false,"id":606,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":615,"src":"1381:4:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":605,"name":"bool","nodeType":"ElementaryTypeName","src":"1381:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1380:6:5"},"scope":819,"src":"1297:146:5","stateMutability":"payable","virtual":false,"visibility":"external"},{"baseFunctions":[487],"body":{"id":687,"nodeType":"Block","src":"1647:1223:5","statements":[{"assignments":[631],"declarations":[{"constant":false,"id":631,"mutability":"mutable","name":"length","nameLocation":"1665:6:5","nodeType":"VariableDeclaration","scope":687,"src":"1657:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":630,"name":"uint256","nodeType":"ElementaryTypeName","src":"1657:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":634,"initialValue":{"expression":{"id":632,"name":"attestations","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":620,"src":"1674:12:5","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Attestation_$45_calldata_ptr_$dyn_calldata_ptr","typeString":"struct Attestation calldata[] calldata"}},"id":633,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1687:6:5","memberName":"length","nodeType":"MemberAccess","src":"1674:19:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1657:36:5"},{"assignments":[636],"declarations":[{"constant":false,"id":636,"mutability":"mutable","name":"remainingValue","nameLocation":"2109:14:5","nodeType":"VariableDeclaration","scope":687,"src":"2101:22:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":635,"name":"uint256","nodeType":"ElementaryTypeName","src":"2101:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":639,"initialValue":{"expression":{"id":637,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2126:3:5","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":638,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2130:5:5","memberName":"value","nodeType":"MemberAccess","src":"2126:9:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2101:34:5"},{"body":{"id":683,"nodeType":"Block","src":"2199:643:5","statements":[{"assignments":[654],"declarations":[{"constant":false,"id":654,"mutability":"mutable","name":"value","nameLocation":"2311:5:5","nodeType":"VariableDeclaration","scope":683,"src":"2303:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":653,"name":"uint256","nodeType":"ElementaryTypeName","src":"2303:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":658,"initialValue":{"baseExpression":{"id":655,"name":"values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":623,"src":"2319:6:5","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":657,"indexExpression":{"id":656,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":641,"src":"2326:1:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2319:9:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2303:25:5"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":661,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":659,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":654,"src":"2346:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":660,"name":"remainingValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":636,"src":"2354:14:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2346:22:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":666,"nodeType":"IfStatement","src":"2342:87:5","trueBody":{"id":665,"nodeType":"Block","src":"2370:59:5","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":662,"name":"InsufficientValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":531,"src":"2395:17:5","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":663,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2395:19:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":664,"nodeType":"RevertStatement","src":"2388:26:5"}]}},{"condition":{"id":673,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"2551:33:5","subExpression":{"arguments":[{"baseExpression":{"id":668,"name":"attestations","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":620,"src":"2561:12:5","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Attestation_$45_calldata_ptr_$dyn_calldata_ptr","typeString":"struct Attestation calldata[] calldata"}},"id":670,"indexExpression":{"id":669,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":641,"src":"2574:1:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2561:15:5","typeDescriptions":{"typeIdentifier":"t_struct$_Attestation_$45_calldata_ptr","typeString":"struct Attestation calldata"}},{"id":671,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":654,"src":"2578:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Attestation_$45_calldata_ptr","typeString":"struct Attestation calldata"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":667,"name":"onAttest","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":790,"src":"2552:8:5","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Attestation_$45_calldata_ptr_$_t_uint256_$returns$_t_bool_$","typeString":"function (struct Attestation calldata,uint256) returns (bool)"}},"id":672,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2552:32:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":677,"nodeType":"IfStatement","src":"2547:84:5","trueBody":{"id":676,"nodeType":"Block","src":"2586:45:5","statements":[{"expression":{"hexValue":"66616c7365","id":674,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2611:5:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"functionReturnParameters":629,"id":675,"nodeType":"Return","src":"2604:12:5"}]}},{"id":682,"nodeType":"UncheckedBlock","src":"2645:187:5","statements":[{"expression":{"id":680,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":678,"name":"remainingValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":636,"src":"2794:14:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"id":679,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":654,"src":"2812:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2794:23:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":681,"nodeType":"ExpressionStatement","src":"2794:23:5"}]}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":646,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":644,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":641,"src":"2166:1:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":645,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":631,"src":"2170:6:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2166:10:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":684,"initializationExpression":{"assignments":[641],"declarations":[{"constant":false,"id":641,"mutability":"mutable","name":"i","nameLocation":"2159:1:5","nodeType":"VariableDeclaration","scope":684,"src":"2151:9:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":640,"name":"uint256","nodeType":"ElementaryTypeName","src":"2151:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":643,"initialValue":{"hexValue":"30","id":642,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2163:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"2151:13:5"},"loopExpression":{"expression":{"id":651,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":647,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":641,"src":"2178:1:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":649,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":641,"src":"2195:1:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":648,"name":"uncheckedInc","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":61,"src":"2182:12:5","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":650,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2182:15:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2178:19:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":652,"nodeType":"ExpressionStatement","src":"2178:19:5"},"nodeType":"ForStatement","src":"2146:696:5"},{"expression":{"hexValue":"74727565","id":685,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2859:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":629,"id":686,"nodeType":"Return","src":"2852:11:5"}]},"documentation":{"id":616,"nodeType":"StructuredDocumentation","src":"1449:46:5","text":" @inheritdoc ISchemaResolver"},"functionSelector":"91db0b7e","id":688,"implemented":true,"kind":"function","modifiers":[{"id":626,"kind":"modifierInvocation","modifierName":{"id":625,"name":"onlyEAS","nameLocations":["1624:7:5"],"nodeType":"IdentifierPath","referencedDeclaration":575,"src":"1624:7:5"},"nodeType":"ModifierInvocation","src":"1624:7:5"}],"name":"multiAttest","nameLocation":"1509:11:5","nodeType":"FunctionDefinition","parameters":{"id":624,"nodeType":"ParameterList","parameters":[{"constant":false,"id":620,"mutability":"mutable","name":"attestations","nameLocation":"1553:12:5","nodeType":"VariableDeclaration","scope":688,"src":"1530:35:5","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Attestation_$45_calldata_ptr_$dyn_calldata_ptr","typeString":"struct Attestation[]"},"typeName":{"baseType":{"id":618,"nodeType":"UserDefinedTypeName","pathNode":{"id":617,"name":"Attestation","nameLocations":["1530:11:5"],"nodeType":"IdentifierPath","referencedDeclaration":45,"src":"1530:11:5"},"referencedDeclaration":45,"src":"1530:11:5","typeDescriptions":{"typeIdentifier":"t_struct$_Attestation_$45_storage_ptr","typeString":"struct Attestation"}},"id":619,"nodeType":"ArrayTypeName","src":"1530:13:5","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Attestation_$45_storage_$dyn_storage_ptr","typeString":"struct Attestation[]"}},"visibility":"internal"},{"constant":false,"id":623,"mutability":"mutable","name":"values","nameLocation":"1594:6:5","nodeType":"VariableDeclaration","scope":688,"src":"1575:25:5","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":621,"name":"uint256","nodeType":"ElementaryTypeName","src":"1575:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":622,"nodeType":"ArrayTypeName","src":"1575:9:5","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"1520:86:5"},"returnParameters":{"id":629,"nodeType":"ParameterList","parameters":[{"constant":false,"id":628,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":688,"src":"1641:4:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":627,"name":"bool","nodeType":"ElementaryTypeName","src":"1641:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1640:6:5"},"scope":819,"src":"1500:1370:5","stateMutability":"payable","virtual":false,"visibility":"external"},{"baseFunctions":[496],"body":{"id":705,"nodeType":"Block","src":"3017:56:5","statements":[{"expression":{"arguments":[{"id":700,"name":"attestation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":692,"src":"3043:11:5","typeDescriptions":{"typeIdentifier":"t_struct$_Attestation_$45_calldata_ptr","typeString":"struct Attestation calldata"}},{"expression":{"id":701,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"3056:3:5","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":702,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3060:5:5","memberName":"value","nodeType":"MemberAccess","src":"3056:9:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Attestation_$45_calldata_ptr","typeString":"struct Attestation calldata"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":699,"name":"onRevoke","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":801,"src":"3034:8:5","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Attestation_$45_calldata_ptr_$_t_uint256_$returns$_t_bool_$","typeString":"function (struct Attestation calldata,uint256) returns (bool)"}},"id":703,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3034:32:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":698,"id":704,"nodeType":"Return","src":"3027:39:5"}]},"documentation":{"id":689,"nodeType":"StructuredDocumentation","src":"2876:46:5","text":" @inheritdoc ISchemaResolver"},"functionSelector":"e49617e1","id":706,"implemented":true,"kind":"function","modifiers":[{"id":695,"kind":"modifierInvocation","modifierName":{"id":694,"name":"onlyEAS","nameLocations":["2994:7:5"],"nodeType":"IdentifierPath","referencedDeclaration":575,"src":"2994:7:5"},"nodeType":"ModifierInvocation","src":"2994:7:5"}],"name":"revoke","nameLocation":"2936:6:5","nodeType":"FunctionDefinition","parameters":{"id":693,"nodeType":"ParameterList","parameters":[{"constant":false,"id":692,"mutability":"mutable","name":"attestation","nameLocation":"2964:11:5","nodeType":"VariableDeclaration","scope":706,"src":"2943:32:5","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_Attestation_$45_calldata_ptr","typeString":"struct Attestation"},"typeName":{"id":691,"nodeType":"UserDefinedTypeName","pathNode":{"id":690,"name":"Attestation","nameLocations":["2943:11:5"],"nodeType":"IdentifierPath","referencedDeclaration":45,"src":"2943:11:5"},"referencedDeclaration":45,"src":"2943:11:5","typeDescriptions":{"typeIdentifier":"t_struct$_Attestation_$45_storage_ptr","typeString":"struct Attestation"}},"visibility":"internal"}],"src":"2942:34:5"},"returnParameters":{"id":698,"nodeType":"ParameterList","parameters":[{"constant":false,"id":697,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":706,"src":"3011:4:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":696,"name":"bool","nodeType":"ElementaryTypeName","src":"3011:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3010:6:5"},"scope":819,"src":"2927:146:5","stateMutability":"payable","virtual":false,"visibility":"external"},{"baseFunctions":[509],"body":{"id":778,"nodeType":"Block","src":"3277:1222:5","statements":[{"assignments":[722],"declarations":[{"constant":false,"id":722,"mutability":"mutable","name":"length","nameLocation":"3295:6:5","nodeType":"VariableDeclaration","scope":778,"src":"3287:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":721,"name":"uint256","nodeType":"ElementaryTypeName","src":"3287:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":725,"initialValue":{"expression":{"id":723,"name":"attestations","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":711,"src":"3304:12:5","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Attestation_$45_calldata_ptr_$dyn_calldata_ptr","typeString":"struct Attestation calldata[] calldata"}},"id":724,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3317:6:5","memberName":"length","nodeType":"MemberAccess","src":"3304:19:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3287:36:5"},{"assignments":[727],"declarations":[{"constant":false,"id":727,"mutability":"mutable","name":"remainingValue","nameLocation":"3739:14:5","nodeType":"VariableDeclaration","scope":778,"src":"3731:22:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":726,"name":"uint256","nodeType":"ElementaryTypeName","src":"3731:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":730,"initialValue":{"expression":{"id":728,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"3756:3:5","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":729,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3760:5:5","memberName":"value","nodeType":"MemberAccess","src":"3756:9:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3731:34:5"},{"body":{"id":774,"nodeType":"Block","src":"3829:642:5","statements":[{"assignments":[745],"declarations":[{"constant":false,"id":745,"mutability":"mutable","name":"value","nameLocation":"3941:5:5","nodeType":"VariableDeclaration","scope":774,"src":"3933:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":744,"name":"uint256","nodeType":"ElementaryTypeName","src":"3933:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":749,"initialValue":{"baseExpression":{"id":746,"name":"values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":714,"src":"3949:6:5","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":748,"indexExpression":{"id":747,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":732,"src":"3956:1:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3949:9:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3933:25:5"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":752,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":750,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":745,"src":"3976:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":751,"name":"remainingValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":727,"src":"3984:14:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3976:22:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":757,"nodeType":"IfStatement","src":"3972:87:5","trueBody":{"id":756,"nodeType":"Block","src":"4000:59:5","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":753,"name":"InsufficientValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":531,"src":"4025:17:5","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":754,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4025:19:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":755,"nodeType":"RevertStatement","src":"4018:26:5"}]}},{"condition":{"id":764,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"4180:33:5","subExpression":{"arguments":[{"baseExpression":{"id":759,"name":"attestations","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":711,"src":"4190:12:5","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Attestation_$45_calldata_ptr_$dyn_calldata_ptr","typeString":"struct Attestation calldata[] calldata"}},"id":761,"indexExpression":{"id":760,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":732,"src":"4203:1:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4190:15:5","typeDescriptions":{"typeIdentifier":"t_struct$_Attestation_$45_calldata_ptr","typeString":"struct Attestation calldata"}},{"id":762,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":745,"src":"4207:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Attestation_$45_calldata_ptr","typeString":"struct Attestation calldata"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":758,"name":"onRevoke","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":801,"src":"4181:8:5","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Attestation_$45_calldata_ptr_$_t_uint256_$returns$_t_bool_$","typeString":"function (struct Attestation calldata,uint256) returns (bool)"}},"id":763,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4181:32:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":768,"nodeType":"IfStatement","src":"4176:84:5","trueBody":{"id":767,"nodeType":"Block","src":"4215:45:5","statements":[{"expression":{"hexValue":"66616c7365","id":765,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"4240:5:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"functionReturnParameters":720,"id":766,"nodeType":"Return","src":"4233:12:5"}]}},{"id":773,"nodeType":"UncheckedBlock","src":"4274:187:5","statements":[{"expression":{"id":771,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":769,"name":"remainingValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":727,"src":"4423:14:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"id":770,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":745,"src":"4441:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4423:23:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":772,"nodeType":"ExpressionStatement","src":"4423:23:5"}]}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":737,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":735,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":732,"src":"3796:1:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":736,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":722,"src":"3800:6:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3796:10:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":775,"initializationExpression":{"assignments":[732],"declarations":[{"constant":false,"id":732,"mutability":"mutable","name":"i","nameLocation":"3789:1:5","nodeType":"VariableDeclaration","scope":775,"src":"3781:9:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":731,"name":"uint256","nodeType":"ElementaryTypeName","src":"3781:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":734,"initialValue":{"hexValue":"30","id":733,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3793:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"3781:13:5"},"loopExpression":{"expression":{"id":742,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":738,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":732,"src":"3808:1:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":740,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":732,"src":"3825:1:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":739,"name":"uncheckedInc","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":61,"src":"3812:12:5","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":741,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3812:15:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3808:19:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":743,"nodeType":"ExpressionStatement","src":"3808:19:5"},"nodeType":"ForStatement","src":"3776:695:5"},{"expression":{"hexValue":"74727565","id":776,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"4488:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":720,"id":777,"nodeType":"Return","src":"4481:11:5"}]},"documentation":{"id":707,"nodeType":"StructuredDocumentation","src":"3079:46:5","text":" @inheritdoc ISchemaResolver"},"functionSelector":"88e5b2d9","id":779,"implemented":true,"kind":"function","modifiers":[{"id":717,"kind":"modifierInvocation","modifierName":{"id":716,"name":"onlyEAS","nameLocations":["3254:7:5"],"nodeType":"IdentifierPath","referencedDeclaration":575,"src":"3254:7:5"},"nodeType":"ModifierInvocation","src":"3254:7:5"}],"name":"multiRevoke","nameLocation":"3139:11:5","nodeType":"FunctionDefinition","parameters":{"id":715,"nodeType":"ParameterList","parameters":[{"constant":false,"id":711,"mutability":"mutable","name":"attestations","nameLocation":"3183:12:5","nodeType":"VariableDeclaration","scope":779,"src":"3160:35:5","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Attestation_$45_calldata_ptr_$dyn_calldata_ptr","typeString":"struct Attestation[]"},"typeName":{"baseType":{"id":709,"nodeType":"UserDefinedTypeName","pathNode":{"id":708,"name":"Attestation","nameLocations":["3160:11:5"],"nodeType":"IdentifierPath","referencedDeclaration":45,"src":"3160:11:5"},"referencedDeclaration":45,"src":"3160:11:5","typeDescriptions":{"typeIdentifier":"t_struct$_Attestation_$45_storage_ptr","typeString":"struct Attestation"}},"id":710,"nodeType":"ArrayTypeName","src":"3160:13:5","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Attestation_$45_storage_$dyn_storage_ptr","typeString":"struct Attestation[]"}},"visibility":"internal"},{"constant":false,"id":714,"mutability":"mutable","name":"values","nameLocation":"3224:6:5","nodeType":"VariableDeclaration","scope":779,"src":"3205:25:5","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":712,"name":"uint256","nodeType":"ElementaryTypeName","src":"3205:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":713,"nodeType":"ArrayTypeName","src":"3205:9:5","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"3150:86:5"},"returnParameters":{"id":720,"nodeType":"ParameterList","parameters":[{"constant":false,"id":719,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":779,"src":"3271:4:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":718,"name":"bool","nodeType":"ElementaryTypeName","src":"3271:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3270:6:5"},"scope":819,"src":"3130:1369:5","stateMutability":"payable","virtual":false,"visibility":"external"},{"documentation":{"id":780,"nodeType":"StructuredDocumentation","src":"4505:570:5","text":" @dev A resolver callback that should be implemented by child contracts.\n @param attestation The new attestation.\n @param value An explicit ETH amount that was sent to the resolver. Please note that this value is verified in\n both attest() and multiAttest() callbacks EAS-only callbacks and that in case of multi attestations, it'll\n usually hold that msg.value != value, since msg.value aggregated the sent ETH amounts for all the attestations\n in the batch.\n @return Whether the attestation is valid."},"id":790,"implemented":false,"kind":"function","modifiers":[],"name":"onAttest","nameLocation":"5089:8:5","nodeType":"FunctionDefinition","parameters":{"id":786,"nodeType":"ParameterList","parameters":[{"constant":false,"id":783,"mutability":"mutable","name":"attestation","nameLocation":"5119:11:5","nodeType":"VariableDeclaration","scope":790,"src":"5098:32:5","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_Attestation_$45_calldata_ptr","typeString":"struct Attestation"},"typeName":{"id":782,"nodeType":"UserDefinedTypeName","pathNode":{"id":781,"name":"Attestation","nameLocations":["5098:11:5"],"nodeType":"IdentifierPath","referencedDeclaration":45,"src":"5098:11:5"},"referencedDeclaration":45,"src":"5098:11:5","typeDescriptions":{"typeIdentifier":"t_struct$_Attestation_$45_storage_ptr","typeString":"struct Attestation"}},"visibility":"internal"},{"constant":false,"id":785,"mutability":"mutable","name":"value","nameLocation":"5140:5:5","nodeType":"VariableDeclaration","scope":790,"src":"5132:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":784,"name":"uint256","nodeType":"ElementaryTypeName","src":"5132:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5097:49:5"},"returnParameters":{"id":789,"nodeType":"ParameterList","parameters":[{"constant":false,"id":788,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":790,"src":"5173:4:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":787,"name":"bool","nodeType":"ElementaryTypeName","src":"5173:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"5172:6:5"},"scope":819,"src":"5080:99:5","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"documentation":{"id":791,"nodeType":"StructuredDocumentation","src":"5185:599:5","text":" @dev Processes an attestation revocation and verifies if it can be revoked.\n @param attestation The existing attestation to be revoked.\n @param value An explicit ETH amount that was sent to the resolver. Please note that this value is verified in\n both revoke() and multiRevoke() callbacks EAS-only callbacks and that in case of multi attestations, it'll\n usually hold that msg.value != value, since msg.value aggregated the sent ETH amounts for all the attestations\n in the batch.\n @return Whether the attestation can be revoked."},"id":801,"implemented":false,"kind":"function","modifiers":[],"name":"onRevoke","nameLocation":"5798:8:5","nodeType":"FunctionDefinition","parameters":{"id":797,"nodeType":"ParameterList","parameters":[{"constant":false,"id":794,"mutability":"mutable","name":"attestation","nameLocation":"5828:11:5","nodeType":"VariableDeclaration","scope":801,"src":"5807:32:5","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_Attestation_$45_calldata_ptr","typeString":"struct Attestation"},"typeName":{"id":793,"nodeType":"UserDefinedTypeName","pathNode":{"id":792,"name":"Attestation","nameLocations":["5807:11:5"],"nodeType":"IdentifierPath","referencedDeclaration":45,"src":"5807:11:5"},"referencedDeclaration":45,"src":"5807:11:5","typeDescriptions":{"typeIdentifier":"t_struct$_Attestation_$45_storage_ptr","typeString":"struct Attestation"}},"visibility":"internal"},{"constant":false,"id":796,"mutability":"mutable","name":"value","nameLocation":"5849:5:5","nodeType":"VariableDeclaration","scope":801,"src":"5841:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":795,"name":"uint256","nodeType":"ElementaryTypeName","src":"5841:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5806:49:5"},"returnParameters":{"id":800,"nodeType":"ParameterList","parameters":[{"constant":false,"id":799,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":801,"src":"5882:4:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":798,"name":"bool","nodeType":"ElementaryTypeName","src":"5882:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"5881:6:5"},"scope":819,"src":"5789:99:5","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":817,"nodeType":"Block","src":"6010:95:5","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":811,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":805,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"6024:3:5","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":806,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6028:6:5","memberName":"sender","nodeType":"MemberAccess","src":"6024:10:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"id":809,"name":"_eas","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":536,"src":"6046:4:5","typeDescriptions":{"typeIdentifier":"t_contract$_IEAS_$346","typeString":"contract IEAS"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IEAS_$346","typeString":"contract IEAS"}],"id":808,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6038:7:5","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":807,"name":"address","nodeType":"ElementaryTypeName","src":"6038:7:5","typeDescriptions":{}}},"id":810,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6038:13:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6024:27:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":816,"nodeType":"IfStatement","src":"6020:79:5","trueBody":{"id":815,"nodeType":"Block","src":"6053:46:5","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":812,"name":"AccessDenied","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":529,"src":"6074:12:5","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":813,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6074:14:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":814,"nodeType":"RevertStatement","src":"6067:21:5"}]}}]},"documentation":{"id":802,"nodeType":"StructuredDocumentation","src":"5894:78:5","text":" @dev Ensures that only the EAS contract can make this call."},"id":818,"implemented":true,"kind":"function","modifiers":[],"name":"_onlyEAS","nameLocation":"5986:8:5","nodeType":"FunctionDefinition","parameters":{"id":803,"nodeType":"ParameterList","parameters":[],"src":"5994:2:5"},"returnParameters":{"id":804,"nodeType":"ParameterList","parameters":[],"src":"6010:0:5"},"scope":819,"src":"5977:128:5","stateMutability":"view","virtual":false,"visibility":"private"}],"scope":820,"src":"307:5800:5","usedErrors":[11,529,531,533]}],"src":"33:6075:5"},"id":5},"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol","exportedSymbols":{"AddressUpgradeable":[1475],"ContextUpgradeable":[1517],"Initializable":[1145],"OwnableUpgradeable":[951]},"id":952,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":821,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"102:23:6"},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol","file":"../utils/ContextUpgradeable.sol","id":822,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":952,"sourceUnit":1518,"src":"127:41:6","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"../proxy/utils/Initializable.sol","id":823,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":952,"sourceUnit":1146,"src":"169:42:6","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":825,"name":"Initializable","nameLocations":["748:13:6"],"nodeType":"IdentifierPath","referencedDeclaration":1145,"src":"748:13:6"},"id":826,"nodeType":"InheritanceSpecifier","src":"748:13:6"},{"baseName":{"id":827,"name":"ContextUpgradeable","nameLocations":["763:18:6"],"nodeType":"IdentifierPath","referencedDeclaration":1517,"src":"763:18:6"},"id":828,"nodeType":"InheritanceSpecifier","src":"763:18:6"}],"canonicalName":"OwnableUpgradeable","contractDependencies":[],"contractKind":"contract","documentation":{"id":824,"nodeType":"StructuredDocumentation","src":"213:494:6","text":" @dev Contract module which provides a basic access control mechanism, where\n there is an account (an owner) that can be granted exclusive access to\n specific functions.\n By default, the owner account will be the one that deploys the contract. This\n can later be changed with {transferOwnership}.\n This module is used through inheritance. It will make available the modifier\n `onlyOwner`, which can be applied to your functions to restrict their use to\n the owner."},"fullyImplemented":true,"id":951,"linearizedBaseContracts":[951,1517,1145],"name":"OwnableUpgradeable","nameLocation":"726:18:6","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":830,"mutability":"mutable","name":"_owner","nameLocation":"804:6:6","nodeType":"VariableDeclaration","scope":951,"src":"788:22:6","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":829,"name":"address","nodeType":"ElementaryTypeName","src":"788:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"private"},{"anonymous":false,"eventSelector":"8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0","id":836,"name":"OwnershipTransferred","nameLocation":"823:20:6","nodeType":"EventDefinition","parameters":{"id":835,"nodeType":"ParameterList","parameters":[{"constant":false,"id":832,"indexed":true,"mutability":"mutable","name":"previousOwner","nameLocation":"860:13:6","nodeType":"VariableDeclaration","scope":836,"src":"844:29:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":831,"name":"address","nodeType":"ElementaryTypeName","src":"844:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":834,"indexed":true,"mutability":"mutable","name":"newOwner","nameLocation":"891:8:6","nodeType":"VariableDeclaration","scope":836,"src":"875:24:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":833,"name":"address","nodeType":"ElementaryTypeName","src":"875:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"843:57:6"},"src":"817:84:6"},{"body":{"id":845,"nodeType":"Block","src":"1055:43:6","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":842,"name":"__Ownable_init_unchained","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":857,"src":"1065:24:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":843,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1065:26:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":844,"nodeType":"ExpressionStatement","src":"1065:26:6"}]},"documentation":{"id":837,"nodeType":"StructuredDocumentation","src":"907:91:6","text":" @dev Initializes the contract setting the deployer as the initial owner."},"id":846,"implemented":true,"kind":"function","modifiers":[{"id":840,"kind":"modifierInvocation","modifierName":{"id":839,"name":"onlyInitializing","nameLocations":["1038:16:6"],"nodeType":"IdentifierPath","referencedDeclaration":1090,"src":"1038:16:6"},"nodeType":"ModifierInvocation","src":"1038:16:6"}],"name":"__Ownable_init","nameLocation":"1012:14:6","nodeType":"FunctionDefinition","parameters":{"id":838,"nodeType":"ParameterList","parameters":[],"src":"1026:2:6"},"returnParameters":{"id":841,"nodeType":"ParameterList","parameters":[],"src":"1055:0:6"},"scope":951,"src":"1003:95:6","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":856,"nodeType":"Block","src":"1166:49:6","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":852,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1502,"src":"1195:10:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":853,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1195:12:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":851,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":945,"src":"1176:18:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":854,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1176:32:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":855,"nodeType":"ExpressionStatement","src":"1176:32:6"}]},"id":857,"implemented":true,"kind":"function","modifiers":[{"id":849,"kind":"modifierInvocation","modifierName":{"id":848,"name":"onlyInitializing","nameLocations":["1149:16:6"],"nodeType":"IdentifierPath","referencedDeclaration":1090,"src":"1149:16:6"},"nodeType":"ModifierInvocation","src":"1149:16:6"}],"name":"__Ownable_init_unchained","nameLocation":"1113:24:6","nodeType":"FunctionDefinition","parameters":{"id":847,"nodeType":"ParameterList","parameters":[],"src":"1137:2:6"},"returnParameters":{"id":850,"nodeType":"ParameterList","parameters":[],"src":"1166:0:6"},"scope":951,"src":"1104:111:6","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":864,"nodeType":"Block","src":"1324:41:6","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":860,"name":"_checkOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":888,"src":"1334:11:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$__$","typeString":"function () view"}},"id":861,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1334:13:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":862,"nodeType":"ExpressionStatement","src":"1334:13:6"},{"id":863,"nodeType":"PlaceholderStatement","src":"1357:1:6"}]},"documentation":{"id":858,"nodeType":"StructuredDocumentation","src":"1221:77:6","text":" @dev Throws if called by any account other than the owner."},"id":865,"name":"onlyOwner","nameLocation":"1312:9:6","nodeType":"ModifierDefinition","parameters":{"id":859,"nodeType":"ParameterList","parameters":[],"src":"1321:2:6"},"src":"1303:62:6","virtual":false,"visibility":"internal"},{"body":{"id":873,"nodeType":"Block","src":"1496:30:6","statements":[{"expression":{"id":871,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":830,"src":"1513:6:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":870,"id":872,"nodeType":"Return","src":"1506:13:6"}]},"documentation":{"id":866,"nodeType":"StructuredDocumentation","src":"1371:65:6","text":" @dev Returns the address of the current owner."},"functionSelector":"8da5cb5b","id":874,"implemented":true,"kind":"function","modifiers":[],"name":"owner","nameLocation":"1450:5:6","nodeType":"FunctionDefinition","parameters":{"id":867,"nodeType":"ParameterList","parameters":[],"src":"1455:2:6"},"returnParameters":{"id":870,"nodeType":"ParameterList","parameters":[{"constant":false,"id":869,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":874,"src":"1487:7:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":868,"name":"address","nodeType":"ElementaryTypeName","src":"1487:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1486:9:6"},"scope":951,"src":"1441:85:6","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":887,"nodeType":"Block","src":"1644:85:6","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":883,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":879,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":874,"src":"1662:5:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":880,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1662:7:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":881,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1502,"src":"1673:10:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":882,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1673:12:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1662:23:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572","id":884,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1687:34:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe","typeString":"literal_string \"Ownable: caller is not the owner\""},"value":"Ownable: caller is not the owner"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe","typeString":"literal_string \"Ownable: caller is not the owner\""}],"id":878,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1654:7:6","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":885,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1654:68:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":886,"nodeType":"ExpressionStatement","src":"1654:68:6"}]},"documentation":{"id":875,"nodeType":"StructuredDocumentation","src":"1532:62:6","text":" @dev Throws if the sender is not the owner."},"id":888,"implemented":true,"kind":"function","modifiers":[],"name":"_checkOwner","nameLocation":"1608:11:6","nodeType":"FunctionDefinition","parameters":{"id":876,"nodeType":"ParameterList","parameters":[],"src":"1619:2:6"},"returnParameters":{"id":877,"nodeType":"ParameterList","parameters":[],"src":"1644:0:6"},"scope":951,"src":"1599:130:6","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":901,"nodeType":"Block","src":"2118:47:6","statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":897,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2155:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":896,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2147:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":895,"name":"address","nodeType":"ElementaryTypeName","src":"2147:7:6","typeDescriptions":{}}},"id":898,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2147:10:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":894,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":945,"src":"2128:18:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":899,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2128:30:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":900,"nodeType":"ExpressionStatement","src":"2128:30:6"}]},"documentation":{"id":889,"nodeType":"StructuredDocumentation","src":"1735:324:6","text":" @dev Leaves the contract without owner. It will not be possible to call\n `onlyOwner` functions. Can only be called by the current owner.\n NOTE: Renouncing ownership will leave the contract without an owner,\n thereby disabling any functionality that is only available to the owner."},"functionSelector":"715018a6","id":902,"implemented":true,"kind":"function","modifiers":[{"id":892,"kind":"modifierInvocation","modifierName":{"id":891,"name":"onlyOwner","nameLocations":["2108:9:6"],"nodeType":"IdentifierPath","referencedDeclaration":865,"src":"2108:9:6"},"nodeType":"ModifierInvocation","src":"2108:9:6"}],"name":"renounceOwnership","nameLocation":"2073:17:6","nodeType":"FunctionDefinition","parameters":{"id":890,"nodeType":"ParameterList","parameters":[],"src":"2090:2:6"},"returnParameters":{"id":893,"nodeType":"ParameterList","parameters":[],"src":"2118:0:6"},"scope":951,"src":"2064:101:6","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":924,"nodeType":"Block","src":"2384:128:6","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":916,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":911,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":905,"src":"2402:8:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":914,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2422:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":913,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2414:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":912,"name":"address","nodeType":"ElementaryTypeName","src":"2414:7:6","typeDescriptions":{}}},"id":915,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2414:10:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2402:22:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373","id":917,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2426:40:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe","typeString":"literal_string \"Ownable: new owner is the zero address\""},"value":"Ownable: new owner is the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe","typeString":"literal_string \"Ownable: new owner is the zero address\""}],"id":910,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2394:7:6","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":918,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2394:73:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":919,"nodeType":"ExpressionStatement","src":"2394:73:6"},{"expression":{"arguments":[{"id":921,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":905,"src":"2496:8:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":920,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":945,"src":"2477:18:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":922,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2477:28:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":923,"nodeType":"ExpressionStatement","src":"2477:28:6"}]},"documentation":{"id":903,"nodeType":"StructuredDocumentation","src":"2171:138:6","text":" @dev Transfers ownership of the contract to a new account (`newOwner`).\n Can only be called by the current owner."},"functionSelector":"f2fde38b","id":925,"implemented":true,"kind":"function","modifiers":[{"id":908,"kind":"modifierInvocation","modifierName":{"id":907,"name":"onlyOwner","nameLocations":["2374:9:6"],"nodeType":"IdentifierPath","referencedDeclaration":865,"src":"2374:9:6"},"nodeType":"ModifierInvocation","src":"2374:9:6"}],"name":"transferOwnership","nameLocation":"2323:17:6","nodeType":"FunctionDefinition","parameters":{"id":906,"nodeType":"ParameterList","parameters":[{"constant":false,"id":905,"mutability":"mutable","name":"newOwner","nameLocation":"2349:8:6","nodeType":"VariableDeclaration","scope":925,"src":"2341:16:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":904,"name":"address","nodeType":"ElementaryTypeName","src":"2341:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2340:18:6"},"returnParameters":{"id":909,"nodeType":"ParameterList","parameters":[],"src":"2384:0:6"},"scope":951,"src":"2314:198:6","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":944,"nodeType":"Block","src":"2729:124:6","statements":[{"assignments":[932],"declarations":[{"constant":false,"id":932,"mutability":"mutable","name":"oldOwner","nameLocation":"2747:8:6","nodeType":"VariableDeclaration","scope":944,"src":"2739:16:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":931,"name":"address","nodeType":"ElementaryTypeName","src":"2739:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":934,"initialValue":{"id":933,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":830,"src":"2758:6:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"2739:25:6"},{"expression":{"id":937,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":935,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":830,"src":"2774:6:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":936,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":928,"src":"2783:8:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2774:17:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":938,"nodeType":"ExpressionStatement","src":"2774:17:6"},{"eventCall":{"arguments":[{"id":940,"name":"oldOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":932,"src":"2827:8:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":941,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":928,"src":"2837:8:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":939,"name":"OwnershipTransferred","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":836,"src":"2806:20:6","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":942,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2806:40:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":943,"nodeType":"EmitStatement","src":"2801:45:6"}]},"documentation":{"id":926,"nodeType":"StructuredDocumentation","src":"2518:143:6","text":" @dev Transfers ownership of the contract to a new account (`newOwner`).\n Internal function without access restriction."},"id":945,"implemented":true,"kind":"function","modifiers":[],"name":"_transferOwnership","nameLocation":"2675:18:6","nodeType":"FunctionDefinition","parameters":{"id":929,"nodeType":"ParameterList","parameters":[{"constant":false,"id":928,"mutability":"mutable","name":"newOwner","nameLocation":"2702:8:6","nodeType":"VariableDeclaration","scope":945,"src":"2694:16:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":927,"name":"address","nodeType":"ElementaryTypeName","src":"2694:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2693:18:6"},"returnParameters":{"id":930,"nodeType":"ParameterList","parameters":[],"src":"2729:0:6"},"scope":951,"src":"2666:187:6","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"constant":false,"documentation":{"id":946,"nodeType":"StructuredDocumentation","src":"2859:254:6","text":" @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"},"id":950,"mutability":"mutable","name":"__gap","nameLocation":"3138:5:6","nodeType":"VariableDeclaration","scope":951,"src":"3118:25:6","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$49_storage","typeString":"uint256[49]"},"typeName":{"baseType":{"id":947,"name":"uint256","nodeType":"ElementaryTypeName","src":"3118:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":949,"length":{"hexValue":"3439","id":948,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3126:2:6","typeDescriptions":{"typeIdentifier":"t_rational_49_by_1","typeString":"int_const 49"},"value":"49"},"nodeType":"ArrayTypeName","src":"3118:11:6","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$49_storage_ptr","typeString":"uint256[49]"}},"visibility":"private"}],"scope":952,"src":"708:2438:6","usedErrors":[]}],"src":"102:3045:6"},"id":6},"@openzeppelin/contracts-upgradeable/interfaces/IERC5267Upgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/interfaces/IERC5267Upgradeable.sol","exportedSymbols":{"IERC5267Upgradeable":[976]},"id":977,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":953,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"107:23:7"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC5267Upgradeable","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":976,"linearizedBaseContracts":[976],"name":"IERC5267Upgradeable","nameLocation":"142:19:7","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":954,"nodeType":"StructuredDocumentation","src":"168:84:7","text":" @dev MAY be emitted to signal that the domain could have changed."},"eventSelector":"0a6387c9ea3628b88a633bb4f3b151770f70085117a15f9bf3787cda53f13d31","id":956,"name":"EIP712DomainChanged","nameLocation":"263:19:7","nodeType":"EventDefinition","parameters":{"id":955,"nodeType":"ParameterList","parameters":[],"src":"282:2:7"},"src":"257:28:7"},{"documentation":{"id":957,"nodeType":"StructuredDocumentation","src":"291:140:7","text":" @dev returns the fields and values that describe the domain separator used by this contract for EIP-712\n signature."},"functionSelector":"84b0196e","id":975,"implemented":false,"kind":"function","modifiers":[],"name":"eip712Domain","nameLocation":"445:12:7","nodeType":"FunctionDefinition","parameters":{"id":958,"nodeType":"ParameterList","parameters":[],"src":"457:2:7"},"returnParameters":{"id":974,"nodeType":"ParameterList","parameters":[{"constant":false,"id":960,"mutability":"mutable","name":"fields","nameLocation":"527:6:7","nodeType":"VariableDeclaration","scope":975,"src":"520:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"},"typeName":{"id":959,"name":"bytes1","nodeType":"ElementaryTypeName","src":"520:6:7","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"visibility":"internal"},{"constant":false,"id":962,"mutability":"mutable","name":"name","nameLocation":"561:4:7","nodeType":"VariableDeclaration","scope":975,"src":"547:18:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":961,"name":"string","nodeType":"ElementaryTypeName","src":"547:6:7","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":964,"mutability":"mutable","name":"version","nameLocation":"593:7:7","nodeType":"VariableDeclaration","scope":975,"src":"579:21:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":963,"name":"string","nodeType":"ElementaryTypeName","src":"579:6:7","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":966,"mutability":"mutable","name":"chainId","nameLocation":"622:7:7","nodeType":"VariableDeclaration","scope":975,"src":"614:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":965,"name":"uint256","nodeType":"ElementaryTypeName","src":"614:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":968,"mutability":"mutable","name":"verifyingContract","nameLocation":"651:17:7","nodeType":"VariableDeclaration","scope":975,"src":"643:25:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":967,"name":"address","nodeType":"ElementaryTypeName","src":"643:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":970,"mutability":"mutable","name":"salt","nameLocation":"690:4:7","nodeType":"VariableDeclaration","scope":975,"src":"682:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":969,"name":"bytes32","nodeType":"ElementaryTypeName","src":"682:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":973,"mutability":"mutable","name":"extensions","nameLocation":"725:10:7","nodeType":"VariableDeclaration","scope":975,"src":"708:27:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":971,"name":"uint256","nodeType":"ElementaryTypeName","src":"708:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":972,"nodeType":"ArrayTypeName","src":"708:9:7","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"506:239:7"},"scope":976,"src":"436:310:7","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":977,"src":"132:616:7","usedErrors":[]}],"src":"107:642:7"},"id":7},"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","exportedSymbols":{"AddressUpgradeable":[1475],"Initializable":[1145]},"id":1146,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":978,"literals":["solidity","^","0.8",".2"],"nodeType":"PragmaDirective","src":"113:23:8"},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol","file":"../../utils/AddressUpgradeable.sol","id":979,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1146,"sourceUnit":1476,"src":"138:44:8","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[],"canonicalName":"Initializable","contractDependencies":[],"contractKind":"contract","documentation":{"id":980,"nodeType":"StructuredDocumentation","src":"184:2209:8","text":" @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n case an upgrade adds a module that needs to be initialized.\n For example:\n [.hljs-theme-light.nopadding]\n ```solidity\n contract MyToken is ERC20Upgradeable {\n     function initialize() initializer public {\n         __ERC20_init(\"MyToken\", \"MTK\");\n     }\n }\n contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n     function initializeV2() reinitializer(2) public {\n         __ERC20Permit_init(\"MyToken\");\n     }\n }\n ```\n TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n [CAUTION]\n ====\n Avoid leaving a contract uninitialized.\n An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n [.hljs-theme-light.nopadding]\n ```\n /// @custom:oz-upgrades-unsafe-allow constructor\n constructor() {\n     _disableInitializers();\n }\n ```\n ===="},"fullyImplemented":true,"id":1145,"linearizedBaseContracts":[1145],"name":"Initializable","nameLocation":"2412:13:8","nodeType":"ContractDefinition","nodes":[{"constant":false,"documentation":{"id":981,"nodeType":"StructuredDocumentation","src":"2432:109:8","text":" @dev Indicates that the contract has been initialized.\n @custom:oz-retyped-from bool"},"id":983,"mutability":"mutable","name":"_initialized","nameLocation":"2560:12:8","nodeType":"VariableDeclaration","scope":1145,"src":"2546:26:8","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":982,"name":"uint8","nodeType":"ElementaryTypeName","src":"2546:5:8","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"private"},{"constant":false,"documentation":{"id":984,"nodeType":"StructuredDocumentation","src":"2579:91:8","text":" @dev Indicates that the contract is in the process of being initialized."},"id":986,"mutability":"mutable","name":"_initializing","nameLocation":"2688:13:8","nodeType":"VariableDeclaration","scope":1145,"src":"2675:26:8","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":985,"name":"bool","nodeType":"ElementaryTypeName","src":"2675:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"private"},{"anonymous":false,"documentation":{"id":987,"nodeType":"StructuredDocumentation","src":"2708:90:8","text":" @dev Triggered when the contract has been initialized or reinitialized."},"eventSelector":"7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498","id":991,"name":"Initialized","nameLocation":"2809:11:8","nodeType":"EventDefinition","parameters":{"id":990,"nodeType":"ParameterList","parameters":[{"constant":false,"id":989,"indexed":false,"mutability":"mutable","name":"version","nameLocation":"2827:7:8","nodeType":"VariableDeclaration","scope":991,"src":"2821:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":988,"name":"uint8","nodeType":"ElementaryTypeName","src":"2821:5:8","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"2820:15:8"},"src":"2803:33:8"},{"body":{"id":1046,"nodeType":"Block","src":"3269:483:8","statements":[{"assignments":[995],"declarations":[{"constant":false,"id":995,"mutability":"mutable","name":"isTopLevelCall","nameLocation":"3284:14:8","nodeType":"VariableDeclaration","scope":1046,"src":"3279:19:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":994,"name":"bool","nodeType":"ElementaryTypeName","src":"3279:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":998,"initialValue":{"id":997,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"3301:14:8","subExpression":{"id":996,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":986,"src":"3302:13:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"VariableDeclarationStatement","src":"3279:36:8"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1019,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1004,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1000,"name":"isTopLevelCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":995,"src":"3347:14:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":1003,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1001,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":983,"src":"3365:12:8","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"31","id":1002,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3380:1:8","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3365:16:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3347:34:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":1005,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3346:36:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1017,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1013,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"3387:45:8","subExpression":{"arguments":[{"arguments":[{"id":1010,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"3426:4:8","typeDescriptions":{"typeIdentifier":"t_contract$_Initializable_$1145","typeString":"contract Initializable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Initializable_$1145","typeString":"contract Initializable"}],"id":1009,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3418:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1008,"name":"address","nodeType":"ElementaryTypeName","src":"3418:7:8","typeDescriptions":{}}},"id":1011,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3418:13:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":1006,"name":"AddressUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1475,"src":"3388:18:8","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_AddressUpgradeable_$1475_$","typeString":"type(library AddressUpgradeable)"}},"id":1007,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3407:10:8","memberName":"isContract","nodeType":"MemberAccess","referencedDeclaration":1163,"src":"3388:29:8","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":1012,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3388:44:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":1016,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1014,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":983,"src":"3436:12:8","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"31","id":1015,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3452:1:8","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3436:17:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3387:66:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":1018,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3386:68:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3346:108:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a6564","id":1020,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3468:48:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759","typeString":"literal_string \"Initializable: contract is already initialized\""},"value":"Initializable: contract is already initialized"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759","typeString":"literal_string \"Initializable: contract is already initialized\""}],"id":999,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3325:7:8","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1021,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3325:201:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1022,"nodeType":"ExpressionStatement","src":"3325:201:8"},{"expression":{"id":1025,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1023,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":983,"src":"3536:12:8","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"31","id":1024,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3551:1:8","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3536:16:8","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":1026,"nodeType":"ExpressionStatement","src":"3536:16:8"},{"condition":{"id":1027,"name":"isTopLevelCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":995,"src":"3566:14:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1033,"nodeType":"IfStatement","src":"3562:65:8","trueBody":{"id":1032,"nodeType":"Block","src":"3582:45:8","statements":[{"expression":{"id":1030,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1028,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":986,"src":"3596:13:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":1029,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3612:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"3596:20:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1031,"nodeType":"ExpressionStatement","src":"3596:20:8"}]}},{"id":1034,"nodeType":"PlaceholderStatement","src":"3636:1:8"},{"condition":{"id":1035,"name":"isTopLevelCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":995,"src":"3651:14:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1045,"nodeType":"IfStatement","src":"3647:99:8","trueBody":{"id":1044,"nodeType":"Block","src":"3667:79:8","statements":[{"expression":{"id":1038,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1036,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":986,"src":"3681:13:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":1037,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3697:5:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"3681:21:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1039,"nodeType":"ExpressionStatement","src":"3681:21:8"},{"eventCall":{"arguments":[{"hexValue":"31","id":1041,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3733:1:8","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":1040,"name":"Initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":991,"src":"3721:11:8","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint8_$returns$__$","typeString":"function (uint8)"}},"id":1042,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3721:14:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1043,"nodeType":"EmitStatement","src":"3716:19:8"}]}}]},"documentation":{"id":992,"nodeType":"StructuredDocumentation","src":"2842:399:8","text":" @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n `onlyInitializing` functions can be used to initialize parent contracts.\n Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n constructor.\n Emits an {Initialized} event."},"id":1047,"name":"initializer","nameLocation":"3255:11:8","nodeType":"ModifierDefinition","parameters":{"id":993,"nodeType":"ParameterList","parameters":[],"src":"3266:2:8"},"src":"3246:506:8","virtual":false,"visibility":"internal"},{"body":{"id":1079,"nodeType":"Block","src":"4863:255:8","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1058,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1054,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"4881:14:8","subExpression":{"id":1053,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":986,"src":"4882:13:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":1057,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1055,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":983,"src":"4899:12:8","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1056,"name":"version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1050,"src":"4914:7:8","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"4899:22:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"4881:40:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a6564","id":1059,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4923:48:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759","typeString":"literal_string \"Initializable: contract is already initialized\""},"value":"Initializable: contract is already initialized"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759","typeString":"literal_string \"Initializable: contract is already initialized\""}],"id":1052,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4873:7:8","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1060,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4873:99:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1061,"nodeType":"ExpressionStatement","src":"4873:99:8"},{"expression":{"id":1064,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1062,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":983,"src":"4982:12:8","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1063,"name":"version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1050,"src":"4997:7:8","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"4982:22:8","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":1065,"nodeType":"ExpressionStatement","src":"4982:22:8"},{"expression":{"id":1068,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1066,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":986,"src":"5014:13:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":1067,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"5030:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"5014:20:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1069,"nodeType":"ExpressionStatement","src":"5014:20:8"},{"id":1070,"nodeType":"PlaceholderStatement","src":"5044:1:8"},{"expression":{"id":1073,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1071,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":986,"src":"5055:13:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":1072,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"5071:5:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"5055:21:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1074,"nodeType":"ExpressionStatement","src":"5055:21:8"},{"eventCall":{"arguments":[{"id":1076,"name":"version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1050,"src":"5103:7:8","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":1075,"name":"Initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":991,"src":"5091:11:8","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint8_$returns$__$","typeString":"function (uint8)"}},"id":1077,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5091:20:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1078,"nodeType":"EmitStatement","src":"5086:25:8"}]},"documentation":{"id":1048,"nodeType":"StructuredDocumentation","src":"3758:1062:8","text":" @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n used to initialize parent contracts.\n A reinitializer may be used after the original initialization step. This is essential to configure modules that\n are added through upgrades and that require initialization.\n When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n cannot be nested. If one is invoked in the context of another, execution will revert.\n Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n a contract, executing them in the right order is up to the developer or operator.\n WARNING: setting the version to 255 will prevent any future reinitialization.\n Emits an {Initialized} event."},"id":1080,"name":"reinitializer","nameLocation":"4834:13:8","nodeType":"ModifierDefinition","parameters":{"id":1051,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1050,"mutability":"mutable","name":"version","nameLocation":"4854:7:8","nodeType":"VariableDeclaration","scope":1080,"src":"4848:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1049,"name":"uint8","nodeType":"ElementaryTypeName","src":"4848:5:8","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"4847:15:8"},"src":"4825:293:8","virtual":false,"visibility":"internal"},{"body":{"id":1089,"nodeType":"Block","src":"5356:97:8","statements":[{"expression":{"arguments":[{"id":1084,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":986,"src":"5374:13:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e697469616c697a61626c653a20636f6e7472616374206973206e6f7420696e697469616c697a696e67","id":1085,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5389:45:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b","typeString":"literal_string \"Initializable: contract is not initializing\""},"value":"Initializable: contract is not initializing"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b","typeString":"literal_string \"Initializable: contract is not initializing\""}],"id":1083,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5366:7:8","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1086,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5366:69:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1087,"nodeType":"ExpressionStatement","src":"5366:69:8"},{"id":1088,"nodeType":"PlaceholderStatement","src":"5445:1:8"}]},"documentation":{"id":1081,"nodeType":"StructuredDocumentation","src":"5124:199:8","text":" @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n {initializer} and {reinitializer} modifiers, directly or indirectly."},"id":1090,"name":"onlyInitializing","nameLocation":"5337:16:8","nodeType":"ModifierDefinition","parameters":{"id":1082,"nodeType":"ParameterList","parameters":[],"src":"5353:2:8"},"src":"5328:125:8","virtual":false,"visibility":"internal"},{"body":{"id":1125,"nodeType":"Block","src":"5988:231:8","statements":[{"expression":{"arguments":[{"id":1096,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"6006:14:8","subExpression":{"id":1095,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":986,"src":"6007:13:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e697469616c697a61626c653a20636f6e747261637420697320696e697469616c697a696e67","id":1097,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6022:41:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a","typeString":"literal_string \"Initializable: contract is initializing\""},"value":"Initializable: contract is initializing"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a","typeString":"literal_string \"Initializable: contract is initializing\""}],"id":1094,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5998:7:8","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1098,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5998:66:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1099,"nodeType":"ExpressionStatement","src":"5998:66:8"},{"condition":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":1106,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1100,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":983,"src":"6078:12:8","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"arguments":[{"id":1103,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6099:5:8","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":1102,"name":"uint8","nodeType":"ElementaryTypeName","src":"6099:5:8","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"}],"id":1101,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"6094:4:8","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":1104,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6094:11:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint8","typeString":"type(uint8)"}},"id":1105,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6106:3:8","memberName":"max","nodeType":"MemberAccess","src":"6094:15:8","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"6078:31:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1124,"nodeType":"IfStatement","src":"6074:139:8","trueBody":{"id":1123,"nodeType":"Block","src":"6111:102:8","statements":[{"expression":{"id":1113,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1107,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":983,"src":"6125:12:8","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"arguments":[{"id":1110,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6145:5:8","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":1109,"name":"uint8","nodeType":"ElementaryTypeName","src":"6145:5:8","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"}],"id":1108,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"6140:4:8","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":1111,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6140:11:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint8","typeString":"type(uint8)"}},"id":1112,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6152:3:8","memberName":"max","nodeType":"MemberAccess","src":"6140:15:8","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"6125:30:8","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":1114,"nodeType":"ExpressionStatement","src":"6125:30:8"},{"eventCall":{"arguments":[{"expression":{"arguments":[{"id":1118,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6191:5:8","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":1117,"name":"uint8","nodeType":"ElementaryTypeName","src":"6191:5:8","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"}],"id":1116,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"6186:4:8","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":1119,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6186:11:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint8","typeString":"type(uint8)"}},"id":1120,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6198:3:8","memberName":"max","nodeType":"MemberAccess","src":"6186:15:8","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":1115,"name":"Initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":991,"src":"6174:11:8","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint8_$returns$__$","typeString":"function (uint8)"}},"id":1121,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6174:28:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1122,"nodeType":"EmitStatement","src":"6169:33:8"}]}}]},"documentation":{"id":1091,"nodeType":"StructuredDocumentation","src":"5459:475:8","text":" @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n through proxies.\n Emits an {Initialized} event the first time it is successfully executed."},"id":1126,"implemented":true,"kind":"function","modifiers":[],"name":"_disableInitializers","nameLocation":"5948:20:8","nodeType":"FunctionDefinition","parameters":{"id":1092,"nodeType":"ParameterList","parameters":[],"src":"5968:2:8"},"returnParameters":{"id":1093,"nodeType":"ParameterList","parameters":[],"src":"5988:0:8"},"scope":1145,"src":"5939:280:8","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1134,"nodeType":"Block","src":"6393:36:8","statements":[{"expression":{"id":1132,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":983,"src":"6410:12:8","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"functionReturnParameters":1131,"id":1133,"nodeType":"Return","src":"6403:19:8"}]},"documentation":{"id":1127,"nodeType":"StructuredDocumentation","src":"6225:99:8","text":" @dev Returns the highest version that has been initialized. See {reinitializer}."},"id":1135,"implemented":true,"kind":"function","modifiers":[],"name":"_getInitializedVersion","nameLocation":"6338:22:8","nodeType":"FunctionDefinition","parameters":{"id":1128,"nodeType":"ParameterList","parameters":[],"src":"6360:2:8"},"returnParameters":{"id":1131,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1130,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1135,"src":"6386:5:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1129,"name":"uint8","nodeType":"ElementaryTypeName","src":"6386:5:8","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"6385:7:8"},"scope":1145,"src":"6329:100:8","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1143,"nodeType":"Block","src":"6601:37:8","statements":[{"expression":{"id":1141,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":986,"src":"6618:13:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1140,"id":1142,"nodeType":"Return","src":"6611:20:8"}]},"documentation":{"id":1136,"nodeType":"StructuredDocumentation","src":"6435:105:8","text":" @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}."},"id":1144,"implemented":true,"kind":"function","modifiers":[],"name":"_isInitializing","nameLocation":"6554:15:8","nodeType":"FunctionDefinition","parameters":{"id":1137,"nodeType":"ParameterList","parameters":[],"src":"6569:2:8"},"returnParameters":{"id":1140,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1139,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1144,"src":"6595:4:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1138,"name":"bool","nodeType":"ElementaryTypeName","src":"6595:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6594:6:8"},"scope":1145,"src":"6545:93:8","stateMutability":"view","virtual":false,"visibility":"internal"}],"scope":1146,"src":"2394:4246:8","usedErrors":[]}],"src":"113:6528:8"},"id":8},"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol","exportedSymbols":{"AddressUpgradeable":[1475]},"id":1476,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1147,"literals":["solidity","^","0.8",".1"],"nodeType":"PragmaDirective","src":"101:23:9"},{"abstract":false,"baseContracts":[],"canonicalName":"AddressUpgradeable","contractDependencies":[],"contractKind":"library","documentation":{"id":1148,"nodeType":"StructuredDocumentation","src":"126:67:9","text":" @dev Collection of functions related to the address type"},"fullyImplemented":true,"id":1475,"linearizedBaseContracts":[1475],"name":"AddressUpgradeable","nameLocation":"202:18:9","nodeType":"ContractDefinition","nodes":[{"body":{"id":1162,"nodeType":"Block","src":"1489:254:9","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1160,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":1156,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1151,"src":"1713:7:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1157,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1721:4:9","memberName":"code","nodeType":"MemberAccess","src":"1713:12:9","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1158,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1726:6:9","memberName":"length","nodeType":"MemberAccess","src":"1713:19:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1159,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1735:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1713:23:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1155,"id":1161,"nodeType":"Return","src":"1706:30:9"}]},"documentation":{"id":1149,"nodeType":"StructuredDocumentation","src":"227:1191:9","text":" @dev Returns true if `account` is a contract.\n [IMPORTANT]\n ====\n It is unsafe to assume that an address for which this function returns\n false is an externally-owned account (EOA) and not a contract.\n Among others, `isContract` will return false for the following\n types of addresses:\n  - an externally-owned account\n  - a contract in construction\n  - an address where a contract will be created\n  - an address where a contract lived, but was destroyed\n Furthermore, `isContract` will also return true if the target contract within\n the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n which only has an effect at the end of a transaction.\n ====\n [IMPORTANT]\n ====\n You shouldn't rely on `isContract` to protect against flash loan attacks!\n Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n constructor.\n ===="},"id":1163,"implemented":true,"kind":"function","modifiers":[],"name":"isContract","nameLocation":"1432:10:9","nodeType":"FunctionDefinition","parameters":{"id":1152,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1151,"mutability":"mutable","name":"account","nameLocation":"1451:7:9","nodeType":"VariableDeclaration","scope":1163,"src":"1443:15:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1150,"name":"address","nodeType":"ElementaryTypeName","src":"1443:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1442:17:9"},"returnParameters":{"id":1155,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1154,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1163,"src":"1483:4:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1153,"name":"bool","nodeType":"ElementaryTypeName","src":"1483:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1482:6:9"},"scope":1475,"src":"1423:320:9","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1196,"nodeType":"Block","src":"2729:241:9","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1178,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":1174,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2755:4:9","typeDescriptions":{"typeIdentifier":"t_contract$_AddressUpgradeable_$1475","typeString":"library AddressUpgradeable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_AddressUpgradeable_$1475","typeString":"library AddressUpgradeable"}],"id":1173,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2747:7:9","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1172,"name":"address","nodeType":"ElementaryTypeName","src":"2747:7:9","typeDescriptions":{}}},"id":1175,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2747:13:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1176,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2761:7:9","memberName":"balance","nodeType":"MemberAccess","src":"2747:21:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":1177,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1168,"src":"2772:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2747:31:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e6365","id":1179,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2780:31:9","typeDescriptions":{"typeIdentifier":"t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9","typeString":"literal_string \"Address: insufficient balance\""},"value":"Address: insufficient balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9","typeString":"literal_string \"Address: insufficient balance\""}],"id":1171,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2739:7:9","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1180,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2739:73:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1181,"nodeType":"ExpressionStatement","src":"2739:73:9"},{"assignments":[1183,null],"declarations":[{"constant":false,"id":1183,"mutability":"mutable","name":"success","nameLocation":"2829:7:9","nodeType":"VariableDeclaration","scope":1196,"src":"2824:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1182,"name":"bool","nodeType":"ElementaryTypeName","src":"2824:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},null],"id":1190,"initialValue":{"arguments":[{"hexValue":"","id":1188,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2872:2:9","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"id":1184,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1166,"src":"2842:9:9","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":1185,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2852:4:9","memberName":"call","nodeType":"MemberAccess","src":"2842:14:9","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":1187,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":1186,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1168,"src":"2864:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"2842:29:9","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":1189,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2842:33:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"2823:52:9"},{"expression":{"arguments":[{"id":1192,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1183,"src":"2893:7:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d61792068617665207265766572746564","id":1193,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2902:60:9","typeDescriptions":{"typeIdentifier":"t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae","typeString":"literal_string \"Address: unable to send value, recipient may have reverted\""},"value":"Address: unable to send value, recipient may have reverted"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae","typeString":"literal_string \"Address: unable to send value, recipient may have reverted\""}],"id":1191,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2885:7:9","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1194,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2885:78:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1195,"nodeType":"ExpressionStatement","src":"2885:78:9"}]},"documentation":{"id":1164,"nodeType":"StructuredDocumentation","src":"1749:904:9","text":" @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n `recipient`, forwarding all available gas and reverting on errors.\n https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n of certain opcodes, possibly making contracts go over the 2300 gas limit\n imposed by `transfer`, making them unable to receive funds via\n `transfer`. {sendValue} removes this limitation.\n https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n IMPORTANT: because control is transferred to `recipient`, care must be\n taken to not create reentrancy vulnerabilities. Consider using\n {ReentrancyGuard} or the\n https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern]."},"id":1197,"implemented":true,"kind":"function","modifiers":[],"name":"sendValue","nameLocation":"2667:9:9","nodeType":"FunctionDefinition","parameters":{"id":1169,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1166,"mutability":"mutable","name":"recipient","nameLocation":"2693:9:9","nodeType":"VariableDeclaration","scope":1197,"src":"2677:25:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":1165,"name":"address","nodeType":"ElementaryTypeName","src":"2677:15:9","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"},{"constant":false,"id":1168,"mutability":"mutable","name":"amount","nameLocation":"2712:6:9","nodeType":"VariableDeclaration","scope":1197,"src":"2704:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1167,"name":"uint256","nodeType":"ElementaryTypeName","src":"2704:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2676:43:9"},"returnParameters":{"id":1170,"nodeType":"ParameterList","parameters":[],"src":"2729:0:9"},"scope":1475,"src":"2658:312:9","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1214,"nodeType":"Block","src":"3801:96:9","statements":[{"expression":{"arguments":[{"id":1208,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1200,"src":"3840:6:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1209,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1202,"src":"3848:4:9","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":1210,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3854:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"416464726573733a206c6f772d6c6576656c2063616c6c206661696c6564","id":1211,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3857:32:9","typeDescriptions":{"typeIdentifier":"t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df","typeString":"literal_string \"Address: low-level call failed\""},"value":"Address: low-level call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df","typeString":"literal_string \"Address: low-level call failed\""}],"id":1207,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[1255,1299],"referencedDeclaration":1299,"src":"3818:21:9","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":1212,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3818:72:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1206,"id":1213,"nodeType":"Return","src":"3811:79:9"}]},"documentation":{"id":1198,"nodeType":"StructuredDocumentation","src":"2976:731:9","text":" @dev Performs a Solidity function call using a low level `call`. A\n plain `call` is an unsafe replacement for a function call: use this\n function instead.\n If `target` reverts with a revert reason, it is bubbled up by this\n function (like regular Solidity function calls).\n Returns the raw returned data. To convert to the expected return value,\n use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n Requirements:\n - `target` must be a contract.\n - calling `target` with `data` must not revert.\n _Available since v3.1._"},"id":1215,"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nameLocation":"3721:12:9","nodeType":"FunctionDefinition","parameters":{"id":1203,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1200,"mutability":"mutable","name":"target","nameLocation":"3742:6:9","nodeType":"VariableDeclaration","scope":1215,"src":"3734:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1199,"name":"address","nodeType":"ElementaryTypeName","src":"3734:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1202,"mutability":"mutable","name":"data","nameLocation":"3763:4:9","nodeType":"VariableDeclaration","scope":1215,"src":"3750:17:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1201,"name":"bytes","nodeType":"ElementaryTypeName","src":"3750:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3733:35:9"},"returnParameters":{"id":1206,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1205,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1215,"src":"3787:12:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1204,"name":"bytes","nodeType":"ElementaryTypeName","src":"3787:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3786:14:9"},"scope":1475,"src":"3712:185:9","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1234,"nodeType":"Block","src":"4266:76:9","statements":[{"expression":{"arguments":[{"id":1228,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1218,"src":"4305:6:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1229,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1220,"src":"4313:4:9","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":1230,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4319:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"id":1231,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1222,"src":"4322:12:9","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1227,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[1255,1299],"referencedDeclaration":1299,"src":"4283:21:9","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":1232,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4283:52:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1226,"id":1233,"nodeType":"Return","src":"4276:59:9"}]},"documentation":{"id":1216,"nodeType":"StructuredDocumentation","src":"3903:211:9","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"},"id":1235,"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nameLocation":"4128:12:9","nodeType":"FunctionDefinition","parameters":{"id":1223,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1218,"mutability":"mutable","name":"target","nameLocation":"4158:6:9","nodeType":"VariableDeclaration","scope":1235,"src":"4150:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1217,"name":"address","nodeType":"ElementaryTypeName","src":"4150:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1220,"mutability":"mutable","name":"data","nameLocation":"4187:4:9","nodeType":"VariableDeclaration","scope":1235,"src":"4174:17:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1219,"name":"bytes","nodeType":"ElementaryTypeName","src":"4174:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1222,"mutability":"mutable","name":"errorMessage","nameLocation":"4215:12:9","nodeType":"VariableDeclaration","scope":1235,"src":"4201:26:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1221,"name":"string","nodeType":"ElementaryTypeName","src":"4201:6:9","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"4140:93:9"},"returnParameters":{"id":1226,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1225,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1235,"src":"4252:12:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1224,"name":"bytes","nodeType":"ElementaryTypeName","src":"4252:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4251:14:9"},"scope":1475,"src":"4119:223:9","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1254,"nodeType":"Block","src":"4817:111:9","statements":[{"expression":{"arguments":[{"id":1248,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1238,"src":"4856:6:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1249,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1240,"src":"4864:4:9","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1250,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1242,"src":"4870:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564","id":1251,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4877:43:9","typeDescriptions":{"typeIdentifier":"t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc","typeString":"literal_string \"Address: low-level call with value failed\""},"value":"Address: low-level call with value failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc","typeString":"literal_string \"Address: low-level call with value failed\""}],"id":1247,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[1255,1299],"referencedDeclaration":1299,"src":"4834:21:9","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":1252,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4834:87:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1246,"id":1253,"nodeType":"Return","src":"4827:94:9"}]},"documentation":{"id":1236,"nodeType":"StructuredDocumentation","src":"4348:351:9","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but also transferring `value` wei to `target`.\n Requirements:\n - the calling contract must have an ETH balance of at least `value`.\n - the called Solidity function must be `payable`.\n _Available since v3.1._"},"id":1255,"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nameLocation":"4713:21:9","nodeType":"FunctionDefinition","parameters":{"id":1243,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1238,"mutability":"mutable","name":"target","nameLocation":"4743:6:9","nodeType":"VariableDeclaration","scope":1255,"src":"4735:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1237,"name":"address","nodeType":"ElementaryTypeName","src":"4735:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1240,"mutability":"mutable","name":"data","nameLocation":"4764:4:9","nodeType":"VariableDeclaration","scope":1255,"src":"4751:17:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1239,"name":"bytes","nodeType":"ElementaryTypeName","src":"4751:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1242,"mutability":"mutable","name":"value","nameLocation":"4778:5:9","nodeType":"VariableDeclaration","scope":1255,"src":"4770:13:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1241,"name":"uint256","nodeType":"ElementaryTypeName","src":"4770:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4734:50:9"},"returnParameters":{"id":1246,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1245,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1255,"src":"4803:12:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1244,"name":"bytes","nodeType":"ElementaryTypeName","src":"4803:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4802:14:9"},"scope":1475,"src":"4704:224:9","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1298,"nodeType":"Block","src":"5355:267:9","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1276,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":1272,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"5381:4:9","typeDescriptions":{"typeIdentifier":"t_contract$_AddressUpgradeable_$1475","typeString":"library AddressUpgradeable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_AddressUpgradeable_$1475","typeString":"library AddressUpgradeable"}],"id":1271,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5373:7:9","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1270,"name":"address","nodeType":"ElementaryTypeName","src":"5373:7:9","typeDescriptions":{}}},"id":1273,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5373:13:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1274,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5387:7:9","memberName":"balance","nodeType":"MemberAccess","src":"5373:21:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":1275,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1262,"src":"5398:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5373:30:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c","id":1277,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5405:40:9","typeDescriptions":{"typeIdentifier":"t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","typeString":"literal_string \"Address: insufficient balance for call\""},"value":"Address: insufficient balance for call"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","typeString":"literal_string \"Address: insufficient balance for call\""}],"id":1269,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5365:7:9","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1278,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5365:81:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1279,"nodeType":"ExpressionStatement","src":"5365:81:9"},{"assignments":[1281,1283],"declarations":[{"constant":false,"id":1281,"mutability":"mutable","name":"success","nameLocation":"5462:7:9","nodeType":"VariableDeclaration","scope":1298,"src":"5457:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1280,"name":"bool","nodeType":"ElementaryTypeName","src":"5457:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1283,"mutability":"mutable","name":"returndata","nameLocation":"5484:10:9","nodeType":"VariableDeclaration","scope":1298,"src":"5471:23:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1282,"name":"bytes","nodeType":"ElementaryTypeName","src":"5471:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1290,"initialValue":{"arguments":[{"id":1288,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1260,"src":"5524:4:9","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":1284,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1258,"src":"5498:6:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1285,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5505:4:9","memberName":"call","nodeType":"MemberAccess","src":"5498:11:9","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":1287,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":1286,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1262,"src":"5517:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"5498:25:9","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":1289,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5498:31:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"5456:73:9"},{"expression":{"arguments":[{"id":1292,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1258,"src":"5573:6:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1293,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1281,"src":"5581:7:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":1294,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1283,"src":"5590:10:9","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1295,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1264,"src":"5602:12:9","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1291,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1430,"src":"5546:26:9","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":1296,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5546:69:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1268,"id":1297,"nodeType":"Return","src":"5539:76:9"}]},"documentation":{"id":1256,"nodeType":"StructuredDocumentation","src":"4934:237:9","text":" @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n with `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"},"id":1299,"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nameLocation":"5185:21:9","nodeType":"FunctionDefinition","parameters":{"id":1265,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1258,"mutability":"mutable","name":"target","nameLocation":"5224:6:9","nodeType":"VariableDeclaration","scope":1299,"src":"5216:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1257,"name":"address","nodeType":"ElementaryTypeName","src":"5216:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1260,"mutability":"mutable","name":"data","nameLocation":"5253:4:9","nodeType":"VariableDeclaration","scope":1299,"src":"5240:17:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1259,"name":"bytes","nodeType":"ElementaryTypeName","src":"5240:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1262,"mutability":"mutable","name":"value","nameLocation":"5275:5:9","nodeType":"VariableDeclaration","scope":1299,"src":"5267:13:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1261,"name":"uint256","nodeType":"ElementaryTypeName","src":"5267:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1264,"mutability":"mutable","name":"errorMessage","nameLocation":"5304:12:9","nodeType":"VariableDeclaration","scope":1299,"src":"5290:26:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1263,"name":"string","nodeType":"ElementaryTypeName","src":"5290:6:9","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"5206:116:9"},"returnParameters":{"id":1268,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1267,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1299,"src":"5341:12:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1266,"name":"bytes","nodeType":"ElementaryTypeName","src":"5341:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5340:14:9"},"scope":1475,"src":"5176:446:9","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1315,"nodeType":"Block","src":"5899:97:9","statements":[{"expression":{"arguments":[{"id":1310,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1302,"src":"5935:6:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1311,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1304,"src":"5943:4:9","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"416464726573733a206c6f772d6c6576656c207374617469632063616c6c206661696c6564","id":1312,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5949:39:9","typeDescriptions":{"typeIdentifier":"t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0","typeString":"literal_string \"Address: low-level static call failed\""},"value":"Address: low-level static call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0","typeString":"literal_string \"Address: low-level static call failed\""}],"id":1309,"name":"functionStaticCall","nodeType":"Identifier","overloadedDeclarations":[1316,1345],"referencedDeclaration":1345,"src":"5916:18:9","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,string memory) view returns (bytes memory)"}},"id":1313,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5916:73:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1308,"id":1314,"nodeType":"Return","src":"5909:80:9"}]},"documentation":{"id":1300,"nodeType":"StructuredDocumentation","src":"5628:166:9","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"},"id":1316,"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nameLocation":"5808:18:9","nodeType":"FunctionDefinition","parameters":{"id":1305,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1302,"mutability":"mutable","name":"target","nameLocation":"5835:6:9","nodeType":"VariableDeclaration","scope":1316,"src":"5827:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1301,"name":"address","nodeType":"ElementaryTypeName","src":"5827:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1304,"mutability":"mutable","name":"data","nameLocation":"5856:4:9","nodeType":"VariableDeclaration","scope":1316,"src":"5843:17:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1303,"name":"bytes","nodeType":"ElementaryTypeName","src":"5843:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5826:35:9"},"returnParameters":{"id":1308,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1307,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1316,"src":"5885:12:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1306,"name":"bytes","nodeType":"ElementaryTypeName","src":"5885:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5884:14:9"},"scope":1475,"src":"5799:197:9","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1344,"nodeType":"Block","src":"6338:168:9","statements":[{"assignments":[1329,1331],"declarations":[{"constant":false,"id":1329,"mutability":"mutable","name":"success","nameLocation":"6354:7:9","nodeType":"VariableDeclaration","scope":1344,"src":"6349:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1328,"name":"bool","nodeType":"ElementaryTypeName","src":"6349:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1331,"mutability":"mutable","name":"returndata","nameLocation":"6376:10:9","nodeType":"VariableDeclaration","scope":1344,"src":"6363:23:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1330,"name":"bytes","nodeType":"ElementaryTypeName","src":"6363:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1336,"initialValue":{"arguments":[{"id":1334,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1321,"src":"6408:4:9","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":1332,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1319,"src":"6390:6:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1333,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6397:10:9","memberName":"staticcall","nodeType":"MemberAccess","src":"6390:17:9","typeDescriptions":{"typeIdentifier":"t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) view returns (bool,bytes memory)"}},"id":1335,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6390:23:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"6348:65:9"},{"expression":{"arguments":[{"id":1338,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1319,"src":"6457:6:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1339,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1329,"src":"6465:7:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":1340,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1331,"src":"6474:10:9","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1341,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1323,"src":"6486:12:9","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1337,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1430,"src":"6430:26:9","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":1342,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6430:69:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1327,"id":1343,"nodeType":"Return","src":"6423:76:9"}]},"documentation":{"id":1317,"nodeType":"StructuredDocumentation","src":"6002:173:9","text":" @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"},"id":1345,"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nameLocation":"6189:18:9","nodeType":"FunctionDefinition","parameters":{"id":1324,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1319,"mutability":"mutable","name":"target","nameLocation":"6225:6:9","nodeType":"VariableDeclaration","scope":1345,"src":"6217:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1318,"name":"address","nodeType":"ElementaryTypeName","src":"6217:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1321,"mutability":"mutable","name":"data","nameLocation":"6254:4:9","nodeType":"VariableDeclaration","scope":1345,"src":"6241:17:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1320,"name":"bytes","nodeType":"ElementaryTypeName","src":"6241:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1323,"mutability":"mutable","name":"errorMessage","nameLocation":"6282:12:9","nodeType":"VariableDeclaration","scope":1345,"src":"6268:26:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1322,"name":"string","nodeType":"ElementaryTypeName","src":"6268:6:9","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"6207:93:9"},"returnParameters":{"id":1327,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1326,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1345,"src":"6324:12:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1325,"name":"bytes","nodeType":"ElementaryTypeName","src":"6324:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6323:14:9"},"scope":1475,"src":"6180:326:9","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1361,"nodeType":"Block","src":"6782:101:9","statements":[{"expression":{"arguments":[{"id":1356,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1348,"src":"6820:6:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1357,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1350,"src":"6828:4:9","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564","id":1358,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6834:41:9","typeDescriptions":{"typeIdentifier":"t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398","typeString":"literal_string \"Address: low-level delegate call failed\""},"value":"Address: low-level delegate call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398","typeString":"literal_string \"Address: low-level delegate call failed\""}],"id":1355,"name":"functionDelegateCall","nodeType":"Identifier","overloadedDeclarations":[1362,1391],"referencedDeclaration":1391,"src":"6799:20:9","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,string memory) returns (bytes memory)"}},"id":1359,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6799:77:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1354,"id":1360,"nodeType":"Return","src":"6792:84:9"}]},"documentation":{"id":1346,"nodeType":"StructuredDocumentation","src":"6512:168:9","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"},"id":1362,"implemented":true,"kind":"function","modifiers":[],"name":"functionDelegateCall","nameLocation":"6694:20:9","nodeType":"FunctionDefinition","parameters":{"id":1351,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1348,"mutability":"mutable","name":"target","nameLocation":"6723:6:9","nodeType":"VariableDeclaration","scope":1362,"src":"6715:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1347,"name":"address","nodeType":"ElementaryTypeName","src":"6715:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1350,"mutability":"mutable","name":"data","nameLocation":"6744:4:9","nodeType":"VariableDeclaration","scope":1362,"src":"6731:17:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1349,"name":"bytes","nodeType":"ElementaryTypeName","src":"6731:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6714:35:9"},"returnParameters":{"id":1354,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1353,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1362,"src":"6768:12:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1352,"name":"bytes","nodeType":"ElementaryTypeName","src":"6768:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6767:14:9"},"scope":1475,"src":"6685:198:9","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1390,"nodeType":"Block","src":"7224:170:9","statements":[{"assignments":[1375,1377],"declarations":[{"constant":false,"id":1375,"mutability":"mutable","name":"success","nameLocation":"7240:7:9","nodeType":"VariableDeclaration","scope":1390,"src":"7235:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1374,"name":"bool","nodeType":"ElementaryTypeName","src":"7235:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1377,"mutability":"mutable","name":"returndata","nameLocation":"7262:10:9","nodeType":"VariableDeclaration","scope":1390,"src":"7249:23:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1376,"name":"bytes","nodeType":"ElementaryTypeName","src":"7249:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1382,"initialValue":{"arguments":[{"id":1380,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1367,"src":"7296:4:9","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":1378,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1365,"src":"7276:6:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1379,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7283:12:9","memberName":"delegatecall","nodeType":"MemberAccess","src":"7276:19:9","typeDescriptions":{"typeIdentifier":"t_function_baredelegatecall_nonpayable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) returns (bool,bytes memory)"}},"id":1381,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7276:25:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"7234:67:9"},{"expression":{"arguments":[{"id":1384,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1365,"src":"7345:6:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1385,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1375,"src":"7353:7:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":1386,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1377,"src":"7362:10:9","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1387,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1369,"src":"7374:12:9","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1383,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1430,"src":"7318:26:9","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":1388,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7318:69:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1373,"id":1389,"nodeType":"Return","src":"7311:76:9"}]},"documentation":{"id":1363,"nodeType":"StructuredDocumentation","src":"6889:175:9","text":" @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"},"id":1391,"implemented":true,"kind":"function","modifiers":[],"name":"functionDelegateCall","nameLocation":"7078:20:9","nodeType":"FunctionDefinition","parameters":{"id":1370,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1365,"mutability":"mutable","name":"target","nameLocation":"7116:6:9","nodeType":"VariableDeclaration","scope":1391,"src":"7108:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1364,"name":"address","nodeType":"ElementaryTypeName","src":"7108:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1367,"mutability":"mutable","name":"data","nameLocation":"7145:4:9","nodeType":"VariableDeclaration","scope":1391,"src":"7132:17:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1366,"name":"bytes","nodeType":"ElementaryTypeName","src":"7132:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1369,"mutability":"mutable","name":"errorMessage","nameLocation":"7173:12:9","nodeType":"VariableDeclaration","scope":1391,"src":"7159:26:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1368,"name":"string","nodeType":"ElementaryTypeName","src":"7159:6:9","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"7098:93:9"},"returnParameters":{"id":1373,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1372,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1391,"src":"7210:12:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1371,"name":"bytes","nodeType":"ElementaryTypeName","src":"7210:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7209:14:9"},"scope":1475,"src":"7069:325:9","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1429,"nodeType":"Block","src":"7876:434:9","statements":[{"condition":{"id":1405,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1396,"src":"7890:7:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1427,"nodeType":"Block","src":"8246:58:9","statements":[{"expression":{"arguments":[{"id":1423,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1398,"src":"8268:10:9","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1424,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1400,"src":"8280:12:9","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1422,"name":"_revert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1474,"src":"8260:7:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (bytes memory,string memory) pure"}},"id":1425,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8260:33:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1426,"nodeType":"ExpressionStatement","src":"8260:33:9"}]},"id":1428,"nodeType":"IfStatement","src":"7886:418:9","trueBody":{"id":1421,"nodeType":"Block","src":"7899:341:9","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1409,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1406,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1398,"src":"7917:10:9","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1407,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7928:6:9","memberName":"length","nodeType":"MemberAccess","src":"7917:17:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1408,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7938:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"7917:22:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1418,"nodeType":"IfStatement","src":"7913:286:9","trueBody":{"id":1417,"nodeType":"Block","src":"7941:258:9","statements":[{"expression":{"arguments":[{"arguments":[{"id":1412,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1394,"src":"8143:6:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1411,"name":"isContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1163,"src":"8132:10:9","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":1413,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8132:18:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374","id":1414,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8152:31:9","typeDescriptions":{"typeIdentifier":"t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","typeString":"literal_string \"Address: call to non-contract\""},"value":"Address: call to non-contract"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","typeString":"literal_string \"Address: call to non-contract\""}],"id":1410,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"8124:7:9","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1415,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8124:60:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1416,"nodeType":"ExpressionStatement","src":"8124:60:9"}]}},{"expression":{"id":1419,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1398,"src":"8219:10:9","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1404,"id":1420,"nodeType":"Return","src":"8212:17:9"}]}}]},"documentation":{"id":1392,"nodeType":"StructuredDocumentation","src":"7400:277:9","text":" @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n _Available since v4.8._"},"id":1430,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCallResultFromTarget","nameLocation":"7691:26:9","nodeType":"FunctionDefinition","parameters":{"id":1401,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1394,"mutability":"mutable","name":"target","nameLocation":"7735:6:9","nodeType":"VariableDeclaration","scope":1430,"src":"7727:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1393,"name":"address","nodeType":"ElementaryTypeName","src":"7727:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1396,"mutability":"mutable","name":"success","nameLocation":"7756:7:9","nodeType":"VariableDeclaration","scope":1430,"src":"7751:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1395,"name":"bool","nodeType":"ElementaryTypeName","src":"7751:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1398,"mutability":"mutable","name":"returndata","nameLocation":"7786:10:9","nodeType":"VariableDeclaration","scope":1430,"src":"7773:23:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1397,"name":"bytes","nodeType":"ElementaryTypeName","src":"7773:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1400,"mutability":"mutable","name":"errorMessage","nameLocation":"7820:12:9","nodeType":"VariableDeclaration","scope":1430,"src":"7806:26:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1399,"name":"string","nodeType":"ElementaryTypeName","src":"7806:6:9","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"7717:121:9"},"returnParameters":{"id":1404,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1403,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1430,"src":"7862:12:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1402,"name":"bytes","nodeType":"ElementaryTypeName","src":"7862:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7861:14:9"},"scope":1475,"src":"7682:628:9","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1453,"nodeType":"Block","src":"8691:135:9","statements":[{"condition":{"id":1442,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1433,"src":"8705:7:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1451,"nodeType":"Block","src":"8762:58:9","statements":[{"expression":{"arguments":[{"id":1447,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1435,"src":"8784:10:9","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1448,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1437,"src":"8796:12:9","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1446,"name":"_revert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1474,"src":"8776:7:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (bytes memory,string memory) pure"}},"id":1449,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8776:33:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1450,"nodeType":"ExpressionStatement","src":"8776:33:9"}]},"id":1452,"nodeType":"IfStatement","src":"8701:119:9","trueBody":{"id":1445,"nodeType":"Block","src":"8714:42:9","statements":[{"expression":{"id":1443,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1435,"src":"8735:10:9","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1441,"id":1444,"nodeType":"Return","src":"8728:17:9"}]}}]},"documentation":{"id":1431,"nodeType":"StructuredDocumentation","src":"8316:210:9","text":" @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n revert reason or using the provided one.\n _Available since v4.3._"},"id":1454,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCallResult","nameLocation":"8540:16:9","nodeType":"FunctionDefinition","parameters":{"id":1438,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1433,"mutability":"mutable","name":"success","nameLocation":"8571:7:9","nodeType":"VariableDeclaration","scope":1454,"src":"8566:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1432,"name":"bool","nodeType":"ElementaryTypeName","src":"8566:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1435,"mutability":"mutable","name":"returndata","nameLocation":"8601:10:9","nodeType":"VariableDeclaration","scope":1454,"src":"8588:23:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1434,"name":"bytes","nodeType":"ElementaryTypeName","src":"8588:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1437,"mutability":"mutable","name":"errorMessage","nameLocation":"8635:12:9","nodeType":"VariableDeclaration","scope":1454,"src":"8621:26:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1436,"name":"string","nodeType":"ElementaryTypeName","src":"8621:6:9","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"8556:97:9"},"returnParameters":{"id":1441,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1440,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1454,"src":"8677:12:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1439,"name":"bytes","nodeType":"ElementaryTypeName","src":"8677:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"8676:14:9"},"scope":1475,"src":"8531:295:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1473,"nodeType":"Block","src":"8915:457:9","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1464,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1461,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1456,"src":"8991:10:9","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1462,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9002:6:9","memberName":"length","nodeType":"MemberAccess","src":"8991:17:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1463,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9011:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8991:21:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1471,"nodeType":"Block","src":"9321:45:9","statements":[{"expression":{"arguments":[{"id":1468,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1458,"src":"9342:12:9","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1467,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"9335:6:9","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":1469,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9335:20:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1470,"nodeType":"ExpressionStatement","src":"9335:20:9"}]},"id":1472,"nodeType":"IfStatement","src":"8987:379:9","trueBody":{"id":1466,"nodeType":"Block","src":"9014:301:9","statements":[{"AST":{"nodeType":"YulBlock","src":"9172:133:9","statements":[{"nodeType":"YulVariableDeclaration","src":"9190:40:9","value":{"arguments":[{"name":"returndata","nodeType":"YulIdentifier","src":"9219:10:9"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"9213:5:9"},"nodeType":"YulFunctionCall","src":"9213:17:9"},"variables":[{"name":"returndata_size","nodeType":"YulTypedName","src":"9194:15:9","type":""}]},{"expression":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9258:2:9","type":"","value":"32"},{"name":"returndata","nodeType":"YulIdentifier","src":"9262:10:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9254:3:9"},"nodeType":"YulFunctionCall","src":"9254:19:9"},{"name":"returndata_size","nodeType":"YulIdentifier","src":"9275:15:9"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9247:6:9"},"nodeType":"YulFunctionCall","src":"9247:44:9"},"nodeType":"YulExpressionStatement","src":"9247:44:9"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":1456,"isOffset":false,"isSlot":false,"src":"9219:10:9","valueSize":1},{"declaration":1456,"isOffset":false,"isSlot":false,"src":"9262:10:9","valueSize":1}],"id":1465,"nodeType":"InlineAssembly","src":"9163:142:9"}]}}]},"id":1474,"implemented":true,"kind":"function","modifiers":[],"name":"_revert","nameLocation":"8841:7:9","nodeType":"FunctionDefinition","parameters":{"id":1459,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1456,"mutability":"mutable","name":"returndata","nameLocation":"8862:10:9","nodeType":"VariableDeclaration","scope":1474,"src":"8849:23:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1455,"name":"bytes","nodeType":"ElementaryTypeName","src":"8849:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1458,"mutability":"mutable","name":"errorMessage","nameLocation":"8888:12:9","nodeType":"VariableDeclaration","scope":1474,"src":"8874:26:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1457,"name":"string","nodeType":"ElementaryTypeName","src":"8874:6:9","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"8848:53:9"},"returnParameters":{"id":1460,"nodeType":"ParameterList","parameters":[],"src":"8915:0:9"},"scope":1475,"src":"8832:540:9","stateMutability":"pure","virtual":false,"visibility":"private"}],"scope":1476,"src":"194:9180:9","usedErrors":[]}],"src":"101:9274:9"},"id":9},"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol","exportedSymbols":{"AddressUpgradeable":[1475],"ContextUpgradeable":[1517],"Initializable":[1145]},"id":1518,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1477,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"86:23:10"},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"../proxy/utils/Initializable.sol","id":1478,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1518,"sourceUnit":1146,"src":"110:42:10","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":1480,"name":"Initializable","nameLocations":["691:13:10"],"nodeType":"IdentifierPath","referencedDeclaration":1145,"src":"691:13:10"},"id":1481,"nodeType":"InheritanceSpecifier","src":"691:13:10"}],"canonicalName":"ContextUpgradeable","contractDependencies":[],"contractKind":"contract","documentation":{"id":1479,"nodeType":"StructuredDocumentation","src":"154:496:10","text":" @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."},"fullyImplemented":true,"id":1517,"linearizedBaseContracts":[1517,1145],"name":"ContextUpgradeable","nameLocation":"669:18:10","nodeType":"ContractDefinition","nodes":[{"body":{"id":1486,"nodeType":"Block","src":"763:7:10","statements":[]},"id":1487,"implemented":true,"kind":"function","modifiers":[{"id":1484,"kind":"modifierInvocation","modifierName":{"id":1483,"name":"onlyInitializing","nameLocations":["746:16:10"],"nodeType":"IdentifierPath","referencedDeclaration":1090,"src":"746:16:10"},"nodeType":"ModifierInvocation","src":"746:16:10"}],"name":"__Context_init","nameLocation":"720:14:10","nodeType":"FunctionDefinition","parameters":{"id":1482,"nodeType":"ParameterList","parameters":[],"src":"734:2:10"},"returnParameters":{"id":1485,"nodeType":"ParameterList","parameters":[],"src":"763:0:10"},"scope":1517,"src":"711:59:10","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1492,"nodeType":"Block","src":"838:7:10","statements":[]},"id":1493,"implemented":true,"kind":"function","modifiers":[{"id":1490,"kind":"modifierInvocation","modifierName":{"id":1489,"name":"onlyInitializing","nameLocations":["821:16:10"],"nodeType":"IdentifierPath","referencedDeclaration":1090,"src":"821:16:10"},"nodeType":"ModifierInvocation","src":"821:16:10"}],"name":"__Context_init_unchained","nameLocation":"785:24:10","nodeType":"FunctionDefinition","parameters":{"id":1488,"nodeType":"ParameterList","parameters":[],"src":"809:2:10"},"returnParameters":{"id":1491,"nodeType":"ParameterList","parameters":[],"src":"838:0:10"},"scope":1517,"src":"776:69:10","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1501,"nodeType":"Block","src":"912:34:10","statements":[{"expression":{"expression":{"id":1498,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"929:3:10","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1499,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"933:6:10","memberName":"sender","nodeType":"MemberAccess","src":"929:10:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":1497,"id":1500,"nodeType":"Return","src":"922:17:10"}]},"id":1502,"implemented":true,"kind":"function","modifiers":[],"name":"_msgSender","nameLocation":"859:10:10","nodeType":"FunctionDefinition","parameters":{"id":1494,"nodeType":"ParameterList","parameters":[],"src":"869:2:10"},"returnParameters":{"id":1497,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1496,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1502,"src":"903:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1495,"name":"address","nodeType":"ElementaryTypeName","src":"903:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"902:9:10"},"scope":1517,"src":"850:96:10","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":1510,"nodeType":"Block","src":"1019:32:10","statements":[{"expression":{"expression":{"id":1507,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1036:3:10","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1508,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1040:4:10","memberName":"data","nodeType":"MemberAccess","src":"1036:8:10","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":1506,"id":1509,"nodeType":"Return","src":"1029:15:10"}]},"id":1511,"implemented":true,"kind":"function","modifiers":[],"name":"_msgData","nameLocation":"961:8:10","nodeType":"FunctionDefinition","parameters":{"id":1503,"nodeType":"ParameterList","parameters":[],"src":"969:2:10"},"returnParameters":{"id":1506,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1505,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1511,"src":"1003:14:10","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1504,"name":"bytes","nodeType":"ElementaryTypeName","src":"1003:5:10","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1002:16:10"},"scope":1517,"src":"952:99:10","stateMutability":"view","virtual":true,"visibility":"internal"},{"constant":false,"documentation":{"id":1512,"nodeType":"StructuredDocumentation","src":"1057:254:10","text":" @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"},"id":1516,"mutability":"mutable","name":"__gap","nameLocation":"1336:5:10","nodeType":"VariableDeclaration","scope":1517,"src":"1316:25:10","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$50_storage","typeString":"uint256[50]"},"typeName":{"baseType":{"id":1513,"name":"uint256","nodeType":"ElementaryTypeName","src":"1316:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1515,"length":{"hexValue":"3530","id":1514,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1324:2:10","typeDescriptions":{"typeIdentifier":"t_rational_50_by_1","typeString":"int_const 50"},"value":"50"},"nodeType":"ArrayTypeName","src":"1316:11:10","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$50_storage_ptr","typeString":"uint256[50]"}},"visibility":"private"}],"scope":1518,"src":"651:693:10","usedErrors":[]}],"src":"86:1259:10"},"id":10},"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol","exportedSymbols":{"MathUpgradeable":[3262],"SignedMathUpgradeable":[3367],"StringsUpgradeable":[1746]},"id":1747,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1519,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"101:23:11"},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol","file":"./math/MathUpgradeable.sol","id":1520,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1747,"sourceUnit":3263,"src":"126:36:11","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol","file":"./math/SignedMathUpgradeable.sol","id":1521,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1747,"sourceUnit":3368,"src":"163:42:11","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"StringsUpgradeable","contractDependencies":[],"contractKind":"library","documentation":{"id":1522,"nodeType":"StructuredDocumentation","src":"207:34:11","text":" @dev String operations."},"fullyImplemented":true,"id":1746,"linearizedBaseContracts":[1746],"name":"StringsUpgradeable","nameLocation":"250:18:11","nodeType":"ContractDefinition","nodes":[{"constant":true,"id":1525,"mutability":"constant","name":"_SYMBOLS","nameLocation":"300:8:11","nodeType":"VariableDeclaration","scope":1746,"src":"275:54:11","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"},"typeName":{"id":1523,"name":"bytes16","nodeType":"ElementaryTypeName","src":"275:7:11","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"}},"value":{"hexValue":"30313233343536373839616263646566","id":1524,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"311:18:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_cb29997ed99ead0db59ce4d12b7d3723198c827273e5796737c926d78019c39f","typeString":"literal_string \"0123456789abcdef\""},"value":"0123456789abcdef"},"visibility":"private"},{"constant":true,"id":1528,"mutability":"constant","name":"_ADDRESS_LENGTH","nameLocation":"358:15:11","nodeType":"VariableDeclaration","scope":1746,"src":"335:43:11","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1526,"name":"uint8","nodeType":"ElementaryTypeName","src":"335:5:11","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"value":{"hexValue":"3230","id":1527,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"376:2:11","typeDescriptions":{"typeIdentifier":"t_rational_20_by_1","typeString":"int_const 20"},"value":"20"},"visibility":"private"},{"body":{"id":1575,"nodeType":"Block","src":"551:636:11","statements":[{"id":1574,"nodeType":"UncheckedBlock","src":"561:620:11","statements":[{"assignments":[1537],"declarations":[{"constant":false,"id":1537,"mutability":"mutable","name":"length","nameLocation":"593:6:11","nodeType":"VariableDeclaration","scope":1574,"src":"585:14:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1536,"name":"uint256","nodeType":"ElementaryTypeName","src":"585:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1544,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1543,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1540,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1531,"src":"624:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1538,"name":"MathUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3262,"src":"602:15:11","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_MathUpgradeable_$3262_$","typeString":"type(library MathUpgradeable)"}},"id":1539,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"618:5:11","memberName":"log10","nodeType":"MemberAccess","referencedDeclaration":3099,"src":"602:21:11","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":1541,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"602:28:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":1542,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"633:1:11","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"602:32:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"585:49:11"},{"assignments":[1546],"declarations":[{"constant":false,"id":1546,"mutability":"mutable","name":"buffer","nameLocation":"662:6:11","nodeType":"VariableDeclaration","scope":1574,"src":"648:20:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1545,"name":"string","nodeType":"ElementaryTypeName","src":"648:6:11","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"id":1551,"initialValue":{"arguments":[{"id":1549,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1537,"src":"682:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1548,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"671:10:11","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"},"typeName":{"id":1547,"name":"string","nodeType":"ElementaryTypeName","src":"675:6:11","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}}},"id":1550,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"671:18:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"nodeType":"VariableDeclarationStatement","src":"648:41:11"},{"assignments":[1553],"declarations":[{"constant":false,"id":1553,"mutability":"mutable","name":"ptr","nameLocation":"711:3:11","nodeType":"VariableDeclaration","scope":1574,"src":"703:11:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1552,"name":"uint256","nodeType":"ElementaryTypeName","src":"703:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1554,"nodeType":"VariableDeclarationStatement","src":"703:11:11"},{"AST":{"nodeType":"YulBlock","src":"784:67:11","statements":[{"nodeType":"YulAssignment","src":"802:35:11","value":{"arguments":[{"name":"buffer","nodeType":"YulIdentifier","src":"813:6:11"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"825:2:11","type":"","value":"32"},{"name":"length","nodeType":"YulIdentifier","src":"829:6:11"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"821:3:11"},"nodeType":"YulFunctionCall","src":"821:15:11"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"809:3:11"},"nodeType":"YulFunctionCall","src":"809:28:11"},"variableNames":[{"name":"ptr","nodeType":"YulIdentifier","src":"802:3:11"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":1546,"isOffset":false,"isSlot":false,"src":"813:6:11","valueSize":1},{"declaration":1537,"isOffset":false,"isSlot":false,"src":"829:6:11","valueSize":1},{"declaration":1553,"isOffset":false,"isSlot":false,"src":"802:3:11","valueSize":1}],"id":1555,"nodeType":"InlineAssembly","src":"775:76:11"},{"body":{"id":1570,"nodeType":"Block","src":"877:267:11","statements":[{"expression":{"id":1558,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":false,"src":"895:5:11","subExpression":{"id":1557,"name":"ptr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1553,"src":"895:3:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1559,"nodeType":"ExpressionStatement","src":"895:5:11"},{"AST":{"nodeType":"YulBlock","src":"978:84:11","statements":[{"expression":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"1008:3:11"},{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1022:5:11"},{"kind":"number","nodeType":"YulLiteral","src":"1029:2:11","type":"","value":"10"}],"functionName":{"name":"mod","nodeType":"YulIdentifier","src":"1018:3:11"},"nodeType":"YulFunctionCall","src":"1018:14:11"},{"name":"_SYMBOLS","nodeType":"YulIdentifier","src":"1034:8:11"}],"functionName":{"name":"byte","nodeType":"YulIdentifier","src":"1013:4:11"},"nodeType":"YulFunctionCall","src":"1013:30:11"}],"functionName":{"name":"mstore8","nodeType":"YulIdentifier","src":"1000:7:11"},"nodeType":"YulFunctionCall","src":"1000:44:11"},"nodeType":"YulExpressionStatement","src":"1000:44:11"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":1525,"isOffset":false,"isSlot":false,"src":"1034:8:11","valueSize":1},{"declaration":1553,"isOffset":false,"isSlot":false,"src":"1008:3:11","valueSize":1},{"declaration":1531,"isOffset":false,"isSlot":false,"src":"1022:5:11","valueSize":1}],"id":1560,"nodeType":"InlineAssembly","src":"969:93:11"},{"expression":{"id":1563,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1561,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1531,"src":"1079:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"hexValue":"3130","id":1562,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1088:2:11","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"src":"1079:11:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1564,"nodeType":"ExpressionStatement","src":"1079:11:11"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1567,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1565,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1531,"src":"1112:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1566,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1121:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1112:10:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1569,"nodeType":"IfStatement","src":"1108:21:11","trueBody":{"id":1568,"nodeType":"Break","src":"1124:5:11"}}]},"condition":{"hexValue":"74727565","id":1556,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"871:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"id":1571,"nodeType":"WhileStatement","src":"864:280:11"},{"expression":{"id":1572,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1546,"src":"1164:6:11","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1535,"id":1573,"nodeType":"Return","src":"1157:13:11"}]}]},"documentation":{"id":1529,"nodeType":"StructuredDocumentation","src":"385:90:11","text":" @dev Converts a `uint256` to its ASCII `string` decimal representation."},"id":1576,"implemented":true,"kind":"function","modifiers":[],"name":"toString","nameLocation":"489:8:11","nodeType":"FunctionDefinition","parameters":{"id":1532,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1531,"mutability":"mutable","name":"value","nameLocation":"506:5:11","nodeType":"VariableDeclaration","scope":1576,"src":"498:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1530,"name":"uint256","nodeType":"ElementaryTypeName","src":"498:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"497:15:11"},"returnParameters":{"id":1535,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1534,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1576,"src":"536:13:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1533,"name":"string","nodeType":"ElementaryTypeName","src":"536:6:11","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"535:15:11"},"scope":1746,"src":"480:707:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1603,"nodeType":"Block","src":"1357:114:11","statements":[{"expression":{"arguments":[{"arguments":[{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":1590,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1588,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1579,"src":"1398:5:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"30","id":1589,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1406:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1398:9:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"","id":1592,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1416:2:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""},"id":1593,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"1398:20:11","trueExpression":{"hexValue":"2d","id":1591,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1410:3:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_d3b8281179950f98149eefdb158d0e1acb56f56e8e343aa9fefafa7e36959561","typeString":"literal_string \"-\""},"value":"-"},"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"arguments":[{"arguments":[{"id":1597,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1579,"src":"1455:5:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"expression":{"id":1595,"name":"SignedMathUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3367,"src":"1429:21:11","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SignedMathUpgradeable_$3367_$","typeString":"type(library SignedMathUpgradeable)"}},"id":1596,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1451:3:11","memberName":"abs","nodeType":"MemberAccess","referencedDeclaration":3366,"src":"1429:25:11","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_int256_$returns$_t_uint256_$","typeString":"function (int256) pure returns (uint256)"}},"id":1598,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1429:32:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1594,"name":"toString","nodeType":"Identifier","overloadedDeclarations":[1576,1604],"referencedDeclaration":1576,"src":"1420:8:11","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"}},"id":1599,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1420:42:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"expression":{"id":1586,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1381:3:11","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1587,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1385:12:11","memberName":"encodePacked","nodeType":"MemberAccess","src":"1381:16:11","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":1600,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1381:82:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1585,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1374:6:11","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":1584,"name":"string","nodeType":"ElementaryTypeName","src":"1374:6:11","typeDescriptions":{}}},"id":1601,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1374:90:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1583,"id":1602,"nodeType":"Return","src":"1367:97:11"}]},"documentation":{"id":1577,"nodeType":"StructuredDocumentation","src":"1193:89:11","text":" @dev Converts a `int256` to its ASCII `string` decimal representation."},"id":1604,"implemented":true,"kind":"function","modifiers":[],"name":"toString","nameLocation":"1296:8:11","nodeType":"FunctionDefinition","parameters":{"id":1580,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1579,"mutability":"mutable","name":"value","nameLocation":"1312:5:11","nodeType":"VariableDeclaration","scope":1604,"src":"1305:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":1578,"name":"int256","nodeType":"ElementaryTypeName","src":"1305:6:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"1304:14:11"},"returnParameters":{"id":1583,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1582,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1604,"src":"1342:13:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1581,"name":"string","nodeType":"ElementaryTypeName","src":"1342:6:11","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1341:15:11"},"scope":1746,"src":"1287:184:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1623,"nodeType":"Block","src":"1650:111:11","statements":[{"id":1622,"nodeType":"UncheckedBlock","src":"1660:95:11","statements":[{"expression":{"arguments":[{"id":1613,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1607,"src":"1703:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1619,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1616,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1607,"src":"1733:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1614,"name":"MathUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3262,"src":"1710:15:11","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_MathUpgradeable_$3262_$","typeString":"type(library MathUpgradeable)"}},"id":1615,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1726:6:11","memberName":"log256","nodeType":"MemberAccess","referencedDeclaration":3222,"src":"1710:22:11","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":1617,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1710:29:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":1618,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1742:1:11","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1710:33:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1612,"name":"toHexString","nodeType":"Identifier","overloadedDeclarations":[1624,1700,1720],"referencedDeclaration":1700,"src":"1691:11:11","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (string memory)"}},"id":1620,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1691:53:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1611,"id":1621,"nodeType":"Return","src":"1684:60:11"}]}]},"documentation":{"id":1605,"nodeType":"StructuredDocumentation","src":"1477:94:11","text":" @dev Converts a `uint256` to its ASCII `string` hexadecimal representation."},"id":1624,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"1585:11:11","nodeType":"FunctionDefinition","parameters":{"id":1608,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1607,"mutability":"mutable","name":"value","nameLocation":"1605:5:11","nodeType":"VariableDeclaration","scope":1624,"src":"1597:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1606,"name":"uint256","nodeType":"ElementaryTypeName","src":"1597:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1596:15:11"},"returnParameters":{"id":1611,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1610,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1624,"src":"1635:13:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1609,"name":"string","nodeType":"ElementaryTypeName","src":"1635:6:11","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1634:15:11"},"scope":1746,"src":"1576:185:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1699,"nodeType":"Block","src":"1974:347:11","statements":[{"assignments":[1635],"declarations":[{"constant":false,"id":1635,"mutability":"mutable","name":"buffer","nameLocation":"1997:6:11","nodeType":"VariableDeclaration","scope":1699,"src":"1984:19:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1634,"name":"bytes","nodeType":"ElementaryTypeName","src":"1984:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1644,"initialValue":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1642,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1640,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":1638,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2016:1:11","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1639,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1629,"src":"2020:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2016:10:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"32","id":1641,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2029:1:11","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"2016:14:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1637,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"2006:9:11","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$","typeString":"function (uint256) pure returns (bytes memory)"},"typeName":{"id":1636,"name":"bytes","nodeType":"ElementaryTypeName","src":"2010:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}}},"id":1643,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2006:25:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"1984:47:11"},{"expression":{"id":1649,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1645,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1635,"src":"2041:6:11","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1647,"indexExpression":{"hexValue":"30","id":1646,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2048:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2041:9:11","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":1648,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2053:3:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d","typeString":"literal_string \"0\""},"value":"0"},"src":"2041:15:11","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":1650,"nodeType":"ExpressionStatement","src":"2041:15:11"},{"expression":{"id":1655,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1651,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1635,"src":"2066:6:11","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1653,"indexExpression":{"hexValue":"31","id":1652,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2073:1:11","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2066:9:11","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"78","id":1654,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2078:3:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_7521d1cadbcfa91eec65aa16715b94ffc1c9654ba57ea2ef1a2127bca1127a83","typeString":"literal_string \"x\""},"value":"x"},"src":"2066:15:11","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":1656,"nodeType":"ExpressionStatement","src":"2066:15:11"},{"body":{"id":1685,"nodeType":"Block","src":"2136:83:11","statements":[{"expression":{"id":1679,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1671,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1635,"src":"2150:6:11","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1673,"indexExpression":{"id":1672,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1658,"src":"2157:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2150:9:11","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"id":1674,"name":"_SYMBOLS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1525,"src":"2162:8:11","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"}},"id":1678,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1677,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1675,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1627,"src":"2171:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"307866","id":1676,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2179:3:11","typeDescriptions":{"typeIdentifier":"t_rational_15_by_1","typeString":"int_const 15"},"value":"0xf"},"src":"2171:11:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2162:21:11","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"src":"2150:33:11","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":1680,"nodeType":"ExpressionStatement","src":"2150:33:11"},{"expression":{"id":1683,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1681,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1627,"src":"2197:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"34","id":1682,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2207:1:11","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"2197:11:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1684,"nodeType":"ExpressionStatement","src":"2197:11:11"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1667,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1665,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1658,"src":"2124:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"31","id":1666,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2128:1:11","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"2124:5:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1686,"initializationExpression":{"assignments":[1658],"declarations":[{"constant":false,"id":1658,"mutability":"mutable","name":"i","nameLocation":"2104:1:11","nodeType":"VariableDeclaration","scope":1686,"src":"2096:9:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1657,"name":"uint256","nodeType":"ElementaryTypeName","src":"2096:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1664,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1663,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1661,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":1659,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2108:1:11","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1660,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1629,"src":"2112:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2108:10:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":1662,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2121:1:11","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"2108:14:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2096:26:11"},"loopExpression":{"expression":{"id":1669,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":true,"src":"2131:3:11","subExpression":{"id":1668,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1658,"src":"2133:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1670,"nodeType":"ExpressionStatement","src":"2131:3:11"},"nodeType":"ForStatement","src":"2091:128:11"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1690,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1688,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1627,"src":"2236:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1689,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2245:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2236:10:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"537472696e67733a20686578206c656e67746820696e73756666696369656e74","id":1691,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2248:34:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2","typeString":"literal_string \"Strings: hex length insufficient\""},"value":"Strings: hex length insufficient"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2","typeString":"literal_string \"Strings: hex length insufficient\""}],"id":1687,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2228:7:11","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1692,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2228:55:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1693,"nodeType":"ExpressionStatement","src":"2228:55:11"},{"expression":{"arguments":[{"id":1696,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1635,"src":"2307:6:11","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1695,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2300:6:11","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":1694,"name":"string","nodeType":"ElementaryTypeName","src":"2300:6:11","typeDescriptions":{}}},"id":1697,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2300:14:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1633,"id":1698,"nodeType":"Return","src":"2293:21:11"}]},"documentation":{"id":1625,"nodeType":"StructuredDocumentation","src":"1767:112:11","text":" @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length."},"id":1700,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"1893:11:11","nodeType":"FunctionDefinition","parameters":{"id":1630,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1627,"mutability":"mutable","name":"value","nameLocation":"1913:5:11","nodeType":"VariableDeclaration","scope":1700,"src":"1905:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1626,"name":"uint256","nodeType":"ElementaryTypeName","src":"1905:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1629,"mutability":"mutable","name":"length","nameLocation":"1928:6:11","nodeType":"VariableDeclaration","scope":1700,"src":"1920:14:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1628,"name":"uint256","nodeType":"ElementaryTypeName","src":"1920:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1904:31:11"},"returnParameters":{"id":1633,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1632,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1700,"src":"1959:13:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1631,"name":"string","nodeType":"ElementaryTypeName","src":"1959:6:11","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1958:15:11"},"scope":1746,"src":"1884:437:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1719,"nodeType":"Block","src":"2546:76:11","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"id":1713,"name":"addr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1703,"src":"2591:4:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1712,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2583:7:11","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":1711,"name":"uint160","nodeType":"ElementaryTypeName","src":"2583:7:11","typeDescriptions":{}}},"id":1714,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2583:13:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":1710,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2575:7:11","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":1709,"name":"uint256","nodeType":"ElementaryTypeName","src":"2575:7:11","typeDescriptions":{}}},"id":1715,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2575:22:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1716,"name":"_ADDRESS_LENGTH","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1528,"src":"2599:15:11","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":1708,"name":"toHexString","nodeType":"Identifier","overloadedDeclarations":[1624,1700,1720],"referencedDeclaration":1700,"src":"2563:11:11","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (string memory)"}},"id":1717,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2563:52:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1707,"id":1718,"nodeType":"Return","src":"2556:59:11"}]},"documentation":{"id":1701,"nodeType":"StructuredDocumentation","src":"2327:141:11","text":" @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation."},"id":1720,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"2482:11:11","nodeType":"FunctionDefinition","parameters":{"id":1704,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1703,"mutability":"mutable","name":"addr","nameLocation":"2502:4:11","nodeType":"VariableDeclaration","scope":1720,"src":"2494:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1702,"name":"address","nodeType":"ElementaryTypeName","src":"2494:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2493:14:11"},"returnParameters":{"id":1707,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1706,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1720,"src":"2531:13:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1705,"name":"string","nodeType":"ElementaryTypeName","src":"2531:6:11","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2530:15:11"},"scope":1746,"src":"2473:149:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1744,"nodeType":"Block","src":"2777:66:11","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":1742,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"id":1733,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1723,"src":"2810:1:11","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1732,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2804:5:11","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":1731,"name":"bytes","nodeType":"ElementaryTypeName","src":"2804:5:11","typeDescriptions":{}}},"id":1734,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2804:8:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1730,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"2794:9:11","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":1735,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2794:19:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"arguments":[{"id":1739,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1725,"src":"2833:1:11","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1738,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2827:5:11","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":1737,"name":"bytes","nodeType":"ElementaryTypeName","src":"2827:5:11","typeDescriptions":{}}},"id":1740,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2827:8:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1736,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"2817:9:11","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":1741,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2817:19:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"2794:42:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1729,"id":1743,"nodeType":"Return","src":"2787:49:11"}]},"documentation":{"id":1721,"nodeType":"StructuredDocumentation","src":"2628:66:11","text":" @dev Returns true if the two strings are equal."},"id":1745,"implemented":true,"kind":"function","modifiers":[],"name":"equal","nameLocation":"2708:5:11","nodeType":"FunctionDefinition","parameters":{"id":1726,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1723,"mutability":"mutable","name":"a","nameLocation":"2728:1:11","nodeType":"VariableDeclaration","scope":1745,"src":"2714:15:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1722,"name":"string","nodeType":"ElementaryTypeName","src":"2714:6:11","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":1725,"mutability":"mutable","name":"b","nameLocation":"2745:1:11","nodeType":"VariableDeclaration","scope":1745,"src":"2731:15:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1724,"name":"string","nodeType":"ElementaryTypeName","src":"2731:6:11","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2713:34:11"},"returnParameters":{"id":1729,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1728,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1745,"src":"2771:4:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1727,"name":"bool","nodeType":"ElementaryTypeName","src":"2771:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2770:6:11"},"scope":1746,"src":"2699:144:11","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":1747,"src":"242:2603:11","usedErrors":[]}],"src":"101:2745:11"},"id":11},"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol","exportedSymbols":{"ECDSAUpgradeable":[2112],"MathUpgradeable":[3262],"SignedMathUpgradeable":[3367],"StringsUpgradeable":[1746]},"id":2113,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1748,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"112:23:12"},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol","file":"../StringsUpgradeable.sol","id":1749,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2113,"sourceUnit":1747,"src":"137:35:12","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"ECDSAUpgradeable","contractDependencies":[],"contractKind":"library","documentation":{"id":1750,"nodeType":"StructuredDocumentation","src":"174:205:12","text":" @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n These functions can be used to verify that a message was signed by the holder\n of the private keys of a given address."},"fullyImplemented":true,"id":2112,"linearizedBaseContracts":[2112],"name":"ECDSAUpgradeable","nameLocation":"388:16:12","nodeType":"ContractDefinition","nodes":[{"canonicalName":"ECDSAUpgradeable.RecoverError","id":1756,"members":[{"id":1751,"name":"NoError","nameLocation":"439:7:12","nodeType":"EnumValue","src":"439:7:12"},{"id":1752,"name":"InvalidSignature","nameLocation":"456:16:12","nodeType":"EnumValue","src":"456:16:12"},{"id":1753,"name":"InvalidSignatureLength","nameLocation":"482:22:12","nodeType":"EnumValue","src":"482:22:12"},{"id":1754,"name":"InvalidSignatureS","nameLocation":"514:17:12","nodeType":"EnumValue","src":"514:17:12"},{"id":1755,"name":"InvalidSignatureV","nameLocation":"541:17:12","nodeType":"EnumValue","src":"541:17:12"}],"name":"RecoverError","nameLocation":"416:12:12","nodeType":"EnumDefinition","src":"411:175:12"},{"body":{"id":1799,"nodeType":"Block","src":"646:457:12","statements":[{"condition":{"commonType":{"typeIdentifier":"t_enum$_RecoverError_$1756","typeString":"enum ECDSAUpgradeable.RecoverError"},"id":1765,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1762,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1759,"src":"660:5:12","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1756","typeString":"enum ECDSAUpgradeable.RecoverError"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":1763,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1756,"src":"669:12:12","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$1756_$","typeString":"type(enum ECDSAUpgradeable.RecoverError)"}},"id":1764,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"682:7:12","memberName":"NoError","nodeType":"MemberAccess","referencedDeclaration":1751,"src":"669:20:12","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1756","typeString":"enum ECDSAUpgradeable.RecoverError"}},"src":"660:29:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_enum$_RecoverError_$1756","typeString":"enum ECDSAUpgradeable.RecoverError"},"id":1771,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1768,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1759,"src":"756:5:12","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1756","typeString":"enum ECDSAUpgradeable.RecoverError"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":1769,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1756,"src":"765:12:12","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$1756_$","typeString":"type(enum ECDSAUpgradeable.RecoverError)"}},"id":1770,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"778:16:12","memberName":"InvalidSignature","nodeType":"MemberAccess","referencedDeclaration":1752,"src":"765:29:12","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1756","typeString":"enum ECDSAUpgradeable.RecoverError"}},"src":"756:38:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_enum$_RecoverError_$1756","typeString":"enum ECDSAUpgradeable.RecoverError"},"id":1780,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1777,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1759,"src":"865:5:12","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1756","typeString":"enum ECDSAUpgradeable.RecoverError"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":1778,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1756,"src":"874:12:12","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$1756_$","typeString":"type(enum ECDSAUpgradeable.RecoverError)"}},"id":1779,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"887:22:12","memberName":"InvalidSignatureLength","nodeType":"MemberAccess","referencedDeclaration":1753,"src":"874:35:12","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1756","typeString":"enum ECDSAUpgradeable.RecoverError"}},"src":"865:44:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_enum$_RecoverError_$1756","typeString":"enum ECDSAUpgradeable.RecoverError"},"id":1789,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1786,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1759,"src":"987:5:12","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1756","typeString":"enum ECDSAUpgradeable.RecoverError"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":1787,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1756,"src":"996:12:12","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$1756_$","typeString":"type(enum ECDSAUpgradeable.RecoverError)"}},"id":1788,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1009:17:12","memberName":"InvalidSignatureS","nodeType":"MemberAccess","referencedDeclaration":1754,"src":"996:30:12","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1756","typeString":"enum ECDSAUpgradeable.RecoverError"}},"src":"987:39:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1795,"nodeType":"IfStatement","src":"983:114:12","trueBody":{"id":1794,"nodeType":"Block","src":"1028:69:12","statements":[{"expression":{"arguments":[{"hexValue":"45434453413a20696e76616c6964207369676e6174757265202773272076616c7565","id":1791,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1049:36:12","typeDescriptions":{"typeIdentifier":"t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd","typeString":"literal_string \"ECDSA: invalid signature 's' value\""},"value":"ECDSA: invalid signature 's' value"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd","typeString":"literal_string \"ECDSA: invalid signature 's' value\""}],"id":1790,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"1042:6:12","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":1792,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1042:44:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1793,"nodeType":"ExpressionStatement","src":"1042:44:12"}]}},"id":1796,"nodeType":"IfStatement","src":"861:236:12","trueBody":{"id":1785,"nodeType":"Block","src":"911:66:12","statements":[{"expression":{"arguments":[{"hexValue":"45434453413a20696e76616c6964207369676e6174757265206c656e677468","id":1782,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"932:33:12","typeDescriptions":{"typeIdentifier":"t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77","typeString":"literal_string \"ECDSA: invalid signature length\""},"value":"ECDSA: invalid signature length"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77","typeString":"literal_string \"ECDSA: invalid signature length\""}],"id":1781,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"925:6:12","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":1783,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"925:41:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1784,"nodeType":"ExpressionStatement","src":"925:41:12"}]}},"id":1797,"nodeType":"IfStatement","src":"752:345:12","trueBody":{"id":1776,"nodeType":"Block","src":"796:59:12","statements":[{"expression":{"arguments":[{"hexValue":"45434453413a20696e76616c6964207369676e6174757265","id":1773,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"817:26:12","typeDescriptions":{"typeIdentifier":"t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be","typeString":"literal_string \"ECDSA: invalid signature\""},"value":"ECDSA: invalid signature"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be","typeString":"literal_string \"ECDSA: invalid signature\""}],"id":1772,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"810:6:12","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":1774,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"810:34:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1775,"nodeType":"ExpressionStatement","src":"810:34:12"}]}},"id":1798,"nodeType":"IfStatement","src":"656:441:12","trueBody":{"id":1767,"nodeType":"Block","src":"691:55:12","statements":[{"functionReturnParameters":1761,"id":1766,"nodeType":"Return","src":"705:7:12"}]}}]},"id":1800,"implemented":true,"kind":"function","modifiers":[],"name":"_throwError","nameLocation":"601:11:12","nodeType":"FunctionDefinition","parameters":{"id":1760,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1759,"mutability":"mutable","name":"error","nameLocation":"626:5:12","nodeType":"VariableDeclaration","scope":1800,"src":"613:18:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1756","typeString":"enum ECDSAUpgradeable.RecoverError"},"typeName":{"id":1758,"nodeType":"UserDefinedTypeName","pathNode":{"id":1757,"name":"RecoverError","nameLocations":["613:12:12"],"nodeType":"IdentifierPath","referencedDeclaration":1756,"src":"613:12:12"},"referencedDeclaration":1756,"src":"613:12:12","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1756","typeString":"enum ECDSAUpgradeable.RecoverError"}},"visibility":"internal"}],"src":"612:20:12"},"returnParameters":{"id":1761,"nodeType":"ParameterList","parameters":[],"src":"646:0:12"},"scope":2112,"src":"592:511:12","stateMutability":"pure","virtual":false,"visibility":"private"},{"body":{"id":1845,"nodeType":"Block","src":"2271:626:12","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1816,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1813,"name":"signature","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1805,"src":"2285:9:12","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1814,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2295:6:12","memberName":"length","nodeType":"MemberAccess","src":"2285:16:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"3635","id":1815,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2305:2:12","typeDescriptions":{"typeIdentifier":"t_rational_65_by_1","typeString":"int_const 65"},"value":"65"},"src":"2285:22:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1843,"nodeType":"Block","src":"2810:81:12","statements":[{"expression":{"components":[{"arguments":[{"hexValue":"30","id":1837,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2840:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1836,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2832:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1835,"name":"address","nodeType":"ElementaryTypeName","src":"2832:7:12","typeDescriptions":{}}},"id":1838,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2832:10:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":1839,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1756,"src":"2844:12:12","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$1756_$","typeString":"type(enum ECDSAUpgradeable.RecoverError)"}},"id":1840,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2857:22:12","memberName":"InvalidSignatureLength","nodeType":"MemberAccess","referencedDeclaration":1753,"src":"2844:35:12","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1756","typeString":"enum ECDSAUpgradeable.RecoverError"}}],"id":1841,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"2831:49:12","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$1756_$","typeString":"tuple(address,enum ECDSAUpgradeable.RecoverError)"}},"functionReturnParameters":1812,"id":1842,"nodeType":"Return","src":"2824:56:12"}]},"id":1844,"nodeType":"IfStatement","src":"2281:610:12","trueBody":{"id":1834,"nodeType":"Block","src":"2309:495:12","statements":[{"assignments":[1818],"declarations":[{"constant":false,"id":1818,"mutability":"mutable","name":"r","nameLocation":"2331:1:12","nodeType":"VariableDeclaration","scope":1834,"src":"2323:9:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1817,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2323:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1819,"nodeType":"VariableDeclarationStatement","src":"2323:9:12"},{"assignments":[1821],"declarations":[{"constant":false,"id":1821,"mutability":"mutable","name":"s","nameLocation":"2354:1:12","nodeType":"VariableDeclaration","scope":1834,"src":"2346:9:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1820,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2346:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1822,"nodeType":"VariableDeclarationStatement","src":"2346:9:12"},{"assignments":[1824],"declarations":[{"constant":false,"id":1824,"mutability":"mutable","name":"v","nameLocation":"2375:1:12","nodeType":"VariableDeclaration","scope":1834,"src":"2369:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1823,"name":"uint8","nodeType":"ElementaryTypeName","src":"2369:5:12","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"id":1825,"nodeType":"VariableDeclarationStatement","src":"2369:7:12"},{"AST":{"nodeType":"YulBlock","src":"2577:171:12","statements":[{"nodeType":"YulAssignment","src":"2595:32:12","value":{"arguments":[{"arguments":[{"name":"signature","nodeType":"YulIdentifier","src":"2610:9:12"},{"kind":"number","nodeType":"YulLiteral","src":"2621:4:12","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2606:3:12"},"nodeType":"YulFunctionCall","src":"2606:20:12"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2600:5:12"},"nodeType":"YulFunctionCall","src":"2600:27:12"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"2595:1:12"}]},{"nodeType":"YulAssignment","src":"2644:32:12","value":{"arguments":[{"arguments":[{"name":"signature","nodeType":"YulIdentifier","src":"2659:9:12"},{"kind":"number","nodeType":"YulLiteral","src":"2670:4:12","type":"","value":"0x40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2655:3:12"},"nodeType":"YulFunctionCall","src":"2655:20:12"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2649:5:12"},"nodeType":"YulFunctionCall","src":"2649:27:12"},"variableNames":[{"name":"s","nodeType":"YulIdentifier","src":"2644:1:12"}]},{"nodeType":"YulAssignment","src":"2693:41:12","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2703:1:12","type":"","value":"0"},{"arguments":[{"arguments":[{"name":"signature","nodeType":"YulIdentifier","src":"2716:9:12"},{"kind":"number","nodeType":"YulLiteral","src":"2727:4:12","type":"","value":"0x60"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2712:3:12"},"nodeType":"YulFunctionCall","src":"2712:20:12"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2706:5:12"},"nodeType":"YulFunctionCall","src":"2706:27:12"}],"functionName":{"name":"byte","nodeType":"YulIdentifier","src":"2698:4:12"},"nodeType":"YulFunctionCall","src":"2698:36:12"},"variableNames":[{"name":"v","nodeType":"YulIdentifier","src":"2693:1:12"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":1818,"isOffset":false,"isSlot":false,"src":"2595:1:12","valueSize":1},{"declaration":1821,"isOffset":false,"isSlot":false,"src":"2644:1:12","valueSize":1},{"declaration":1805,"isOffset":false,"isSlot":false,"src":"2610:9:12","valueSize":1},{"declaration":1805,"isOffset":false,"isSlot":false,"src":"2659:9:12","valueSize":1},{"declaration":1805,"isOffset":false,"isSlot":false,"src":"2716:9:12","valueSize":1},{"declaration":1824,"isOffset":false,"isSlot":false,"src":"2693:1:12","valueSize":1}],"id":1826,"nodeType":"InlineAssembly","src":"2568:180:12"},{"expression":{"arguments":[{"id":1828,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1803,"src":"2779:4:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1829,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1824,"src":"2785:1:12","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":1830,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1818,"src":"2788:1:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1831,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1821,"src":"2791:1:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1827,"name":"tryRecover","nodeType":"Identifier","overloadedDeclarations":[1846,1920,2014],"referencedDeclaration":2014,"src":"2768:10:12","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$1756_$","typeString":"function (bytes32,uint8,bytes32,bytes32) pure returns (address,enum ECDSAUpgradeable.RecoverError)"}},"id":1832,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2768:25:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$1756_$","typeString":"tuple(address,enum ECDSAUpgradeable.RecoverError)"}},"functionReturnParameters":1812,"id":1833,"nodeType":"Return","src":"2761:32:12"}]}}]},"documentation":{"id":1801,"nodeType":"StructuredDocumentation","src":"1109:1053:12","text":" @dev Returns the address that signed a hashed message (`hash`) with\n `signature` or error string. This address can then be used for verification purposes.\n The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n this function rejects them by requiring the `s` value to be in the lower\n half order, and the `v` value to be either 27 or 28.\n IMPORTANT: `hash` _must_ be the result of a hash operation for the\n verification to be secure: it is possible to craft signatures that\n recover to arbitrary addresses for non-hashed data. A safe way to ensure\n this is by receiving a hash of the original message (which may otherwise\n be too long), and then calling {toEthSignedMessageHash} on it.\n Documentation for signature generation:\n - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n _Available since v4.3._"},"id":1846,"implemented":true,"kind":"function","modifiers":[],"name":"tryRecover","nameLocation":"2176:10:12","nodeType":"FunctionDefinition","parameters":{"id":1806,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1803,"mutability":"mutable","name":"hash","nameLocation":"2195:4:12","nodeType":"VariableDeclaration","scope":1846,"src":"2187:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1802,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2187:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1805,"mutability":"mutable","name":"signature","nameLocation":"2214:9:12","nodeType":"VariableDeclaration","scope":1846,"src":"2201:22:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1804,"name":"bytes","nodeType":"ElementaryTypeName","src":"2201:5:12","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2186:38:12"},"returnParameters":{"id":1812,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1808,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1846,"src":"2248:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1807,"name":"address","nodeType":"ElementaryTypeName","src":"2248:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1811,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1846,"src":"2257:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1756","typeString":"enum ECDSAUpgradeable.RecoverError"},"typeName":{"id":1810,"nodeType":"UserDefinedTypeName","pathNode":{"id":1809,"name":"RecoverError","nameLocations":["2257:12:12"],"nodeType":"IdentifierPath","referencedDeclaration":1756,"src":"2257:12:12"},"referencedDeclaration":1756,"src":"2257:12:12","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1756","typeString":"enum ECDSAUpgradeable.RecoverError"}},"visibility":"internal"}],"src":"2247:23:12"},"scope":2112,"src":"2167:730:12","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1872,"nodeType":"Block","src":"3770:140:12","statements":[{"assignments":[1857,1860],"declarations":[{"constant":false,"id":1857,"mutability":"mutable","name":"recovered","nameLocation":"3789:9:12","nodeType":"VariableDeclaration","scope":1872,"src":"3781:17:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1856,"name":"address","nodeType":"ElementaryTypeName","src":"3781:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1860,"mutability":"mutable","name":"error","nameLocation":"3813:5:12","nodeType":"VariableDeclaration","scope":1872,"src":"3800:18:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1756","typeString":"enum ECDSAUpgradeable.RecoverError"},"typeName":{"id":1859,"nodeType":"UserDefinedTypeName","pathNode":{"id":1858,"name":"RecoverError","nameLocations":["3800:12:12"],"nodeType":"IdentifierPath","referencedDeclaration":1756,"src":"3800:12:12"},"referencedDeclaration":1756,"src":"3800:12:12","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1756","typeString":"enum ECDSAUpgradeable.RecoverError"}},"visibility":"internal"}],"id":1865,"initialValue":{"arguments":[{"id":1862,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1849,"src":"3833:4:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1863,"name":"signature","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1851,"src":"3839:9:12","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1861,"name":"tryRecover","nodeType":"Identifier","overloadedDeclarations":[1846,1920,2014],"referencedDeclaration":1846,"src":"3822:10:12","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes_memory_ptr_$returns$_t_address_$_t_enum$_RecoverError_$1756_$","typeString":"function (bytes32,bytes memory) pure returns (address,enum ECDSAUpgradeable.RecoverError)"}},"id":1864,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3822:27:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$1756_$","typeString":"tuple(address,enum ECDSAUpgradeable.RecoverError)"}},"nodeType":"VariableDeclarationStatement","src":"3780:69:12"},{"expression":{"arguments":[{"id":1867,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1860,"src":"3871:5:12","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1756","typeString":"enum ECDSAUpgradeable.RecoverError"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_RecoverError_$1756","typeString":"enum ECDSAUpgradeable.RecoverError"}],"id":1866,"name":"_throwError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1800,"src":"3859:11:12","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_RecoverError_$1756_$returns$__$","typeString":"function (enum ECDSAUpgradeable.RecoverError) pure"}},"id":1868,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3859:18:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1869,"nodeType":"ExpressionStatement","src":"3859:18:12"},{"expression":{"id":1870,"name":"recovered","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1857,"src":"3894:9:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":1855,"id":1871,"nodeType":"Return","src":"3887:16:12"}]},"documentation":{"id":1847,"nodeType":"StructuredDocumentation","src":"2903:775:12","text":" @dev Returns the address that signed a hashed message (`hash`) with\n `signature`. This address can then be used for verification purposes.\n The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n this function rejects them by requiring the `s` value to be in the lower\n half order, and the `v` value to be either 27 or 28.\n IMPORTANT: `hash` _must_ be the result of a hash operation for the\n verification to be secure: it is possible to craft signatures that\n recover to arbitrary addresses for non-hashed data. A safe way to ensure\n this is by receiving a hash of the original message (which may otherwise\n be too long), and then calling {toEthSignedMessageHash} on it."},"id":1873,"implemented":true,"kind":"function","modifiers":[],"name":"recover","nameLocation":"3692:7:12","nodeType":"FunctionDefinition","parameters":{"id":1852,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1849,"mutability":"mutable","name":"hash","nameLocation":"3708:4:12","nodeType":"VariableDeclaration","scope":1873,"src":"3700:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1848,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3700:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1851,"mutability":"mutable","name":"signature","nameLocation":"3727:9:12","nodeType":"VariableDeclaration","scope":1873,"src":"3714:22:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1850,"name":"bytes","nodeType":"ElementaryTypeName","src":"3714:5:12","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3699:38:12"},"returnParameters":{"id":1855,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1854,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1873,"src":"3761:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1853,"name":"address","nodeType":"ElementaryTypeName","src":"3761:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3760:9:12"},"scope":2112,"src":"3683:227:12","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1919,"nodeType":"Block","src":"4267:203:12","statements":[{"assignments":[1889],"declarations":[{"constant":false,"id":1889,"mutability":"mutable","name":"s","nameLocation":"4285:1:12","nodeType":"VariableDeclaration","scope":1919,"src":"4277:9:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1888,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4277:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1896,"initialValue":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":1895,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1890,"name":"vs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1880,"src":"4289:2:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"arguments":[{"hexValue":"307837666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666","id":1893,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4302:66:12","typeDescriptions":{"typeIdentifier":"t_rational_57896044618658097711785492504343953926634992332820282019728792003956564819967_by_1","typeString":"int_const 5789...(69 digits omitted)...9967"},"value":"0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_57896044618658097711785492504343953926634992332820282019728792003956564819967_by_1","typeString":"int_const 5789...(69 digits omitted)...9967"}],"id":1892,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4294:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":1891,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4294:7:12","typeDescriptions":{}}},"id":1894,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4294:75:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"4289:80:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"4277:92:12"},{"assignments":[1898],"declarations":[{"constant":false,"id":1898,"mutability":"mutable","name":"v","nameLocation":"4385:1:12","nodeType":"VariableDeclaration","scope":1919,"src":"4379:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1897,"name":"uint8","nodeType":"ElementaryTypeName","src":"4379:5:12","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"id":1911,"initialValue":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1909,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1906,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1903,"name":"vs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1880,"src":"4404:2:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1902,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4396:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":1901,"name":"uint256","nodeType":"ElementaryTypeName","src":"4396:7:12","typeDescriptions":{}}},"id":1904,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4396:11:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"323535","id":1905,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4411:3:12","typeDescriptions":{"typeIdentifier":"t_rational_255_by_1","typeString":"int_const 255"},"value":"255"},"src":"4396:18:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1907,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4395:20:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"3237","id":1908,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4418:2:12","typeDescriptions":{"typeIdentifier":"t_rational_27_by_1","typeString":"int_const 27"},"value":"27"},"src":"4395:25:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1900,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4389:5:12","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":1899,"name":"uint8","nodeType":"ElementaryTypeName","src":"4389:5:12","typeDescriptions":{}}},"id":1910,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4389:32:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"VariableDeclarationStatement","src":"4379:42:12"},{"expression":{"arguments":[{"id":1913,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1876,"src":"4449:4:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1914,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1898,"src":"4455:1:12","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":1915,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1878,"src":"4458:1:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1916,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1889,"src":"4461:1:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1912,"name":"tryRecover","nodeType":"Identifier","overloadedDeclarations":[1846,1920,2014],"referencedDeclaration":2014,"src":"4438:10:12","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$1756_$","typeString":"function (bytes32,uint8,bytes32,bytes32) pure returns (address,enum ECDSAUpgradeable.RecoverError)"}},"id":1917,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4438:25:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$1756_$","typeString":"tuple(address,enum ECDSAUpgradeable.RecoverError)"}},"functionReturnParameters":1887,"id":1918,"nodeType":"Return","src":"4431:32:12"}]},"documentation":{"id":1874,"nodeType":"StructuredDocumentation","src":"3916:243:12","text":" @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n _Available since v4.3._"},"id":1920,"implemented":true,"kind":"function","modifiers":[],"name":"tryRecover","nameLocation":"4173:10:12","nodeType":"FunctionDefinition","parameters":{"id":1881,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1876,"mutability":"mutable","name":"hash","nameLocation":"4192:4:12","nodeType":"VariableDeclaration","scope":1920,"src":"4184:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1875,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4184:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1878,"mutability":"mutable","name":"r","nameLocation":"4206:1:12","nodeType":"VariableDeclaration","scope":1920,"src":"4198:9:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1877,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4198:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1880,"mutability":"mutable","name":"vs","nameLocation":"4217:2:12","nodeType":"VariableDeclaration","scope":1920,"src":"4209:10:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1879,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4209:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4183:37:12"},"returnParameters":{"id":1887,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1883,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1920,"src":"4244:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1882,"name":"address","nodeType":"ElementaryTypeName","src":"4244:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1886,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1920,"src":"4253:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1756","typeString":"enum ECDSAUpgradeable.RecoverError"},"typeName":{"id":1885,"nodeType":"UserDefinedTypeName","pathNode":{"id":1884,"name":"RecoverError","nameLocations":["4253:12:12"],"nodeType":"IdentifierPath","referencedDeclaration":1756,"src":"4253:12:12"},"referencedDeclaration":1756,"src":"4253:12:12","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1756","typeString":"enum ECDSAUpgradeable.RecoverError"}},"visibility":"internal"}],"src":"4243:23:12"},"scope":2112,"src":"4164:306:12","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1949,"nodeType":"Block","src":"4721:136:12","statements":[{"assignments":[1933,1936],"declarations":[{"constant":false,"id":1933,"mutability":"mutable","name":"recovered","nameLocation":"4740:9:12","nodeType":"VariableDeclaration","scope":1949,"src":"4732:17:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1932,"name":"address","nodeType":"ElementaryTypeName","src":"4732:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1936,"mutability":"mutable","name":"error","nameLocation":"4764:5:12","nodeType":"VariableDeclaration","scope":1949,"src":"4751:18:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1756","typeString":"enum ECDSAUpgradeable.RecoverError"},"typeName":{"id":1935,"nodeType":"UserDefinedTypeName","pathNode":{"id":1934,"name":"RecoverError","nameLocations":["4751:12:12"],"nodeType":"IdentifierPath","referencedDeclaration":1756,"src":"4751:12:12"},"referencedDeclaration":1756,"src":"4751:12:12","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1756","typeString":"enum ECDSAUpgradeable.RecoverError"}},"visibility":"internal"}],"id":1942,"initialValue":{"arguments":[{"id":1938,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1923,"src":"4784:4:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1939,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1925,"src":"4790:1:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1940,"name":"vs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1927,"src":"4793:2:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1937,"name":"tryRecover","nodeType":"Identifier","overloadedDeclarations":[1846,1920,2014],"referencedDeclaration":1920,"src":"4773:10:12","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$1756_$","typeString":"function (bytes32,bytes32,bytes32) pure returns (address,enum ECDSAUpgradeable.RecoverError)"}},"id":1941,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4773:23:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$1756_$","typeString":"tuple(address,enum ECDSAUpgradeable.RecoverError)"}},"nodeType":"VariableDeclarationStatement","src":"4731:65:12"},{"expression":{"arguments":[{"id":1944,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1936,"src":"4818:5:12","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1756","typeString":"enum ECDSAUpgradeable.RecoverError"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_RecoverError_$1756","typeString":"enum ECDSAUpgradeable.RecoverError"}],"id":1943,"name":"_throwError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1800,"src":"4806:11:12","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_RecoverError_$1756_$returns$__$","typeString":"function (enum ECDSAUpgradeable.RecoverError) pure"}},"id":1945,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4806:18:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1946,"nodeType":"ExpressionStatement","src":"4806:18:12"},{"expression":{"id":1947,"name":"recovered","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1933,"src":"4841:9:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":1931,"id":1948,"nodeType":"Return","src":"4834:16:12"}]},"documentation":{"id":1921,"nodeType":"StructuredDocumentation","src":"4476:154:12","text":" @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n _Available since v4.2._"},"id":1950,"implemented":true,"kind":"function","modifiers":[],"name":"recover","nameLocation":"4644:7:12","nodeType":"FunctionDefinition","parameters":{"id":1928,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1923,"mutability":"mutable","name":"hash","nameLocation":"4660:4:12","nodeType":"VariableDeclaration","scope":1950,"src":"4652:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1922,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4652:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1925,"mutability":"mutable","name":"r","nameLocation":"4674:1:12","nodeType":"VariableDeclaration","scope":1950,"src":"4666:9:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1924,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4666:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1927,"mutability":"mutable","name":"vs","nameLocation":"4685:2:12","nodeType":"VariableDeclaration","scope":1950,"src":"4677:10:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1926,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4677:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4651:37:12"},"returnParameters":{"id":1931,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1930,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1950,"src":"4712:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1929,"name":"address","nodeType":"ElementaryTypeName","src":"4712:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4711:9:12"},"scope":2112,"src":"4635:222:12","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2013,"nodeType":"Block","src":"5142:1345:12","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1972,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1969,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1959,"src":"6038:1:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1968,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6030:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":1967,"name":"uint256","nodeType":"ElementaryTypeName","src":"6030:7:12","typeDescriptions":{}}},"id":1970,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6030:10:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"307837464646464646464646464646464646464646464646464646464646464646463544353736453733353741343530314444464539324634363638314232304130","id":1971,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6043:66:12","typeDescriptions":{"typeIdentifier":"t_rational_57896044618658097711785492504343953926418782139537452191302581570759080747168_by_1","typeString":"int_const 5789...(69 digits omitted)...7168"},"value":"0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0"},"src":"6030:79:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1982,"nodeType":"IfStatement","src":"6026:161:12","trueBody":{"id":1981,"nodeType":"Block","src":"6111:76:12","statements":[{"expression":{"components":[{"arguments":[{"hexValue":"30","id":1975,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6141:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1974,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6133:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1973,"name":"address","nodeType":"ElementaryTypeName","src":"6133:7:12","typeDescriptions":{}}},"id":1976,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6133:10:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":1977,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1756,"src":"6145:12:12","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$1756_$","typeString":"type(enum ECDSAUpgradeable.RecoverError)"}},"id":1978,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6158:17:12","memberName":"InvalidSignatureS","nodeType":"MemberAccess","referencedDeclaration":1754,"src":"6145:30:12","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1756","typeString":"enum ECDSAUpgradeable.RecoverError"}}],"id":1979,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"6132:44:12","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$1756_$","typeString":"tuple(address,enum ECDSAUpgradeable.RecoverError)"}},"functionReturnParameters":1966,"id":1980,"nodeType":"Return","src":"6125:51:12"}]}},{"assignments":[1984],"declarations":[{"constant":false,"id":1984,"mutability":"mutable","name":"signer","nameLocation":"6289:6:12","nodeType":"VariableDeclaration","scope":2013,"src":"6281:14:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1983,"name":"address","nodeType":"ElementaryTypeName","src":"6281:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":1991,"initialValue":{"arguments":[{"id":1986,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1953,"src":"6308:4:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1987,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1955,"src":"6314:1:12","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":1988,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1957,"src":"6317:1:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1989,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1959,"src":"6320:1:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1985,"name":"ecrecover","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-6,"src":"6298:9:12","typeDescriptions":{"typeIdentifier":"t_function_ecrecover_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$","typeString":"function (bytes32,uint8,bytes32,bytes32) pure returns (address)"}},"id":1990,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6298:24:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"6281:41:12"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1997,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1992,"name":"signer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1984,"src":"6336:6:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":1995,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6354:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1994,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6346:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1993,"name":"address","nodeType":"ElementaryTypeName","src":"6346:7:12","typeDescriptions":{}}},"id":1996,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6346:10:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6336:20:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2007,"nodeType":"IfStatement","src":"6332:101:12","trueBody":{"id":2006,"nodeType":"Block","src":"6358:75:12","statements":[{"expression":{"components":[{"arguments":[{"hexValue":"30","id":2000,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6388:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1999,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6380:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1998,"name":"address","nodeType":"ElementaryTypeName","src":"6380:7:12","typeDescriptions":{}}},"id":2001,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6380:10:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":2002,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1756,"src":"6392:12:12","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$1756_$","typeString":"type(enum ECDSAUpgradeable.RecoverError)"}},"id":2003,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6405:16:12","memberName":"InvalidSignature","nodeType":"MemberAccess","referencedDeclaration":1752,"src":"6392:29:12","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1756","typeString":"enum ECDSAUpgradeable.RecoverError"}}],"id":2004,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"6379:43:12","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$1756_$","typeString":"tuple(address,enum ECDSAUpgradeable.RecoverError)"}},"functionReturnParameters":1966,"id":2005,"nodeType":"Return","src":"6372:50:12"}]}},{"expression":{"components":[{"id":2008,"name":"signer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1984,"src":"6451:6:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":2009,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1756,"src":"6459:12:12","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$1756_$","typeString":"type(enum ECDSAUpgradeable.RecoverError)"}},"id":2010,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6472:7:12","memberName":"NoError","nodeType":"MemberAccess","referencedDeclaration":1751,"src":"6459:20:12","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1756","typeString":"enum ECDSAUpgradeable.RecoverError"}}],"id":2011,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6450:30:12","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$1756_$","typeString":"tuple(address,enum ECDSAUpgradeable.RecoverError)"}},"functionReturnParameters":1966,"id":2012,"nodeType":"Return","src":"6443:37:12"}]},"documentation":{"id":1951,"nodeType":"StructuredDocumentation","src":"4863:163:12","text":" @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n `r` and `s` signature fields separately.\n _Available since v4.3._"},"id":2014,"implemented":true,"kind":"function","modifiers":[],"name":"tryRecover","nameLocation":"5040:10:12","nodeType":"FunctionDefinition","parameters":{"id":1960,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1953,"mutability":"mutable","name":"hash","nameLocation":"5059:4:12","nodeType":"VariableDeclaration","scope":2014,"src":"5051:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1952,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5051:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1955,"mutability":"mutable","name":"v","nameLocation":"5071:1:12","nodeType":"VariableDeclaration","scope":2014,"src":"5065:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1954,"name":"uint8","nodeType":"ElementaryTypeName","src":"5065:5:12","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":1957,"mutability":"mutable","name":"r","nameLocation":"5082:1:12","nodeType":"VariableDeclaration","scope":2014,"src":"5074:9:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1956,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5074:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1959,"mutability":"mutable","name":"s","nameLocation":"5093:1:12","nodeType":"VariableDeclaration","scope":2014,"src":"5085:9:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1958,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5085:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"5050:45:12"},"returnParameters":{"id":1966,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1962,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2014,"src":"5119:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1961,"name":"address","nodeType":"ElementaryTypeName","src":"5119:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1965,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2014,"src":"5128:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1756","typeString":"enum ECDSAUpgradeable.RecoverError"},"typeName":{"id":1964,"nodeType":"UserDefinedTypeName","pathNode":{"id":1963,"name":"RecoverError","nameLocations":["5128:12:12"],"nodeType":"IdentifierPath","referencedDeclaration":1756,"src":"5128:12:12"},"referencedDeclaration":1756,"src":"5128:12:12","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1756","typeString":"enum ECDSAUpgradeable.RecoverError"}},"visibility":"internal"}],"src":"5118:23:12"},"scope":2112,"src":"5031:1456:12","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2046,"nodeType":"Block","src":"6714:138:12","statements":[{"assignments":[2029,2032],"declarations":[{"constant":false,"id":2029,"mutability":"mutable","name":"recovered","nameLocation":"6733:9:12","nodeType":"VariableDeclaration","scope":2046,"src":"6725:17:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2028,"name":"address","nodeType":"ElementaryTypeName","src":"6725:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2032,"mutability":"mutable","name":"error","nameLocation":"6757:5:12","nodeType":"VariableDeclaration","scope":2046,"src":"6744:18:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1756","typeString":"enum ECDSAUpgradeable.RecoverError"},"typeName":{"id":2031,"nodeType":"UserDefinedTypeName","pathNode":{"id":2030,"name":"RecoverError","nameLocations":["6744:12:12"],"nodeType":"IdentifierPath","referencedDeclaration":1756,"src":"6744:12:12"},"referencedDeclaration":1756,"src":"6744:12:12","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1756","typeString":"enum ECDSAUpgradeable.RecoverError"}},"visibility":"internal"}],"id":2039,"initialValue":{"arguments":[{"id":2034,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2017,"src":"6777:4:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2035,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2019,"src":"6783:1:12","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":2036,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2021,"src":"6786:1:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2037,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2023,"src":"6789:1:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2033,"name":"tryRecover","nodeType":"Identifier","overloadedDeclarations":[1846,1920,2014],"referencedDeclaration":2014,"src":"6766:10:12","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$1756_$","typeString":"function (bytes32,uint8,bytes32,bytes32) pure returns (address,enum ECDSAUpgradeable.RecoverError)"}},"id":2038,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6766:25:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$1756_$","typeString":"tuple(address,enum ECDSAUpgradeable.RecoverError)"}},"nodeType":"VariableDeclarationStatement","src":"6724:67:12"},{"expression":{"arguments":[{"id":2041,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2032,"src":"6813:5:12","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1756","typeString":"enum ECDSAUpgradeable.RecoverError"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_RecoverError_$1756","typeString":"enum ECDSAUpgradeable.RecoverError"}],"id":2040,"name":"_throwError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1800,"src":"6801:11:12","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_RecoverError_$1756_$returns$__$","typeString":"function (enum ECDSAUpgradeable.RecoverError) pure"}},"id":2042,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6801:18:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2043,"nodeType":"ExpressionStatement","src":"6801:18:12"},{"expression":{"id":2044,"name":"recovered","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2029,"src":"6836:9:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":2027,"id":2045,"nodeType":"Return","src":"6829:16:12"}]},"documentation":{"id":2015,"nodeType":"StructuredDocumentation","src":"6493:122:12","text":" @dev Overload of {ECDSA-recover} that receives the `v`,\n `r` and `s` signature fields separately."},"id":2047,"implemented":true,"kind":"function","modifiers":[],"name":"recover","nameLocation":"6629:7:12","nodeType":"FunctionDefinition","parameters":{"id":2024,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2017,"mutability":"mutable","name":"hash","nameLocation":"6645:4:12","nodeType":"VariableDeclaration","scope":2047,"src":"6637:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2016,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6637:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2019,"mutability":"mutable","name":"v","nameLocation":"6657:1:12","nodeType":"VariableDeclaration","scope":2047,"src":"6651:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":2018,"name":"uint8","nodeType":"ElementaryTypeName","src":"6651:5:12","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":2021,"mutability":"mutable","name":"r","nameLocation":"6668:1:12","nodeType":"VariableDeclaration","scope":2047,"src":"6660:9:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2020,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6660:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2023,"mutability":"mutable","name":"s","nameLocation":"6679:1:12","nodeType":"VariableDeclaration","scope":2047,"src":"6671:9:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2022,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6671:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"6636:45:12"},"returnParameters":{"id":2027,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2026,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2047,"src":"6705:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2025,"name":"address","nodeType":"ElementaryTypeName","src":"6705:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6704:9:12"},"scope":2112,"src":"6620:232:12","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2056,"nodeType":"Block","src":"7228:310:12","statements":[{"AST":{"nodeType":"YulBlock","src":"7384:148:12","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7405:4:12","type":"","value":"0x00"},{"hexValue":"19457468657265756d205369676e6564204d6573736167653a0a3332","kind":"string","nodeType":"YulLiteral","src":"7411:34:12","type":"","value":"\u0019Ethereum Signed Message:\n32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7398:6:12"},"nodeType":"YulFunctionCall","src":"7398:48:12"},"nodeType":"YulExpressionStatement","src":"7398:48:12"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7466:4:12","type":"","value":"0x1c"},{"name":"hash","nodeType":"YulIdentifier","src":"7472:4:12"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7459:6:12"},"nodeType":"YulFunctionCall","src":"7459:18:12"},"nodeType":"YulExpressionStatement","src":"7459:18:12"},{"nodeType":"YulAssignment","src":"7490:32:12","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7511:4:12","type":"","value":"0x00"},{"kind":"number","nodeType":"YulLiteral","src":"7517:4:12","type":"","value":"0x3c"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"7501:9:12"},"nodeType":"YulFunctionCall","src":"7501:21:12"},"variableNames":[{"name":"message","nodeType":"YulIdentifier","src":"7490:7:12"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":2050,"isOffset":false,"isSlot":false,"src":"7472:4:12","valueSize":1},{"declaration":2053,"isOffset":false,"isSlot":false,"src":"7490:7:12","valueSize":1}],"id":2055,"nodeType":"InlineAssembly","src":"7375:157:12"}]},"documentation":{"id":2048,"nodeType":"StructuredDocumentation","src":"6858:279:12","text":" @dev Returns an Ethereum Signed Message, created from a `hash`. This\n produces hash corresponding to the one signed with the\n https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n JSON-RPC method as part of EIP-191.\n See {recover}."},"id":2057,"implemented":true,"kind":"function","modifiers":[],"name":"toEthSignedMessageHash","nameLocation":"7151:22:12","nodeType":"FunctionDefinition","parameters":{"id":2051,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2050,"mutability":"mutable","name":"hash","nameLocation":"7182:4:12","nodeType":"VariableDeclaration","scope":2057,"src":"7174:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2049,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7174:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"7173:14:12"},"returnParameters":{"id":2054,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2053,"mutability":"mutable","name":"message","nameLocation":"7219:7:12","nodeType":"VariableDeclaration","scope":2057,"src":"7211:15:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2052,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7211:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"7210:17:12"},"scope":2112,"src":"7142:396:12","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2078,"nodeType":"Block","src":"7903:127:12","statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"19457468657265756d205369676e6564204d6573736167653a0a","id":2068,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7947:32:12","typeDescriptions":{"typeIdentifier":"t_stringliteral_9af2d9c228f6cfddaa6d1e5b94e0bce4ab16bd9a472a2b7fbfd74ebff4c720b4","typeString":"literal_string hex\"19457468657265756d205369676e6564204d6573736167653a0a\""},"value":"\u0019Ethereum Signed Message:\n"},{"arguments":[{"expression":{"id":2071,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2060,"src":"8009:1:12","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2072,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8011:6:12","memberName":"length","nodeType":"MemberAccess","src":"8009:8:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2069,"name":"StringsUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1746,"src":"7981:18:12","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_StringsUpgradeable_$1746_$","typeString":"type(library StringsUpgradeable)"}},"id":2070,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8000:8:12","memberName":"toString","nodeType":"MemberAccess","referencedDeclaration":1576,"src":"7981:27:12","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"}},"id":2073,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7981:37:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":2074,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2060,"src":"8020:1:12","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_9af2d9c228f6cfddaa6d1e5b94e0bce4ab16bd9a472a2b7fbfd74ebff4c720b4","typeString":"literal_string hex\"19457468657265756d205369676e6564204d6573736167653a0a\""},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":2066,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"7930:3:12","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":2067,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"7934:12:12","memberName":"encodePacked","nodeType":"MemberAccess","src":"7930:16:12","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":2075,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7930:92:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2065,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"7920:9:12","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":2076,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7920:103:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":2064,"id":2077,"nodeType":"Return","src":"7913:110:12"}]},"documentation":{"id":2058,"nodeType":"StructuredDocumentation","src":"7544:274:12","text":" @dev Returns an Ethereum Signed Message, created from `s`. This\n produces hash corresponding to the one signed with the\n https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n JSON-RPC method as part of EIP-191.\n See {recover}."},"id":2079,"implemented":true,"kind":"function","modifiers":[],"name":"toEthSignedMessageHash","nameLocation":"7832:22:12","nodeType":"FunctionDefinition","parameters":{"id":2061,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2060,"mutability":"mutable","name":"s","nameLocation":"7868:1:12","nodeType":"VariableDeclaration","scope":2079,"src":"7855:14:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2059,"name":"bytes","nodeType":"ElementaryTypeName","src":"7855:5:12","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7854:16:12"},"returnParameters":{"id":2064,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2063,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2079,"src":"7894:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2062,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7894:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"7893:9:12"},"scope":2112,"src":"7823:207:12","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2090,"nodeType":"Block","src":"8476:290:12","statements":[{"AST":{"nodeType":"YulBlock","src":"8538:222:12","statements":[{"nodeType":"YulVariableDeclaration","src":"8552:22:12","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8569:4:12","type":"","value":"0x40"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"8563:5:12"},"nodeType":"YulFunctionCall","src":"8563:11:12"},"variables":[{"name":"ptr","nodeType":"YulTypedName","src":"8556:3:12","type":""}]},{"expression":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"8594:3:12"},{"hexValue":"1901","kind":"string","nodeType":"YulLiteral","src":"8599:10:12","type":"","value":"\u0019\u0001"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8587:6:12"},"nodeType":"YulFunctionCall","src":"8587:23:12"},"nodeType":"YulExpressionStatement","src":"8587:23:12"},{"expression":{"arguments":[{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"8634:3:12"},{"kind":"number","nodeType":"YulLiteral","src":"8639:4:12","type":"","value":"0x02"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8630:3:12"},"nodeType":"YulFunctionCall","src":"8630:14:12"},{"name":"domainSeparator","nodeType":"YulIdentifier","src":"8646:15:12"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8623:6:12"},"nodeType":"YulFunctionCall","src":"8623:39:12"},"nodeType":"YulExpressionStatement","src":"8623:39:12"},{"expression":{"arguments":[{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"8686:3:12"},{"kind":"number","nodeType":"YulLiteral","src":"8691:4:12","type":"","value":"0x22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8682:3:12"},"nodeType":"YulFunctionCall","src":"8682:14:12"},{"name":"structHash","nodeType":"YulIdentifier","src":"8698:10:12"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8675:6:12"},"nodeType":"YulFunctionCall","src":"8675:34:12"},"nodeType":"YulExpressionStatement","src":"8675:34:12"},{"nodeType":"YulAssignment","src":"8722:28:12","value":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"8740:3:12"},{"kind":"number","nodeType":"YulLiteral","src":"8745:4:12","type":"","value":"0x42"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"8730:9:12"},"nodeType":"YulFunctionCall","src":"8730:20:12"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"8722:4:12"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":2087,"isOffset":false,"isSlot":false,"src":"8722:4:12","valueSize":1},{"declaration":2082,"isOffset":false,"isSlot":false,"src":"8646:15:12","valueSize":1},{"declaration":2084,"isOffset":false,"isSlot":false,"src":"8698:10:12","valueSize":1}],"id":2089,"nodeType":"InlineAssembly","src":"8529:231:12"}]},"documentation":{"id":2080,"nodeType":"StructuredDocumentation","src":"8036:328:12","text":" @dev Returns an Ethereum Signed Typed Data, created from a\n `domainSeparator` and a `structHash`. This produces hash corresponding\n to the one signed with the\n https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n JSON-RPC method as part of EIP-712.\n See {recover}."},"id":2091,"implemented":true,"kind":"function","modifiers":[],"name":"toTypedDataHash","nameLocation":"8378:15:12","nodeType":"FunctionDefinition","parameters":{"id":2085,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2082,"mutability":"mutable","name":"domainSeparator","nameLocation":"8402:15:12","nodeType":"VariableDeclaration","scope":2091,"src":"8394:23:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2081,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8394:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2084,"mutability":"mutable","name":"structHash","nameLocation":"8427:10:12","nodeType":"VariableDeclaration","scope":2091,"src":"8419:18:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2083,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8419:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"8393:45:12"},"returnParameters":{"id":2088,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2087,"mutability":"mutable","name":"data","nameLocation":"8470:4:12","nodeType":"VariableDeclaration","scope":2091,"src":"8462:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2086,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8462:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"8461:14:12"},"scope":2112,"src":"8369:397:12","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2110,"nodeType":"Block","src":"9081:80:12","statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"1900","id":2104,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9125:10:12","typeDescriptions":{"typeIdentifier":"t_stringliteral_73fd5d154550a4a103564cb191928cd38898034de1b952dc21b290898b4b697a","typeString":"literal_string hex\"1900\""},"value":"\u0019\u0000"},{"id":2105,"name":"validator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2094,"src":"9137:9:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2106,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2096,"src":"9148:4:12","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_73fd5d154550a4a103564cb191928cd38898034de1b952dc21b290898b4b697a","typeString":"literal_string hex\"1900\""},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":2102,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"9108:3:12","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":2103,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"9112:12:12","memberName":"encodePacked","nodeType":"MemberAccess","src":"9108:16:12","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":2107,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9108:45:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2101,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"9098:9:12","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":2108,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9098:56:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":2100,"id":2109,"nodeType":"Return","src":"9091:63:12"}]},"documentation":{"id":2092,"nodeType":"StructuredDocumentation","src":"8772:193:12","text":" @dev Returns an Ethereum Signed Data with intended validator, created from a\n `validator` and `data` according to the version 0 of EIP-191.\n See {recover}."},"id":2111,"implemented":true,"kind":"function","modifiers":[],"name":"toDataWithIntendedValidatorHash","nameLocation":"8979:31:12","nodeType":"FunctionDefinition","parameters":{"id":2097,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2094,"mutability":"mutable","name":"validator","nameLocation":"9019:9:12","nodeType":"VariableDeclaration","scope":2111,"src":"9011:17:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2093,"name":"address","nodeType":"ElementaryTypeName","src":"9011:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2096,"mutability":"mutable","name":"data","nameLocation":"9043:4:12","nodeType":"VariableDeclaration","scope":2111,"src":"9030:17:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2095,"name":"bytes","nodeType":"ElementaryTypeName","src":"9030:5:12","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"9010:38:12"},"returnParameters":{"id":2100,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2099,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2111,"src":"9072:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2098,"name":"bytes32","nodeType":"ElementaryTypeName","src":"9072:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"9071:9:12"},"scope":2112,"src":"8970:191:12","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":2113,"src":"380:8783:12","usedErrors":[]}],"src":"112:9052:12"},"id":12},"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol","exportedSymbols":{"AddressUpgradeable":[1475],"ECDSAUpgradeable":[2112],"EIP712Upgradeable":[2396],"IERC5267Upgradeable":[976],"Initializable":[1145],"MathUpgradeable":[3262],"SignedMathUpgradeable":[3367],"StringsUpgradeable":[1746]},"id":2397,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2114,"literals":["solidity","^","0.8",".8"],"nodeType":"PragmaDirective","src":"113:23:13"},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol","file":"./ECDSAUpgradeable.sol","id":2115,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2397,"sourceUnit":2113,"src":"138:32:13","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/interfaces/IERC5267Upgradeable.sol","file":"../../interfaces/IERC5267Upgradeable.sol","id":2116,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2397,"sourceUnit":977,"src":"171:50:13","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"../../proxy/utils/Initializable.sol","id":2117,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2397,"sourceUnit":1146,"src":"222:45:13","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":2119,"name":"Initializable","nameLocations":["1826:13:13"],"nodeType":"IdentifierPath","referencedDeclaration":1145,"src":"1826:13:13"},"id":2120,"nodeType":"InheritanceSpecifier","src":"1826:13:13"},{"baseName":{"id":2121,"name":"IERC5267Upgradeable","nameLocations":["1841:19:13"],"nodeType":"IdentifierPath","referencedDeclaration":976,"src":"1841:19:13"},"id":2122,"nodeType":"InheritanceSpecifier","src":"1841:19:13"}],"canonicalName":"EIP712Upgradeable","contractDependencies":[],"contractKind":"contract","documentation":{"id":2118,"nodeType":"StructuredDocumentation","src":"269:1517:13","text":" @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\n The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\n thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\n they need in their contracts using a combination of `abi.encode` and `keccak256`.\n This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\n scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\n ({_hashTypedDataV4}).\n The implementation of the domain separator was designed to be as efficient as possible while still properly updating\n the chain id to protect against replay attacks on an eventual fork of the chain.\n NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method\n https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\n NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain\n separator of the implementation contract. This will cause the `_domainSeparatorV4` function to always rebuild the\n separator from the immutable values, which is cheaper than accessing a cached version in cold storage.\n _Available since v3.4._\n @custom:storage-size 52"},"fullyImplemented":true,"id":2396,"linearizedBaseContracts":[2396,976,1145],"name":"EIP712Upgradeable","nameLocation":"1805:17:13","nodeType":"ContractDefinition","nodes":[{"constant":true,"id":2127,"mutability":"constant","name":"_TYPE_HASH","nameLocation":"1892:10:13","nodeType":"VariableDeclaration","scope":2396,"src":"1867:141:13","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2123,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1867:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"hexValue":"454950373132446f6d61696e28737472696e67206e616d652c737472696e672076657273696f6e2c75696e7432353620636861696e49642c6164647265737320766572696679696e67436f6e747261637429","id":2125,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1923:84:13","typeDescriptions":{"typeIdentifier":"t_stringliteral_8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f","typeString":"literal_string \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\""},"value":"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f","typeString":"literal_string \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\""}],"id":2124,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"1913:9:13","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":2126,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1913:95:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"private"},{"constant":false,"documentation":{"id":2128,"nodeType":"StructuredDocumentation","src":"2015:40:13","text":"@custom:oz-renamed-from _HASHED_NAME"},"id":2130,"mutability":"mutable","name":"_hashedName","nameLocation":"2076:11:13","nodeType":"VariableDeclaration","scope":2396,"src":"2060:27:13","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2129,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2060:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"private"},{"constant":false,"documentation":{"id":2131,"nodeType":"StructuredDocumentation","src":"2093:43:13","text":"@custom:oz-renamed-from _HASHED_VERSION"},"id":2133,"mutability":"mutable","name":"_hashedVersion","nameLocation":"2157:14:13","nodeType":"VariableDeclaration","scope":2396,"src":"2141:30:13","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2132,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2141:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"private"},{"constant":false,"id":2135,"mutability":"mutable","name":"_name","nameLocation":"2193:5:13","nodeType":"VariableDeclaration","scope":2396,"src":"2178:20:13","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string"},"typeName":{"id":2134,"name":"string","nodeType":"ElementaryTypeName","src":"2178:6:13","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"private"},{"constant":false,"id":2137,"mutability":"mutable","name":"_version","nameLocation":"2219:8:13","nodeType":"VariableDeclaration","scope":2396,"src":"2204:23:13","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string"},"typeName":{"id":2136,"name":"string","nodeType":"ElementaryTypeName","src":"2204:6:13","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"private"},{"body":{"id":2152,"nodeType":"Block","src":"2890:55:13","statements":[{"expression":{"arguments":[{"id":2148,"name":"name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2140,"src":"2924:4:13","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":2149,"name":"version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2142,"src":"2930:7:13","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2147,"name":"__EIP712_init_unchained","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2179,"src":"2900:23:13","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_string_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory,string memory)"}},"id":2150,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2900:38:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2151,"nodeType":"ExpressionStatement","src":"2900:38:13"}]},"documentation":{"id":2138,"nodeType":"StructuredDocumentation","src":"2234:559:13","text":" @dev Initializes the domain separator and parameter caches.\n The meaning of `name` and `version` is specified in\n https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\n - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\n - `version`: the current major version of the signing domain.\n NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\n contract upgrade]."},"id":2153,"implemented":true,"kind":"function","modifiers":[{"id":2145,"kind":"modifierInvocation","modifierName":{"id":2144,"name":"onlyInitializing","nameLocations":["2873:16:13"],"nodeType":"IdentifierPath","referencedDeclaration":1090,"src":"2873:16:13"},"nodeType":"ModifierInvocation","src":"2873:16:13"}],"name":"__EIP712_init","nameLocation":"2807:13:13","nodeType":"FunctionDefinition","parameters":{"id":2143,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2140,"mutability":"mutable","name":"name","nameLocation":"2835:4:13","nodeType":"VariableDeclaration","scope":2153,"src":"2821:18:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2139,"name":"string","nodeType":"ElementaryTypeName","src":"2821:6:13","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":2142,"mutability":"mutable","name":"version","nameLocation":"2855:7:13","nodeType":"VariableDeclaration","scope":2153,"src":"2841:21:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2141,"name":"string","nodeType":"ElementaryTypeName","src":"2841:6:13","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2820:43:13"},"returnParameters":{"id":2146,"nodeType":"ParameterList","parameters":[],"src":"2890:0:13"},"scope":2396,"src":"2798:147:13","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2178,"nodeType":"Block","src":"3053:165:13","statements":[{"expression":{"id":2164,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2162,"name":"_name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2135,"src":"3063:5:13","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2163,"name":"name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2155,"src":"3071:4:13","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"3063:12:13","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":2165,"nodeType":"ExpressionStatement","src":"3063:12:13"},{"expression":{"id":2168,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2166,"name":"_version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2137,"src":"3085:8:13","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2167,"name":"version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2157,"src":"3096:7:13","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"3085:18:13","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":2169,"nodeType":"ExpressionStatement","src":"3085:18:13"},{"expression":{"id":2172,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2170,"name":"_hashedName","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2130,"src":"3168:11:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":2171,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3182:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3168:15:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2173,"nodeType":"ExpressionStatement","src":"3168:15:13"},{"expression":{"id":2176,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2174,"name":"_hashedVersion","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2133,"src":"3193:14:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":2175,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3210:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3193:18:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2177,"nodeType":"ExpressionStatement","src":"3193:18:13"}]},"id":2179,"implemented":true,"kind":"function","modifiers":[{"id":2160,"kind":"modifierInvocation","modifierName":{"id":2159,"name":"onlyInitializing","nameLocations":["3036:16:13"],"nodeType":"IdentifierPath","referencedDeclaration":1090,"src":"3036:16:13"},"nodeType":"ModifierInvocation","src":"3036:16:13"}],"name":"__EIP712_init_unchained","nameLocation":"2960:23:13","nodeType":"FunctionDefinition","parameters":{"id":2158,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2155,"mutability":"mutable","name":"name","nameLocation":"2998:4:13","nodeType":"VariableDeclaration","scope":2179,"src":"2984:18:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2154,"name":"string","nodeType":"ElementaryTypeName","src":"2984:6:13","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":2157,"mutability":"mutable","name":"version","nameLocation":"3018:7:13","nodeType":"VariableDeclaration","scope":2179,"src":"3004:21:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2156,"name":"string","nodeType":"ElementaryTypeName","src":"3004:6:13","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2983:43:13"},"returnParameters":{"id":2161,"nodeType":"ParameterList","parameters":[],"src":"3053:0:13"},"scope":2396,"src":"2951:267:13","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2188,"nodeType":"Block","src":"3366:47:13","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":2185,"name":"_buildDomainSeparator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2212,"src":"3383:21:13","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_bytes32_$","typeString":"function () view returns (bytes32)"}},"id":2186,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3383:23:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":2184,"id":2187,"nodeType":"Return","src":"3376:30:13"}]},"documentation":{"id":2180,"nodeType":"StructuredDocumentation","src":"3224:75:13","text":" @dev Returns the domain separator for the current chain."},"id":2189,"implemented":true,"kind":"function","modifiers":[],"name":"_domainSeparatorV4","nameLocation":"3313:18:13","nodeType":"FunctionDefinition","parameters":{"id":2181,"nodeType":"ParameterList","parameters":[],"src":"3331:2:13"},"returnParameters":{"id":2184,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2183,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2189,"src":"3357:7:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2182,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3357:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3356:9:13"},"scope":2396,"src":"3304:109:13","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":2211,"nodeType":"Block","src":"3483:128:13","statements":[{"expression":{"arguments":[{"arguments":[{"id":2197,"name":"_TYPE_HASH","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2127,"src":"3521:10:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"arguments":[],"expression":{"argumentTypes":[],"id":2198,"name":"_EIP712NameHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2345,"src":"3533:15:13","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_bytes32_$","typeString":"function () view returns (bytes32)"}},"id":2199,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3533:17:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"arguments":[],"expression":{"argumentTypes":[],"id":2200,"name":"_EIP712VersionHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2390,"src":"3552:18:13","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_bytes32_$","typeString":"function () view returns (bytes32)"}},"id":2201,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3552:20:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"expression":{"id":2202,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"3574:5:13","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":2203,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3580:7:13","memberName":"chainid","nodeType":"MemberAccess","src":"3574:13:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[{"id":2206,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"3597:4:13","typeDescriptions":{"typeIdentifier":"t_contract$_EIP712Upgradeable_$2396","typeString":"contract EIP712Upgradeable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_EIP712Upgradeable_$2396","typeString":"contract EIP712Upgradeable"}],"id":2205,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3589:7:13","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2204,"name":"address","nodeType":"ElementaryTypeName","src":"3589:7:13","typeDescriptions":{}}},"id":2207,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3589:13:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":2195,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"3510:3:13","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":2196,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3514:6:13","memberName":"encode","nodeType":"MemberAccess","src":"3510:10:13","typeDescriptions":{"typeIdentifier":"t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":2208,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3510:93:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2194,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"3500:9:13","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":2209,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3500:104:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":2193,"id":2210,"nodeType":"Return","src":"3493:111:13"}]},"id":2212,"implemented":true,"kind":"function","modifiers":[],"name":"_buildDomainSeparator","nameLocation":"3428:21:13","nodeType":"FunctionDefinition","parameters":{"id":2190,"nodeType":"ParameterList","parameters":[],"src":"3449:2:13"},"returnParameters":{"id":2193,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2192,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2212,"src":"3474:7:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2191,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3474:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3473:9:13"},"scope":2396,"src":"3419:192:13","stateMutability":"view","virtual":false,"visibility":"private"},{"body":{"id":2227,"nodeType":"Block","src":"4322:90:13","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":2222,"name":"_domainSeparatorV4","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2189,"src":"4372:18:13","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_bytes32_$","typeString":"function () view returns (bytes32)"}},"id":2223,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4372:20:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2224,"name":"structHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2215,"src":"4394:10:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":2220,"name":"ECDSAUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2112,"src":"4339:16:13","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ECDSAUpgradeable_$2112_$","typeString":"type(library ECDSAUpgradeable)"}},"id":2221,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4356:15:13","memberName":"toTypedDataHash","nodeType":"MemberAccess","referencedDeclaration":2091,"src":"4339:32:13","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) pure returns (bytes32)"}},"id":2225,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4339:66:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":2219,"id":2226,"nodeType":"Return","src":"4332:73:13"}]},"documentation":{"id":2213,"nodeType":"StructuredDocumentation","src":"3617:614:13","text":" @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\n function returns the hash of the fully encoded EIP712 message for this domain.\n This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\n ```solidity\n bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\n     keccak256(\"Mail(address to,string contents)\"),\n     mailTo,\n     keccak256(bytes(mailContents))\n )));\n address signer = ECDSA.recover(digest, signature);\n ```"},"id":2228,"implemented":true,"kind":"function","modifiers":[],"name":"_hashTypedDataV4","nameLocation":"4245:16:13","nodeType":"FunctionDefinition","parameters":{"id":2216,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2215,"mutability":"mutable","name":"structHash","nameLocation":"4270:10:13","nodeType":"VariableDeclaration","scope":2228,"src":"4262:18:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2214,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4262:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4261:20:13"},"returnParameters":{"id":2219,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2218,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2228,"src":"4313:7:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2217,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4313:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4312:9:13"},"scope":2396,"src":"4236:176:13","stateMutability":"view","virtual":true,"visibility":"internal"},{"baseFunctions":[975],"body":{"id":2281,"nodeType":"Block","src":"4845:516:13","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2255,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":2251,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2249,"name":"_hashedName","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2130,"src":"5066:11:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2250,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5081:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"5066:16:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":2254,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2252,"name":"_hashedVersion","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2133,"src":"5086:14:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2253,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5104:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"5086:19:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"5066:39:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4549503731323a20556e696e697469616c697a6564","id":2256,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5107:23:13","typeDescriptions":{"typeIdentifier":"t_stringliteral_2e5045ff73280aa8e8acd8c82710f23812497f87f7f576e2220a2ddd0d45eade","typeString":"literal_string \"EIP712: Uninitialized\""},"value":"EIP712: Uninitialized"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_2e5045ff73280aa8e8acd8c82710f23812497f87f7f576e2220a2ddd0d45eade","typeString":"literal_string \"EIP712: Uninitialized\""}],"id":2248,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5058:7:13","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2257,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5058:73:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2258,"nodeType":"ExpressionStatement","src":"5058:73:13"},{"expression":{"components":[{"hexValue":"0f","id":2259,"isConstant":false,"isLValue":false,"isPure":true,"kind":"hexString","lValueRequested":false,"nodeType":"Literal","src":"5163:7:13","typeDescriptions":{"typeIdentifier":"t_stringliteral_3d725c5ee53025f027da36bea8d3af3b6a3e9d2d1542d47c162631de48e66c1c","typeString":"literal_string hex\"0f\""},"value":"\u000f"},{"arguments":[],"expression":{"argumentTypes":[],"id":2260,"name":"_EIP712Name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2291,"src":"5193:11:13","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_string_memory_ptr_$","typeString":"function () view returns (string memory)"}},"id":2261,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5193:13:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"arguments":[],"expression":{"argumentTypes":[],"id":2262,"name":"_EIP712Version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2300,"src":"5220:14:13","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_string_memory_ptr_$","typeString":"function () view returns (string memory)"}},"id":2263,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5220:16:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"expression":{"id":2264,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"5250:5:13","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":2265,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5256:7:13","memberName":"chainid","nodeType":"MemberAccess","src":"5250:13:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[{"id":2268,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"5285:4:13","typeDescriptions":{"typeIdentifier":"t_contract$_EIP712Upgradeable_$2396","typeString":"contract EIP712Upgradeable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_EIP712Upgradeable_$2396","typeString":"contract EIP712Upgradeable"}],"id":2267,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5277:7:13","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2266,"name":"address","nodeType":"ElementaryTypeName","src":"5277:7:13","typeDescriptions":{}}},"id":2269,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5277:13:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":2272,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5312:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2271,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5304:7:13","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":2270,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5304:7:13","typeDescriptions":{}}},"id":2273,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5304:10:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"arguments":[{"hexValue":"30","id":2277,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5342:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2276,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"5328:13:13","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_uint256_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (uint256[] memory)"},"typeName":{"baseType":{"id":2274,"name":"uint256","nodeType":"ElementaryTypeName","src":"5332:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2275,"nodeType":"ArrayTypeName","src":"5332:9:13","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}}},"id":2278,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5328:16:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}}],"id":2279,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"5149:205:13","typeDescriptions":{"typeIdentifier":"t_tuple$_t_stringliteral_3d725c5ee53025f027da36bea8d3af3b6a3e9d2d1542d47c162631de48e66c1c_$_t_string_memory_ptr_$_t_string_memory_ptr_$_t_uint256_$_t_address_$_t_bytes32_$_t_array$_t_uint256_$dyn_memory_ptr_$","typeString":"tuple(literal_string hex\"0f\",string memory,string memory,uint256,address,bytes32,uint256[] memory)"}},"functionReturnParameters":2247,"id":2280,"nodeType":"Return","src":"5142:212:13"}]},"documentation":{"id":2229,"nodeType":"StructuredDocumentation","src":"4418:77:13","text":" @dev See {EIP-5267}.\n _Available since v4.9._"},"functionSelector":"84b0196e","id":2282,"implemented":true,"kind":"function","modifiers":[],"name":"eip712Domain","nameLocation":"4509:12:13","nodeType":"FunctionDefinition","overrides":{"id":2231,"nodeType":"OverrideSpecifier","overrides":[],"src":"4576:8:13"},"parameters":{"id":2230,"nodeType":"ParameterList","parameters":[],"src":"4521:2:13"},"returnParameters":{"id":2247,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2233,"mutability":"mutable","name":"fields","nameLocation":"4622:6:13","nodeType":"VariableDeclaration","scope":2282,"src":"4615:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"},"typeName":{"id":2232,"name":"bytes1","nodeType":"ElementaryTypeName","src":"4615:6:13","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"visibility":"internal"},{"constant":false,"id":2235,"mutability":"mutable","name":"name","nameLocation":"4656:4:13","nodeType":"VariableDeclaration","scope":2282,"src":"4642:18:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2234,"name":"string","nodeType":"ElementaryTypeName","src":"4642:6:13","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":2237,"mutability":"mutable","name":"version","nameLocation":"4688:7:13","nodeType":"VariableDeclaration","scope":2282,"src":"4674:21:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2236,"name":"string","nodeType":"ElementaryTypeName","src":"4674:6:13","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":2239,"mutability":"mutable","name":"chainId","nameLocation":"4717:7:13","nodeType":"VariableDeclaration","scope":2282,"src":"4709:15:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2238,"name":"uint256","nodeType":"ElementaryTypeName","src":"4709:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2241,"mutability":"mutable","name":"verifyingContract","nameLocation":"4746:17:13","nodeType":"VariableDeclaration","scope":2282,"src":"4738:25:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2240,"name":"address","nodeType":"ElementaryTypeName","src":"4738:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2243,"mutability":"mutable","name":"salt","nameLocation":"4785:4:13","nodeType":"VariableDeclaration","scope":2282,"src":"4777:12:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2242,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4777:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2246,"mutability":"mutable","name":"extensions","nameLocation":"4820:10:13","nodeType":"VariableDeclaration","scope":2282,"src":"4803:27:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2244,"name":"uint256","nodeType":"ElementaryTypeName","src":"4803:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2245,"nodeType":"ArrayTypeName","src":"4803:9:13","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"4601:239:13"},"scope":2396,"src":"4500:861:13","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":2290,"nodeType":"Block","src":"5654:29:13","statements":[{"expression":{"id":2288,"name":"_name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2135,"src":"5671:5:13","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"functionReturnParameters":2287,"id":2289,"nodeType":"Return","src":"5664:12:13"}]},"documentation":{"id":2283,"nodeType":"StructuredDocumentation","src":"5367:213:13","text":" @dev The name parameter for the EIP712 domain.\n NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\n are a concern."},"id":2291,"implemented":true,"kind":"function","modifiers":[],"name":"_EIP712Name","nameLocation":"5594:11:13","nodeType":"FunctionDefinition","parameters":{"id":2284,"nodeType":"ParameterList","parameters":[],"src":"5605:2:13"},"returnParameters":{"id":2287,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2286,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2291,"src":"5639:13:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2285,"name":"string","nodeType":"ElementaryTypeName","src":"5639:6:13","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"5638:15:13"},"scope":2396,"src":"5585:98:13","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":2299,"nodeType":"Block","src":"5982:32:13","statements":[{"expression":{"id":2297,"name":"_version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2137,"src":"5999:8:13","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"functionReturnParameters":2296,"id":2298,"nodeType":"Return","src":"5992:15:13"}]},"documentation":{"id":2292,"nodeType":"StructuredDocumentation","src":"5689:216:13","text":" @dev The version parameter for the EIP712 domain.\n NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\n are a concern."},"id":2300,"implemented":true,"kind":"function","modifiers":[],"name":"_EIP712Version","nameLocation":"5919:14:13","nodeType":"FunctionDefinition","parameters":{"id":2293,"nodeType":"ParameterList","parameters":[],"src":"5933:2:13"},"returnParameters":{"id":2296,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2295,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2300,"src":"5967:13:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2294,"name":"string","nodeType":"ElementaryTypeName","src":"5967:6:13","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"5966:15:13"},"scope":2396,"src":"5910:104:13","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":2344,"nodeType":"Block","src":"6288:571:13","statements":[{"assignments":[2307],"declarations":[{"constant":false,"id":2307,"mutability":"mutable","name":"name","nameLocation":"6312:4:13","nodeType":"VariableDeclaration","scope":2344,"src":"6298:18:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2306,"name":"string","nodeType":"ElementaryTypeName","src":"6298:6:13","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"id":2310,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":2308,"name":"_EIP712Name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2291,"src":"6319:11:13","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_string_memory_ptr_$","typeString":"function () view returns (string memory)"}},"id":2309,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6319:13:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"nodeType":"VariableDeclarationStatement","src":"6298:34:13"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2317,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":2313,"name":"name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2307,"src":"6352:4:13","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2312,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6346:5:13","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":2311,"name":"bytes","nodeType":"ElementaryTypeName","src":"6346:5:13","typeDescriptions":{}}},"id":2314,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6346:11:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2315,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6358:6:13","memberName":"length","nodeType":"MemberAccess","src":"6346:18:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2316,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6367:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6346:22:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":2342,"nodeType":"Block","src":"6430:423:13","statements":[{"assignments":[2327],"declarations":[{"constant":false,"id":2327,"mutability":"mutable","name":"hashedName","nameLocation":"6675:10:13","nodeType":"VariableDeclaration","scope":2342,"src":"6667:18:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2326,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6667:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":2329,"initialValue":{"id":2328,"name":"_hashedName","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2130,"src":"6688:11:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"6667:32:13"},{"condition":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":2332,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2330,"name":"hashedName","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2327,"src":"6717:10:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":2331,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6731:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6717:15:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":2340,"nodeType":"Block","src":"6790:53:13","statements":[{"expression":{"arguments":[{"hexValue":"","id":2337,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6825:2:13","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"id":2336,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"6815:9:13","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":2338,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6815:13:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":2305,"id":2339,"nodeType":"Return","src":"6808:20:13"}]},"id":2341,"nodeType":"IfStatement","src":"6713:130:13","trueBody":{"id":2335,"nodeType":"Block","src":"6734:50:13","statements":[{"expression":{"id":2333,"name":"hashedName","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2327,"src":"6759:10:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":2305,"id":2334,"nodeType":"Return","src":"6752:17:13"}]}}]},"id":2343,"nodeType":"IfStatement","src":"6342:511:13","trueBody":{"id":2325,"nodeType":"Block","src":"6370:54:13","statements":[{"expression":{"arguments":[{"arguments":[{"id":2321,"name":"name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2307,"src":"6407:4:13","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2320,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6401:5:13","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":2319,"name":"bytes","nodeType":"ElementaryTypeName","src":"6401:5:13","typeDescriptions":{}}},"id":2322,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6401:11:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2318,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"6391:9:13","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":2323,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6391:22:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":2305,"id":2324,"nodeType":"Return","src":"6384:29:13"}]}}]},"documentation":{"id":2301,"nodeType":"StructuredDocumentation","src":"6020:204:13","text":" @dev The hash of the name parameter for the EIP712 domain.\n NOTE: In previous versions this function was virtual. In this version you should override `_EIP712Name` instead."},"id":2345,"implemented":true,"kind":"function","modifiers":[],"name":"_EIP712NameHash","nameLocation":"6238:15:13","nodeType":"FunctionDefinition","parameters":{"id":2302,"nodeType":"ParameterList","parameters":[],"src":"6253:2:13"},"returnParameters":{"id":2305,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2304,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2345,"src":"6279:7:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2303,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6279:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"6278:9:13"},"scope":2396,"src":"6229:630:13","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":2389,"nodeType":"Block","src":"7142:604:13","statements":[{"assignments":[2352],"declarations":[{"constant":false,"id":2352,"mutability":"mutable","name":"version","nameLocation":"7166:7:13","nodeType":"VariableDeclaration","scope":2389,"src":"7152:21:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2351,"name":"string","nodeType":"ElementaryTypeName","src":"7152:6:13","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"id":2355,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":2353,"name":"_EIP712Version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2300,"src":"7176:14:13","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_string_memory_ptr_$","typeString":"function () view returns (string memory)"}},"id":2354,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7176:16:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"nodeType":"VariableDeclarationStatement","src":"7152:40:13"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2362,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":2358,"name":"version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2352,"src":"7212:7:13","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2357,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7206:5:13","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":2356,"name":"bytes","nodeType":"ElementaryTypeName","src":"7206:5:13","typeDescriptions":{}}},"id":2359,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7206:14:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2360,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7221:6:13","memberName":"length","nodeType":"MemberAccess","src":"7206:21:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2361,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7230:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"7206:25:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":2387,"nodeType":"Block","src":"7296:444:13","statements":[{"assignments":[2372],"declarations":[{"constant":false,"id":2372,"mutability":"mutable","name":"hashedVersion","nameLocation":"7550:13:13","nodeType":"VariableDeclaration","scope":2387,"src":"7542:21:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2371,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7542:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":2374,"initialValue":{"id":2373,"name":"_hashedVersion","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2133,"src":"7566:14:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"7542:38:13"},{"condition":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":2377,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2375,"name":"hashedVersion","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2372,"src":"7598:13:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":2376,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7615:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"7598:18:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":2385,"nodeType":"Block","src":"7677:53:13","statements":[{"expression":{"arguments":[{"hexValue":"","id":2382,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7712:2:13","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"id":2381,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"7702:9:13","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":2383,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7702:13:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":2350,"id":2384,"nodeType":"Return","src":"7695:20:13"}]},"id":2386,"nodeType":"IfStatement","src":"7594:136:13","trueBody":{"id":2380,"nodeType":"Block","src":"7618:53:13","statements":[{"expression":{"id":2378,"name":"hashedVersion","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2372,"src":"7643:13:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":2350,"id":2379,"nodeType":"Return","src":"7636:20:13"}]}}]},"id":2388,"nodeType":"IfStatement","src":"7202:538:13","trueBody":{"id":2370,"nodeType":"Block","src":"7233:57:13","statements":[{"expression":{"arguments":[{"arguments":[{"id":2366,"name":"version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2352,"src":"7270:7:13","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2365,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7264:5:13","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":2364,"name":"bytes","nodeType":"ElementaryTypeName","src":"7264:5:13","typeDescriptions":{}}},"id":2367,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7264:14:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2363,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"7254:9:13","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":2368,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7254:25:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":2350,"id":2369,"nodeType":"Return","src":"7247:32:13"}]}}]},"documentation":{"id":2346,"nodeType":"StructuredDocumentation","src":"6865:210:13","text":" @dev The hash of the version parameter for the EIP712 domain.\n NOTE: In previous versions this function was virtual. In this version you should override `_EIP712Version` instead."},"id":2390,"implemented":true,"kind":"function","modifiers":[],"name":"_EIP712VersionHash","nameLocation":"7089:18:13","nodeType":"FunctionDefinition","parameters":{"id":2347,"nodeType":"ParameterList","parameters":[],"src":"7107:2:13"},"returnParameters":{"id":2350,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2349,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2390,"src":"7133:7:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2348,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7133:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"7132:9:13"},"scope":2396,"src":"7080:666:13","stateMutability":"view","virtual":false,"visibility":"internal"},{"constant":false,"documentation":{"id":2391,"nodeType":"StructuredDocumentation","src":"7752:254:13","text":" @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"},"id":2395,"mutability":"mutable","name":"__gap","nameLocation":"8031:5:13","nodeType":"VariableDeclaration","scope":2396,"src":"8011:25:13","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$48_storage","typeString":"uint256[48]"},"typeName":{"baseType":{"id":2392,"name":"uint256","nodeType":"ElementaryTypeName","src":"8011:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2394,"length":{"hexValue":"3438","id":2393,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8019:2:13","typeDescriptions":{"typeIdentifier":"t_rational_48_by_1","typeString":"int_const 48"},"value":"48"},"nodeType":"ArrayTypeName","src":"8011:11:13","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$48_storage_ptr","typeString":"uint256[48]"}},"visibility":"private"}],"scope":2397,"src":"1787:6252:13","usedErrors":[]}],"src":"113:7927:13"},"id":13},"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol","exportedSymbols":{"MathUpgradeable":[3262]},"id":3263,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2398,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"103:23:14"},{"abstract":false,"baseContracts":[],"canonicalName":"MathUpgradeable","contractDependencies":[],"contractKind":"library","documentation":{"id":2399,"nodeType":"StructuredDocumentation","src":"128:73:14","text":" @dev Standard math utilities missing in the Solidity language."},"fullyImplemented":true,"id":3262,"linearizedBaseContracts":[3262],"name":"MathUpgradeable","nameLocation":"210:15:14","nodeType":"ContractDefinition","nodes":[{"canonicalName":"MathUpgradeable.Rounding","id":2403,"members":[{"id":2400,"name":"Down","nameLocation":"256:4:14","nodeType":"EnumValue","src":"256:4:14"},{"id":2401,"name":"Up","nameLocation":"298:2:14","nodeType":"EnumValue","src":"298:2:14"},{"id":2402,"name":"Zero","nameLocation":"329:4:14","nodeType":"EnumValue","src":"329:4:14"}],"name":"Rounding","nameLocation":"237:8:14","nodeType":"EnumDefinition","src":"232:122:14"},{"body":{"id":2420,"nodeType":"Block","src":"491:37:14","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2415,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2413,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2406,"src":"508:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":2414,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2408,"src":"512:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"508:5:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":2417,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2408,"src":"520:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2418,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"508:13:14","trueExpression":{"id":2416,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2406,"src":"516:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2412,"id":2419,"nodeType":"Return","src":"501:20:14"}]},"documentation":{"id":2404,"nodeType":"StructuredDocumentation","src":"360:59:14","text":" @dev Returns the largest of two numbers."},"id":2421,"implemented":true,"kind":"function","modifiers":[],"name":"max","nameLocation":"433:3:14","nodeType":"FunctionDefinition","parameters":{"id":2409,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2406,"mutability":"mutable","name":"a","nameLocation":"445:1:14","nodeType":"VariableDeclaration","scope":2421,"src":"437:9:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2405,"name":"uint256","nodeType":"ElementaryTypeName","src":"437:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2408,"mutability":"mutable","name":"b","nameLocation":"456:1:14","nodeType":"VariableDeclaration","scope":2421,"src":"448:9:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2407,"name":"uint256","nodeType":"ElementaryTypeName","src":"448:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"436:22:14"},"returnParameters":{"id":2412,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2411,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2421,"src":"482:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2410,"name":"uint256","nodeType":"ElementaryTypeName","src":"482:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"481:9:14"},"scope":3262,"src":"424:104:14","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2438,"nodeType":"Block","src":"666:37:14","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2433,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2431,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2424,"src":"683:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2432,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2426,"src":"687:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"683:5:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":2435,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2426,"src":"695:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2436,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"683:13:14","trueExpression":{"id":2434,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2424,"src":"691:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2430,"id":2437,"nodeType":"Return","src":"676:20:14"}]},"documentation":{"id":2422,"nodeType":"StructuredDocumentation","src":"534:60:14","text":" @dev Returns the smallest of two numbers."},"id":2439,"implemented":true,"kind":"function","modifiers":[],"name":"min","nameLocation":"608:3:14","nodeType":"FunctionDefinition","parameters":{"id":2427,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2424,"mutability":"mutable","name":"a","nameLocation":"620:1:14","nodeType":"VariableDeclaration","scope":2439,"src":"612:9:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2423,"name":"uint256","nodeType":"ElementaryTypeName","src":"612:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2426,"mutability":"mutable","name":"b","nameLocation":"631:1:14","nodeType":"VariableDeclaration","scope":2439,"src":"623:9:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2425,"name":"uint256","nodeType":"ElementaryTypeName","src":"623:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"611:22:14"},"returnParameters":{"id":2430,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2429,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2439,"src":"657:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2428,"name":"uint256","nodeType":"ElementaryTypeName","src":"657:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"656:9:14"},"scope":3262,"src":"599:104:14","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2461,"nodeType":"Block","src":"887:82:14","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2459,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2451,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2449,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2442,"src":"942:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"id":2450,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2444,"src":"946:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"942:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2452,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"941:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2458,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2455,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2453,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2442,"src":"952:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":2454,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2444,"src":"956:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"952:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2456,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"951:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"32","id":2457,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"961:1:14","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"951:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"941:21:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2448,"id":2460,"nodeType":"Return","src":"934:28:14"}]},"documentation":{"id":2440,"nodeType":"StructuredDocumentation","src":"709:102:14","text":" @dev Returns the average of two numbers. The result is rounded towards\n zero."},"id":2462,"implemented":true,"kind":"function","modifiers":[],"name":"average","nameLocation":"825:7:14","nodeType":"FunctionDefinition","parameters":{"id":2445,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2442,"mutability":"mutable","name":"a","nameLocation":"841:1:14","nodeType":"VariableDeclaration","scope":2462,"src":"833:9:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2441,"name":"uint256","nodeType":"ElementaryTypeName","src":"833:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2444,"mutability":"mutable","name":"b","nameLocation":"852:1:14","nodeType":"VariableDeclaration","scope":2462,"src":"844:9:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2443,"name":"uint256","nodeType":"ElementaryTypeName","src":"844:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"832:22:14"},"returnParameters":{"id":2448,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2447,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2462,"src":"878:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2446,"name":"uint256","nodeType":"ElementaryTypeName","src":"878:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"877:9:14"},"scope":3262,"src":"816:153:14","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2486,"nodeType":"Block","src":"1239:123:14","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2474,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2472,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2465,"src":"1327:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2473,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1332:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1327:6:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2483,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2481,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2478,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2476,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2465,"src":"1341:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":2477,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1345:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1341:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2479,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1340:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2480,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2467,"src":"1350:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1340:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":2482,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1354:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1340:15:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2484,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"1327:28:14","trueExpression":{"hexValue":"30","id":2475,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1336:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2471,"id":2485,"nodeType":"Return","src":"1320:35:14"}]},"documentation":{"id":2463,"nodeType":"StructuredDocumentation","src":"975:188:14","text":" @dev Returns the ceiling of the division of two numbers.\n This differs from standard division with `/` in that it rounds up instead\n of rounding down."},"id":2487,"implemented":true,"kind":"function","modifiers":[],"name":"ceilDiv","nameLocation":"1177:7:14","nodeType":"FunctionDefinition","parameters":{"id":2468,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2465,"mutability":"mutable","name":"a","nameLocation":"1193:1:14","nodeType":"VariableDeclaration","scope":2487,"src":"1185:9:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2464,"name":"uint256","nodeType":"ElementaryTypeName","src":"1185:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2467,"mutability":"mutable","name":"b","nameLocation":"1204:1:14","nodeType":"VariableDeclaration","scope":2487,"src":"1196:9:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2466,"name":"uint256","nodeType":"ElementaryTypeName","src":"1196:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1184:22:14"},"returnParameters":{"id":2471,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2470,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2487,"src":"1230:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2469,"name":"uint256","nodeType":"ElementaryTypeName","src":"1230:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1229:9:14"},"scope":3262,"src":"1168:194:14","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2609,"nodeType":"Block","src":"1776:4115:14","statements":[{"id":2608,"nodeType":"UncheckedBlock","src":"1786:4099:14","statements":[{"assignments":[2500],"declarations":[{"constant":false,"id":2500,"mutability":"mutable","name":"prod0","nameLocation":"2115:5:14","nodeType":"VariableDeclaration","scope":2608,"src":"2107:13:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2499,"name":"uint256","nodeType":"ElementaryTypeName","src":"2107:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2501,"nodeType":"VariableDeclarationStatement","src":"2107:13:14"},{"assignments":[2503],"declarations":[{"constant":false,"id":2503,"mutability":"mutable","name":"prod1","nameLocation":"2187:5:14","nodeType":"VariableDeclaration","scope":2608,"src":"2179:13:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2502,"name":"uint256","nodeType":"ElementaryTypeName","src":"2179:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2504,"nodeType":"VariableDeclarationStatement","src":"2179:13:14"},{"AST":{"nodeType":"YulBlock","src":"2259:157:14","statements":[{"nodeType":"YulVariableDeclaration","src":"2277:30:14","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"2294:1:14"},{"name":"y","nodeType":"YulIdentifier","src":"2297:1:14"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2304:1:14","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"2300:3:14"},"nodeType":"YulFunctionCall","src":"2300:6:14"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"2287:6:14"},"nodeType":"YulFunctionCall","src":"2287:20:14"},"variables":[{"name":"mm","nodeType":"YulTypedName","src":"2281:2:14","type":""}]},{"nodeType":"YulAssignment","src":"2324:18:14","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"2337:1:14"},{"name":"y","nodeType":"YulIdentifier","src":"2340:1:14"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"2333:3:14"},"nodeType":"YulFunctionCall","src":"2333:9:14"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"2324:5:14"}]},{"nodeType":"YulAssignment","src":"2359:43:14","value":{"arguments":[{"arguments":[{"name":"mm","nodeType":"YulIdentifier","src":"2376:2:14"},{"name":"prod0","nodeType":"YulIdentifier","src":"2380:5:14"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2372:3:14"},"nodeType":"YulFunctionCall","src":"2372:14:14"},{"arguments":[{"name":"mm","nodeType":"YulIdentifier","src":"2391:2:14"},{"name":"prod0","nodeType":"YulIdentifier","src":"2395:5:14"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2388:2:14"},"nodeType":"YulFunctionCall","src":"2388:13:14"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2368:3:14"},"nodeType":"YulFunctionCall","src":"2368:34:14"},"variableNames":[{"name":"prod1","nodeType":"YulIdentifier","src":"2359:5:14"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":2500,"isOffset":false,"isSlot":false,"src":"2324:5:14","valueSize":1},{"declaration":2500,"isOffset":false,"isSlot":false,"src":"2380:5:14","valueSize":1},{"declaration":2500,"isOffset":false,"isSlot":false,"src":"2395:5:14","valueSize":1},{"declaration":2503,"isOffset":false,"isSlot":false,"src":"2359:5:14","valueSize":1},{"declaration":2490,"isOffset":false,"isSlot":false,"src":"2294:1:14","valueSize":1},{"declaration":2490,"isOffset":false,"isSlot":false,"src":"2337:1:14","valueSize":1},{"declaration":2492,"isOffset":false,"isSlot":false,"src":"2297:1:14","valueSize":1},{"declaration":2492,"isOffset":false,"isSlot":false,"src":"2340:1:14","valueSize":1}],"id":2505,"nodeType":"InlineAssembly","src":"2250:166:14"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2508,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2506,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2503,"src":"2497:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2507,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2506:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2497:10:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2514,"nodeType":"IfStatement","src":"2493:368:14","trueBody":{"id":2513,"nodeType":"Block","src":"2509:352:14","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2511,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2509,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2500,"src":"2827:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2510,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2494,"src":"2835:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2827:19:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2498,"id":2512,"nodeType":"Return","src":"2820:26:14"}]}},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2518,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2516,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2494,"src":"2971:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":2517,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2503,"src":"2985:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2971:19:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4d6174683a206d756c446976206f766572666c6f77","id":2519,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2992:23:14","typeDescriptions":{"typeIdentifier":"t_stringliteral_d87093691d63b122ac2c14d1b11554b287e2431cf2b03550b3be7cffb0f86851","typeString":"literal_string \"Math: mulDiv overflow\""},"value":"Math: mulDiv overflow"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_d87093691d63b122ac2c14d1b11554b287e2431cf2b03550b3be7cffb0f86851","typeString":"literal_string \"Math: mulDiv overflow\""}],"id":2515,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2963:7:14","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2520,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2963:53:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2521,"nodeType":"ExpressionStatement","src":"2963:53:14"},{"assignments":[2523],"declarations":[{"constant":false,"id":2523,"mutability":"mutable","name":"remainder","nameLocation":"3280:9:14","nodeType":"VariableDeclaration","scope":2608,"src":"3272:17:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2522,"name":"uint256","nodeType":"ElementaryTypeName","src":"3272:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2524,"nodeType":"VariableDeclarationStatement","src":"3272:17:14"},{"AST":{"nodeType":"YulBlock","src":"3312:291:14","statements":[{"nodeType":"YulAssignment","src":"3381:38:14","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"3401:1:14"},{"name":"y","nodeType":"YulIdentifier","src":"3404:1:14"},{"name":"denominator","nodeType":"YulIdentifier","src":"3407:11:14"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"3394:6:14"},"nodeType":"YulFunctionCall","src":"3394:25:14"},"variableNames":[{"name":"remainder","nodeType":"YulIdentifier","src":"3381:9:14"}]},{"nodeType":"YulAssignment","src":"3501:41:14","value":{"arguments":[{"name":"prod1","nodeType":"YulIdentifier","src":"3514:5:14"},{"arguments":[{"name":"remainder","nodeType":"YulIdentifier","src":"3524:9:14"},{"name":"prod0","nodeType":"YulIdentifier","src":"3535:5:14"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3521:2:14"},"nodeType":"YulFunctionCall","src":"3521:20:14"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3510:3:14"},"nodeType":"YulFunctionCall","src":"3510:32:14"},"variableNames":[{"name":"prod1","nodeType":"YulIdentifier","src":"3501:5:14"}]},{"nodeType":"YulAssignment","src":"3559:30:14","value":{"arguments":[{"name":"prod0","nodeType":"YulIdentifier","src":"3572:5:14"},{"name":"remainder","nodeType":"YulIdentifier","src":"3579:9:14"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3568:3:14"},"nodeType":"YulFunctionCall","src":"3568:21:14"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"3559:5:14"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":2494,"isOffset":false,"isSlot":false,"src":"3407:11:14","valueSize":1},{"declaration":2500,"isOffset":false,"isSlot":false,"src":"3535:5:14","valueSize":1},{"declaration":2500,"isOffset":false,"isSlot":false,"src":"3559:5:14","valueSize":1},{"declaration":2500,"isOffset":false,"isSlot":false,"src":"3572:5:14","valueSize":1},{"declaration":2503,"isOffset":false,"isSlot":false,"src":"3501:5:14","valueSize":1},{"declaration":2503,"isOffset":false,"isSlot":false,"src":"3514:5:14","valueSize":1},{"declaration":2523,"isOffset":false,"isSlot":false,"src":"3381:9:14","valueSize":1},{"declaration":2523,"isOffset":false,"isSlot":false,"src":"3524:9:14","valueSize":1},{"declaration":2523,"isOffset":false,"isSlot":false,"src":"3579:9:14","valueSize":1},{"declaration":2490,"isOffset":false,"isSlot":false,"src":"3401:1:14","valueSize":1},{"declaration":2492,"isOffset":false,"isSlot":false,"src":"3404:1:14","valueSize":1}],"id":2525,"nodeType":"InlineAssembly","src":"3303:300:14"},{"assignments":[2527],"declarations":[{"constant":false,"id":2527,"mutability":"mutable","name":"twos","nameLocation":"3918:4:14","nodeType":"VariableDeclaration","scope":2608,"src":"3910:12:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2526,"name":"uint256","nodeType":"ElementaryTypeName","src":"3910:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2535,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2534,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2528,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2494,"src":"3925:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2532,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2530,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"~","prefix":true,"src":"3940:12:14","subExpression":{"id":2529,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2494,"src":"3941:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":2531,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3955:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3940:16:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2533,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3939:18:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3925:32:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3910:47:14"},{"AST":{"nodeType":"YulBlock","src":"3980:362:14","statements":[{"nodeType":"YulAssignment","src":"4045:37:14","value":{"arguments":[{"name":"denominator","nodeType":"YulIdentifier","src":"4064:11:14"},{"name":"twos","nodeType":"YulIdentifier","src":"4077:4:14"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"4060:3:14"},"nodeType":"YulFunctionCall","src":"4060:22:14"},"variableNames":[{"name":"denominator","nodeType":"YulIdentifier","src":"4045:11:14"}]},{"nodeType":"YulAssignment","src":"4149:25:14","value":{"arguments":[{"name":"prod0","nodeType":"YulIdentifier","src":"4162:5:14"},{"name":"twos","nodeType":"YulIdentifier","src":"4169:4:14"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"4158:3:14"},"nodeType":"YulFunctionCall","src":"4158:16:14"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"4149:5:14"}]},{"nodeType":"YulAssignment","src":"4289:39:14","value":{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4309:1:14","type":"","value":"0"},{"name":"twos","nodeType":"YulIdentifier","src":"4312:4:14"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4305:3:14"},"nodeType":"YulFunctionCall","src":"4305:12:14"},{"name":"twos","nodeType":"YulIdentifier","src":"4319:4:14"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"4301:3:14"},"nodeType":"YulFunctionCall","src":"4301:23:14"},{"kind":"number","nodeType":"YulLiteral","src":"4326:1:14","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4297:3:14"},"nodeType":"YulFunctionCall","src":"4297:31:14"},"variableNames":[{"name":"twos","nodeType":"YulIdentifier","src":"4289:4:14"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":2494,"isOffset":false,"isSlot":false,"src":"4045:11:14","valueSize":1},{"declaration":2494,"isOffset":false,"isSlot":false,"src":"4064:11:14","valueSize":1},{"declaration":2500,"isOffset":false,"isSlot":false,"src":"4149:5:14","valueSize":1},{"declaration":2500,"isOffset":false,"isSlot":false,"src":"4162:5:14","valueSize":1},{"declaration":2527,"isOffset":false,"isSlot":false,"src":"4077:4:14","valueSize":1},{"declaration":2527,"isOffset":false,"isSlot":false,"src":"4169:4:14","valueSize":1},{"declaration":2527,"isOffset":false,"isSlot":false,"src":"4289:4:14","valueSize":1},{"declaration":2527,"isOffset":false,"isSlot":false,"src":"4312:4:14","valueSize":1},{"declaration":2527,"isOffset":false,"isSlot":false,"src":"4319:4:14","valueSize":1}],"id":2536,"nodeType":"InlineAssembly","src":"3971:371:14"},{"expression":{"id":2541,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2537,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2500,"src":"4408:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"|=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2540,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2538,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2503,"src":"4417:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2539,"name":"twos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2527,"src":"4425:4:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4417:12:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4408:21:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2542,"nodeType":"ExpressionStatement","src":"4408:21:14"},{"assignments":[2544],"declarations":[{"constant":false,"id":2544,"mutability":"mutable","name":"inverse","nameLocation":"4755:7:14","nodeType":"VariableDeclaration","scope":2608,"src":"4747:15:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2543,"name":"uint256","nodeType":"ElementaryTypeName","src":"4747:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2551,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2550,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2547,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"33","id":2545,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4766:1:14","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2546,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2494,"src":"4770:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4766:15:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2548,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4765:17:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"hexValue":"32","id":2549,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4785:1:14","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"4765:21:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4747:39:14"},{"expression":{"id":2558,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2552,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2544,"src":"5003:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2557,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2553,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5014:1:14","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2556,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2554,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2494,"src":"5018:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2555,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2544,"src":"5032:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5018:21:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5014:25:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5003:36:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2559,"nodeType":"ExpressionStatement","src":"5003:36:14"},{"expression":{"id":2566,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2560,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2544,"src":"5072:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2565,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2561,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5083:1:14","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2564,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2562,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2494,"src":"5087:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2563,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2544,"src":"5101:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5087:21:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5083:25:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5072:36:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2567,"nodeType":"ExpressionStatement","src":"5072:36:14"},{"expression":{"id":2574,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2568,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2544,"src":"5142:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2573,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2569,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5153:1:14","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2572,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2570,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2494,"src":"5157:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2571,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2544,"src":"5171:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5157:21:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5153:25:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5142:36:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2575,"nodeType":"ExpressionStatement","src":"5142:36:14"},{"expression":{"id":2582,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2576,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2544,"src":"5212:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2581,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2577,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5223:1:14","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2580,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2578,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2494,"src":"5227:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2579,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2544,"src":"5241:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5227:21:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5223:25:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5212:36:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2583,"nodeType":"ExpressionStatement","src":"5212:36:14"},{"expression":{"id":2590,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2584,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2544,"src":"5282:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2589,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2585,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5293:1:14","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2588,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2586,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2494,"src":"5297:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2587,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2544,"src":"5311:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5297:21:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5293:25:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5282:36:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2591,"nodeType":"ExpressionStatement","src":"5282:36:14"},{"expression":{"id":2598,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2592,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2544,"src":"5353:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2597,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2593,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5364:1:14","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2596,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2594,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2494,"src":"5368:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2595,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2544,"src":"5382:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5368:21:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5364:25:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5353:36:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2599,"nodeType":"ExpressionStatement","src":"5353:36:14"},{"expression":{"id":2604,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2600,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2497,"src":"5823:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2603,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2601,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2500,"src":"5832:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2602,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2544,"src":"5840:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5832:15:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5823:24:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2605,"nodeType":"ExpressionStatement","src":"5823:24:14"},{"expression":{"id":2606,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2497,"src":"5868:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2498,"id":2607,"nodeType":"Return","src":"5861:13:14"}]}]},"documentation":{"id":2488,"nodeType":"StructuredDocumentation","src":"1368:305:14","text":" @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n with further edits by Uniswap Labs also under MIT license."},"id":2610,"implemented":true,"kind":"function","modifiers":[],"name":"mulDiv","nameLocation":"1687:6:14","nodeType":"FunctionDefinition","parameters":{"id":2495,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2490,"mutability":"mutable","name":"x","nameLocation":"1702:1:14","nodeType":"VariableDeclaration","scope":2610,"src":"1694:9:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2489,"name":"uint256","nodeType":"ElementaryTypeName","src":"1694:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2492,"mutability":"mutable","name":"y","nameLocation":"1713:1:14","nodeType":"VariableDeclaration","scope":2610,"src":"1705:9:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2491,"name":"uint256","nodeType":"ElementaryTypeName","src":"1705:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2494,"mutability":"mutable","name":"denominator","nameLocation":"1724:11:14","nodeType":"VariableDeclaration","scope":2610,"src":"1716:19:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2493,"name":"uint256","nodeType":"ElementaryTypeName","src":"1716:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1693:43:14"},"returnParameters":{"id":2498,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2497,"mutability":"mutable","name":"result","nameLocation":"1768:6:14","nodeType":"VariableDeclaration","scope":2610,"src":"1760:14:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2496,"name":"uint256","nodeType":"ElementaryTypeName","src":"1760:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1759:16:14"},"scope":3262,"src":"1678:4213:14","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2653,"nodeType":"Block","src":"6133:189:14","statements":[{"assignments":[2626],"declarations":[{"constant":false,"id":2626,"mutability":"mutable","name":"result","nameLocation":"6151:6:14","nodeType":"VariableDeclaration","scope":2653,"src":"6143:14:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2625,"name":"uint256","nodeType":"ElementaryTypeName","src":"6143:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2632,"initialValue":{"arguments":[{"id":2628,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2613,"src":"6167:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2629,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2615,"src":"6170:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2630,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2617,"src":"6173:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2627,"name":"mulDiv","nodeType":"Identifier","overloadedDeclarations":[2610,2654],"referencedDeclaration":2610,"src":"6160:6:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":2631,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6160:25:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"6143:42:14"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2644,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$2403","typeString":"enum MathUpgradeable.Rounding"},"id":2636,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2633,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2620,"src":"6199:8:14","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2403","typeString":"enum MathUpgradeable.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2634,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2403,"src":"6211:8:14","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$2403_$","typeString":"type(enum MathUpgradeable.Rounding)"}},"id":2635,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6220:2:14","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":2401,"src":"6211:11:14","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2403","typeString":"enum MathUpgradeable.Rounding"}},"src":"6199:23:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2643,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2638,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2613,"src":"6233:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2639,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2615,"src":"6236:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2640,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2617,"src":"6239:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2637,"name":"mulmod","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-16,"src":"6226:6:14","typeDescriptions":{"typeIdentifier":"t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":2641,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6226:25:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2642,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6254:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6226:29:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"6199:56:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2650,"nodeType":"IfStatement","src":"6195:98:14","trueBody":{"id":2649,"nodeType":"Block","src":"6257:36:14","statements":[{"expression":{"id":2647,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2645,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2626,"src":"6271:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":2646,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6281:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"6271:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2648,"nodeType":"ExpressionStatement","src":"6271:11:14"}]}},{"expression":{"id":2651,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2626,"src":"6309:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2624,"id":2652,"nodeType":"Return","src":"6302:13:14"}]},"documentation":{"id":2611,"nodeType":"StructuredDocumentation","src":"5897:121:14","text":" @notice Calculates x * y / denominator with full precision, following the selected rounding direction."},"id":2654,"implemented":true,"kind":"function","modifiers":[],"name":"mulDiv","nameLocation":"6032:6:14","nodeType":"FunctionDefinition","parameters":{"id":2621,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2613,"mutability":"mutable","name":"x","nameLocation":"6047:1:14","nodeType":"VariableDeclaration","scope":2654,"src":"6039:9:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2612,"name":"uint256","nodeType":"ElementaryTypeName","src":"6039:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2615,"mutability":"mutable","name":"y","nameLocation":"6058:1:14","nodeType":"VariableDeclaration","scope":2654,"src":"6050:9:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2614,"name":"uint256","nodeType":"ElementaryTypeName","src":"6050:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2617,"mutability":"mutable","name":"denominator","nameLocation":"6069:11:14","nodeType":"VariableDeclaration","scope":2654,"src":"6061:19:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2616,"name":"uint256","nodeType":"ElementaryTypeName","src":"6061:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2620,"mutability":"mutable","name":"rounding","nameLocation":"6091:8:14","nodeType":"VariableDeclaration","scope":2654,"src":"6082:17:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2403","typeString":"enum MathUpgradeable.Rounding"},"typeName":{"id":2619,"nodeType":"UserDefinedTypeName","pathNode":{"id":2618,"name":"Rounding","nameLocations":["6082:8:14"],"nodeType":"IdentifierPath","referencedDeclaration":2403,"src":"6082:8:14"},"referencedDeclaration":2403,"src":"6082:8:14","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2403","typeString":"enum MathUpgradeable.Rounding"}},"visibility":"internal"}],"src":"6038:62:14"},"returnParameters":{"id":2624,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2623,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2654,"src":"6124:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2622,"name":"uint256","nodeType":"ElementaryTypeName","src":"6124:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6123:9:14"},"scope":3262,"src":"6023:299:14","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2765,"nodeType":"Block","src":"6598:1585:14","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2664,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2662,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2657,"src":"6612:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2663,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6617:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6612:6:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2668,"nodeType":"IfStatement","src":"6608:45:14","trueBody":{"id":2667,"nodeType":"Block","src":"6620:33:14","statements":[{"expression":{"hexValue":"30","id":2665,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6641:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":2661,"id":2666,"nodeType":"Return","src":"6634:8:14"}]}},{"assignments":[2670],"declarations":[{"constant":false,"id":2670,"mutability":"mutable","name":"result","nameLocation":"7340:6:14","nodeType":"VariableDeclaration","scope":2765,"src":"7332:14:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2669,"name":"uint256","nodeType":"ElementaryTypeName","src":"7332:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2679,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2678,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":2671,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7349:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2676,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2673,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2657,"src":"7360:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2672,"name":"log2","nodeType":"Identifier","overloadedDeclarations":[2934,2970],"referencedDeclaration":2934,"src":"7355:4:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2674,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7355:7:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2675,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7366:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7355:12:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2677,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7354:14:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7349:19:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7332:36:14"},{"id":2764,"nodeType":"UncheckedBlock","src":"7769:408:14","statements":[{"expression":{"id":2689,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2680,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2670,"src":"7793:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2688,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2685,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2681,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2670,"src":"7803:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2684,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2682,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2657,"src":"7812:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2683,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2670,"src":"7816:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7812:10:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7803:19:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2686,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7802:21:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2687,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7827:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7802:26:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7793:35:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2690,"nodeType":"ExpressionStatement","src":"7793:35:14"},{"expression":{"id":2700,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2691,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2670,"src":"7842:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2699,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2696,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2692,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2670,"src":"7852:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2695,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2693,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2657,"src":"7861:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2694,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2670,"src":"7865:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7861:10:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7852:19:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2697,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7851:21:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2698,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7876:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7851:26:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7842:35:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2701,"nodeType":"ExpressionStatement","src":"7842:35:14"},{"expression":{"id":2711,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2702,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2670,"src":"7891:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2710,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2707,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2703,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2670,"src":"7901:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2706,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2704,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2657,"src":"7910:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2705,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2670,"src":"7914:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7910:10:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7901:19:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2708,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7900:21:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2709,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7925:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7900:26:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7891:35:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2712,"nodeType":"ExpressionStatement","src":"7891:35:14"},{"expression":{"id":2722,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2713,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2670,"src":"7940:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2721,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2718,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2714,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2670,"src":"7950:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2717,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2715,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2657,"src":"7959:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2716,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2670,"src":"7963:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7959:10:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7950:19:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2719,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7949:21:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2720,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7974:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7949:26:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7940:35:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2723,"nodeType":"ExpressionStatement","src":"7940:35:14"},{"expression":{"id":2733,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2724,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2670,"src":"7989:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2732,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2729,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2725,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2670,"src":"7999:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2728,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2726,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2657,"src":"8008:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2727,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2670,"src":"8012:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8008:10:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7999:19:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2730,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7998:21:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2731,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8023:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7998:26:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7989:35:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2734,"nodeType":"ExpressionStatement","src":"7989:35:14"},{"expression":{"id":2744,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2735,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2670,"src":"8038:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2743,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2740,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2736,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2670,"src":"8048:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2739,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2737,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2657,"src":"8057:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2738,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2670,"src":"8061:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8057:10:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8048:19:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2741,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8047:21:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2742,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8072:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"8047:26:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8038:35:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2745,"nodeType":"ExpressionStatement","src":"8038:35:14"},{"expression":{"id":2755,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2746,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2670,"src":"8087:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2754,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2751,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2747,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2670,"src":"8097:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2750,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2748,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2657,"src":"8106:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2749,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2670,"src":"8110:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8106:10:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8097:19:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2752,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8096:21:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2753,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8121:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"8096:26:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8087:35:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2756,"nodeType":"ExpressionStatement","src":"8087:35:14"},{"expression":{"arguments":[{"id":2758,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2670,"src":"8147:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2761,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2759,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2657,"src":"8155:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2760,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2670,"src":"8159:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8155:10:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2757,"name":"min","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2439,"src":"8143:3:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":2762,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8143:23:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2661,"id":2763,"nodeType":"Return","src":"8136:30:14"}]}]},"documentation":{"id":2655,"nodeType":"StructuredDocumentation","src":"6328:208:14","text":" @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11)."},"id":2766,"implemented":true,"kind":"function","modifiers":[],"name":"sqrt","nameLocation":"6550:4:14","nodeType":"FunctionDefinition","parameters":{"id":2658,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2657,"mutability":"mutable","name":"a","nameLocation":"6563:1:14","nodeType":"VariableDeclaration","scope":2766,"src":"6555:9:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2656,"name":"uint256","nodeType":"ElementaryTypeName","src":"6555:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6554:11:14"},"returnParameters":{"id":2661,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2660,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2766,"src":"6589:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2659,"name":"uint256","nodeType":"ElementaryTypeName","src":"6589:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6588:9:14"},"scope":3262,"src":"6541:1642:14","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2801,"nodeType":"Block","src":"8359:161:14","statements":[{"id":2800,"nodeType":"UncheckedBlock","src":"8369:145:14","statements":[{"assignments":[2778],"declarations":[{"constant":false,"id":2778,"mutability":"mutable","name":"result","nameLocation":"8401:6:14","nodeType":"VariableDeclaration","scope":2800,"src":"8393:14:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2777,"name":"uint256","nodeType":"ElementaryTypeName","src":"8393:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2782,"initialValue":{"arguments":[{"id":2780,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2769,"src":"8415:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2779,"name":"sqrt","nodeType":"Identifier","overloadedDeclarations":[2766,2802],"referencedDeclaration":2766,"src":"8410:4:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2781,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8410:7:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"8393:24:14"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2798,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2783,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2778,"src":"8438:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2793,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$2403","typeString":"enum MathUpgradeable.Rounding"},"id":2787,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2784,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2772,"src":"8448:8:14","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2403","typeString":"enum MathUpgradeable.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2785,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2403,"src":"8460:8:14","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$2403_$","typeString":"type(enum MathUpgradeable.Rounding)"}},"id":2786,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"8469:2:14","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":2401,"src":"8460:11:14","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2403","typeString":"enum MathUpgradeable.Rounding"}},"src":"8448:23:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2792,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2790,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2788,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2778,"src":"8475:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2789,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2778,"src":"8484:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8475:15:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2791,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2769,"src":"8493:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8475:19:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"8448:46:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":2795,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8501:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":2796,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"8448:54:14","trueExpression":{"hexValue":"31","id":2794,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8497:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":2797,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8447:56:14","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"8438:65:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2776,"id":2799,"nodeType":"Return","src":"8431:72:14"}]}]},"documentation":{"id":2767,"nodeType":"StructuredDocumentation","src":"8189:89:14","text":" @notice Calculates sqrt(a), following the selected rounding direction."},"id":2802,"implemented":true,"kind":"function","modifiers":[],"name":"sqrt","nameLocation":"8292:4:14","nodeType":"FunctionDefinition","parameters":{"id":2773,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2769,"mutability":"mutable","name":"a","nameLocation":"8305:1:14","nodeType":"VariableDeclaration","scope":2802,"src":"8297:9:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2768,"name":"uint256","nodeType":"ElementaryTypeName","src":"8297:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2772,"mutability":"mutable","name":"rounding","nameLocation":"8317:8:14","nodeType":"VariableDeclaration","scope":2802,"src":"8308:17:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2403","typeString":"enum MathUpgradeable.Rounding"},"typeName":{"id":2771,"nodeType":"UserDefinedTypeName","pathNode":{"id":2770,"name":"Rounding","nameLocations":["8308:8:14"],"nodeType":"IdentifierPath","referencedDeclaration":2403,"src":"8308:8:14"},"referencedDeclaration":2403,"src":"8308:8:14","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2403","typeString":"enum MathUpgradeable.Rounding"}},"visibility":"internal"}],"src":"8296:30:14"},"returnParameters":{"id":2776,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2775,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2802,"src":"8350:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2774,"name":"uint256","nodeType":"ElementaryTypeName","src":"8350:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8349:9:14"},"scope":3262,"src":"8283:237:14","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2933,"nodeType":"Block","src":"8705:922:14","statements":[{"assignments":[2811],"declarations":[{"constant":false,"id":2811,"mutability":"mutable","name":"result","nameLocation":"8723:6:14","nodeType":"VariableDeclaration","scope":2933,"src":"8715:14:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2810,"name":"uint256","nodeType":"ElementaryTypeName","src":"8715:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2813,"initialValue":{"hexValue":"30","id":2812,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8732:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"8715:18:14"},{"id":2930,"nodeType":"UncheckedBlock","src":"8743:855:14","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2818,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2816,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2814,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2805,"src":"8771:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":2815,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8780:3:14","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8771:12:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2817,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8786:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8771:16:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2828,"nodeType":"IfStatement","src":"8767:99:14","trueBody":{"id":2827,"nodeType":"Block","src":"8789:77:14","statements":[{"expression":{"id":2821,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2819,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2805,"src":"8807:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"313238","id":2820,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8817:3:14","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8807:13:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2822,"nodeType":"ExpressionStatement","src":"8807:13:14"},{"expression":{"id":2825,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2823,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2811,"src":"8838:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"313238","id":2824,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8848:3:14","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8838:13:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2826,"nodeType":"ExpressionStatement","src":"8838:13:14"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2833,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2831,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2829,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2805,"src":"8883:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3634","id":2830,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8892:2:14","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"8883:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2832,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8897:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8883:15:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2843,"nodeType":"IfStatement","src":"8879:96:14","trueBody":{"id":2842,"nodeType":"Block","src":"8900:75:14","statements":[{"expression":{"id":2836,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2834,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2805,"src":"8918:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3634","id":2835,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8928:2:14","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"8918:12:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2837,"nodeType":"ExpressionStatement","src":"8918:12:14"},{"expression":{"id":2840,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2838,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2811,"src":"8948:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3634","id":2839,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8958:2:14","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"8948:12:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2841,"nodeType":"ExpressionStatement","src":"8948:12:14"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2848,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2846,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2844,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2805,"src":"8992:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3332","id":2845,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9001:2:14","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"8992:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2847,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9006:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8992:15:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2858,"nodeType":"IfStatement","src":"8988:96:14","trueBody":{"id":2857,"nodeType":"Block","src":"9009:75:14","statements":[{"expression":{"id":2851,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2849,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2805,"src":"9027:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3332","id":2850,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9037:2:14","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"9027:12:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2852,"nodeType":"ExpressionStatement","src":"9027:12:14"},{"expression":{"id":2855,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2853,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2811,"src":"9057:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3332","id":2854,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9067:2:14","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"9057:12:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2856,"nodeType":"ExpressionStatement","src":"9057:12:14"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2863,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2861,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2859,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2805,"src":"9101:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3136","id":2860,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9110:2:14","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"9101:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2862,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9115:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9101:15:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2873,"nodeType":"IfStatement","src":"9097:96:14","trueBody":{"id":2872,"nodeType":"Block","src":"9118:75:14","statements":[{"expression":{"id":2866,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2864,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2805,"src":"9136:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3136","id":2865,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9146:2:14","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"9136:12:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2867,"nodeType":"ExpressionStatement","src":"9136:12:14"},{"expression":{"id":2870,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2868,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2811,"src":"9166:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":2869,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9176:2:14","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"9166:12:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2871,"nodeType":"ExpressionStatement","src":"9166:12:14"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2878,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2876,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2874,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2805,"src":"9210:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"38","id":2875,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9219:1:14","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"9210:10:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2877,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9223:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9210:14:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2888,"nodeType":"IfStatement","src":"9206:93:14","trueBody":{"id":2887,"nodeType":"Block","src":"9226:73:14","statements":[{"expression":{"id":2881,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2879,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2805,"src":"9244:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"38","id":2880,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9254:1:14","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"9244:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2882,"nodeType":"ExpressionStatement","src":"9244:11:14"},{"expression":{"id":2885,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2883,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2811,"src":"9273:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":2884,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9283:1:14","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"9273:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2886,"nodeType":"ExpressionStatement","src":"9273:11:14"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2893,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2891,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2889,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2805,"src":"9316:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"34","id":2890,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9325:1:14","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9316:10:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2892,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9329:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9316:14:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2903,"nodeType":"IfStatement","src":"9312:93:14","trueBody":{"id":2902,"nodeType":"Block","src":"9332:73:14","statements":[{"expression":{"id":2896,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2894,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2805,"src":"9350:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"34","id":2895,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9360:1:14","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9350:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2897,"nodeType":"ExpressionStatement","src":"9350:11:14"},{"expression":{"id":2900,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2898,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2811,"src":"9379:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":2899,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9389:1:14","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9379:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2901,"nodeType":"ExpressionStatement","src":"9379:11:14"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2908,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2906,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2904,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2805,"src":"9422:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"32","id":2905,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9431:1:14","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9422:10:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2907,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9435:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9422:14:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2918,"nodeType":"IfStatement","src":"9418:93:14","trueBody":{"id":2917,"nodeType":"Block","src":"9438:73:14","statements":[{"expression":{"id":2911,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2909,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2805,"src":"9456:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"32","id":2910,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9466:1:14","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9456:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2912,"nodeType":"ExpressionStatement","src":"9456:11:14"},{"expression":{"id":2915,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2913,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2811,"src":"9485:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":2914,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9495:1:14","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9485:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2916,"nodeType":"ExpressionStatement","src":"9485:11:14"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2923,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2921,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2919,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2805,"src":"9528:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2920,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9537:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9528:10:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2922,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9541:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9528:14:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2929,"nodeType":"IfStatement","src":"9524:64:14","trueBody":{"id":2928,"nodeType":"Block","src":"9544:44:14","statements":[{"expression":{"id":2926,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2924,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2811,"src":"9562:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":2925,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9572:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9562:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2927,"nodeType":"ExpressionStatement","src":"9562:11:14"}]}}]},{"expression":{"id":2931,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2811,"src":"9614:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2809,"id":2932,"nodeType":"Return","src":"9607:13:14"}]},"documentation":{"id":2803,"nodeType":"StructuredDocumentation","src":"8526:113:14","text":" @dev Return the log in base 2, rounded down, of a positive value.\n Returns 0 if given 0."},"id":2934,"implemented":true,"kind":"function","modifiers":[],"name":"log2","nameLocation":"8653:4:14","nodeType":"FunctionDefinition","parameters":{"id":2806,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2805,"mutability":"mutable","name":"value","nameLocation":"8666:5:14","nodeType":"VariableDeclaration","scope":2934,"src":"8658:13:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2804,"name":"uint256","nodeType":"ElementaryTypeName","src":"8658:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8657:15:14"},"returnParameters":{"id":2809,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2808,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2934,"src":"8696:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2807,"name":"uint256","nodeType":"ElementaryTypeName","src":"8696:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8695:9:14"},"scope":3262,"src":"8644:983:14","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2969,"nodeType":"Block","src":"9860:165:14","statements":[{"id":2968,"nodeType":"UncheckedBlock","src":"9870:149:14","statements":[{"assignments":[2946],"declarations":[{"constant":false,"id":2946,"mutability":"mutable","name":"result","nameLocation":"9902:6:14","nodeType":"VariableDeclaration","scope":2968,"src":"9894:14:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2945,"name":"uint256","nodeType":"ElementaryTypeName","src":"9894:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2950,"initialValue":{"arguments":[{"id":2948,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2937,"src":"9916:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2947,"name":"log2","nodeType":"Identifier","overloadedDeclarations":[2934,2970],"referencedDeclaration":2934,"src":"9911:4:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2949,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9911:11:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"9894:28:14"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2966,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2951,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2946,"src":"9943:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2961,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$2403","typeString":"enum MathUpgradeable.Rounding"},"id":2955,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2952,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2940,"src":"9953:8:14","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2403","typeString":"enum MathUpgradeable.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2953,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2403,"src":"9965:8:14","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$2403_$","typeString":"type(enum MathUpgradeable.Rounding)"}},"id":2954,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"9974:2:14","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":2401,"src":"9965:11:14","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2403","typeString":"enum MathUpgradeable.Rounding"}},"src":"9953:23:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2960,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2958,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":2956,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9980:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"id":2957,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2946,"src":"9985:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9980:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2959,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2937,"src":"9994:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9980:19:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"9953:46:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":2963,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10006:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":2964,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"9953:54:14","trueExpression":{"hexValue":"31","id":2962,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10002:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":2965,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9952:56:14","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"9943:65:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2944,"id":2967,"nodeType":"Return","src":"9936:72:14"}]}]},"documentation":{"id":2935,"nodeType":"StructuredDocumentation","src":"9633:142:14","text":" @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":2970,"implemented":true,"kind":"function","modifiers":[],"name":"log2","nameLocation":"9789:4:14","nodeType":"FunctionDefinition","parameters":{"id":2941,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2937,"mutability":"mutable","name":"value","nameLocation":"9802:5:14","nodeType":"VariableDeclaration","scope":2970,"src":"9794:13:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2936,"name":"uint256","nodeType":"ElementaryTypeName","src":"9794:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2940,"mutability":"mutable","name":"rounding","nameLocation":"9818:8:14","nodeType":"VariableDeclaration","scope":2970,"src":"9809:17:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2403","typeString":"enum MathUpgradeable.Rounding"},"typeName":{"id":2939,"nodeType":"UserDefinedTypeName","pathNode":{"id":2938,"name":"Rounding","nameLocations":["9809:8:14"],"nodeType":"IdentifierPath","referencedDeclaration":2403,"src":"9809:8:14"},"referencedDeclaration":2403,"src":"9809:8:14","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2403","typeString":"enum MathUpgradeable.Rounding"}},"visibility":"internal"}],"src":"9793:34:14"},"returnParameters":{"id":2944,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2943,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2970,"src":"9851:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2942,"name":"uint256","nodeType":"ElementaryTypeName","src":"9851:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9850:9:14"},"scope":3262,"src":"9780:245:14","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3098,"nodeType":"Block","src":"10212:854:14","statements":[{"assignments":[2979],"declarations":[{"constant":false,"id":2979,"mutability":"mutable","name":"result","nameLocation":"10230:6:14","nodeType":"VariableDeclaration","scope":3098,"src":"10222:14:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2978,"name":"uint256","nodeType":"ElementaryTypeName","src":"10222:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2981,"initialValue":{"hexValue":"30","id":2980,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10239:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"10222:18:14"},{"id":3095,"nodeType":"UncheckedBlock","src":"10250:787:14","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2986,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2982,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2973,"src":"10278:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"},"id":2985,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2983,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10287:2:14","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3634","id":2984,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10293:2:14","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10287:8:14","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"}},"src":"10278:17:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2998,"nodeType":"IfStatement","src":"10274:103:14","trueBody":{"id":2997,"nodeType":"Block","src":"10297:80:14","statements":[{"expression":{"id":2991,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2987,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2973,"src":"10315:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"},"id":2990,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2988,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10324:2:14","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3634","id":2989,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10330:2:14","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10324:8:14","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"}},"src":"10315:17:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2992,"nodeType":"ExpressionStatement","src":"10315:17:14"},{"expression":{"id":2995,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2993,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2979,"src":"10350:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3634","id":2994,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10360:2:14","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10350:12:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2996,"nodeType":"ExpressionStatement","src":"10350:12:14"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3003,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2999,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2973,"src":"10394:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"},"id":3002,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3000,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10403:2:14","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3332","id":3001,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10409:2:14","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10403:8:14","typeDescriptions":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"}},"src":"10394:17:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3015,"nodeType":"IfStatement","src":"10390:103:14","trueBody":{"id":3014,"nodeType":"Block","src":"10413:80:14","statements":[{"expression":{"id":3008,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3004,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2973,"src":"10431:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"},"id":3007,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3005,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10440:2:14","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3332","id":3006,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10446:2:14","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10440:8:14","typeDescriptions":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"}},"src":"10431:17:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3009,"nodeType":"ExpressionStatement","src":"10431:17:14"},{"expression":{"id":3012,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3010,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2979,"src":"10466:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3332","id":3011,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10476:2:14","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10466:12:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3013,"nodeType":"ExpressionStatement","src":"10466:12:14"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3020,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3016,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2973,"src":"10510:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"},"id":3019,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3017,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10519:2:14","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3136","id":3018,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10525:2:14","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"10519:8:14","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"}},"src":"10510:17:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3032,"nodeType":"IfStatement","src":"10506:103:14","trueBody":{"id":3031,"nodeType":"Block","src":"10529:80:14","statements":[{"expression":{"id":3025,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3021,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2973,"src":"10547:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"},"id":3024,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3022,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10556:2:14","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3136","id":3023,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10562:2:14","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"10556:8:14","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"}},"src":"10547:17:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3026,"nodeType":"ExpressionStatement","src":"10547:17:14"},{"expression":{"id":3029,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3027,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2979,"src":"10582:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":3028,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10592:2:14","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"10582:12:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3030,"nodeType":"ExpressionStatement","src":"10582:12:14"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3037,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3033,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2973,"src":"10626:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"},"id":3036,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3034,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10635:2:14","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"38","id":3035,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10641:1:14","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"10635:7:14","typeDescriptions":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"}},"src":"10626:16:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3049,"nodeType":"IfStatement","src":"10622:100:14","trueBody":{"id":3048,"nodeType":"Block","src":"10644:78:14","statements":[{"expression":{"id":3042,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3038,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2973,"src":"10662:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"},"id":3041,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3039,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10671:2:14","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"38","id":3040,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10677:1:14","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"10671:7:14","typeDescriptions":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"}},"src":"10662:16:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3043,"nodeType":"ExpressionStatement","src":"10662:16:14"},{"expression":{"id":3046,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3044,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2979,"src":"10696:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":3045,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10706:1:14","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"10696:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3047,"nodeType":"ExpressionStatement","src":"10696:11:14"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3054,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3050,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2973,"src":"10739:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"id":3053,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3051,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10748:2:14","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"34","id":3052,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10754:1:14","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10748:7:14","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"}},"src":"10739:16:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3066,"nodeType":"IfStatement","src":"10735:100:14","trueBody":{"id":3065,"nodeType":"Block","src":"10757:78:14","statements":[{"expression":{"id":3059,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3055,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2973,"src":"10775:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"id":3058,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3056,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10784:2:14","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"34","id":3057,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10790:1:14","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10784:7:14","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"}},"src":"10775:16:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3060,"nodeType":"ExpressionStatement","src":"10775:16:14"},{"expression":{"id":3063,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3061,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2979,"src":"10809:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":3062,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10819:1:14","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10809:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3064,"nodeType":"ExpressionStatement","src":"10809:11:14"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3071,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3067,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2973,"src":"10852:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"id":3070,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3068,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10861:2:14","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"32","id":3069,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10867:1:14","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10861:7:14","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"}},"src":"10852:16:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3083,"nodeType":"IfStatement","src":"10848:100:14","trueBody":{"id":3082,"nodeType":"Block","src":"10870:78:14","statements":[{"expression":{"id":3076,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3072,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2973,"src":"10888:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"id":3075,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3073,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10897:2:14","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"32","id":3074,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10903:1:14","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10897:7:14","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"}},"src":"10888:16:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3077,"nodeType":"ExpressionStatement","src":"10888:16:14"},{"expression":{"id":3080,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3078,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2979,"src":"10922:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":3079,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10932:1:14","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10922:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3081,"nodeType":"ExpressionStatement","src":"10922:11:14"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3088,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3084,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2973,"src":"10965:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"id":3087,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3085,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10974:2:14","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"31","id":3086,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10980:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10974:7:14","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"}},"src":"10965:16:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3094,"nodeType":"IfStatement","src":"10961:66:14","trueBody":{"id":3093,"nodeType":"Block","src":"10983:44:14","statements":[{"expression":{"id":3091,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3089,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2979,"src":"11001:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":3090,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11011:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"11001:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3092,"nodeType":"ExpressionStatement","src":"11001:11:14"}]}}]},{"expression":{"id":3096,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2979,"src":"11053:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2977,"id":3097,"nodeType":"Return","src":"11046:13:14"}]},"documentation":{"id":2971,"nodeType":"StructuredDocumentation","src":"10031:114:14","text":" @dev Return the log in base 10, rounded down, of a positive value.\n Returns 0 if given 0."},"id":3099,"implemented":true,"kind":"function","modifiers":[],"name":"log10","nameLocation":"10159:5:14","nodeType":"FunctionDefinition","parameters":{"id":2974,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2973,"mutability":"mutable","name":"value","nameLocation":"10173:5:14","nodeType":"VariableDeclaration","scope":3099,"src":"10165:13:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2972,"name":"uint256","nodeType":"ElementaryTypeName","src":"10165:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10164:15:14"},"returnParameters":{"id":2977,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2976,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3099,"src":"10203:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2975,"name":"uint256","nodeType":"ElementaryTypeName","src":"10203:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10202:9:14"},"scope":3262,"src":"10150:916:14","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3134,"nodeType":"Block","src":"11301:167:14","statements":[{"id":3133,"nodeType":"UncheckedBlock","src":"11311:151:14","statements":[{"assignments":[3111],"declarations":[{"constant":false,"id":3111,"mutability":"mutable","name":"result","nameLocation":"11343:6:14","nodeType":"VariableDeclaration","scope":3133,"src":"11335:14:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3110,"name":"uint256","nodeType":"ElementaryTypeName","src":"11335:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3115,"initialValue":{"arguments":[{"id":3113,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3102,"src":"11358:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3112,"name":"log10","nodeType":"Identifier","overloadedDeclarations":[3099,3135],"referencedDeclaration":3099,"src":"11352:5:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":3114,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11352:12:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"11335:29:14"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3131,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3116,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3111,"src":"11385:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3126,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$2403","typeString":"enum MathUpgradeable.Rounding"},"id":3120,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3117,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3105,"src":"11395:8:14","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2403","typeString":"enum MathUpgradeable.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":3118,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2403,"src":"11407:8:14","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$2403_$","typeString":"type(enum MathUpgradeable.Rounding)"}},"id":3119,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"11416:2:14","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":2401,"src":"11407:11:14","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2403","typeString":"enum MathUpgradeable.Rounding"}},"src":"11395:23:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3125,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3123,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3121,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11422:2:14","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"id":3122,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3111,"src":"11428:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11422:12:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3124,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3102,"src":"11437:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11422:20:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"11395:47:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":3128,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11449:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":3129,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"11395:55:14","trueExpression":{"hexValue":"31","id":3127,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11445:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":3130,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"11394:57:14","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"11385:66:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3109,"id":3132,"nodeType":"Return","src":"11378:73:14"}]}]},"documentation":{"id":3100,"nodeType":"StructuredDocumentation","src":"11072:143:14","text":" @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":3135,"implemented":true,"kind":"function","modifiers":[],"name":"log10","nameLocation":"11229:5:14","nodeType":"FunctionDefinition","parameters":{"id":3106,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3102,"mutability":"mutable","name":"value","nameLocation":"11243:5:14","nodeType":"VariableDeclaration","scope":3135,"src":"11235:13:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3101,"name":"uint256","nodeType":"ElementaryTypeName","src":"11235:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3105,"mutability":"mutable","name":"rounding","nameLocation":"11259:8:14","nodeType":"VariableDeclaration","scope":3135,"src":"11250:17:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2403","typeString":"enum MathUpgradeable.Rounding"},"typeName":{"id":3104,"nodeType":"UserDefinedTypeName","pathNode":{"id":3103,"name":"Rounding","nameLocations":["11250:8:14"],"nodeType":"IdentifierPath","referencedDeclaration":2403,"src":"11250:8:14"},"referencedDeclaration":2403,"src":"11250:8:14","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2403","typeString":"enum MathUpgradeable.Rounding"}},"visibility":"internal"}],"src":"11234:34:14"},"returnParameters":{"id":3109,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3108,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3135,"src":"11292:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3107,"name":"uint256","nodeType":"ElementaryTypeName","src":"11292:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11291:9:14"},"scope":3262,"src":"11220:248:14","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3221,"nodeType":"Block","src":"11782:600:14","statements":[{"assignments":[3144],"declarations":[{"constant":false,"id":3144,"mutability":"mutable","name":"result","nameLocation":"11800:6:14","nodeType":"VariableDeclaration","scope":3221,"src":"11792:14:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3143,"name":"uint256","nodeType":"ElementaryTypeName","src":"11792:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3146,"initialValue":{"hexValue":"30","id":3145,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11809:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"11792:18:14"},{"id":3218,"nodeType":"UncheckedBlock","src":"11820:533:14","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3151,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3149,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3147,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3138,"src":"11848:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":3148,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11857:3:14","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"11848:12:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3150,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11863:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11848:16:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3161,"nodeType":"IfStatement","src":"11844:98:14","trueBody":{"id":3160,"nodeType":"Block","src":"11866:76:14","statements":[{"expression":{"id":3154,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3152,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3138,"src":"11884:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"313238","id":3153,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11894:3:14","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"11884:13:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3155,"nodeType":"ExpressionStatement","src":"11884:13:14"},{"expression":{"id":3158,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3156,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3144,"src":"11915:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":3157,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11925:2:14","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"11915:12:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3159,"nodeType":"ExpressionStatement","src":"11915:12:14"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3166,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3164,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3162,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3138,"src":"11959:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3634","id":3163,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11968:2:14","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"11959:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3165,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11973:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11959:15:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3176,"nodeType":"IfStatement","src":"11955:95:14","trueBody":{"id":3175,"nodeType":"Block","src":"11976:74:14","statements":[{"expression":{"id":3169,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3167,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3138,"src":"11994:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3634","id":3168,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12004:2:14","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"11994:12:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3170,"nodeType":"ExpressionStatement","src":"11994:12:14"},{"expression":{"id":3173,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3171,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3144,"src":"12024:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":3172,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12034:1:14","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"12024:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3174,"nodeType":"ExpressionStatement","src":"12024:11:14"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3181,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3179,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3177,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3138,"src":"12067:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3332","id":3178,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12076:2:14","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"12067:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3180,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12081:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"12067:15:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3191,"nodeType":"IfStatement","src":"12063:95:14","trueBody":{"id":3190,"nodeType":"Block","src":"12084:74:14","statements":[{"expression":{"id":3184,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3182,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3138,"src":"12102:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3332","id":3183,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12112:2:14","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"12102:12:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3185,"nodeType":"ExpressionStatement","src":"12102:12:14"},{"expression":{"id":3188,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3186,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3144,"src":"12132:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":3187,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12142:1:14","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"12132:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3189,"nodeType":"ExpressionStatement","src":"12132:11:14"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3196,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3194,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3192,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3138,"src":"12175:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3136","id":3193,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12184:2:14","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"12175:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3195,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12189:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"12175:15:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3206,"nodeType":"IfStatement","src":"12171:95:14","trueBody":{"id":3205,"nodeType":"Block","src":"12192:74:14","statements":[{"expression":{"id":3199,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3197,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3138,"src":"12210:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3136","id":3198,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12220:2:14","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"12210:12:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3200,"nodeType":"ExpressionStatement","src":"12210:12:14"},{"expression":{"id":3203,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3201,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3144,"src":"12240:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":3202,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12250:1:14","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"12240:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3204,"nodeType":"ExpressionStatement","src":"12240:11:14"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3211,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3209,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3207,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3138,"src":"12283:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"38","id":3208,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12292:1:14","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"12283:10:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3210,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12296:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"12283:14:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3217,"nodeType":"IfStatement","src":"12279:64:14","trueBody":{"id":3216,"nodeType":"Block","src":"12299:44:14","statements":[{"expression":{"id":3214,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3212,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3144,"src":"12317:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":3213,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12327:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"12317:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3215,"nodeType":"ExpressionStatement","src":"12317:11:14"}]}}]},{"expression":{"id":3219,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3144,"src":"12369:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3142,"id":3220,"nodeType":"Return","src":"12362:13:14"}]},"documentation":{"id":3136,"nodeType":"StructuredDocumentation","src":"11474:240:14","text":" @dev Return the log in base 256, rounded down, of a positive value.\n Returns 0 if given 0.\n Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string."},"id":3222,"implemented":true,"kind":"function","modifiers":[],"name":"log256","nameLocation":"11728:6:14","nodeType":"FunctionDefinition","parameters":{"id":3139,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3138,"mutability":"mutable","name":"value","nameLocation":"11743:5:14","nodeType":"VariableDeclaration","scope":3222,"src":"11735:13:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3137,"name":"uint256","nodeType":"ElementaryTypeName","src":"11735:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11734:15:14"},"returnParameters":{"id":3142,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3141,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3222,"src":"11773:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3140,"name":"uint256","nodeType":"ElementaryTypeName","src":"11773:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11772:9:14"},"scope":3262,"src":"11719:663:14","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3260,"nodeType":"Block","src":"12619:174:14","statements":[{"id":3259,"nodeType":"UncheckedBlock","src":"12629:158:14","statements":[{"assignments":[3234],"declarations":[{"constant":false,"id":3234,"mutability":"mutable","name":"result","nameLocation":"12661:6:14","nodeType":"VariableDeclaration","scope":3259,"src":"12653:14:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3233,"name":"uint256","nodeType":"ElementaryTypeName","src":"12653:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3238,"initialValue":{"arguments":[{"id":3236,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3225,"src":"12677:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3235,"name":"log256","nodeType":"Identifier","overloadedDeclarations":[3222,3261],"referencedDeclaration":3222,"src":"12670:6:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":3237,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12670:13:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"12653:30:14"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3257,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3239,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3234,"src":"12704:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3252,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$2403","typeString":"enum MathUpgradeable.Rounding"},"id":3243,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3240,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3228,"src":"12714:8:14","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2403","typeString":"enum MathUpgradeable.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":3241,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2403,"src":"12726:8:14","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$2403_$","typeString":"type(enum MathUpgradeable.Rounding)"}},"id":3242,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"12735:2:14","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":2401,"src":"12726:11:14","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2403","typeString":"enum MathUpgradeable.Rounding"}},"src":"12714:23:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3251,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3249,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":3244,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12741:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3247,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3245,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3234,"src":"12747:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"33","id":3246,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12757:1:14","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"src":"12747:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3248,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12746:13:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12741:18:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3250,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3225,"src":"12762:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12741:26:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"12714:53:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":3254,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12774:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":3255,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"12714:61:14","trueExpression":{"hexValue":"31","id":3253,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12770:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":3256,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12713:63:14","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"12704:72:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3232,"id":3258,"nodeType":"Return","src":"12697:79:14"}]}]},"documentation":{"id":3223,"nodeType":"StructuredDocumentation","src":"12388:144:14","text":" @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":3261,"implemented":true,"kind":"function","modifiers":[],"name":"log256","nameLocation":"12546:6:14","nodeType":"FunctionDefinition","parameters":{"id":3229,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3225,"mutability":"mutable","name":"value","nameLocation":"12561:5:14","nodeType":"VariableDeclaration","scope":3261,"src":"12553:13:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3224,"name":"uint256","nodeType":"ElementaryTypeName","src":"12553:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3228,"mutability":"mutable","name":"rounding","nameLocation":"12577:8:14","nodeType":"VariableDeclaration","scope":3261,"src":"12568:17:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2403","typeString":"enum MathUpgradeable.Rounding"},"typeName":{"id":3227,"nodeType":"UserDefinedTypeName","pathNode":{"id":3226,"name":"Rounding","nameLocations":["12568:8:14"],"nodeType":"IdentifierPath","referencedDeclaration":2403,"src":"12568:8:14"},"referencedDeclaration":2403,"src":"12568:8:14","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2403","typeString":"enum MathUpgradeable.Rounding"}},"visibility":"internal"}],"src":"12552:34:14"},"returnParameters":{"id":3232,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3231,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3261,"src":"12610:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3230,"name":"uint256","nodeType":"ElementaryTypeName","src":"12610:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12609:9:14"},"scope":3262,"src":"12537:256:14","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":3263,"src":"202:12593:14","usedErrors":[]}],"src":"103:12693:14"},"id":14},"@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol","exportedSymbols":{"SignedMathUpgradeable":[3367]},"id":3368,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3264,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"109:23:15"},{"abstract":false,"baseContracts":[],"canonicalName":"SignedMathUpgradeable","contractDependencies":[],"contractKind":"library","documentation":{"id":3265,"nodeType":"StructuredDocumentation","src":"134:80:15","text":" @dev Standard signed math utilities missing in the Solidity language."},"fullyImplemented":true,"id":3367,"linearizedBaseContracts":[3367],"name":"SignedMathUpgradeable","nameLocation":"223:21:15","nodeType":"ContractDefinition","nodes":[{"body":{"id":3282,"nodeType":"Block","src":"386:37:15","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3277,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3275,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3268,"src":"403:1:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":3276,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3270,"src":"407:1:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"403:5:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":3279,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3270,"src":"415:1:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":3280,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"403:13:15","trueExpression":{"id":3278,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3268,"src":"411:1:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":3274,"id":3281,"nodeType":"Return","src":"396:20:15"}]},"documentation":{"id":3266,"nodeType":"StructuredDocumentation","src":"251:66:15","text":" @dev Returns the largest of two signed numbers."},"id":3283,"implemented":true,"kind":"function","modifiers":[],"name":"max","nameLocation":"331:3:15","nodeType":"FunctionDefinition","parameters":{"id":3271,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3268,"mutability":"mutable","name":"a","nameLocation":"342:1:15","nodeType":"VariableDeclaration","scope":3283,"src":"335:8:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3267,"name":"int256","nodeType":"ElementaryTypeName","src":"335:6:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":3270,"mutability":"mutable","name":"b","nameLocation":"352:1:15","nodeType":"VariableDeclaration","scope":3283,"src":"345:8:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3269,"name":"int256","nodeType":"ElementaryTypeName","src":"345:6:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"334:20:15"},"returnParameters":{"id":3274,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3273,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3283,"src":"378:6:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3272,"name":"int256","nodeType":"ElementaryTypeName","src":"378:6:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"377:8:15"},"scope":3367,"src":"322:101:15","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3300,"nodeType":"Block","src":"565:37:15","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3295,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3293,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3286,"src":"582:1:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3294,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3288,"src":"586:1:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"582:5:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":3297,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3288,"src":"594:1:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":3298,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"582:13:15","trueExpression":{"id":3296,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3286,"src":"590:1:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":3292,"id":3299,"nodeType":"Return","src":"575:20:15"}]},"documentation":{"id":3284,"nodeType":"StructuredDocumentation","src":"429:67:15","text":" @dev Returns the smallest of two signed numbers."},"id":3301,"implemented":true,"kind":"function","modifiers":[],"name":"min","nameLocation":"510:3:15","nodeType":"FunctionDefinition","parameters":{"id":3289,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3286,"mutability":"mutable","name":"a","nameLocation":"521:1:15","nodeType":"VariableDeclaration","scope":3301,"src":"514:8:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3285,"name":"int256","nodeType":"ElementaryTypeName","src":"514:6:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":3288,"mutability":"mutable","name":"b","nameLocation":"531:1:15","nodeType":"VariableDeclaration","scope":3301,"src":"524:8:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3287,"name":"int256","nodeType":"ElementaryTypeName","src":"524:6:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"513:20:15"},"returnParameters":{"id":3292,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3291,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3301,"src":"557:6:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3290,"name":"int256","nodeType":"ElementaryTypeName","src":"557:6:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"556:8:15"},"scope":3367,"src":"501:101:15","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3344,"nodeType":"Block","src":"807:162:15","statements":[{"assignments":[3312],"declarations":[{"constant":false,"id":3312,"mutability":"mutable","name":"x","nameLocation":"876:1:15","nodeType":"VariableDeclaration","scope":3344,"src":"869:8:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3311,"name":"int256","nodeType":"ElementaryTypeName","src":"869:6:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"id":3325,"initialValue":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3324,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3315,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3313,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3304,"src":"881:1:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"id":3314,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3306,"src":"885:1:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"881:5:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":3316,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"880:7:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3322,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3319,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3317,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3304,"src":"892:1:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":3318,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3306,"src":"896:1:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"892:5:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":3320,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"891:7:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":3321,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"902:1:15","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"891:12:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":3323,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"890:14:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"880:24:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"VariableDeclarationStatement","src":"869:35:15"},{"expression":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3342,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3326,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3312,"src":"921:1:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3340,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3334,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3331,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3312,"src":"941:1:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":3330,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"933:7:15","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":3329,"name":"uint256","nodeType":"ElementaryTypeName","src":"933:7:15","typeDescriptions":{}}},"id":3332,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"933:10:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"323535","id":3333,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"947:3:15","typeDescriptions":{"typeIdentifier":"t_rational_255_by_1","typeString":"int_const 255"},"value":"255"},"src":"933:17:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3328,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"926:6:15","typeDescriptions":{"typeIdentifier":"t_type$_t_int256_$","typeString":"type(int256)"},"typeName":{"id":3327,"name":"int256","nodeType":"ElementaryTypeName","src":"926:6:15","typeDescriptions":{}}},"id":3335,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"926:25:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3338,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3336,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3304,"src":"955:1:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":3337,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3306,"src":"959:1:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"955:5:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":3339,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"954:7:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"926:35:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":3341,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"925:37:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"921:41:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":3310,"id":3343,"nodeType":"Return","src":"914:48:15"}]},"documentation":{"id":3302,"nodeType":"StructuredDocumentation","src":"608:126:15","text":" @dev Returns the average of two signed numbers without overflow.\n The result is rounded towards zero."},"id":3345,"implemented":true,"kind":"function","modifiers":[],"name":"average","nameLocation":"748:7:15","nodeType":"FunctionDefinition","parameters":{"id":3307,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3304,"mutability":"mutable","name":"a","nameLocation":"763:1:15","nodeType":"VariableDeclaration","scope":3345,"src":"756:8:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3303,"name":"int256","nodeType":"ElementaryTypeName","src":"756:6:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":3306,"mutability":"mutable","name":"b","nameLocation":"773:1:15","nodeType":"VariableDeclaration","scope":3345,"src":"766:8:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3305,"name":"int256","nodeType":"ElementaryTypeName","src":"766:6:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"755:20:15"},"returnParameters":{"id":3310,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3309,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3345,"src":"799:6:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3308,"name":"int256","nodeType":"ElementaryTypeName","src":"799:6:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"798:8:15"},"scope":3367,"src":"739:230:15","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3365,"nodeType":"Block","src":"1113:158:15","statements":[{"id":3364,"nodeType":"UncheckedBlock","src":"1123:142:15","statements":[{"expression":{"arguments":[{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3357,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3355,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3348,"src":"1238:1:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"hexValue":"30","id":3356,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1243:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1238:6:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":3360,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"-","prefix":true,"src":"1251:2:15","subExpression":{"id":3359,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3348,"src":"1252:1:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":3361,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"1238:15:15","trueExpression":{"id":3358,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3348,"src":"1247:1:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":3354,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1230:7:15","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":3353,"name":"uint256","nodeType":"ElementaryTypeName","src":"1230:7:15","typeDescriptions":{}}},"id":3362,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1230:24:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3352,"id":3363,"nodeType":"Return","src":"1223:31:15"}]}]},"documentation":{"id":3346,"nodeType":"StructuredDocumentation","src":"975:78:15","text":" @dev Returns the absolute unsigned value of a signed value."},"id":3366,"implemented":true,"kind":"function","modifiers":[],"name":"abs","nameLocation":"1067:3:15","nodeType":"FunctionDefinition","parameters":{"id":3349,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3348,"mutability":"mutable","name":"n","nameLocation":"1078:1:15","nodeType":"VariableDeclaration","scope":3366,"src":"1071:8:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3347,"name":"int256","nodeType":"ElementaryTypeName","src":"1071:6:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"1070:10:15"},"returnParameters":{"id":3352,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3351,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3366,"src":"1104:7:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3350,"name":"uint256","nodeType":"ElementaryTypeName","src":"1104:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1103:9:15"},"scope":3367,"src":"1058:213:15","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":3368,"src":"215:1058:15","usedErrors":[]}],"src":"109:1165:15"},"id":15},"@openzeppelin/contracts/access/AccessControl.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/access/AccessControl.sol","exportedSymbols":{"AccessControl":[3683],"Context":[3778],"ERC165":[4031],"IAccessControl":[3756],"IERC165":[4043],"Math":[4909],"SignedMath":[5014],"Strings":[4007]},"id":3684,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3369,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"108:23:16"},{"absolutePath":"@openzeppelin/contracts/access/IAccessControl.sol","file":"./IAccessControl.sol","id":3370,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3684,"sourceUnit":3757,"src":"133:30:16","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"../utils/Context.sol","id":3371,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3684,"sourceUnit":3779,"src":"164:30:16","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Strings.sol","file":"../utils/Strings.sol","id":3372,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3684,"sourceUnit":4008,"src":"195:30:16","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/introspection/ERC165.sol","file":"../utils/introspection/ERC165.sol","id":3373,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3684,"sourceUnit":4032,"src":"226:43:16","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":3375,"name":"Context","nameLocations":["1967:7:16"],"nodeType":"IdentifierPath","referencedDeclaration":3778,"src":"1967:7:16"},"id":3376,"nodeType":"InheritanceSpecifier","src":"1967:7:16"},{"baseName":{"id":3377,"name":"IAccessControl","nameLocations":["1976:14:16"],"nodeType":"IdentifierPath","referencedDeclaration":3756,"src":"1976:14:16"},"id":3378,"nodeType":"InheritanceSpecifier","src":"1976:14:16"},{"baseName":{"id":3379,"name":"ERC165","nameLocations":["1992:6:16"],"nodeType":"IdentifierPath","referencedDeclaration":4031,"src":"1992:6:16"},"id":3380,"nodeType":"InheritanceSpecifier","src":"1992:6:16"}],"canonicalName":"AccessControl","contractDependencies":[],"contractKind":"contract","documentation":{"id":3374,"nodeType":"StructuredDocumentation","src":"271:1660:16","text":" @dev Contract module that allows children to implement role-based access\n control mechanisms. This is a lightweight version that doesn't allow enumerating role\n members except through off-chain means by accessing the contract event logs. Some\n applications may benefit from on-chain enumerability, for those cases see\n {AccessControlEnumerable}.\n Roles are referred to by their `bytes32` identifier. These should be exposed\n in the external API and be unique. The best way to achieve this is by\n using `public constant` hash digests:\n ```solidity\n bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n ```\n Roles can be used to represent a set of permissions. To restrict access to a\n function call, use {hasRole}:\n ```solidity\n function foo() public {\n     require(hasRole(MY_ROLE, msg.sender));\n     ...\n }\n ```\n Roles can be granted and revoked dynamically via the {grantRole} and\n {revokeRole} functions. Each role has an associated admin role, and only\n accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n that only accounts with this role will be able to grant or revoke other\n roles. More complex role relationships can be created by using\n {_setRoleAdmin}.\n WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n grant and revoke this role. Extra precautions should be taken to secure\n accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\n to enforce additional security measures for this role."},"fullyImplemented":true,"id":3683,"linearizedBaseContracts":[3683,4031,4043,3756,3778],"name":"AccessControl","nameLocation":"1950:13:16","nodeType":"ContractDefinition","nodes":[{"canonicalName":"AccessControl.RoleData","id":3387,"members":[{"constant":false,"id":3384,"mutability":"mutable","name":"members","nameLocation":"2056:7:16","nodeType":"VariableDeclaration","scope":3387,"src":"2031:32:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"typeName":{"id":3383,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":3381,"name":"address","nodeType":"ElementaryTypeName","src":"2039:7:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"2031:24:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":3382,"name":"bool","nodeType":"ElementaryTypeName","src":"2050:4:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}},"visibility":"internal"},{"constant":false,"id":3386,"mutability":"mutable","name":"adminRole","nameLocation":"2081:9:16","nodeType":"VariableDeclaration","scope":3387,"src":"2073:17:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3385,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2073:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"name":"RoleData","nameLocation":"2012:8:16","nodeType":"StructDefinition","scope":3683,"src":"2005:92:16","visibility":"public"},{"constant":false,"id":3392,"mutability":"mutable","name":"_roles","nameLocation":"2140:6:16","nodeType":"VariableDeclaration","scope":3683,"src":"2103:43:16","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_RoleData_$3387_storage_$","typeString":"mapping(bytes32 => struct AccessControl.RoleData)"},"typeName":{"id":3391,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":3388,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2111:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Mapping","src":"2103:28:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_RoleData_$3387_storage_$","typeString":"mapping(bytes32 => struct AccessControl.RoleData)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":3390,"nodeType":"UserDefinedTypeName","pathNode":{"id":3389,"name":"RoleData","nameLocations":["2122:8:16"],"nodeType":"IdentifierPath","referencedDeclaration":3387,"src":"2122:8:16"},"referencedDeclaration":3387,"src":"2122:8:16","typeDescriptions":{"typeIdentifier":"t_struct$_RoleData_$3387_storage_ptr","typeString":"struct AccessControl.RoleData"}}},"visibility":"private"},{"constant":true,"functionSelector":"a217fddf","id":3395,"mutability":"constant","name":"DEFAULT_ADMIN_ROLE","nameLocation":"2177:18:16","nodeType":"VariableDeclaration","scope":3683,"src":"2153:49:16","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3393,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2153:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"hexValue":"30783030","id":3394,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2198:4:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0x00"},"visibility":"public"},{"body":{"id":3405,"nodeType":"Block","src":"2621:44:16","statements":[{"expression":{"arguments":[{"id":3401,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3398,"src":"2642:4:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3400,"name":"_checkRole","nodeType":"Identifier","overloadedDeclarations":[3460,3499],"referencedDeclaration":3460,"src":"2631:10:16","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$returns$__$","typeString":"function (bytes32) view"}},"id":3402,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2631:16:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3403,"nodeType":"ExpressionStatement","src":"2631:16:16"},{"id":3404,"nodeType":"PlaceholderStatement","src":"2657:1:16"}]},"documentation":{"id":3396,"nodeType":"StructuredDocumentation","src":"2209:375:16","text":" @dev Modifier that checks that an account has a specific role. Reverts\n with a standardized message including the required role.\n The format of the revert reason is given by the following regular expression:\n  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n _Available since v4.1._"},"id":3406,"name":"onlyRole","nameLocation":"2598:8:16","nodeType":"ModifierDefinition","parameters":{"id":3399,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3398,"mutability":"mutable","name":"role","nameLocation":"2615:4:16","nodeType":"VariableDeclaration","scope":3406,"src":"2607:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3397,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2607:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2606:14:16"},"src":"2589:76:16","virtual":false,"visibility":"internal"},{"baseFunctions":[4030],"body":{"id":3427,"nodeType":"Block","src":"2823:111:16","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3425,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":3420,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3415,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3409,"src":"2840:11:16","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":3417,"name":"IAccessControl","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3756,"src":"2860:14:16","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IAccessControl_$3756_$","typeString":"type(contract IAccessControl)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IAccessControl_$3756_$","typeString":"type(contract IAccessControl)"}],"id":3416,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"2855:4:16","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":3418,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2855:20:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IAccessControl_$3756","typeString":"type(contract IAccessControl)"}},"id":3419,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2876:11:16","memberName":"interfaceId","nodeType":"MemberAccess","src":"2855:32:16","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"2840:47:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":3423,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3409,"src":"2915:11:16","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"expression":{"id":3421,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"2891:5:16","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_AccessControl_$3683_$","typeString":"type(contract super AccessControl)"}},"id":3422,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2897:17:16","memberName":"supportsInterface","nodeType":"MemberAccess","referencedDeclaration":4030,"src":"2891:23:16","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes4_$returns$_t_bool_$","typeString":"function (bytes4) view returns (bool)"}},"id":3424,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2891:36:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"2840:87:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":3414,"id":3426,"nodeType":"Return","src":"2833:94:16"}]},"documentation":{"id":3407,"nodeType":"StructuredDocumentation","src":"2671:56:16","text":" @dev See {IERC165-supportsInterface}."},"functionSelector":"01ffc9a7","id":3428,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"2741:17:16","nodeType":"FunctionDefinition","overrides":{"id":3411,"nodeType":"OverrideSpecifier","overrides":[],"src":"2799:8:16"},"parameters":{"id":3410,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3409,"mutability":"mutable","name":"interfaceId","nameLocation":"2766:11:16","nodeType":"VariableDeclaration","scope":3428,"src":"2759:18:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":3408,"name":"bytes4","nodeType":"ElementaryTypeName","src":"2759:6:16","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"2758:20:16"},"returnParameters":{"id":3414,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3413,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3428,"src":"2817:4:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3412,"name":"bool","nodeType":"ElementaryTypeName","src":"2817:4:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2816:6:16"},"scope":3683,"src":"2732:202:16","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[3723],"body":{"id":3446,"nodeType":"Block","src":"3113:53:16","statements":[{"expression":{"baseExpression":{"expression":{"baseExpression":{"id":3439,"name":"_roles","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3392,"src":"3130:6:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_RoleData_$3387_storage_$","typeString":"mapping(bytes32 => struct AccessControl.RoleData storage ref)"}},"id":3441,"indexExpression":{"id":3440,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3431,"src":"3137:4:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3130:12:16","typeDescriptions":{"typeIdentifier":"t_struct$_RoleData_$3387_storage","typeString":"struct AccessControl.RoleData storage ref"}},"id":3442,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3143:7:16","memberName":"members","nodeType":"MemberAccess","referencedDeclaration":3384,"src":"3130:20:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":3444,"indexExpression":{"id":3443,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3433,"src":"3151:7:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3130:29:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":3438,"id":3445,"nodeType":"Return","src":"3123:36:16"}]},"documentation":{"id":3429,"nodeType":"StructuredDocumentation","src":"2940:76:16","text":" @dev Returns `true` if `account` has been granted `role`."},"functionSelector":"91d14854","id":3447,"implemented":true,"kind":"function","modifiers":[],"name":"hasRole","nameLocation":"3030:7:16","nodeType":"FunctionDefinition","overrides":{"id":3435,"nodeType":"OverrideSpecifier","overrides":[],"src":"3089:8:16"},"parameters":{"id":3434,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3431,"mutability":"mutable","name":"role","nameLocation":"3046:4:16","nodeType":"VariableDeclaration","scope":3447,"src":"3038:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3430,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3038:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3433,"mutability":"mutable","name":"account","nameLocation":"3060:7:16","nodeType":"VariableDeclaration","scope":3447,"src":"3052:15:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3432,"name":"address","nodeType":"ElementaryTypeName","src":"3052:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3037:31:16"},"returnParameters":{"id":3438,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3437,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3447,"src":"3107:4:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3436,"name":"bool","nodeType":"ElementaryTypeName","src":"3107:4:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3106:6:16"},"scope":3683,"src":"3021:145:16","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":3459,"nodeType":"Block","src":"3516:47:16","statements":[{"expression":{"arguments":[{"id":3454,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3450,"src":"3537:4:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"arguments":[],"expression":{"argumentTypes":[],"id":3455,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3768,"src":"3543:10:16","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":3456,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3543:12:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":3453,"name":"_checkRole","nodeType":"Identifier","overloadedDeclarations":[3460,3499],"referencedDeclaration":3499,"src":"3526:10:16","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address) view"}},"id":3457,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3526:30:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3458,"nodeType":"ExpressionStatement","src":"3526:30:16"}]},"documentation":{"id":3448,"nodeType":"StructuredDocumentation","src":"3172:283:16","text":" @dev Revert with a standard message if `_msgSender()` is missing `role`.\n Overriding this function changes the behavior of the {onlyRole} modifier.\n Format of the revert message is described in {_checkRole}.\n _Available since v4.6._"},"id":3460,"implemented":true,"kind":"function","modifiers":[],"name":"_checkRole","nameLocation":"3469:10:16","nodeType":"FunctionDefinition","parameters":{"id":3451,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3450,"mutability":"mutable","name":"role","nameLocation":"3488:4:16","nodeType":"VariableDeclaration","scope":3460,"src":"3480:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3449,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3480:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3479:14:16"},"returnParameters":{"id":3452,"nodeType":"ParameterList","parameters":[],"src":"3516:0:16"},"scope":3683,"src":"3460:103:16","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":3498,"nodeType":"Block","src":"3917:406:16","statements":[{"condition":{"id":3472,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"3931:23:16","subExpression":{"arguments":[{"id":3469,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3463,"src":"3940:4:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3470,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3465,"src":"3946:7:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":3468,"name":"hasRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3447,"src":"3932:7:16","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) view returns (bool)"}},"id":3471,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3932:22:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3497,"nodeType":"IfStatement","src":"3927:390:16","trueBody":{"id":3496,"nodeType":"Block","src":"3956:361:16","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"hexValue":"416363657373436f6e74726f6c3a206163636f756e7420","id":3478,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4064:25:16","typeDescriptions":{"typeIdentifier":"t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874","typeString":"literal_string \"AccessControl: account \""},"value":"AccessControl: account "},{"arguments":[{"id":3481,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3465,"src":"4135:7:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":3479,"name":"Strings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4007,"src":"4115:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Strings_$4007_$","typeString":"type(library Strings)"}},"id":3480,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4123:11:16","memberName":"toHexString","nodeType":"MemberAccess","referencedDeclaration":3981,"src":"4115:19:16","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_address_$returns$_t_string_memory_ptr_$","typeString":"function (address) pure returns (string memory)"}},"id":3482,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4115:28:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"hexValue":"206973206d697373696e6720726f6c6520","id":3483,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4169:19:16","typeDescriptions":{"typeIdentifier":"t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69","typeString":"literal_string \" is missing role \""},"value":" is missing role "},{"arguments":[{"arguments":[{"id":3488,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3463,"src":"4242:4:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3487,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4234:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":3486,"name":"uint256","nodeType":"ElementaryTypeName","src":"4234:7:16","typeDescriptions":{}}},"id":3489,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4234:13:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"3332","id":3490,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4249:2:16","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"}],"expression":{"id":3484,"name":"Strings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4007,"src":"4214:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Strings_$4007_$","typeString":"type(library Strings)"}},"id":3485,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4222:11:16","memberName":"toHexString","nodeType":"MemberAccess","referencedDeclaration":3961,"src":"4214:19:16","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (string memory)"}},"id":3491,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4214:38:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874","typeString":"literal_string \"AccessControl: account \""},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69","typeString":"literal_string \" is missing role \""},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"expression":{"id":3476,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"4022:3:16","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":3477,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"4026:12:16","memberName":"encodePacked","nodeType":"MemberAccess","src":"4022:16:16","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":3492,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4022:252:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3475,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3994:6:16","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":3474,"name":"string","nodeType":"ElementaryTypeName","src":"3994:6:16","typeDescriptions":{}}},"id":3493,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3994:298:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":3473,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"3970:6:16","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":3494,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3970:336:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3495,"nodeType":"ExpressionStatement","src":"3970:336:16"}]}}]},"documentation":{"id":3461,"nodeType":"StructuredDocumentation","src":"3569:270:16","text":" @dev Revert with a standard message if `account` is missing `role`.\n The format of the revert reason is given by the following regular expression:\n  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/"},"id":3499,"implemented":true,"kind":"function","modifiers":[],"name":"_checkRole","nameLocation":"3853:10:16","nodeType":"FunctionDefinition","parameters":{"id":3466,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3463,"mutability":"mutable","name":"role","nameLocation":"3872:4:16","nodeType":"VariableDeclaration","scope":3499,"src":"3864:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3462,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3864:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3465,"mutability":"mutable","name":"account","nameLocation":"3886:7:16","nodeType":"VariableDeclaration","scope":3499,"src":"3878:15:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3464,"name":"address","nodeType":"ElementaryTypeName","src":"3878:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3863:31:16"},"returnParameters":{"id":3467,"nodeType":"ParameterList","parameters":[],"src":"3917:0:16"},"scope":3683,"src":"3844:479:16","stateMutability":"view","virtual":true,"visibility":"internal"},{"baseFunctions":[3731],"body":{"id":3513,"nodeType":"Block","src":"4587:46:16","statements":[{"expression":{"expression":{"baseExpression":{"id":3508,"name":"_roles","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3392,"src":"4604:6:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_RoleData_$3387_storage_$","typeString":"mapping(bytes32 => struct AccessControl.RoleData storage ref)"}},"id":3510,"indexExpression":{"id":3509,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3502,"src":"4611:4:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4604:12:16","typeDescriptions":{"typeIdentifier":"t_struct$_RoleData_$3387_storage","typeString":"struct AccessControl.RoleData storage ref"}},"id":3511,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4617:9:16","memberName":"adminRole","nodeType":"MemberAccess","referencedDeclaration":3386,"src":"4604:22:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":3507,"id":3512,"nodeType":"Return","src":"4597:29:16"}]},"documentation":{"id":3500,"nodeType":"StructuredDocumentation","src":"4329:170:16","text":" @dev Returns the admin role that controls `role`. See {grantRole} and\n {revokeRole}.\n To change a role's admin, use {_setRoleAdmin}."},"functionSelector":"248a9ca3","id":3514,"implemented":true,"kind":"function","modifiers":[],"name":"getRoleAdmin","nameLocation":"4513:12:16","nodeType":"FunctionDefinition","overrides":{"id":3504,"nodeType":"OverrideSpecifier","overrides":[],"src":"4560:8:16"},"parameters":{"id":3503,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3502,"mutability":"mutable","name":"role","nameLocation":"4534:4:16","nodeType":"VariableDeclaration","scope":3514,"src":"4526:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3501,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4526:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4525:14:16"},"returnParameters":{"id":3507,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3506,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3514,"src":"4578:7:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3505,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4578:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4577:9:16"},"scope":3683,"src":"4504:129:16","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[3739],"body":{"id":3533,"nodeType":"Block","src":"5032:42:16","statements":[{"expression":{"arguments":[{"id":3529,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3517,"src":"5053:4:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3530,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3519,"src":"5059:7:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":3528,"name":"_grantRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3651,"src":"5042:10:16","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address)"}},"id":3531,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5042:25:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3532,"nodeType":"ExpressionStatement","src":"5042:25:16"}]},"documentation":{"id":3515,"nodeType":"StructuredDocumentation","src":"4639:285:16","text":" @dev Grants `role` to `account`.\n If `account` had not been already granted `role`, emits a {RoleGranted}\n event.\n Requirements:\n - the caller must have ``role``'s admin role.\n May emit a {RoleGranted} event."},"functionSelector":"2f2ff15d","id":3534,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"arguments":[{"id":3524,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3517,"src":"5025:4:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3523,"name":"getRoleAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3514,"src":"5012:12:16","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32) view returns (bytes32)"}},"id":3525,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5012:18:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":3526,"kind":"modifierInvocation","modifierName":{"id":3522,"name":"onlyRole","nameLocations":["5003:8:16"],"nodeType":"IdentifierPath","referencedDeclaration":3406,"src":"5003:8:16"},"nodeType":"ModifierInvocation","src":"5003:28:16"}],"name":"grantRole","nameLocation":"4938:9:16","nodeType":"FunctionDefinition","overrides":{"id":3521,"nodeType":"OverrideSpecifier","overrides":[],"src":"4994:8:16"},"parameters":{"id":3520,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3517,"mutability":"mutable","name":"role","nameLocation":"4956:4:16","nodeType":"VariableDeclaration","scope":3534,"src":"4948:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3516,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4948:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3519,"mutability":"mutable","name":"account","nameLocation":"4970:7:16","nodeType":"VariableDeclaration","scope":3534,"src":"4962:15:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3518,"name":"address","nodeType":"ElementaryTypeName","src":"4962:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4947:31:16"},"returnParameters":{"id":3527,"nodeType":"ParameterList","parameters":[],"src":"5032:0:16"},"scope":3683,"src":"4929:145:16","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[3747],"body":{"id":3553,"nodeType":"Block","src":"5458:43:16","statements":[{"expression":{"arguments":[{"id":3549,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3537,"src":"5480:4:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3550,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3539,"src":"5486:7:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":3548,"name":"_revokeRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3682,"src":"5468:11:16","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address)"}},"id":3551,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5468:26:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3552,"nodeType":"ExpressionStatement","src":"5468:26:16"}]},"documentation":{"id":3535,"nodeType":"StructuredDocumentation","src":"5080:269:16","text":" @dev Revokes `role` from `account`.\n If `account` had been granted `role`, emits a {RoleRevoked} event.\n Requirements:\n - the caller must have ``role``'s admin role.\n May emit a {RoleRevoked} event."},"functionSelector":"d547741f","id":3554,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"arguments":[{"id":3544,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3537,"src":"5451:4:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3543,"name":"getRoleAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3514,"src":"5438:12:16","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32) view returns (bytes32)"}},"id":3545,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5438:18:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":3546,"kind":"modifierInvocation","modifierName":{"id":3542,"name":"onlyRole","nameLocations":["5429:8:16"],"nodeType":"IdentifierPath","referencedDeclaration":3406,"src":"5429:8:16"},"nodeType":"ModifierInvocation","src":"5429:28:16"}],"name":"revokeRole","nameLocation":"5363:10:16","nodeType":"FunctionDefinition","overrides":{"id":3541,"nodeType":"OverrideSpecifier","overrides":[],"src":"5420:8:16"},"parameters":{"id":3540,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3537,"mutability":"mutable","name":"role","nameLocation":"5382:4:16","nodeType":"VariableDeclaration","scope":3554,"src":"5374:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3536,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5374:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3539,"mutability":"mutable","name":"account","nameLocation":"5396:7:16","nodeType":"VariableDeclaration","scope":3554,"src":"5388:15:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3538,"name":"address","nodeType":"ElementaryTypeName","src":"5388:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5373:31:16"},"returnParameters":{"id":3547,"nodeType":"ParameterList","parameters":[],"src":"5458:0:16"},"scope":3683,"src":"5354:147:16","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[3755],"body":{"id":3576,"nodeType":"Block","src":"6115:137:16","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3567,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3564,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3559,"src":"6133:7:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":3565,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3768,"src":"6144:10:16","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":3566,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6144:12:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6133:23:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636520726f6c657320666f722073656c66","id":3568,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6158:49:16","typeDescriptions":{"typeIdentifier":"t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b","typeString":"literal_string \"AccessControl: can only renounce roles for self\""},"value":"AccessControl: can only renounce roles for self"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b","typeString":"literal_string \"AccessControl: can only renounce roles for self\""}],"id":3563,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"6125:7:16","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3569,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6125:83:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3570,"nodeType":"ExpressionStatement","src":"6125:83:16"},{"expression":{"arguments":[{"id":3572,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3557,"src":"6231:4:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3573,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3559,"src":"6237:7:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":3571,"name":"_revokeRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3682,"src":"6219:11:16","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address)"}},"id":3574,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6219:26:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3575,"nodeType":"ExpressionStatement","src":"6219:26:16"}]},"documentation":{"id":3555,"nodeType":"StructuredDocumentation","src":"5507:526:16","text":" @dev Revokes `role` from the calling account.\n Roles are often managed via {grantRole} and {revokeRole}: this function's\n purpose is to provide a mechanism for accounts to lose their privileges\n if they are compromised (such as when a trusted device is misplaced).\n If the calling account had been revoked `role`, emits a {RoleRevoked}\n event.\n Requirements:\n - the caller must be `account`.\n May emit a {RoleRevoked} event."},"functionSelector":"36568abe","id":3577,"implemented":true,"kind":"function","modifiers":[],"name":"renounceRole","nameLocation":"6047:12:16","nodeType":"FunctionDefinition","overrides":{"id":3561,"nodeType":"OverrideSpecifier","overrides":[],"src":"6106:8:16"},"parameters":{"id":3560,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3557,"mutability":"mutable","name":"role","nameLocation":"6068:4:16","nodeType":"VariableDeclaration","scope":3577,"src":"6060:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3556,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6060:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3559,"mutability":"mutable","name":"account","nameLocation":"6082:7:16","nodeType":"VariableDeclaration","scope":3577,"src":"6074:15:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3558,"name":"address","nodeType":"ElementaryTypeName","src":"6074:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6059:31:16"},"returnParameters":{"id":3562,"nodeType":"ParameterList","parameters":[],"src":"6115:0:16"},"scope":3683,"src":"6038:214:16","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":3590,"nodeType":"Block","src":"7005:42:16","statements":[{"expression":{"arguments":[{"id":3586,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3580,"src":"7026:4:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3587,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3582,"src":"7032:7:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":3585,"name":"_grantRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3651,"src":"7015:10:16","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address)"}},"id":3588,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7015:25:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3589,"nodeType":"ExpressionStatement","src":"7015:25:16"}]},"documentation":{"id":3578,"nodeType":"StructuredDocumentation","src":"6258:674:16","text":" @dev Grants `role` to `account`.\n If `account` had not been already granted `role`, emits a {RoleGranted}\n event. Note that unlike {grantRole}, this function doesn't perform any\n checks on the calling account.\n May emit a {RoleGranted} event.\n [WARNING]\n ====\n This function should only be called from the constructor when setting\n up the initial roles for the system.\n Using this function in any other way is effectively circumventing the admin\n system imposed by {AccessControl}.\n ====\n NOTE: This function is deprecated in favor of {_grantRole}."},"id":3591,"implemented":true,"kind":"function","modifiers":[],"name":"_setupRole","nameLocation":"6946:10:16","nodeType":"FunctionDefinition","parameters":{"id":3583,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3580,"mutability":"mutable","name":"role","nameLocation":"6965:4:16","nodeType":"VariableDeclaration","scope":3591,"src":"6957:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3579,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6957:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3582,"mutability":"mutable","name":"account","nameLocation":"6979:7:16","nodeType":"VariableDeclaration","scope":3591,"src":"6971:15:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3581,"name":"address","nodeType":"ElementaryTypeName","src":"6971:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6956:31:16"},"returnParameters":{"id":3584,"nodeType":"ParameterList","parameters":[],"src":"7005:0:16"},"scope":3683,"src":"6937:110:16","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":3618,"nodeType":"Block","src":"7245:174:16","statements":[{"assignments":[3600],"declarations":[{"constant":false,"id":3600,"mutability":"mutable","name":"previousAdminRole","nameLocation":"7263:17:16","nodeType":"VariableDeclaration","scope":3618,"src":"7255:25:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3599,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7255:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":3604,"initialValue":{"arguments":[{"id":3602,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3594,"src":"7296:4:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3601,"name":"getRoleAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3514,"src":"7283:12:16","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32) view returns (bytes32)"}},"id":3603,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7283:18:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"7255:46:16"},{"expression":{"id":3610,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"id":3605,"name":"_roles","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3392,"src":"7311:6:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_RoleData_$3387_storage_$","typeString":"mapping(bytes32 => struct AccessControl.RoleData storage ref)"}},"id":3607,"indexExpression":{"id":3606,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3594,"src":"7318:4:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7311:12:16","typeDescriptions":{"typeIdentifier":"t_struct$_RoleData_$3387_storage","typeString":"struct AccessControl.RoleData storage ref"}},"id":3608,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"7324:9:16","memberName":"adminRole","nodeType":"MemberAccess","referencedDeclaration":3386,"src":"7311:22:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3609,"name":"adminRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3596,"src":"7336:9:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"7311:34:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":3611,"nodeType":"ExpressionStatement","src":"7311:34:16"},{"eventCall":{"arguments":[{"id":3613,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3594,"src":"7377:4:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3614,"name":"previousAdminRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3600,"src":"7383:17:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3615,"name":"adminRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3596,"src":"7402:9:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3612,"name":"RoleAdminChanged","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3695,"src":"7360:16:16","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_bytes32_$_t_bytes32_$returns$__$","typeString":"function (bytes32,bytes32,bytes32)"}},"id":3616,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7360:52:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3617,"nodeType":"EmitStatement","src":"7355:57:16"}]},"documentation":{"id":3592,"nodeType":"StructuredDocumentation","src":"7053:114:16","text":" @dev Sets `adminRole` as ``role``'s admin role.\n Emits a {RoleAdminChanged} event."},"id":3619,"implemented":true,"kind":"function","modifiers":[],"name":"_setRoleAdmin","nameLocation":"7181:13:16","nodeType":"FunctionDefinition","parameters":{"id":3597,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3594,"mutability":"mutable","name":"role","nameLocation":"7203:4:16","nodeType":"VariableDeclaration","scope":3619,"src":"7195:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3593,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7195:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3596,"mutability":"mutable","name":"adminRole","nameLocation":"7217:9:16","nodeType":"VariableDeclaration","scope":3619,"src":"7209:17:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3595,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7209:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"7194:33:16"},"returnParameters":{"id":3598,"nodeType":"ParameterList","parameters":[],"src":"7245:0:16"},"scope":3683,"src":"7172:247:16","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":3650,"nodeType":"Block","src":"7655:165:16","statements":[{"condition":{"id":3631,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"7669:23:16","subExpression":{"arguments":[{"id":3628,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3622,"src":"7678:4:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3629,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3624,"src":"7684:7:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":3627,"name":"hasRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3447,"src":"7670:7:16","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) view returns (bool)"}},"id":3630,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7670:22:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3649,"nodeType":"IfStatement","src":"7665:149:16","trueBody":{"id":3648,"nodeType":"Block","src":"7694:120:16","statements":[{"expression":{"id":3639,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"baseExpression":{"id":3632,"name":"_roles","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3392,"src":"7708:6:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_RoleData_$3387_storage_$","typeString":"mapping(bytes32 => struct AccessControl.RoleData storage ref)"}},"id":3634,"indexExpression":{"id":3633,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3622,"src":"7715:4:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7708:12:16","typeDescriptions":{"typeIdentifier":"t_struct$_RoleData_$3387_storage","typeString":"struct AccessControl.RoleData storage ref"}},"id":3635,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7721:7:16","memberName":"members","nodeType":"MemberAccess","referencedDeclaration":3384,"src":"7708:20:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":3637,"indexExpression":{"id":3636,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3624,"src":"7729:7:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"7708:29:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":3638,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"7740:4:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"7708:36:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3640,"nodeType":"ExpressionStatement","src":"7708:36:16"},{"eventCall":{"arguments":[{"id":3642,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3622,"src":"7775:4:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3643,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3624,"src":"7781:7:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[],"expression":{"argumentTypes":[],"id":3644,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3768,"src":"7790:10:16","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":3645,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7790:12:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":3641,"name":"RoleGranted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3704,"src":"7763:11:16","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_address_$_t_address_$returns$__$","typeString":"function (bytes32,address,address)"}},"id":3646,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7763:40:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3647,"nodeType":"EmitStatement","src":"7758:45:16"}]}}]},"documentation":{"id":3620,"nodeType":"StructuredDocumentation","src":"7425:157:16","text":" @dev Grants `role` to `account`.\n Internal function without access restriction.\n May emit a {RoleGranted} event."},"id":3651,"implemented":true,"kind":"function","modifiers":[],"name":"_grantRole","nameLocation":"7596:10:16","nodeType":"FunctionDefinition","parameters":{"id":3625,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3622,"mutability":"mutable","name":"role","nameLocation":"7615:4:16","nodeType":"VariableDeclaration","scope":3651,"src":"7607:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3621,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7607:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3624,"mutability":"mutable","name":"account","nameLocation":"7629:7:16","nodeType":"VariableDeclaration","scope":3651,"src":"7621:15:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3623,"name":"address","nodeType":"ElementaryTypeName","src":"7621:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"7606:31:16"},"returnParameters":{"id":3626,"nodeType":"ParameterList","parameters":[],"src":"7655:0:16"},"scope":3683,"src":"7587:233:16","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":3681,"nodeType":"Block","src":"8060:165:16","statements":[{"condition":{"arguments":[{"id":3660,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3654,"src":"8082:4:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3661,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3656,"src":"8088:7:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":3659,"name":"hasRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3447,"src":"8074:7:16","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) view returns (bool)"}},"id":3662,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8074:22:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3680,"nodeType":"IfStatement","src":"8070:149:16","trueBody":{"id":3679,"nodeType":"Block","src":"8098:121:16","statements":[{"expression":{"id":3670,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"baseExpression":{"id":3663,"name":"_roles","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3392,"src":"8112:6:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_RoleData_$3387_storage_$","typeString":"mapping(bytes32 => struct AccessControl.RoleData storage ref)"}},"id":3665,"indexExpression":{"id":3664,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3654,"src":"8119:4:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8112:12:16","typeDescriptions":{"typeIdentifier":"t_struct$_RoleData_$3387_storage","typeString":"struct AccessControl.RoleData storage ref"}},"id":3666,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8125:7:16","memberName":"members","nodeType":"MemberAccess","referencedDeclaration":3384,"src":"8112:20:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":3668,"indexExpression":{"id":3667,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3656,"src":"8133:7:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"8112:29:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":3669,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"8144:5:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"8112:37:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3671,"nodeType":"ExpressionStatement","src":"8112:37:16"},{"eventCall":{"arguments":[{"id":3673,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3654,"src":"8180:4:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3674,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3656,"src":"8186:7:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[],"expression":{"argumentTypes":[],"id":3675,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3768,"src":"8195:10:16","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":3676,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8195:12:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":3672,"name":"RoleRevoked","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3713,"src":"8168:11:16","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_address_$_t_address_$returns$__$","typeString":"function (bytes32,address,address)"}},"id":3677,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8168:40:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3678,"nodeType":"EmitStatement","src":"8163:45:16"}]}}]},"documentation":{"id":3652,"nodeType":"StructuredDocumentation","src":"7826:160:16","text":" @dev Revokes `role` from `account`.\n Internal function without access restriction.\n May emit a {RoleRevoked} event."},"id":3682,"implemented":true,"kind":"function","modifiers":[],"name":"_revokeRole","nameLocation":"8000:11:16","nodeType":"FunctionDefinition","parameters":{"id":3657,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3654,"mutability":"mutable","name":"role","nameLocation":"8020:4:16","nodeType":"VariableDeclaration","scope":3682,"src":"8012:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3653,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8012:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3656,"mutability":"mutable","name":"account","nameLocation":"8034:7:16","nodeType":"VariableDeclaration","scope":3682,"src":"8026:15:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3655,"name":"address","nodeType":"ElementaryTypeName","src":"8026:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"8011:31:16"},"returnParameters":{"id":3658,"nodeType":"ParameterList","parameters":[],"src":"8060:0:16"},"scope":3683,"src":"7991:234:16","stateMutability":"nonpayable","virtual":true,"visibility":"internal"}],"scope":3684,"src":"1932:6295:16","usedErrors":[]}],"src":"108:8120:16"},"id":16},"@openzeppelin/contracts/access/IAccessControl.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/access/IAccessControl.sol","exportedSymbols":{"IAccessControl":[3756]},"id":3757,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3685,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"94:23:17"},{"abstract":false,"baseContracts":[],"canonicalName":"IAccessControl","contractDependencies":[],"contractKind":"interface","documentation":{"id":3686,"nodeType":"StructuredDocumentation","src":"119:89:17","text":" @dev External interface of AccessControl declared to support ERC165 detection."},"fullyImplemented":false,"id":3756,"linearizedBaseContracts":[3756],"name":"IAccessControl","nameLocation":"219:14:17","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":3687,"nodeType":"StructuredDocumentation","src":"240:292:17","text":" @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n {RoleAdminChanged} not being emitted signaling this.\n _Available since v3.1._"},"eventSelector":"bd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff","id":3695,"name":"RoleAdminChanged","nameLocation":"543:16:17","nodeType":"EventDefinition","parameters":{"id":3694,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3689,"indexed":true,"mutability":"mutable","name":"role","nameLocation":"576:4:17","nodeType":"VariableDeclaration","scope":3695,"src":"560:20:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3688,"name":"bytes32","nodeType":"ElementaryTypeName","src":"560:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3691,"indexed":true,"mutability":"mutable","name":"previousAdminRole","nameLocation":"598:17:17","nodeType":"VariableDeclaration","scope":3695,"src":"582:33:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3690,"name":"bytes32","nodeType":"ElementaryTypeName","src":"582:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3693,"indexed":true,"mutability":"mutable","name":"newAdminRole","nameLocation":"633:12:17","nodeType":"VariableDeclaration","scope":3695,"src":"617:28:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3692,"name":"bytes32","nodeType":"ElementaryTypeName","src":"617:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"559:87:17"},"src":"537:110:17"},{"anonymous":false,"documentation":{"id":3696,"nodeType":"StructuredDocumentation","src":"653:212:17","text":" @dev Emitted when `account` is granted `role`.\n `sender` is the account that originated the contract call, an admin role\n bearer except when using {AccessControl-_setupRole}."},"eventSelector":"2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d","id":3704,"name":"RoleGranted","nameLocation":"876:11:17","nodeType":"EventDefinition","parameters":{"id":3703,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3698,"indexed":true,"mutability":"mutable","name":"role","nameLocation":"904:4:17","nodeType":"VariableDeclaration","scope":3704,"src":"888:20:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3697,"name":"bytes32","nodeType":"ElementaryTypeName","src":"888:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3700,"indexed":true,"mutability":"mutable","name":"account","nameLocation":"926:7:17","nodeType":"VariableDeclaration","scope":3704,"src":"910:23:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3699,"name":"address","nodeType":"ElementaryTypeName","src":"910:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3702,"indexed":true,"mutability":"mutable","name":"sender","nameLocation":"951:6:17","nodeType":"VariableDeclaration","scope":3704,"src":"935:22:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3701,"name":"address","nodeType":"ElementaryTypeName","src":"935:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"887:71:17"},"src":"870:89:17"},{"anonymous":false,"documentation":{"id":3705,"nodeType":"StructuredDocumentation","src":"965:275:17","text":" @dev Emitted when `account` is revoked `role`.\n `sender` is the account that originated the contract call:\n   - if using `revokeRole`, it is the admin role bearer\n   - if using `renounceRole`, it is the role bearer (i.e. `account`)"},"eventSelector":"f6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b","id":3713,"name":"RoleRevoked","nameLocation":"1251:11:17","nodeType":"EventDefinition","parameters":{"id":3712,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3707,"indexed":true,"mutability":"mutable","name":"role","nameLocation":"1279:4:17","nodeType":"VariableDeclaration","scope":3713,"src":"1263:20:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3706,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1263:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3709,"indexed":true,"mutability":"mutable","name":"account","nameLocation":"1301:7:17","nodeType":"VariableDeclaration","scope":3713,"src":"1285:23:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3708,"name":"address","nodeType":"ElementaryTypeName","src":"1285:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3711,"indexed":true,"mutability":"mutable","name":"sender","nameLocation":"1326:6:17","nodeType":"VariableDeclaration","scope":3713,"src":"1310:22:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3710,"name":"address","nodeType":"ElementaryTypeName","src":"1310:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1262:71:17"},"src":"1245:89:17"},{"documentation":{"id":3714,"nodeType":"StructuredDocumentation","src":"1340:76:17","text":" @dev Returns `true` if `account` has been granted `role`."},"functionSelector":"91d14854","id":3723,"implemented":false,"kind":"function","modifiers":[],"name":"hasRole","nameLocation":"1430:7:17","nodeType":"FunctionDefinition","parameters":{"id":3719,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3716,"mutability":"mutable","name":"role","nameLocation":"1446:4:17","nodeType":"VariableDeclaration","scope":3723,"src":"1438:12:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3715,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1438:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3718,"mutability":"mutable","name":"account","nameLocation":"1460:7:17","nodeType":"VariableDeclaration","scope":3723,"src":"1452:15:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3717,"name":"address","nodeType":"ElementaryTypeName","src":"1452:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1437:31:17"},"returnParameters":{"id":3722,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3721,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3723,"src":"1492:4:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3720,"name":"bool","nodeType":"ElementaryTypeName","src":"1492:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1491:6:17"},"scope":3756,"src":"1421:77:17","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":3724,"nodeType":"StructuredDocumentation","src":"1504:184:17","text":" @dev Returns the admin role that controls `role`. See {grantRole} and\n {revokeRole}.\n To change a role's admin, use {AccessControl-_setRoleAdmin}."},"functionSelector":"248a9ca3","id":3731,"implemented":false,"kind":"function","modifiers":[],"name":"getRoleAdmin","nameLocation":"1702:12:17","nodeType":"FunctionDefinition","parameters":{"id":3727,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3726,"mutability":"mutable","name":"role","nameLocation":"1723:4:17","nodeType":"VariableDeclaration","scope":3731,"src":"1715:12:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3725,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1715:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1714:14:17"},"returnParameters":{"id":3730,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3729,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3731,"src":"1752:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3728,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1752:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1751:9:17"},"scope":3756,"src":"1693:68:17","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":3732,"nodeType":"StructuredDocumentation","src":"1767:239:17","text":" @dev Grants `role` to `account`.\n If `account` had not been already granted `role`, emits a {RoleGranted}\n event.\n Requirements:\n - the caller must have ``role``'s admin role."},"functionSelector":"2f2ff15d","id":3739,"implemented":false,"kind":"function","modifiers":[],"name":"grantRole","nameLocation":"2020:9:17","nodeType":"FunctionDefinition","parameters":{"id":3737,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3734,"mutability":"mutable","name":"role","nameLocation":"2038:4:17","nodeType":"VariableDeclaration","scope":3739,"src":"2030:12:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3733,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2030:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3736,"mutability":"mutable","name":"account","nameLocation":"2052:7:17","nodeType":"VariableDeclaration","scope":3739,"src":"2044:15:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3735,"name":"address","nodeType":"ElementaryTypeName","src":"2044:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2029:31:17"},"returnParameters":{"id":3738,"nodeType":"ParameterList","parameters":[],"src":"2069:0:17"},"scope":3756,"src":"2011:59:17","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":3740,"nodeType":"StructuredDocumentation","src":"2076:223:17","text":" @dev Revokes `role` from `account`.\n If `account` had been granted `role`, emits a {RoleRevoked} event.\n Requirements:\n - the caller must have ``role``'s admin role."},"functionSelector":"d547741f","id":3747,"implemented":false,"kind":"function","modifiers":[],"name":"revokeRole","nameLocation":"2313:10:17","nodeType":"FunctionDefinition","parameters":{"id":3745,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3742,"mutability":"mutable","name":"role","nameLocation":"2332:4:17","nodeType":"VariableDeclaration","scope":3747,"src":"2324:12:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3741,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2324:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3744,"mutability":"mutable","name":"account","nameLocation":"2346:7:17","nodeType":"VariableDeclaration","scope":3747,"src":"2338:15:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3743,"name":"address","nodeType":"ElementaryTypeName","src":"2338:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2323:31:17"},"returnParameters":{"id":3746,"nodeType":"ParameterList","parameters":[],"src":"2363:0:17"},"scope":3756,"src":"2304:60:17","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":3748,"nodeType":"StructuredDocumentation","src":"2370:480:17","text":" @dev Revokes `role` from the calling account.\n Roles are often managed via {grantRole} and {revokeRole}: this function's\n purpose is to provide a mechanism for accounts to lose their privileges\n if they are compromised (such as when a trusted device is misplaced).\n If the calling account had been granted `role`, emits a {RoleRevoked}\n event.\n Requirements:\n - the caller must be `account`."},"functionSelector":"36568abe","id":3755,"implemented":false,"kind":"function","modifiers":[],"name":"renounceRole","nameLocation":"2864:12:17","nodeType":"FunctionDefinition","parameters":{"id":3753,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3750,"mutability":"mutable","name":"role","nameLocation":"2885:4:17","nodeType":"VariableDeclaration","scope":3755,"src":"2877:12:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3749,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2877:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3752,"mutability":"mutable","name":"account","nameLocation":"2899:7:17","nodeType":"VariableDeclaration","scope":3755,"src":"2891:15:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3751,"name":"address","nodeType":"ElementaryTypeName","src":"2891:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2876:31:17"},"returnParameters":{"id":3754,"nodeType":"ParameterList","parameters":[],"src":"2916:0:17"},"scope":3756,"src":"2855:62:17","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":3757,"src":"209:2710:17","usedErrors":[]}],"src":"94:2826:17"},"id":17},"@openzeppelin/contracts/utils/Context.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","exportedSymbols":{"Context":[3778]},"id":3779,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3758,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"86:23:18"},{"abstract":true,"baseContracts":[],"canonicalName":"Context","contractDependencies":[],"contractKind":"contract","documentation":{"id":3759,"nodeType":"StructuredDocumentation","src":"111:496:18","text":" @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."},"fullyImplemented":true,"id":3778,"linearizedBaseContracts":[3778],"name":"Context","nameLocation":"626:7:18","nodeType":"ContractDefinition","nodes":[{"body":{"id":3767,"nodeType":"Block","src":"702:34:18","statements":[{"expression":{"expression":{"id":3764,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"719:3:18","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3765,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"723:6:18","memberName":"sender","nodeType":"MemberAccess","src":"719:10:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":3763,"id":3766,"nodeType":"Return","src":"712:17:18"}]},"id":3768,"implemented":true,"kind":"function","modifiers":[],"name":"_msgSender","nameLocation":"649:10:18","nodeType":"FunctionDefinition","parameters":{"id":3760,"nodeType":"ParameterList","parameters":[],"src":"659:2:18"},"returnParameters":{"id":3763,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3762,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3768,"src":"693:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3761,"name":"address","nodeType":"ElementaryTypeName","src":"693:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"692:9:18"},"scope":3778,"src":"640:96:18","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":3776,"nodeType":"Block","src":"809:32:18","statements":[{"expression":{"expression":{"id":3773,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"826:3:18","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3774,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"830:4:18","memberName":"data","nodeType":"MemberAccess","src":"826:8:18","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":3772,"id":3775,"nodeType":"Return","src":"819:15:18"}]},"id":3777,"implemented":true,"kind":"function","modifiers":[],"name":"_msgData","nameLocation":"751:8:18","nodeType":"FunctionDefinition","parameters":{"id":3769,"nodeType":"ParameterList","parameters":[],"src":"759:2:18"},"returnParameters":{"id":3772,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3771,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3777,"src":"793:14:18","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":3770,"name":"bytes","nodeType":"ElementaryTypeName","src":"793:5:18","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"792:16:18"},"scope":3778,"src":"742:99:18","stateMutability":"view","virtual":true,"visibility":"internal"}],"scope":3779,"src":"608:235:18","usedErrors":[]}],"src":"86:758:18"},"id":18},"@openzeppelin/contracts/utils/Strings.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Strings.sol","exportedSymbols":{"Math":[4909],"SignedMath":[5014],"Strings":[4007]},"id":4008,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3780,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"101:23:19"},{"absolutePath":"@openzeppelin/contracts/utils/math/Math.sol","file":"./math/Math.sol","id":3781,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4008,"sourceUnit":4910,"src":"126:25:19","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/math/SignedMath.sol","file":"./math/SignedMath.sol","id":3782,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4008,"sourceUnit":5015,"src":"152:31:19","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"Strings","contractDependencies":[],"contractKind":"library","documentation":{"id":3783,"nodeType":"StructuredDocumentation","src":"185:34:19","text":" @dev String operations."},"fullyImplemented":true,"id":4007,"linearizedBaseContracts":[4007],"name":"Strings","nameLocation":"228:7:19","nodeType":"ContractDefinition","nodes":[{"constant":true,"id":3786,"mutability":"constant","name":"_SYMBOLS","nameLocation":"267:8:19","nodeType":"VariableDeclaration","scope":4007,"src":"242:54:19","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"},"typeName":{"id":3784,"name":"bytes16","nodeType":"ElementaryTypeName","src":"242:7:19","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"}},"value":{"hexValue":"30313233343536373839616263646566","id":3785,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"278:18:19","typeDescriptions":{"typeIdentifier":"t_stringliteral_cb29997ed99ead0db59ce4d12b7d3723198c827273e5796737c926d78019c39f","typeString":"literal_string \"0123456789abcdef\""},"value":"0123456789abcdef"},"visibility":"private"},{"constant":true,"id":3789,"mutability":"constant","name":"_ADDRESS_LENGTH","nameLocation":"325:15:19","nodeType":"VariableDeclaration","scope":4007,"src":"302:43:19","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":3787,"name":"uint8","nodeType":"ElementaryTypeName","src":"302:5:19","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"value":{"hexValue":"3230","id":3788,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"343:2:19","typeDescriptions":{"typeIdentifier":"t_rational_20_by_1","typeString":"int_const 20"},"value":"20"},"visibility":"private"},{"body":{"id":3836,"nodeType":"Block","src":"518:625:19","statements":[{"id":3835,"nodeType":"UncheckedBlock","src":"528:609:19","statements":[{"assignments":[3798],"declarations":[{"constant":false,"id":3798,"mutability":"mutable","name":"length","nameLocation":"560:6:19","nodeType":"VariableDeclaration","scope":3835,"src":"552:14:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3797,"name":"uint256","nodeType":"ElementaryTypeName","src":"552:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3805,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3804,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3801,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3792,"src":"580:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":3799,"name":"Math","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4909,"src":"569:4:19","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Math_$4909_$","typeString":"type(library Math)"}},"id":3800,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"574:5:19","memberName":"log10","nodeType":"MemberAccess","referencedDeclaration":4746,"src":"569:10:19","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":3802,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"569:17:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":3803,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"589:1:19","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"569:21:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"552:38:19"},{"assignments":[3807],"declarations":[{"constant":false,"id":3807,"mutability":"mutable","name":"buffer","nameLocation":"618:6:19","nodeType":"VariableDeclaration","scope":3835,"src":"604:20:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3806,"name":"string","nodeType":"ElementaryTypeName","src":"604:6:19","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"id":3812,"initialValue":{"arguments":[{"id":3810,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3798,"src":"638:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3809,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"627:10:19","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"},"typeName":{"id":3808,"name":"string","nodeType":"ElementaryTypeName","src":"631:6:19","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}}},"id":3811,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"627:18:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"nodeType":"VariableDeclarationStatement","src":"604:41:19"},{"assignments":[3814],"declarations":[{"constant":false,"id":3814,"mutability":"mutable","name":"ptr","nameLocation":"667:3:19","nodeType":"VariableDeclaration","scope":3835,"src":"659:11:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3813,"name":"uint256","nodeType":"ElementaryTypeName","src":"659:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3815,"nodeType":"VariableDeclarationStatement","src":"659:11:19"},{"AST":{"nodeType":"YulBlock","src":"740:67:19","statements":[{"nodeType":"YulAssignment","src":"758:35:19","value":{"arguments":[{"name":"buffer","nodeType":"YulIdentifier","src":"769:6:19"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"781:2:19","type":"","value":"32"},{"name":"length","nodeType":"YulIdentifier","src":"785:6:19"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"777:3:19"},"nodeType":"YulFunctionCall","src":"777:15:19"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"765:3:19"},"nodeType":"YulFunctionCall","src":"765:28:19"},"variableNames":[{"name":"ptr","nodeType":"YulIdentifier","src":"758:3:19"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":3807,"isOffset":false,"isSlot":false,"src":"769:6:19","valueSize":1},{"declaration":3798,"isOffset":false,"isSlot":false,"src":"785:6:19","valueSize":1},{"declaration":3814,"isOffset":false,"isSlot":false,"src":"758:3:19","valueSize":1}],"id":3816,"nodeType":"InlineAssembly","src":"731:76:19"},{"body":{"id":3831,"nodeType":"Block","src":"833:267:19","statements":[{"expression":{"id":3819,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":false,"src":"851:5:19","subExpression":{"id":3818,"name":"ptr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3814,"src":"851:3:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3820,"nodeType":"ExpressionStatement","src":"851:5:19"},{"AST":{"nodeType":"YulBlock","src":"934:84:19","statements":[{"expression":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"964:3:19"},{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"978:5:19"},{"kind":"number","nodeType":"YulLiteral","src":"985:2:19","type":"","value":"10"}],"functionName":{"name":"mod","nodeType":"YulIdentifier","src":"974:3:19"},"nodeType":"YulFunctionCall","src":"974:14:19"},{"name":"_SYMBOLS","nodeType":"YulIdentifier","src":"990:8:19"}],"functionName":{"name":"byte","nodeType":"YulIdentifier","src":"969:4:19"},"nodeType":"YulFunctionCall","src":"969:30:19"}],"functionName":{"name":"mstore8","nodeType":"YulIdentifier","src":"956:7:19"},"nodeType":"YulFunctionCall","src":"956:44:19"},"nodeType":"YulExpressionStatement","src":"956:44:19"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":3786,"isOffset":false,"isSlot":false,"src":"990:8:19","valueSize":1},{"declaration":3814,"isOffset":false,"isSlot":false,"src":"964:3:19","valueSize":1},{"declaration":3792,"isOffset":false,"isSlot":false,"src":"978:5:19","valueSize":1}],"id":3821,"nodeType":"InlineAssembly","src":"925:93:19"},{"expression":{"id":3824,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3822,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3792,"src":"1035:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"hexValue":"3130","id":3823,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1044:2:19","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"src":"1035:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3825,"nodeType":"ExpressionStatement","src":"1035:11:19"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3828,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3826,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3792,"src":"1068:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3827,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1077:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1068:10:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3830,"nodeType":"IfStatement","src":"1064:21:19","trueBody":{"id":3829,"nodeType":"Break","src":"1080:5:19"}}]},"condition":{"hexValue":"74727565","id":3817,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"827:4:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"id":3832,"nodeType":"WhileStatement","src":"820:280:19"},{"expression":{"id":3833,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3807,"src":"1120:6:19","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":3796,"id":3834,"nodeType":"Return","src":"1113:13:19"}]}]},"documentation":{"id":3790,"nodeType":"StructuredDocumentation","src":"352:90:19","text":" @dev Converts a `uint256` to its ASCII `string` decimal representation."},"id":3837,"implemented":true,"kind":"function","modifiers":[],"name":"toString","nameLocation":"456:8:19","nodeType":"FunctionDefinition","parameters":{"id":3793,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3792,"mutability":"mutable","name":"value","nameLocation":"473:5:19","nodeType":"VariableDeclaration","scope":3837,"src":"465:13:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3791,"name":"uint256","nodeType":"ElementaryTypeName","src":"465:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"464:15:19"},"returnParameters":{"id":3796,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3795,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3837,"src":"503:13:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3794,"name":"string","nodeType":"ElementaryTypeName","src":"503:6:19","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"502:15:19"},"scope":4007,"src":"447:696:19","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3864,"nodeType":"Block","src":"1313:103:19","statements":[{"expression":{"arguments":[{"arguments":[{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3851,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3849,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3840,"src":"1354:5:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"30","id":3850,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1362:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1354:9:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"","id":3853,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1372:2:19","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""},"id":3854,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"1354:20:19","trueExpression":{"hexValue":"2d","id":3852,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1366:3:19","typeDescriptions":{"typeIdentifier":"t_stringliteral_d3b8281179950f98149eefdb158d0e1acb56f56e8e343aa9fefafa7e36959561","typeString":"literal_string \"-\""},"value":"-"},"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"arguments":[{"arguments":[{"id":3858,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3840,"src":"1400:5:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"expression":{"id":3856,"name":"SignedMath","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5014,"src":"1385:10:19","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SignedMath_$5014_$","typeString":"type(library SignedMath)"}},"id":3857,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1396:3:19","memberName":"abs","nodeType":"MemberAccess","referencedDeclaration":5013,"src":"1385:14:19","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_int256_$returns$_t_uint256_$","typeString":"function (int256) pure returns (uint256)"}},"id":3859,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1385:21:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3855,"name":"toString","nodeType":"Identifier","overloadedDeclarations":[3837,3865],"referencedDeclaration":3837,"src":"1376:8:19","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"}},"id":3860,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1376:31:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"expression":{"id":3847,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1337:3:19","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":3848,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1341:12:19","memberName":"encodePacked","nodeType":"MemberAccess","src":"1337:16:19","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":3861,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1337:71:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3846,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1330:6:19","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":3845,"name":"string","nodeType":"ElementaryTypeName","src":"1330:6:19","typeDescriptions":{}}},"id":3862,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1330:79:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":3844,"id":3863,"nodeType":"Return","src":"1323:86:19"}]},"documentation":{"id":3838,"nodeType":"StructuredDocumentation","src":"1149:89:19","text":" @dev Converts a `int256` to its ASCII `string` decimal representation."},"id":3865,"implemented":true,"kind":"function","modifiers":[],"name":"toString","nameLocation":"1252:8:19","nodeType":"FunctionDefinition","parameters":{"id":3841,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3840,"mutability":"mutable","name":"value","nameLocation":"1268:5:19","nodeType":"VariableDeclaration","scope":3865,"src":"1261:12:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3839,"name":"int256","nodeType":"ElementaryTypeName","src":"1261:6:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"1260:14:19"},"returnParameters":{"id":3844,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3843,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3865,"src":"1298:13:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3842,"name":"string","nodeType":"ElementaryTypeName","src":"1298:6:19","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1297:15:19"},"scope":4007,"src":"1243:173:19","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3884,"nodeType":"Block","src":"1595:100:19","statements":[{"id":3883,"nodeType":"UncheckedBlock","src":"1605:84:19","statements":[{"expression":{"arguments":[{"id":3874,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3868,"src":"1648:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3880,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3877,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3868,"src":"1667:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":3875,"name":"Math","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4909,"src":"1655:4:19","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Math_$4909_$","typeString":"type(library Math)"}},"id":3876,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1660:6:19","memberName":"log256","nodeType":"MemberAccess","referencedDeclaration":4869,"src":"1655:11:19","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":3878,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1655:18:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":3879,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1676:1:19","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1655:22:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3873,"name":"toHexString","nodeType":"Identifier","overloadedDeclarations":[3885,3961,3981],"referencedDeclaration":3961,"src":"1636:11:19","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (string memory)"}},"id":3881,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1636:42:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":3872,"id":3882,"nodeType":"Return","src":"1629:49:19"}]}]},"documentation":{"id":3866,"nodeType":"StructuredDocumentation","src":"1422:94:19","text":" @dev Converts a `uint256` to its ASCII `string` hexadecimal representation."},"id":3885,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"1530:11:19","nodeType":"FunctionDefinition","parameters":{"id":3869,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3868,"mutability":"mutable","name":"value","nameLocation":"1550:5:19","nodeType":"VariableDeclaration","scope":3885,"src":"1542:13:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3867,"name":"uint256","nodeType":"ElementaryTypeName","src":"1542:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1541:15:19"},"returnParameters":{"id":3872,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3871,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3885,"src":"1580:13:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3870,"name":"string","nodeType":"ElementaryTypeName","src":"1580:6:19","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1579:15:19"},"scope":4007,"src":"1521:174:19","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3960,"nodeType":"Block","src":"1908:347:19","statements":[{"assignments":[3896],"declarations":[{"constant":false,"id":3896,"mutability":"mutable","name":"buffer","nameLocation":"1931:6:19","nodeType":"VariableDeclaration","scope":3960,"src":"1918:19:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3895,"name":"bytes","nodeType":"ElementaryTypeName","src":"1918:5:19","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":3905,"initialValue":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3903,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3901,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":3899,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1950:1:19","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3900,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3890,"src":"1954:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1950:10:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"32","id":3902,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1963:1:19","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"1950:14:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3898,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"1940:9:19","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$","typeString":"function (uint256) pure returns (bytes memory)"},"typeName":{"id":3897,"name":"bytes","nodeType":"ElementaryTypeName","src":"1944:5:19","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}}},"id":3904,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1940:25:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"1918:47:19"},{"expression":{"id":3910,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3906,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3896,"src":"1975:6:19","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":3908,"indexExpression":{"hexValue":"30","id":3907,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1982:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1975:9:19","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":3909,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1987:3:19","typeDescriptions":{"typeIdentifier":"t_stringliteral_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d","typeString":"literal_string \"0\""},"value":"0"},"src":"1975:15:19","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":3911,"nodeType":"ExpressionStatement","src":"1975:15:19"},{"expression":{"id":3916,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3912,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3896,"src":"2000:6:19","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":3914,"indexExpression":{"hexValue":"31","id":3913,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2007:1:19","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2000:9:19","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"78","id":3915,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2012:3:19","typeDescriptions":{"typeIdentifier":"t_stringliteral_7521d1cadbcfa91eec65aa16715b94ffc1c9654ba57ea2ef1a2127bca1127a83","typeString":"literal_string \"x\""},"value":"x"},"src":"2000:15:19","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":3917,"nodeType":"ExpressionStatement","src":"2000:15:19"},{"body":{"id":3946,"nodeType":"Block","src":"2070:83:19","statements":[{"expression":{"id":3940,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3932,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3896,"src":"2084:6:19","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":3934,"indexExpression":{"id":3933,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3919,"src":"2091:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2084:9:19","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"id":3935,"name":"_SYMBOLS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3786,"src":"2096:8:19","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"}},"id":3939,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3938,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3936,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3888,"src":"2105:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"307866","id":3937,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2113:3:19","typeDescriptions":{"typeIdentifier":"t_rational_15_by_1","typeString":"int_const 15"},"value":"0xf"},"src":"2105:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2096:21:19","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"src":"2084:33:19","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":3941,"nodeType":"ExpressionStatement","src":"2084:33:19"},{"expression":{"id":3944,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3942,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3888,"src":"2131:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"34","id":3943,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2141:1:19","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"2131:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3945,"nodeType":"ExpressionStatement","src":"2131:11:19"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3928,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3926,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3919,"src":"2058:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"31","id":3927,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2062:1:19","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"2058:5:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3947,"initializationExpression":{"assignments":[3919],"declarations":[{"constant":false,"id":3919,"mutability":"mutable","name":"i","nameLocation":"2038:1:19","nodeType":"VariableDeclaration","scope":3947,"src":"2030:9:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3918,"name":"uint256","nodeType":"ElementaryTypeName","src":"2030:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3925,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3924,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3922,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":3920,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2042:1:19","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3921,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3890,"src":"2046:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2042:10:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":3923,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2055:1:19","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"2042:14:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2030:26:19"},"loopExpression":{"expression":{"id":3930,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":true,"src":"2065:3:19","subExpression":{"id":3929,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3919,"src":"2067:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3931,"nodeType":"ExpressionStatement","src":"2065:3:19"},"nodeType":"ForStatement","src":"2025:128:19"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3951,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3949,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3888,"src":"2170:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3950,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2179:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2170:10:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"537472696e67733a20686578206c656e67746820696e73756666696369656e74","id":3952,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2182:34:19","typeDescriptions":{"typeIdentifier":"t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2","typeString":"literal_string \"Strings: hex length insufficient\""},"value":"Strings: hex length insufficient"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2","typeString":"literal_string \"Strings: hex length insufficient\""}],"id":3948,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2162:7:19","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3953,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2162:55:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3954,"nodeType":"ExpressionStatement","src":"2162:55:19"},{"expression":{"arguments":[{"id":3957,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3896,"src":"2241:6:19","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3956,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2234:6:19","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":3955,"name":"string","nodeType":"ElementaryTypeName","src":"2234:6:19","typeDescriptions":{}}},"id":3958,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2234:14:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":3894,"id":3959,"nodeType":"Return","src":"2227:21:19"}]},"documentation":{"id":3886,"nodeType":"StructuredDocumentation","src":"1701:112:19","text":" @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length."},"id":3961,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"1827:11:19","nodeType":"FunctionDefinition","parameters":{"id":3891,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3888,"mutability":"mutable","name":"value","nameLocation":"1847:5:19","nodeType":"VariableDeclaration","scope":3961,"src":"1839:13:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3887,"name":"uint256","nodeType":"ElementaryTypeName","src":"1839:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3890,"mutability":"mutable","name":"length","nameLocation":"1862:6:19","nodeType":"VariableDeclaration","scope":3961,"src":"1854:14:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3889,"name":"uint256","nodeType":"ElementaryTypeName","src":"1854:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1838:31:19"},"returnParameters":{"id":3894,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3893,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3961,"src":"1893:13:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3892,"name":"string","nodeType":"ElementaryTypeName","src":"1893:6:19","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1892:15:19"},"scope":4007,"src":"1818:437:19","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3980,"nodeType":"Block","src":"2480:76:19","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"id":3974,"name":"addr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3964,"src":"2525:4:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3973,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2517:7:19","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":3972,"name":"uint160","nodeType":"ElementaryTypeName","src":"2517:7:19","typeDescriptions":{}}},"id":3975,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2517:13:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":3971,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2509:7:19","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":3970,"name":"uint256","nodeType":"ElementaryTypeName","src":"2509:7:19","typeDescriptions":{}}},"id":3976,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2509:22:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3977,"name":"_ADDRESS_LENGTH","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3789,"src":"2533:15:19","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":3969,"name":"toHexString","nodeType":"Identifier","overloadedDeclarations":[3885,3961,3981],"referencedDeclaration":3961,"src":"2497:11:19","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (string memory)"}},"id":3978,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2497:52:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":3968,"id":3979,"nodeType":"Return","src":"2490:59:19"}]},"documentation":{"id":3962,"nodeType":"StructuredDocumentation","src":"2261:141:19","text":" @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation."},"id":3981,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"2416:11:19","nodeType":"FunctionDefinition","parameters":{"id":3965,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3964,"mutability":"mutable","name":"addr","nameLocation":"2436:4:19","nodeType":"VariableDeclaration","scope":3981,"src":"2428:12:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3963,"name":"address","nodeType":"ElementaryTypeName","src":"2428:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2427:14:19"},"returnParameters":{"id":3968,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3967,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3981,"src":"2465:13:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3966,"name":"string","nodeType":"ElementaryTypeName","src":"2465:6:19","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2464:15:19"},"scope":4007,"src":"2407:149:19","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4005,"nodeType":"Block","src":"2711:66:19","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":4003,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"id":3994,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3984,"src":"2744:1:19","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":3993,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2738:5:19","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":3992,"name":"bytes","nodeType":"ElementaryTypeName","src":"2738:5:19","typeDescriptions":{}}},"id":3995,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2738:8:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3991,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"2728:9:19","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":3996,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2728:19:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"arguments":[{"id":4000,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3986,"src":"2767:1:19","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":3999,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2761:5:19","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":3998,"name":"bytes","nodeType":"ElementaryTypeName","src":"2761:5:19","typeDescriptions":{}}},"id":4001,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2761:8:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3997,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"2751:9:19","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":4002,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2751:19:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"2728:42:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":3990,"id":4004,"nodeType":"Return","src":"2721:49:19"}]},"documentation":{"id":3982,"nodeType":"StructuredDocumentation","src":"2562:66:19","text":" @dev Returns true if the two strings are equal."},"id":4006,"implemented":true,"kind":"function","modifiers":[],"name":"equal","nameLocation":"2642:5:19","nodeType":"FunctionDefinition","parameters":{"id":3987,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3984,"mutability":"mutable","name":"a","nameLocation":"2662:1:19","nodeType":"VariableDeclaration","scope":4006,"src":"2648:15:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3983,"name":"string","nodeType":"ElementaryTypeName","src":"2648:6:19","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":3986,"mutability":"mutable","name":"b","nameLocation":"2679:1:19","nodeType":"VariableDeclaration","scope":4006,"src":"2665:15:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3985,"name":"string","nodeType":"ElementaryTypeName","src":"2665:6:19","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2647:34:19"},"returnParameters":{"id":3990,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3989,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4006,"src":"2705:4:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3988,"name":"bool","nodeType":"ElementaryTypeName","src":"2705:4:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2704:6:19"},"scope":4007,"src":"2633:144:19","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":4008,"src":"220:2559:19","usedErrors":[]}],"src":"101:2679:19"},"id":19},"@openzeppelin/contracts/utils/introspection/ERC165.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/introspection/ERC165.sol","exportedSymbols":{"ERC165":[4031],"IERC165":[4043]},"id":4032,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":4009,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"99:23:20"},{"absolutePath":"@openzeppelin/contracts/utils/introspection/IERC165.sol","file":"./IERC165.sol","id":4010,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4032,"sourceUnit":4044,"src":"124:23:20","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":4012,"name":"IERC165","nameLocations":["754:7:20"],"nodeType":"IdentifierPath","referencedDeclaration":4043,"src":"754:7:20"},"id":4013,"nodeType":"InheritanceSpecifier","src":"754:7:20"}],"canonicalName":"ERC165","contractDependencies":[],"contractKind":"contract","documentation":{"id":4011,"nodeType":"StructuredDocumentation","src":"149:576:20","text":" @dev Implementation of the {IERC165} interface.\n Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n for the additional interface id that will be supported. For example:\n ```solidity\n function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n }\n ```\n Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation."},"fullyImplemented":true,"id":4031,"linearizedBaseContracts":[4031,4043],"name":"ERC165","nameLocation":"744:6:20","nodeType":"ContractDefinition","nodes":[{"baseFunctions":[4042],"body":{"id":4029,"nodeType":"Block","src":"920:64:20","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":4027,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4022,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4016,"src":"937:11:20","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":4024,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4043,"src":"957:7:20","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC165_$4043_$","typeString":"type(contract IERC165)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC165_$4043_$","typeString":"type(contract IERC165)"}],"id":4023,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"952:4:20","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":4025,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"952:13:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC165_$4043","typeString":"type(contract IERC165)"}},"id":4026,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"966:11:20","memberName":"interfaceId","nodeType":"MemberAccess","src":"952:25:20","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"937:40:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":4021,"id":4028,"nodeType":"Return","src":"930:47:20"}]},"documentation":{"id":4014,"nodeType":"StructuredDocumentation","src":"768:56:20","text":" @dev See {IERC165-supportsInterface}."},"functionSelector":"01ffc9a7","id":4030,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"838:17:20","nodeType":"FunctionDefinition","overrides":{"id":4018,"nodeType":"OverrideSpecifier","overrides":[],"src":"896:8:20"},"parameters":{"id":4017,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4016,"mutability":"mutable","name":"interfaceId","nameLocation":"863:11:20","nodeType":"VariableDeclaration","scope":4030,"src":"856:18:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":4015,"name":"bytes4","nodeType":"ElementaryTypeName","src":"856:6:20","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"855:20:20"},"returnParameters":{"id":4021,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4020,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4030,"src":"914:4:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4019,"name":"bool","nodeType":"ElementaryTypeName","src":"914:4:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"913:6:20"},"scope":4031,"src":"829:155:20","stateMutability":"view","virtual":true,"visibility":"public"}],"scope":4032,"src":"726:260:20","usedErrors":[]}],"src":"99:888:20"},"id":20},"@openzeppelin/contracts/utils/introspection/IERC165.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/introspection/IERC165.sol","exportedSymbols":{"IERC165":[4043]},"id":4044,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":4033,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"100:23:21"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC165","contractDependencies":[],"contractKind":"interface","documentation":{"id":4034,"nodeType":"StructuredDocumentation","src":"125:279:21","text":" @dev Interface of the ERC165 standard, as defined in the\n https://eips.ethereum.org/EIPS/eip-165[EIP].\n Implementers can declare support of contract interfaces, which can then be\n queried by others ({ERC165Checker}).\n For an implementation, see {ERC165}."},"fullyImplemented":false,"id":4043,"linearizedBaseContracts":[4043],"name":"IERC165","nameLocation":"415:7:21","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":4035,"nodeType":"StructuredDocumentation","src":"429:340:21","text":" @dev Returns true if this contract implements the interface defined by\n `interfaceId`. See the corresponding\n https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n to learn more about how these ids are created.\n This function call must use less than 30 000 gas."},"functionSelector":"01ffc9a7","id":4042,"implemented":false,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"783:17:21","nodeType":"FunctionDefinition","parameters":{"id":4038,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4037,"mutability":"mutable","name":"interfaceId","nameLocation":"808:11:21","nodeType":"VariableDeclaration","scope":4042,"src":"801:18:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":4036,"name":"bytes4","nodeType":"ElementaryTypeName","src":"801:6:21","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"800:20:21"},"returnParameters":{"id":4041,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4040,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4042,"src":"844:4:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4039,"name":"bool","nodeType":"ElementaryTypeName","src":"844:4:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"843:6:21"},"scope":4043,"src":"774:76:21","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":4044,"src":"405:447:21","usedErrors":[]}],"src":"100:753:21"},"id":21},"@openzeppelin/contracts/utils/math/Math.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/math/Math.sol","exportedSymbols":{"Math":[4909]},"id":4910,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":4045,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"103:23:22"},{"abstract":false,"baseContracts":[],"canonicalName":"Math","contractDependencies":[],"contractKind":"library","documentation":{"id":4046,"nodeType":"StructuredDocumentation","src":"128:73:22","text":" @dev Standard math utilities missing in the Solidity language."},"fullyImplemented":true,"id":4909,"linearizedBaseContracts":[4909],"name":"Math","nameLocation":"210:4:22","nodeType":"ContractDefinition","nodes":[{"canonicalName":"Math.Rounding","id":4050,"members":[{"id":4047,"name":"Down","nameLocation":"245:4:22","nodeType":"EnumValue","src":"245:4:22"},{"id":4048,"name":"Up","nameLocation":"287:2:22","nodeType":"EnumValue","src":"287:2:22"},{"id":4049,"name":"Zero","nameLocation":"318:4:22","nodeType":"EnumValue","src":"318:4:22"}],"name":"Rounding","nameLocation":"226:8:22","nodeType":"EnumDefinition","src":"221:122:22"},{"body":{"id":4067,"nodeType":"Block","src":"480:37:22","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4062,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4060,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4053,"src":"497:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":4061,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4055,"src":"501:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"497:5:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":4064,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4055,"src":"509:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4065,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"497:13:22","trueExpression":{"id":4063,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4053,"src":"505:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4059,"id":4066,"nodeType":"Return","src":"490:20:22"}]},"documentation":{"id":4051,"nodeType":"StructuredDocumentation","src":"349:59:22","text":" @dev Returns the largest of two numbers."},"id":4068,"implemented":true,"kind":"function","modifiers":[],"name":"max","nameLocation":"422:3:22","nodeType":"FunctionDefinition","parameters":{"id":4056,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4053,"mutability":"mutable","name":"a","nameLocation":"434:1:22","nodeType":"VariableDeclaration","scope":4068,"src":"426:9:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4052,"name":"uint256","nodeType":"ElementaryTypeName","src":"426:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4055,"mutability":"mutable","name":"b","nameLocation":"445:1:22","nodeType":"VariableDeclaration","scope":4068,"src":"437:9:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4054,"name":"uint256","nodeType":"ElementaryTypeName","src":"437:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"425:22:22"},"returnParameters":{"id":4059,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4058,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4068,"src":"471:7:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4057,"name":"uint256","nodeType":"ElementaryTypeName","src":"471:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"470:9:22"},"scope":4909,"src":"413:104:22","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4085,"nodeType":"Block","src":"655:37:22","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4080,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4078,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4071,"src":"672:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":4079,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4073,"src":"676:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"672:5:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":4082,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4073,"src":"684:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4083,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"672:13:22","trueExpression":{"id":4081,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4071,"src":"680:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4077,"id":4084,"nodeType":"Return","src":"665:20:22"}]},"documentation":{"id":4069,"nodeType":"StructuredDocumentation","src":"523:60:22","text":" @dev Returns the smallest of two numbers."},"id":4086,"implemented":true,"kind":"function","modifiers":[],"name":"min","nameLocation":"597:3:22","nodeType":"FunctionDefinition","parameters":{"id":4074,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4071,"mutability":"mutable","name":"a","nameLocation":"609:1:22","nodeType":"VariableDeclaration","scope":4086,"src":"601:9:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4070,"name":"uint256","nodeType":"ElementaryTypeName","src":"601:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4073,"mutability":"mutable","name":"b","nameLocation":"620:1:22","nodeType":"VariableDeclaration","scope":4086,"src":"612:9:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4072,"name":"uint256","nodeType":"ElementaryTypeName","src":"612:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"600:22:22"},"returnParameters":{"id":4077,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4076,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4086,"src":"646:7:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4075,"name":"uint256","nodeType":"ElementaryTypeName","src":"646:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"645:9:22"},"scope":4909,"src":"588:104:22","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4108,"nodeType":"Block","src":"876:82:22","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4106,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4098,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4096,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4089,"src":"931:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"id":4097,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4091,"src":"935:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"931:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4099,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"930:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4105,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4102,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4100,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4089,"src":"941:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":4101,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4091,"src":"945:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"941:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4103,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"940:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"32","id":4104,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"950:1:22","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"940:11:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"930:21:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4095,"id":4107,"nodeType":"Return","src":"923:28:22"}]},"documentation":{"id":4087,"nodeType":"StructuredDocumentation","src":"698:102:22","text":" @dev Returns the average of two numbers. The result is rounded towards\n zero."},"id":4109,"implemented":true,"kind":"function","modifiers":[],"name":"average","nameLocation":"814:7:22","nodeType":"FunctionDefinition","parameters":{"id":4092,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4089,"mutability":"mutable","name":"a","nameLocation":"830:1:22","nodeType":"VariableDeclaration","scope":4109,"src":"822:9:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4088,"name":"uint256","nodeType":"ElementaryTypeName","src":"822:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4091,"mutability":"mutable","name":"b","nameLocation":"841:1:22","nodeType":"VariableDeclaration","scope":4109,"src":"833:9:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4090,"name":"uint256","nodeType":"ElementaryTypeName","src":"833:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"821:22:22"},"returnParameters":{"id":4095,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4094,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4109,"src":"867:7:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4093,"name":"uint256","nodeType":"ElementaryTypeName","src":"867:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"866:9:22"},"scope":4909,"src":"805:153:22","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4133,"nodeType":"Block","src":"1228:123:22","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4121,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4119,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4112,"src":"1316:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":4120,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1321:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1316:6:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4130,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4128,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4125,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4123,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4112,"src":"1330:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":4124,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1334:1:22","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1330:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4126,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1329:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4127,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4114,"src":"1339:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1329:11:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":4129,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1343:1:22","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1329:15:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4131,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"1316:28:22","trueExpression":{"hexValue":"30","id":4122,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1325:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4118,"id":4132,"nodeType":"Return","src":"1309:35:22"}]},"documentation":{"id":4110,"nodeType":"StructuredDocumentation","src":"964:188:22","text":" @dev Returns the ceiling of the division of two numbers.\n This differs from standard division with `/` in that it rounds up instead\n of rounding down."},"id":4134,"implemented":true,"kind":"function","modifiers":[],"name":"ceilDiv","nameLocation":"1166:7:22","nodeType":"FunctionDefinition","parameters":{"id":4115,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4112,"mutability":"mutable","name":"a","nameLocation":"1182:1:22","nodeType":"VariableDeclaration","scope":4134,"src":"1174:9:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4111,"name":"uint256","nodeType":"ElementaryTypeName","src":"1174:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4114,"mutability":"mutable","name":"b","nameLocation":"1193:1:22","nodeType":"VariableDeclaration","scope":4134,"src":"1185:9:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4113,"name":"uint256","nodeType":"ElementaryTypeName","src":"1185:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1173:22:22"},"returnParameters":{"id":4118,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4117,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4134,"src":"1219:7:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4116,"name":"uint256","nodeType":"ElementaryTypeName","src":"1219:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1218:9:22"},"scope":4909,"src":"1157:194:22","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4256,"nodeType":"Block","src":"1765:4115:22","statements":[{"id":4255,"nodeType":"UncheckedBlock","src":"1775:4099:22","statements":[{"assignments":[4147],"declarations":[{"constant":false,"id":4147,"mutability":"mutable","name":"prod0","nameLocation":"2104:5:22","nodeType":"VariableDeclaration","scope":4255,"src":"2096:13:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4146,"name":"uint256","nodeType":"ElementaryTypeName","src":"2096:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4148,"nodeType":"VariableDeclarationStatement","src":"2096:13:22"},{"assignments":[4150],"declarations":[{"constant":false,"id":4150,"mutability":"mutable","name":"prod1","nameLocation":"2176:5:22","nodeType":"VariableDeclaration","scope":4255,"src":"2168:13:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4149,"name":"uint256","nodeType":"ElementaryTypeName","src":"2168:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4151,"nodeType":"VariableDeclarationStatement","src":"2168:13:22"},{"AST":{"nodeType":"YulBlock","src":"2248:157:22","statements":[{"nodeType":"YulVariableDeclaration","src":"2266:30:22","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"2283:1:22"},{"name":"y","nodeType":"YulIdentifier","src":"2286:1:22"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2293:1:22","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"2289:3:22"},"nodeType":"YulFunctionCall","src":"2289:6:22"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"2276:6:22"},"nodeType":"YulFunctionCall","src":"2276:20:22"},"variables":[{"name":"mm","nodeType":"YulTypedName","src":"2270:2:22","type":""}]},{"nodeType":"YulAssignment","src":"2313:18:22","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"2326:1:22"},{"name":"y","nodeType":"YulIdentifier","src":"2329:1:22"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"2322:3:22"},"nodeType":"YulFunctionCall","src":"2322:9:22"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"2313:5:22"}]},{"nodeType":"YulAssignment","src":"2348:43:22","value":{"arguments":[{"arguments":[{"name":"mm","nodeType":"YulIdentifier","src":"2365:2:22"},{"name":"prod0","nodeType":"YulIdentifier","src":"2369:5:22"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2361:3:22"},"nodeType":"YulFunctionCall","src":"2361:14:22"},{"arguments":[{"name":"mm","nodeType":"YulIdentifier","src":"2380:2:22"},{"name":"prod0","nodeType":"YulIdentifier","src":"2384:5:22"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2377:2:22"},"nodeType":"YulFunctionCall","src":"2377:13:22"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2357:3:22"},"nodeType":"YulFunctionCall","src":"2357:34:22"},"variableNames":[{"name":"prod1","nodeType":"YulIdentifier","src":"2348:5:22"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":4147,"isOffset":false,"isSlot":false,"src":"2313:5:22","valueSize":1},{"declaration":4147,"isOffset":false,"isSlot":false,"src":"2369:5:22","valueSize":1},{"declaration":4147,"isOffset":false,"isSlot":false,"src":"2384:5:22","valueSize":1},{"declaration":4150,"isOffset":false,"isSlot":false,"src":"2348:5:22","valueSize":1},{"declaration":4137,"isOffset":false,"isSlot":false,"src":"2283:1:22","valueSize":1},{"declaration":4137,"isOffset":false,"isSlot":false,"src":"2326:1:22","valueSize":1},{"declaration":4139,"isOffset":false,"isSlot":false,"src":"2286:1:22","valueSize":1},{"declaration":4139,"isOffset":false,"isSlot":false,"src":"2329:1:22","valueSize":1}],"id":4152,"nodeType":"InlineAssembly","src":"2239:166:22"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4155,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4153,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4150,"src":"2486:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":4154,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2495:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2486:10:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4161,"nodeType":"IfStatement","src":"2482:368:22","trueBody":{"id":4160,"nodeType":"Block","src":"2498:352:22","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4158,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4156,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4147,"src":"2816:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4157,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4141,"src":"2824:11:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2816:19:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4145,"id":4159,"nodeType":"Return","src":"2809:26:22"}]}},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4165,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4163,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4141,"src":"2960:11:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":4164,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4150,"src":"2974:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2960:19:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4d6174683a206d756c446976206f766572666c6f77","id":4166,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2981:23:22","typeDescriptions":{"typeIdentifier":"t_stringliteral_d87093691d63b122ac2c14d1b11554b287e2431cf2b03550b3be7cffb0f86851","typeString":"literal_string \"Math: mulDiv overflow\""},"value":"Math: mulDiv overflow"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_d87093691d63b122ac2c14d1b11554b287e2431cf2b03550b3be7cffb0f86851","typeString":"literal_string \"Math: mulDiv overflow\""}],"id":4162,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2952:7:22","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4167,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2952:53:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4168,"nodeType":"ExpressionStatement","src":"2952:53:22"},{"assignments":[4170],"declarations":[{"constant":false,"id":4170,"mutability":"mutable","name":"remainder","nameLocation":"3269:9:22","nodeType":"VariableDeclaration","scope":4255,"src":"3261:17:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4169,"name":"uint256","nodeType":"ElementaryTypeName","src":"3261:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4171,"nodeType":"VariableDeclarationStatement","src":"3261:17:22"},{"AST":{"nodeType":"YulBlock","src":"3301:291:22","statements":[{"nodeType":"YulAssignment","src":"3370:38:22","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"3390:1:22"},{"name":"y","nodeType":"YulIdentifier","src":"3393:1:22"},{"name":"denominator","nodeType":"YulIdentifier","src":"3396:11:22"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"3383:6:22"},"nodeType":"YulFunctionCall","src":"3383:25:22"},"variableNames":[{"name":"remainder","nodeType":"YulIdentifier","src":"3370:9:22"}]},{"nodeType":"YulAssignment","src":"3490:41:22","value":{"arguments":[{"name":"prod1","nodeType":"YulIdentifier","src":"3503:5:22"},{"arguments":[{"name":"remainder","nodeType":"YulIdentifier","src":"3513:9:22"},{"name":"prod0","nodeType":"YulIdentifier","src":"3524:5:22"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3510:2:22"},"nodeType":"YulFunctionCall","src":"3510:20:22"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3499:3:22"},"nodeType":"YulFunctionCall","src":"3499:32:22"},"variableNames":[{"name":"prod1","nodeType":"YulIdentifier","src":"3490:5:22"}]},{"nodeType":"YulAssignment","src":"3548:30:22","value":{"arguments":[{"name":"prod0","nodeType":"YulIdentifier","src":"3561:5:22"},{"name":"remainder","nodeType":"YulIdentifier","src":"3568:9:22"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3557:3:22"},"nodeType":"YulFunctionCall","src":"3557:21:22"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"3548:5:22"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":4141,"isOffset":false,"isSlot":false,"src":"3396:11:22","valueSize":1},{"declaration":4147,"isOffset":false,"isSlot":false,"src":"3524:5:22","valueSize":1},{"declaration":4147,"isOffset":false,"isSlot":false,"src":"3548:5:22","valueSize":1},{"declaration":4147,"isOffset":false,"isSlot":false,"src":"3561:5:22","valueSize":1},{"declaration":4150,"isOffset":false,"isSlot":false,"src":"3490:5:22","valueSize":1},{"declaration":4150,"isOffset":false,"isSlot":false,"src":"3503:5:22","valueSize":1},{"declaration":4170,"isOffset":false,"isSlot":false,"src":"3370:9:22","valueSize":1},{"declaration":4170,"isOffset":false,"isSlot":false,"src":"3513:9:22","valueSize":1},{"declaration":4170,"isOffset":false,"isSlot":false,"src":"3568:9:22","valueSize":1},{"declaration":4137,"isOffset":false,"isSlot":false,"src":"3390:1:22","valueSize":1},{"declaration":4139,"isOffset":false,"isSlot":false,"src":"3393:1:22","valueSize":1}],"id":4172,"nodeType":"InlineAssembly","src":"3292:300:22"},{"assignments":[4174],"declarations":[{"constant":false,"id":4174,"mutability":"mutable","name":"twos","nameLocation":"3907:4:22","nodeType":"VariableDeclaration","scope":4255,"src":"3899:12:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4173,"name":"uint256","nodeType":"ElementaryTypeName","src":"3899:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4182,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4181,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4175,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4141,"src":"3914:11:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4179,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4177,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"~","prefix":true,"src":"3929:12:22","subExpression":{"id":4176,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4141,"src":"3930:11:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":4178,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3944:1:22","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3929:16:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4180,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3928:18:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3914:32:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3899:47:22"},{"AST":{"nodeType":"YulBlock","src":"3969:362:22","statements":[{"nodeType":"YulAssignment","src":"4034:37:22","value":{"arguments":[{"name":"denominator","nodeType":"YulIdentifier","src":"4053:11:22"},{"name":"twos","nodeType":"YulIdentifier","src":"4066:4:22"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"4049:3:22"},"nodeType":"YulFunctionCall","src":"4049:22:22"},"variableNames":[{"name":"denominator","nodeType":"YulIdentifier","src":"4034:11:22"}]},{"nodeType":"YulAssignment","src":"4138:25:22","value":{"arguments":[{"name":"prod0","nodeType":"YulIdentifier","src":"4151:5:22"},{"name":"twos","nodeType":"YulIdentifier","src":"4158:4:22"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"4147:3:22"},"nodeType":"YulFunctionCall","src":"4147:16:22"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"4138:5:22"}]},{"nodeType":"YulAssignment","src":"4278:39:22","value":{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4298:1:22","type":"","value":"0"},{"name":"twos","nodeType":"YulIdentifier","src":"4301:4:22"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4294:3:22"},"nodeType":"YulFunctionCall","src":"4294:12:22"},{"name":"twos","nodeType":"YulIdentifier","src":"4308:4:22"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"4290:3:22"},"nodeType":"YulFunctionCall","src":"4290:23:22"},{"kind":"number","nodeType":"YulLiteral","src":"4315:1:22","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4286:3:22"},"nodeType":"YulFunctionCall","src":"4286:31:22"},"variableNames":[{"name":"twos","nodeType":"YulIdentifier","src":"4278:4:22"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":4141,"isOffset":false,"isSlot":false,"src":"4034:11:22","valueSize":1},{"declaration":4141,"isOffset":false,"isSlot":false,"src":"4053:11:22","valueSize":1},{"declaration":4147,"isOffset":false,"isSlot":false,"src":"4138:5:22","valueSize":1},{"declaration":4147,"isOffset":false,"isSlot":false,"src":"4151:5:22","valueSize":1},{"declaration":4174,"isOffset":false,"isSlot":false,"src":"4066:4:22","valueSize":1},{"declaration":4174,"isOffset":false,"isSlot":false,"src":"4158:4:22","valueSize":1},{"declaration":4174,"isOffset":false,"isSlot":false,"src":"4278:4:22","valueSize":1},{"declaration":4174,"isOffset":false,"isSlot":false,"src":"4301:4:22","valueSize":1},{"declaration":4174,"isOffset":false,"isSlot":false,"src":"4308:4:22","valueSize":1}],"id":4183,"nodeType":"InlineAssembly","src":"3960:371:22"},{"expression":{"id":4188,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4184,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4147,"src":"4397:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"|=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4187,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4185,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4150,"src":"4406:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4186,"name":"twos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4174,"src":"4414:4:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4406:12:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4397:21:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4189,"nodeType":"ExpressionStatement","src":"4397:21:22"},{"assignments":[4191],"declarations":[{"constant":false,"id":4191,"mutability":"mutable","name":"inverse","nameLocation":"4744:7:22","nodeType":"VariableDeclaration","scope":4255,"src":"4736:15:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4190,"name":"uint256","nodeType":"ElementaryTypeName","src":"4736:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4198,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4197,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4194,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"33","id":4192,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4755:1:22","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4193,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4141,"src":"4759:11:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4755:15:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4195,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4754:17:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"hexValue":"32","id":4196,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4774:1:22","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"4754:21:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4736:39:22"},{"expression":{"id":4205,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4199,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4191,"src":"4992:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4204,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":4200,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5003:1:22","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4203,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4201,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4141,"src":"5007:11:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4202,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4191,"src":"5021:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5007:21:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5003:25:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4992:36:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4206,"nodeType":"ExpressionStatement","src":"4992:36:22"},{"expression":{"id":4213,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4207,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4191,"src":"5061:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4212,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":4208,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5072:1:22","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4211,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4209,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4141,"src":"5076:11:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4210,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4191,"src":"5090:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5076:21:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5072:25:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5061:36:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4214,"nodeType":"ExpressionStatement","src":"5061:36:22"},{"expression":{"id":4221,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4215,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4191,"src":"5131:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4220,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":4216,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5142:1:22","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4219,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4217,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4141,"src":"5146:11:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4218,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4191,"src":"5160:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5146:21:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5142:25:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5131:36:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4222,"nodeType":"ExpressionStatement","src":"5131:36:22"},{"expression":{"id":4229,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4223,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4191,"src":"5201:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4228,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":4224,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5212:1:22","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4227,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4225,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4141,"src":"5216:11:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4226,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4191,"src":"5230:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5216:21:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5212:25:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5201:36:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4230,"nodeType":"ExpressionStatement","src":"5201:36:22"},{"expression":{"id":4237,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4231,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4191,"src":"5271:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4236,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":4232,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5282:1:22","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4235,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4233,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4141,"src":"5286:11:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4234,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4191,"src":"5300:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5286:21:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5282:25:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5271:36:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4238,"nodeType":"ExpressionStatement","src":"5271:36:22"},{"expression":{"id":4245,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4239,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4191,"src":"5342:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4244,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":4240,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5353:1:22","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4243,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4241,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4141,"src":"5357:11:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4242,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4191,"src":"5371:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5357:21:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5353:25:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5342:36:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4246,"nodeType":"ExpressionStatement","src":"5342:36:22"},{"expression":{"id":4251,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4247,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4144,"src":"5812:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4250,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4248,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4147,"src":"5821:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4249,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4191,"src":"5829:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5821:15:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5812:24:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4252,"nodeType":"ExpressionStatement","src":"5812:24:22"},{"expression":{"id":4253,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4144,"src":"5857:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4145,"id":4254,"nodeType":"Return","src":"5850:13:22"}]}]},"documentation":{"id":4135,"nodeType":"StructuredDocumentation","src":"1357:305:22","text":" @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n with further edits by Uniswap Labs also under MIT license."},"id":4257,"implemented":true,"kind":"function","modifiers":[],"name":"mulDiv","nameLocation":"1676:6:22","nodeType":"FunctionDefinition","parameters":{"id":4142,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4137,"mutability":"mutable","name":"x","nameLocation":"1691:1:22","nodeType":"VariableDeclaration","scope":4257,"src":"1683:9:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4136,"name":"uint256","nodeType":"ElementaryTypeName","src":"1683:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4139,"mutability":"mutable","name":"y","nameLocation":"1702:1:22","nodeType":"VariableDeclaration","scope":4257,"src":"1694:9:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4138,"name":"uint256","nodeType":"ElementaryTypeName","src":"1694:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4141,"mutability":"mutable","name":"denominator","nameLocation":"1713:11:22","nodeType":"VariableDeclaration","scope":4257,"src":"1705:19:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4140,"name":"uint256","nodeType":"ElementaryTypeName","src":"1705:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1682:43:22"},"returnParameters":{"id":4145,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4144,"mutability":"mutable","name":"result","nameLocation":"1757:6:22","nodeType":"VariableDeclaration","scope":4257,"src":"1749:14:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4143,"name":"uint256","nodeType":"ElementaryTypeName","src":"1749:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1748:16:22"},"scope":4909,"src":"1667:4213:22","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4300,"nodeType":"Block","src":"6122:189:22","statements":[{"assignments":[4273],"declarations":[{"constant":false,"id":4273,"mutability":"mutable","name":"result","nameLocation":"6140:6:22","nodeType":"VariableDeclaration","scope":4300,"src":"6132:14:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4272,"name":"uint256","nodeType":"ElementaryTypeName","src":"6132:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4279,"initialValue":{"arguments":[{"id":4275,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4260,"src":"6156:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4276,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4262,"src":"6159:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4277,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4264,"src":"6162:11:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4274,"name":"mulDiv","nodeType":"Identifier","overloadedDeclarations":[4257,4301],"referencedDeclaration":4257,"src":"6149:6:22","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":4278,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6149:25:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"6132:42:22"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4291,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$4050","typeString":"enum Math.Rounding"},"id":4283,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4280,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4267,"src":"6188:8:22","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$4050","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":4281,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4050,"src":"6200:8:22","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$4050_$","typeString":"type(enum Math.Rounding)"}},"id":4282,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6209:2:22","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":4048,"src":"6200:11:22","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$4050","typeString":"enum Math.Rounding"}},"src":"6188:23:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4290,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":4285,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4260,"src":"6222:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4286,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4262,"src":"6225:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4287,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4264,"src":"6228:11:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4284,"name":"mulmod","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-16,"src":"6215:6:22","typeDescriptions":{"typeIdentifier":"t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":4288,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6215:25:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4289,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6243:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6215:29:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"6188:56:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4297,"nodeType":"IfStatement","src":"6184:98:22","trueBody":{"id":4296,"nodeType":"Block","src":"6246:36:22","statements":[{"expression":{"id":4294,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4292,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4273,"src":"6260:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":4293,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6270:1:22","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"6260:11:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4295,"nodeType":"ExpressionStatement","src":"6260:11:22"}]}},{"expression":{"id":4298,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4273,"src":"6298:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4271,"id":4299,"nodeType":"Return","src":"6291:13:22"}]},"documentation":{"id":4258,"nodeType":"StructuredDocumentation","src":"5886:121:22","text":" @notice Calculates x * y / denominator with full precision, following the selected rounding direction."},"id":4301,"implemented":true,"kind":"function","modifiers":[],"name":"mulDiv","nameLocation":"6021:6:22","nodeType":"FunctionDefinition","parameters":{"id":4268,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4260,"mutability":"mutable","name":"x","nameLocation":"6036:1:22","nodeType":"VariableDeclaration","scope":4301,"src":"6028:9:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4259,"name":"uint256","nodeType":"ElementaryTypeName","src":"6028:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4262,"mutability":"mutable","name":"y","nameLocation":"6047:1:22","nodeType":"VariableDeclaration","scope":4301,"src":"6039:9:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4261,"name":"uint256","nodeType":"ElementaryTypeName","src":"6039:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4264,"mutability":"mutable","name":"denominator","nameLocation":"6058:11:22","nodeType":"VariableDeclaration","scope":4301,"src":"6050:19:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4263,"name":"uint256","nodeType":"ElementaryTypeName","src":"6050:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4267,"mutability":"mutable","name":"rounding","nameLocation":"6080:8:22","nodeType":"VariableDeclaration","scope":4301,"src":"6071:17:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$4050","typeString":"enum Math.Rounding"},"typeName":{"id":4266,"nodeType":"UserDefinedTypeName","pathNode":{"id":4265,"name":"Rounding","nameLocations":["6071:8:22"],"nodeType":"IdentifierPath","referencedDeclaration":4050,"src":"6071:8:22"},"referencedDeclaration":4050,"src":"6071:8:22","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$4050","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"6027:62:22"},"returnParameters":{"id":4271,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4270,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4301,"src":"6113:7:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4269,"name":"uint256","nodeType":"ElementaryTypeName","src":"6113:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6112:9:22"},"scope":4909,"src":"6012:299:22","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4412,"nodeType":"Block","src":"6587:1585:22","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4311,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4309,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4304,"src":"6601:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":4310,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6606:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6601:6:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4315,"nodeType":"IfStatement","src":"6597:45:22","trueBody":{"id":4314,"nodeType":"Block","src":"6609:33:22","statements":[{"expression":{"hexValue":"30","id":4312,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6630:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":4308,"id":4313,"nodeType":"Return","src":"6623:8:22"}]}},{"assignments":[4317],"declarations":[{"constant":false,"id":4317,"mutability":"mutable","name":"result","nameLocation":"7329:6:22","nodeType":"VariableDeclaration","scope":4412,"src":"7321:14:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4316,"name":"uint256","nodeType":"ElementaryTypeName","src":"7321:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4326,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4325,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":4318,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7338:1:22","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4323,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":4320,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4304,"src":"7349:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4319,"name":"log2","nodeType":"Identifier","overloadedDeclarations":[4581,4617],"referencedDeclaration":4581,"src":"7344:4:22","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":4321,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7344:7:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":4322,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7355:1:22","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7344:12:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4324,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7343:14:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7338:19:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7321:36:22"},{"id":4411,"nodeType":"UncheckedBlock","src":"7758:408:22","statements":[{"expression":{"id":4336,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4327,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4317,"src":"7782:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4335,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4332,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4328,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4317,"src":"7792:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4331,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4329,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4304,"src":"7801:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4330,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4317,"src":"7805:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7801:10:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7792:19:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4333,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7791:21:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":4334,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7816:1:22","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7791:26:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7782:35:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4337,"nodeType":"ExpressionStatement","src":"7782:35:22"},{"expression":{"id":4347,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4338,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4317,"src":"7831:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4346,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4343,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4339,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4317,"src":"7841:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4342,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4340,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4304,"src":"7850:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4341,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4317,"src":"7854:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7850:10:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7841:19:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4344,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7840:21:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":4345,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7865:1:22","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7840:26:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7831:35:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4348,"nodeType":"ExpressionStatement","src":"7831:35:22"},{"expression":{"id":4358,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4349,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4317,"src":"7880:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4357,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4354,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4350,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4317,"src":"7890:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4353,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4351,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4304,"src":"7899:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4352,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4317,"src":"7903:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7899:10:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7890:19:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4355,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7889:21:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":4356,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7914:1:22","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7889:26:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7880:35:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4359,"nodeType":"ExpressionStatement","src":"7880:35:22"},{"expression":{"id":4369,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4360,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4317,"src":"7929:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4368,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4365,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4361,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4317,"src":"7939:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4364,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4362,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4304,"src":"7948:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4363,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4317,"src":"7952:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7948:10:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7939:19:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4366,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7938:21:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":4367,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7963:1:22","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7938:26:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7929:35:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4370,"nodeType":"ExpressionStatement","src":"7929:35:22"},{"expression":{"id":4380,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4371,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4317,"src":"7978:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4379,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4376,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4372,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4317,"src":"7988:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4375,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4373,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4304,"src":"7997:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4374,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4317,"src":"8001:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7997:10:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7988:19:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4377,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7987:21:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":4378,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8012:1:22","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7987:26:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7978:35:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4381,"nodeType":"ExpressionStatement","src":"7978:35:22"},{"expression":{"id":4391,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4382,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4317,"src":"8027:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4390,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4387,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4383,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4317,"src":"8037:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4386,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4384,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4304,"src":"8046:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4385,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4317,"src":"8050:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8046:10:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8037:19:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4388,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8036:21:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":4389,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8061:1:22","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"8036:26:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8027:35:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4392,"nodeType":"ExpressionStatement","src":"8027:35:22"},{"expression":{"id":4402,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4393,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4317,"src":"8076:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4401,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4398,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4394,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4317,"src":"8086:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4397,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4395,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4304,"src":"8095:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4396,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4317,"src":"8099:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8095:10:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8086:19:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4399,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8085:21:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":4400,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8110:1:22","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"8085:26:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8076:35:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4403,"nodeType":"ExpressionStatement","src":"8076:35:22"},{"expression":{"arguments":[{"id":4405,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4317,"src":"8136:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4408,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4406,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4304,"src":"8144:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4407,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4317,"src":"8148:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8144:10:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4404,"name":"min","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4086,"src":"8132:3:22","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":4409,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8132:23:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4308,"id":4410,"nodeType":"Return","src":"8125:30:22"}]}]},"documentation":{"id":4302,"nodeType":"StructuredDocumentation","src":"6317:208:22","text":" @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11)."},"id":4413,"implemented":true,"kind":"function","modifiers":[],"name":"sqrt","nameLocation":"6539:4:22","nodeType":"FunctionDefinition","parameters":{"id":4305,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4304,"mutability":"mutable","name":"a","nameLocation":"6552:1:22","nodeType":"VariableDeclaration","scope":4413,"src":"6544:9:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4303,"name":"uint256","nodeType":"ElementaryTypeName","src":"6544:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6543:11:22"},"returnParameters":{"id":4308,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4307,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4413,"src":"6578:7:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4306,"name":"uint256","nodeType":"ElementaryTypeName","src":"6578:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6577:9:22"},"scope":4909,"src":"6530:1642:22","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4448,"nodeType":"Block","src":"8348:161:22","statements":[{"id":4447,"nodeType":"UncheckedBlock","src":"8358:145:22","statements":[{"assignments":[4425],"declarations":[{"constant":false,"id":4425,"mutability":"mutable","name":"result","nameLocation":"8390:6:22","nodeType":"VariableDeclaration","scope":4447,"src":"8382:14:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4424,"name":"uint256","nodeType":"ElementaryTypeName","src":"8382:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4429,"initialValue":{"arguments":[{"id":4427,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4416,"src":"8404:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4426,"name":"sqrt","nodeType":"Identifier","overloadedDeclarations":[4413,4449],"referencedDeclaration":4413,"src":"8399:4:22","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":4428,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8399:7:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"8382:24:22"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4445,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4430,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4425,"src":"8427:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4440,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$4050","typeString":"enum Math.Rounding"},"id":4434,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4431,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4419,"src":"8437:8:22","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$4050","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":4432,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4050,"src":"8449:8:22","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$4050_$","typeString":"type(enum Math.Rounding)"}},"id":4433,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"8458:2:22","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":4048,"src":"8449:11:22","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$4050","typeString":"enum Math.Rounding"}},"src":"8437:23:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4439,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4437,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4435,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4425,"src":"8464:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4436,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4425,"src":"8473:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8464:15:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":4438,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4416,"src":"8482:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8464:19:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"8437:46:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":4442,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8490:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":4443,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"8437:54:22","trueExpression":{"hexValue":"31","id":4441,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8486:1:22","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":4444,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8436:56:22","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"8427:65:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4423,"id":4446,"nodeType":"Return","src":"8420:72:22"}]}]},"documentation":{"id":4414,"nodeType":"StructuredDocumentation","src":"8178:89:22","text":" @notice Calculates sqrt(a), following the selected rounding direction."},"id":4449,"implemented":true,"kind":"function","modifiers":[],"name":"sqrt","nameLocation":"8281:4:22","nodeType":"FunctionDefinition","parameters":{"id":4420,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4416,"mutability":"mutable","name":"a","nameLocation":"8294:1:22","nodeType":"VariableDeclaration","scope":4449,"src":"8286:9:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4415,"name":"uint256","nodeType":"ElementaryTypeName","src":"8286:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4419,"mutability":"mutable","name":"rounding","nameLocation":"8306:8:22","nodeType":"VariableDeclaration","scope":4449,"src":"8297:17:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$4050","typeString":"enum Math.Rounding"},"typeName":{"id":4418,"nodeType":"UserDefinedTypeName","pathNode":{"id":4417,"name":"Rounding","nameLocations":["8297:8:22"],"nodeType":"IdentifierPath","referencedDeclaration":4050,"src":"8297:8:22"},"referencedDeclaration":4050,"src":"8297:8:22","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$4050","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"8285:30:22"},"returnParameters":{"id":4423,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4422,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4449,"src":"8339:7:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4421,"name":"uint256","nodeType":"ElementaryTypeName","src":"8339:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8338:9:22"},"scope":4909,"src":"8272:237:22","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4580,"nodeType":"Block","src":"8694:922:22","statements":[{"assignments":[4458],"declarations":[{"constant":false,"id":4458,"mutability":"mutable","name":"result","nameLocation":"8712:6:22","nodeType":"VariableDeclaration","scope":4580,"src":"8704:14:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4457,"name":"uint256","nodeType":"ElementaryTypeName","src":"8704:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4460,"initialValue":{"hexValue":"30","id":4459,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8721:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"8704:18:22"},{"id":4577,"nodeType":"UncheckedBlock","src":"8732:855:22","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4465,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4463,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4461,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4452,"src":"8760:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":4462,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8769:3:22","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8760:12:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4464,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8775:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8760:16:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4475,"nodeType":"IfStatement","src":"8756:99:22","trueBody":{"id":4474,"nodeType":"Block","src":"8778:77:22","statements":[{"expression":{"id":4468,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4466,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4452,"src":"8796:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"313238","id":4467,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8806:3:22","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8796:13:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4469,"nodeType":"ExpressionStatement","src":"8796:13:22"},{"expression":{"id":4472,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4470,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4458,"src":"8827:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"313238","id":4471,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8837:3:22","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8827:13:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4473,"nodeType":"ExpressionStatement","src":"8827:13:22"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4480,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4478,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4476,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4452,"src":"8872:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3634","id":4477,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8881:2:22","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"8872:11:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4479,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8886:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8872:15:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4490,"nodeType":"IfStatement","src":"8868:96:22","trueBody":{"id":4489,"nodeType":"Block","src":"8889:75:22","statements":[{"expression":{"id":4483,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4481,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4452,"src":"8907:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3634","id":4482,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8917:2:22","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"8907:12:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4484,"nodeType":"ExpressionStatement","src":"8907:12:22"},{"expression":{"id":4487,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4485,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4458,"src":"8937:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3634","id":4486,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8947:2:22","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"8937:12:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4488,"nodeType":"ExpressionStatement","src":"8937:12:22"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4495,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4493,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4491,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4452,"src":"8981:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3332","id":4492,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8990:2:22","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"8981:11:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4494,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8995:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8981:15:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4505,"nodeType":"IfStatement","src":"8977:96:22","trueBody":{"id":4504,"nodeType":"Block","src":"8998:75:22","statements":[{"expression":{"id":4498,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4496,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4452,"src":"9016:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3332","id":4497,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9026:2:22","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"9016:12:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4499,"nodeType":"ExpressionStatement","src":"9016:12:22"},{"expression":{"id":4502,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4500,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4458,"src":"9046:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3332","id":4501,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9056:2:22","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"9046:12:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4503,"nodeType":"ExpressionStatement","src":"9046:12:22"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4510,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4508,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4506,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4452,"src":"9090:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3136","id":4507,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9099:2:22","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"9090:11:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4509,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9104:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9090:15:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4520,"nodeType":"IfStatement","src":"9086:96:22","trueBody":{"id":4519,"nodeType":"Block","src":"9107:75:22","statements":[{"expression":{"id":4513,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4511,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4452,"src":"9125:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3136","id":4512,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9135:2:22","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"9125:12:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4514,"nodeType":"ExpressionStatement","src":"9125:12:22"},{"expression":{"id":4517,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4515,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4458,"src":"9155:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":4516,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9165:2:22","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"9155:12:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4518,"nodeType":"ExpressionStatement","src":"9155:12:22"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4525,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4523,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4521,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4452,"src":"9199:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"38","id":4522,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9208:1:22","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"9199:10:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4524,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9212:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9199:14:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4535,"nodeType":"IfStatement","src":"9195:93:22","trueBody":{"id":4534,"nodeType":"Block","src":"9215:73:22","statements":[{"expression":{"id":4528,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4526,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4452,"src":"9233:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"38","id":4527,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9243:1:22","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"9233:11:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4529,"nodeType":"ExpressionStatement","src":"9233:11:22"},{"expression":{"id":4532,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4530,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4458,"src":"9262:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":4531,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9272:1:22","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"9262:11:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4533,"nodeType":"ExpressionStatement","src":"9262:11:22"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4540,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4538,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4536,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4452,"src":"9305:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"34","id":4537,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9314:1:22","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9305:10:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4539,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9318:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9305:14:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4550,"nodeType":"IfStatement","src":"9301:93:22","trueBody":{"id":4549,"nodeType":"Block","src":"9321:73:22","statements":[{"expression":{"id":4543,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4541,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4452,"src":"9339:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"34","id":4542,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9349:1:22","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9339:11:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4544,"nodeType":"ExpressionStatement","src":"9339:11:22"},{"expression":{"id":4547,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4545,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4458,"src":"9368:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":4546,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9378:1:22","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9368:11:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4548,"nodeType":"ExpressionStatement","src":"9368:11:22"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4555,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4553,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4551,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4452,"src":"9411:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"32","id":4552,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9420:1:22","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9411:10:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4554,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9424:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9411:14:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4565,"nodeType":"IfStatement","src":"9407:93:22","trueBody":{"id":4564,"nodeType":"Block","src":"9427:73:22","statements":[{"expression":{"id":4558,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4556,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4452,"src":"9445:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"32","id":4557,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9455:1:22","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9445:11:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4559,"nodeType":"ExpressionStatement","src":"9445:11:22"},{"expression":{"id":4562,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4560,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4458,"src":"9474:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":4561,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9484:1:22","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9474:11:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4563,"nodeType":"ExpressionStatement","src":"9474:11:22"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4570,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4568,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4566,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4452,"src":"9517:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":4567,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9526:1:22","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9517:10:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4569,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9530:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9517:14:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4576,"nodeType":"IfStatement","src":"9513:64:22","trueBody":{"id":4575,"nodeType":"Block","src":"9533:44:22","statements":[{"expression":{"id":4573,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4571,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4458,"src":"9551:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":4572,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9561:1:22","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9551:11:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4574,"nodeType":"ExpressionStatement","src":"9551:11:22"}]}}]},{"expression":{"id":4578,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4458,"src":"9603:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4456,"id":4579,"nodeType":"Return","src":"9596:13:22"}]},"documentation":{"id":4450,"nodeType":"StructuredDocumentation","src":"8515:113:22","text":" @dev Return the log in base 2, rounded down, of a positive value.\n Returns 0 if given 0."},"id":4581,"implemented":true,"kind":"function","modifiers":[],"name":"log2","nameLocation":"8642:4:22","nodeType":"FunctionDefinition","parameters":{"id":4453,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4452,"mutability":"mutable","name":"value","nameLocation":"8655:5:22","nodeType":"VariableDeclaration","scope":4581,"src":"8647:13:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4451,"name":"uint256","nodeType":"ElementaryTypeName","src":"8647:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8646:15:22"},"returnParameters":{"id":4456,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4455,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4581,"src":"8685:7:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4454,"name":"uint256","nodeType":"ElementaryTypeName","src":"8685:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8684:9:22"},"scope":4909,"src":"8633:983:22","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4616,"nodeType":"Block","src":"9849:165:22","statements":[{"id":4615,"nodeType":"UncheckedBlock","src":"9859:149:22","statements":[{"assignments":[4593],"declarations":[{"constant":false,"id":4593,"mutability":"mutable","name":"result","nameLocation":"9891:6:22","nodeType":"VariableDeclaration","scope":4615,"src":"9883:14:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4592,"name":"uint256","nodeType":"ElementaryTypeName","src":"9883:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4597,"initialValue":{"arguments":[{"id":4595,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4584,"src":"9905:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4594,"name":"log2","nodeType":"Identifier","overloadedDeclarations":[4581,4617],"referencedDeclaration":4581,"src":"9900:4:22","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":4596,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9900:11:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"9883:28:22"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4613,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4598,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4593,"src":"9932:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4608,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$4050","typeString":"enum Math.Rounding"},"id":4602,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4599,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4587,"src":"9942:8:22","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$4050","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":4600,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4050,"src":"9954:8:22","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$4050_$","typeString":"type(enum Math.Rounding)"}},"id":4601,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"9963:2:22","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":4048,"src":"9954:11:22","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$4050","typeString":"enum Math.Rounding"}},"src":"9942:23:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4607,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4605,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":4603,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9969:1:22","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"id":4604,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4593,"src":"9974:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9969:11:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":4606,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4584,"src":"9983:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9969:19:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"9942:46:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":4610,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9995:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":4611,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"9942:54:22","trueExpression":{"hexValue":"31","id":4609,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9991:1:22","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":4612,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9941:56:22","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"9932:65:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4591,"id":4614,"nodeType":"Return","src":"9925:72:22"}]}]},"documentation":{"id":4582,"nodeType":"StructuredDocumentation","src":"9622:142:22","text":" @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":4617,"implemented":true,"kind":"function","modifiers":[],"name":"log2","nameLocation":"9778:4:22","nodeType":"FunctionDefinition","parameters":{"id":4588,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4584,"mutability":"mutable","name":"value","nameLocation":"9791:5:22","nodeType":"VariableDeclaration","scope":4617,"src":"9783:13:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4583,"name":"uint256","nodeType":"ElementaryTypeName","src":"9783:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4587,"mutability":"mutable","name":"rounding","nameLocation":"9807:8:22","nodeType":"VariableDeclaration","scope":4617,"src":"9798:17:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$4050","typeString":"enum Math.Rounding"},"typeName":{"id":4586,"nodeType":"UserDefinedTypeName","pathNode":{"id":4585,"name":"Rounding","nameLocations":["9798:8:22"],"nodeType":"IdentifierPath","referencedDeclaration":4050,"src":"9798:8:22"},"referencedDeclaration":4050,"src":"9798:8:22","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$4050","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"9782:34:22"},"returnParameters":{"id":4591,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4590,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4617,"src":"9840:7:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4589,"name":"uint256","nodeType":"ElementaryTypeName","src":"9840:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9839:9:22"},"scope":4909,"src":"9769:245:22","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4745,"nodeType":"Block","src":"10201:854:22","statements":[{"assignments":[4626],"declarations":[{"constant":false,"id":4626,"mutability":"mutable","name":"result","nameLocation":"10219:6:22","nodeType":"VariableDeclaration","scope":4745,"src":"10211:14:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4625,"name":"uint256","nodeType":"ElementaryTypeName","src":"10211:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4628,"initialValue":{"hexValue":"30","id":4627,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10228:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"10211:18:22"},{"id":4742,"nodeType":"UncheckedBlock","src":"10239:787:22","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4633,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4629,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4620,"src":"10267:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"},"id":4632,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4630,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10276:2:22","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3634","id":4631,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10282:2:22","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10276:8:22","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"}},"src":"10267:17:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4645,"nodeType":"IfStatement","src":"10263:103:22","trueBody":{"id":4644,"nodeType":"Block","src":"10286:80:22","statements":[{"expression":{"id":4638,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4634,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4620,"src":"10304:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"},"id":4637,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4635,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10313:2:22","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3634","id":4636,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10319:2:22","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10313:8:22","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"}},"src":"10304:17:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4639,"nodeType":"ExpressionStatement","src":"10304:17:22"},{"expression":{"id":4642,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4640,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4626,"src":"10339:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3634","id":4641,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10349:2:22","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10339:12:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4643,"nodeType":"ExpressionStatement","src":"10339:12:22"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4650,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4646,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4620,"src":"10383:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"},"id":4649,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4647,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10392:2:22","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3332","id":4648,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10398:2:22","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10392:8:22","typeDescriptions":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"}},"src":"10383:17:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4662,"nodeType":"IfStatement","src":"10379:103:22","trueBody":{"id":4661,"nodeType":"Block","src":"10402:80:22","statements":[{"expression":{"id":4655,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4651,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4620,"src":"10420:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"},"id":4654,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4652,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10429:2:22","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3332","id":4653,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10435:2:22","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10429:8:22","typeDescriptions":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"}},"src":"10420:17:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4656,"nodeType":"ExpressionStatement","src":"10420:17:22"},{"expression":{"id":4659,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4657,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4626,"src":"10455:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3332","id":4658,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10465:2:22","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10455:12:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4660,"nodeType":"ExpressionStatement","src":"10455:12:22"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4667,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4663,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4620,"src":"10499:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"},"id":4666,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4664,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10508:2:22","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3136","id":4665,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10514:2:22","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"10508:8:22","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"}},"src":"10499:17:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4679,"nodeType":"IfStatement","src":"10495:103:22","trueBody":{"id":4678,"nodeType":"Block","src":"10518:80:22","statements":[{"expression":{"id":4672,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4668,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4620,"src":"10536:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"},"id":4671,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4669,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10545:2:22","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3136","id":4670,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10551:2:22","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"10545:8:22","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"}},"src":"10536:17:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4673,"nodeType":"ExpressionStatement","src":"10536:17:22"},{"expression":{"id":4676,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4674,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4626,"src":"10571:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":4675,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10581:2:22","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"10571:12:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4677,"nodeType":"ExpressionStatement","src":"10571:12:22"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4684,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4680,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4620,"src":"10615:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"},"id":4683,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4681,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10624:2:22","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"38","id":4682,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10630:1:22","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"10624:7:22","typeDescriptions":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"}},"src":"10615:16:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4696,"nodeType":"IfStatement","src":"10611:100:22","trueBody":{"id":4695,"nodeType":"Block","src":"10633:78:22","statements":[{"expression":{"id":4689,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4685,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4620,"src":"10651:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"},"id":4688,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4686,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10660:2:22","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"38","id":4687,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10666:1:22","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"10660:7:22","typeDescriptions":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"}},"src":"10651:16:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4690,"nodeType":"ExpressionStatement","src":"10651:16:22"},{"expression":{"id":4693,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4691,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4626,"src":"10685:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":4692,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10695:1:22","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"10685:11:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4694,"nodeType":"ExpressionStatement","src":"10685:11:22"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4701,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4697,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4620,"src":"10728:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"id":4700,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4698,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10737:2:22","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"34","id":4699,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10743:1:22","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10737:7:22","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"}},"src":"10728:16:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4713,"nodeType":"IfStatement","src":"10724:100:22","trueBody":{"id":4712,"nodeType":"Block","src":"10746:78:22","statements":[{"expression":{"id":4706,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4702,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4620,"src":"10764:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"id":4705,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4703,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10773:2:22","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"34","id":4704,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10779:1:22","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10773:7:22","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"}},"src":"10764:16:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4707,"nodeType":"ExpressionStatement","src":"10764:16:22"},{"expression":{"id":4710,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4708,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4626,"src":"10798:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":4709,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10808:1:22","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10798:11:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4711,"nodeType":"ExpressionStatement","src":"10798:11:22"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4718,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4714,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4620,"src":"10841:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"id":4717,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4715,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10850:2:22","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"32","id":4716,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10856:1:22","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10850:7:22","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"}},"src":"10841:16:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4730,"nodeType":"IfStatement","src":"10837:100:22","trueBody":{"id":4729,"nodeType":"Block","src":"10859:78:22","statements":[{"expression":{"id":4723,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4719,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4620,"src":"10877:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"id":4722,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4720,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10886:2:22","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"32","id":4721,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10892:1:22","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10886:7:22","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"}},"src":"10877:16:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4724,"nodeType":"ExpressionStatement","src":"10877:16:22"},{"expression":{"id":4727,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4725,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4626,"src":"10911:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":4726,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10921:1:22","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10911:11:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4728,"nodeType":"ExpressionStatement","src":"10911:11:22"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4735,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4731,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4620,"src":"10954:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"id":4734,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4732,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10963:2:22","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"31","id":4733,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10969:1:22","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10963:7:22","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"}},"src":"10954:16:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4741,"nodeType":"IfStatement","src":"10950:66:22","trueBody":{"id":4740,"nodeType":"Block","src":"10972:44:22","statements":[{"expression":{"id":4738,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4736,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4626,"src":"10990:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":4737,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11000:1:22","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10990:11:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4739,"nodeType":"ExpressionStatement","src":"10990:11:22"}]}}]},{"expression":{"id":4743,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4626,"src":"11042:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4624,"id":4744,"nodeType":"Return","src":"11035:13:22"}]},"documentation":{"id":4618,"nodeType":"StructuredDocumentation","src":"10020:114:22","text":" @dev Return the log in base 10, rounded down, of a positive value.\n Returns 0 if given 0."},"id":4746,"implemented":true,"kind":"function","modifiers":[],"name":"log10","nameLocation":"10148:5:22","nodeType":"FunctionDefinition","parameters":{"id":4621,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4620,"mutability":"mutable","name":"value","nameLocation":"10162:5:22","nodeType":"VariableDeclaration","scope":4746,"src":"10154:13:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4619,"name":"uint256","nodeType":"ElementaryTypeName","src":"10154:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10153:15:22"},"returnParameters":{"id":4624,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4623,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4746,"src":"10192:7:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4622,"name":"uint256","nodeType":"ElementaryTypeName","src":"10192:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10191:9:22"},"scope":4909,"src":"10139:916:22","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4781,"nodeType":"Block","src":"11290:167:22","statements":[{"id":4780,"nodeType":"UncheckedBlock","src":"11300:151:22","statements":[{"assignments":[4758],"declarations":[{"constant":false,"id":4758,"mutability":"mutable","name":"result","nameLocation":"11332:6:22","nodeType":"VariableDeclaration","scope":4780,"src":"11324:14:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4757,"name":"uint256","nodeType":"ElementaryTypeName","src":"11324:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4762,"initialValue":{"arguments":[{"id":4760,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4749,"src":"11347:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4759,"name":"log10","nodeType":"Identifier","overloadedDeclarations":[4746,4782],"referencedDeclaration":4746,"src":"11341:5:22","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":4761,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11341:12:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"11324:29:22"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4778,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4763,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4758,"src":"11374:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4773,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$4050","typeString":"enum Math.Rounding"},"id":4767,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4764,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4752,"src":"11384:8:22","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$4050","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":4765,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4050,"src":"11396:8:22","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$4050_$","typeString":"type(enum Math.Rounding)"}},"id":4766,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"11405:2:22","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":4048,"src":"11396:11:22","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$4050","typeString":"enum Math.Rounding"}},"src":"11384:23:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4772,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4770,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4768,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11411:2:22","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"id":4769,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4758,"src":"11417:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11411:12:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":4771,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4749,"src":"11426:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11411:20:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"11384:47:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":4775,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11438:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":4776,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"11384:55:22","trueExpression":{"hexValue":"31","id":4774,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11434:1:22","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":4777,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"11383:57:22","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"11374:66:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4756,"id":4779,"nodeType":"Return","src":"11367:73:22"}]}]},"documentation":{"id":4747,"nodeType":"StructuredDocumentation","src":"11061:143:22","text":" @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":4782,"implemented":true,"kind":"function","modifiers":[],"name":"log10","nameLocation":"11218:5:22","nodeType":"FunctionDefinition","parameters":{"id":4753,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4749,"mutability":"mutable","name":"value","nameLocation":"11232:5:22","nodeType":"VariableDeclaration","scope":4782,"src":"11224:13:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4748,"name":"uint256","nodeType":"ElementaryTypeName","src":"11224:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4752,"mutability":"mutable","name":"rounding","nameLocation":"11248:8:22","nodeType":"VariableDeclaration","scope":4782,"src":"11239:17:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$4050","typeString":"enum Math.Rounding"},"typeName":{"id":4751,"nodeType":"UserDefinedTypeName","pathNode":{"id":4750,"name":"Rounding","nameLocations":["11239:8:22"],"nodeType":"IdentifierPath","referencedDeclaration":4050,"src":"11239:8:22"},"referencedDeclaration":4050,"src":"11239:8:22","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$4050","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"11223:34:22"},"returnParameters":{"id":4756,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4755,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4782,"src":"11281:7:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4754,"name":"uint256","nodeType":"ElementaryTypeName","src":"11281:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11280:9:22"},"scope":4909,"src":"11209:248:22","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4868,"nodeType":"Block","src":"11771:600:22","statements":[{"assignments":[4791],"declarations":[{"constant":false,"id":4791,"mutability":"mutable","name":"result","nameLocation":"11789:6:22","nodeType":"VariableDeclaration","scope":4868,"src":"11781:14:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4790,"name":"uint256","nodeType":"ElementaryTypeName","src":"11781:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4793,"initialValue":{"hexValue":"30","id":4792,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11798:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"11781:18:22"},{"id":4865,"nodeType":"UncheckedBlock","src":"11809:533:22","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4798,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4796,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4794,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4785,"src":"11837:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":4795,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11846:3:22","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"11837:12:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4797,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11852:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11837:16:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4808,"nodeType":"IfStatement","src":"11833:98:22","trueBody":{"id":4807,"nodeType":"Block","src":"11855:76:22","statements":[{"expression":{"id":4801,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4799,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4785,"src":"11873:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"313238","id":4800,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11883:3:22","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"11873:13:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4802,"nodeType":"ExpressionStatement","src":"11873:13:22"},{"expression":{"id":4805,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4803,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4791,"src":"11904:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":4804,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11914:2:22","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"11904:12:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4806,"nodeType":"ExpressionStatement","src":"11904:12:22"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4813,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4811,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4809,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4785,"src":"11948:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3634","id":4810,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11957:2:22","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"11948:11:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4812,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11962:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11948:15:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4823,"nodeType":"IfStatement","src":"11944:95:22","trueBody":{"id":4822,"nodeType":"Block","src":"11965:74:22","statements":[{"expression":{"id":4816,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4814,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4785,"src":"11983:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3634","id":4815,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11993:2:22","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"11983:12:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4817,"nodeType":"ExpressionStatement","src":"11983:12:22"},{"expression":{"id":4820,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4818,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4791,"src":"12013:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":4819,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12023:1:22","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"12013:11:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4821,"nodeType":"ExpressionStatement","src":"12013:11:22"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4828,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4826,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4824,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4785,"src":"12056:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3332","id":4825,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12065:2:22","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"12056:11:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4827,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12070:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"12056:15:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4838,"nodeType":"IfStatement","src":"12052:95:22","trueBody":{"id":4837,"nodeType":"Block","src":"12073:74:22","statements":[{"expression":{"id":4831,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4829,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4785,"src":"12091:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3332","id":4830,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12101:2:22","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"12091:12:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4832,"nodeType":"ExpressionStatement","src":"12091:12:22"},{"expression":{"id":4835,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4833,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4791,"src":"12121:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":4834,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12131:1:22","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"12121:11:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4836,"nodeType":"ExpressionStatement","src":"12121:11:22"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4843,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4841,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4839,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4785,"src":"12164:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3136","id":4840,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12173:2:22","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"12164:11:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4842,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12178:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"12164:15:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4853,"nodeType":"IfStatement","src":"12160:95:22","trueBody":{"id":4852,"nodeType":"Block","src":"12181:74:22","statements":[{"expression":{"id":4846,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4844,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4785,"src":"12199:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3136","id":4845,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12209:2:22","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"12199:12:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4847,"nodeType":"ExpressionStatement","src":"12199:12:22"},{"expression":{"id":4850,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4848,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4791,"src":"12229:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":4849,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12239:1:22","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"12229:11:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4851,"nodeType":"ExpressionStatement","src":"12229:11:22"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4858,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4856,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4854,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4785,"src":"12272:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"38","id":4855,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12281:1:22","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"12272:10:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4857,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12285:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"12272:14:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4864,"nodeType":"IfStatement","src":"12268:64:22","trueBody":{"id":4863,"nodeType":"Block","src":"12288:44:22","statements":[{"expression":{"id":4861,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4859,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4791,"src":"12306:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":4860,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12316:1:22","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"12306:11:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4862,"nodeType":"ExpressionStatement","src":"12306:11:22"}]}}]},{"expression":{"id":4866,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4791,"src":"12358:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4789,"id":4867,"nodeType":"Return","src":"12351:13:22"}]},"documentation":{"id":4783,"nodeType":"StructuredDocumentation","src":"11463:240:22","text":" @dev Return the log in base 256, rounded down, of a positive value.\n Returns 0 if given 0.\n Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string."},"id":4869,"implemented":true,"kind":"function","modifiers":[],"name":"log256","nameLocation":"11717:6:22","nodeType":"FunctionDefinition","parameters":{"id":4786,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4785,"mutability":"mutable","name":"value","nameLocation":"11732:5:22","nodeType":"VariableDeclaration","scope":4869,"src":"11724:13:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4784,"name":"uint256","nodeType":"ElementaryTypeName","src":"11724:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11723:15:22"},"returnParameters":{"id":4789,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4788,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4869,"src":"11762:7:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4787,"name":"uint256","nodeType":"ElementaryTypeName","src":"11762:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11761:9:22"},"scope":4909,"src":"11708:663:22","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4907,"nodeType":"Block","src":"12608:174:22","statements":[{"id":4906,"nodeType":"UncheckedBlock","src":"12618:158:22","statements":[{"assignments":[4881],"declarations":[{"constant":false,"id":4881,"mutability":"mutable","name":"result","nameLocation":"12650:6:22","nodeType":"VariableDeclaration","scope":4906,"src":"12642:14:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4880,"name":"uint256","nodeType":"ElementaryTypeName","src":"12642:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4885,"initialValue":{"arguments":[{"id":4883,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4872,"src":"12666:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4882,"name":"log256","nodeType":"Identifier","overloadedDeclarations":[4869,4908],"referencedDeclaration":4869,"src":"12659:6:22","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":4884,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12659:13:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"12642:30:22"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4904,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4886,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4881,"src":"12693:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4899,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$4050","typeString":"enum Math.Rounding"},"id":4890,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4887,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4875,"src":"12703:8:22","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$4050","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":4888,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4050,"src":"12715:8:22","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$4050_$","typeString":"type(enum Math.Rounding)"}},"id":4889,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"12724:2:22","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":4048,"src":"12715:11:22","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$4050","typeString":"enum Math.Rounding"}},"src":"12703:23:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4898,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4896,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":4891,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12730:1:22","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4894,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4892,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4881,"src":"12736:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"33","id":4893,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12746:1:22","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"src":"12736:11:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4895,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12735:13:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12730:18:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":4897,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4872,"src":"12751:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12730:26:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"12703:53:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":4901,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12763:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":4902,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"12703:61:22","trueExpression":{"hexValue":"31","id":4900,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12759:1:22","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":4903,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12702:63:22","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"12693:72:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4879,"id":4905,"nodeType":"Return","src":"12686:79:22"}]}]},"documentation":{"id":4870,"nodeType":"StructuredDocumentation","src":"12377:144:22","text":" @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":4908,"implemented":true,"kind":"function","modifiers":[],"name":"log256","nameLocation":"12535:6:22","nodeType":"FunctionDefinition","parameters":{"id":4876,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4872,"mutability":"mutable","name":"value","nameLocation":"12550:5:22","nodeType":"VariableDeclaration","scope":4908,"src":"12542:13:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4871,"name":"uint256","nodeType":"ElementaryTypeName","src":"12542:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4875,"mutability":"mutable","name":"rounding","nameLocation":"12566:8:22","nodeType":"VariableDeclaration","scope":4908,"src":"12557:17:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$4050","typeString":"enum Math.Rounding"},"typeName":{"id":4874,"nodeType":"UserDefinedTypeName","pathNode":{"id":4873,"name":"Rounding","nameLocations":["12557:8:22"],"nodeType":"IdentifierPath","referencedDeclaration":4050,"src":"12557:8:22"},"referencedDeclaration":4050,"src":"12557:8:22","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$4050","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"12541:34:22"},"returnParameters":{"id":4879,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4878,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4908,"src":"12599:7:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4877,"name":"uint256","nodeType":"ElementaryTypeName","src":"12599:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12598:9:22"},"scope":4909,"src":"12526:256:22","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":4910,"src":"202:12582:22","usedErrors":[]}],"src":"103:12682:22"},"id":22},"@openzeppelin/contracts/utils/math/SignedMath.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/math/SignedMath.sol","exportedSymbols":{"SignedMath":[5014]},"id":5015,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":4911,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"109:23:23"},{"abstract":false,"baseContracts":[],"canonicalName":"SignedMath","contractDependencies":[],"contractKind":"library","documentation":{"id":4912,"nodeType":"StructuredDocumentation","src":"134:80:23","text":" @dev Standard signed math utilities missing in the Solidity language."},"fullyImplemented":true,"id":5014,"linearizedBaseContracts":[5014],"name":"SignedMath","nameLocation":"223:10:23","nodeType":"ContractDefinition","nodes":[{"body":{"id":4929,"nodeType":"Block","src":"375:37:23","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4924,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4922,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4915,"src":"392:1:23","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":4923,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4917,"src":"396:1:23","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"392:5:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":4926,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4917,"src":"404:1:23","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":4927,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"392:13:23","trueExpression":{"id":4925,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4915,"src":"400:1:23","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":4921,"id":4928,"nodeType":"Return","src":"385:20:23"}]},"documentation":{"id":4913,"nodeType":"StructuredDocumentation","src":"240:66:23","text":" @dev Returns the largest of two signed numbers."},"id":4930,"implemented":true,"kind":"function","modifiers":[],"name":"max","nameLocation":"320:3:23","nodeType":"FunctionDefinition","parameters":{"id":4918,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4915,"mutability":"mutable","name":"a","nameLocation":"331:1:23","nodeType":"VariableDeclaration","scope":4930,"src":"324:8:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4914,"name":"int256","nodeType":"ElementaryTypeName","src":"324:6:23","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":4917,"mutability":"mutable","name":"b","nameLocation":"341:1:23","nodeType":"VariableDeclaration","scope":4930,"src":"334:8:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4916,"name":"int256","nodeType":"ElementaryTypeName","src":"334:6:23","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"323:20:23"},"returnParameters":{"id":4921,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4920,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4930,"src":"367:6:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4919,"name":"int256","nodeType":"ElementaryTypeName","src":"367:6:23","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"366:8:23"},"scope":5014,"src":"311:101:23","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4947,"nodeType":"Block","src":"554:37:23","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4942,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4940,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4933,"src":"571:1:23","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":4941,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4935,"src":"575:1:23","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"571:5:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":4944,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4935,"src":"583:1:23","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":4945,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"571:13:23","trueExpression":{"id":4943,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4933,"src":"579:1:23","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":4939,"id":4946,"nodeType":"Return","src":"564:20:23"}]},"documentation":{"id":4931,"nodeType":"StructuredDocumentation","src":"418:67:23","text":" @dev Returns the smallest of two signed numbers."},"id":4948,"implemented":true,"kind":"function","modifiers":[],"name":"min","nameLocation":"499:3:23","nodeType":"FunctionDefinition","parameters":{"id":4936,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4933,"mutability":"mutable","name":"a","nameLocation":"510:1:23","nodeType":"VariableDeclaration","scope":4948,"src":"503:8:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4932,"name":"int256","nodeType":"ElementaryTypeName","src":"503:6:23","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":4935,"mutability":"mutable","name":"b","nameLocation":"520:1:23","nodeType":"VariableDeclaration","scope":4948,"src":"513:8:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4934,"name":"int256","nodeType":"ElementaryTypeName","src":"513:6:23","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"502:20:23"},"returnParameters":{"id":4939,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4938,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4948,"src":"546:6:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4937,"name":"int256","nodeType":"ElementaryTypeName","src":"546:6:23","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"545:8:23"},"scope":5014,"src":"490:101:23","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4991,"nodeType":"Block","src":"796:162:23","statements":[{"assignments":[4959],"declarations":[{"constant":false,"id":4959,"mutability":"mutable","name":"x","nameLocation":"865:1:23","nodeType":"VariableDeclaration","scope":4991,"src":"858:8:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4958,"name":"int256","nodeType":"ElementaryTypeName","src":"858:6:23","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"id":4972,"initialValue":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4971,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4962,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4960,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4951,"src":"870:1:23","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"id":4961,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4953,"src":"874:1:23","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"870:5:23","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":4963,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"869:7:23","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4969,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4966,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4964,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4951,"src":"881:1:23","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":4965,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4953,"src":"885:1:23","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"881:5:23","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":4967,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"880:7:23","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":4968,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"891:1:23","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"880:12:23","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":4970,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"879:14:23","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"869:24:23","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"VariableDeclarationStatement","src":"858:35:23"},{"expression":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4989,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4973,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4959,"src":"910:1:23","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4987,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4981,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":4978,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4959,"src":"930:1:23","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4977,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"922:7:23","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":4976,"name":"uint256","nodeType":"ElementaryTypeName","src":"922:7:23","typeDescriptions":{}}},"id":4979,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"922:10:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"323535","id":4980,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"936:3:23","typeDescriptions":{"typeIdentifier":"t_rational_255_by_1","typeString":"int_const 255"},"value":"255"},"src":"922:17:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4975,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"915:6:23","typeDescriptions":{"typeIdentifier":"t_type$_t_int256_$","typeString":"type(int256)"},"typeName":{"id":4974,"name":"int256","nodeType":"ElementaryTypeName","src":"915:6:23","typeDescriptions":{}}},"id":4982,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"915:25:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4985,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4983,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4951,"src":"944:1:23","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":4984,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4953,"src":"948:1:23","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"944:5:23","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":4986,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"943:7:23","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"915:35:23","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":4988,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"914:37:23","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"910:41:23","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":4957,"id":4990,"nodeType":"Return","src":"903:48:23"}]},"documentation":{"id":4949,"nodeType":"StructuredDocumentation","src":"597:126:23","text":" @dev Returns the average of two signed numbers without overflow.\n The result is rounded towards zero."},"id":4992,"implemented":true,"kind":"function","modifiers":[],"name":"average","nameLocation":"737:7:23","nodeType":"FunctionDefinition","parameters":{"id":4954,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4951,"mutability":"mutable","name":"a","nameLocation":"752:1:23","nodeType":"VariableDeclaration","scope":4992,"src":"745:8:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4950,"name":"int256","nodeType":"ElementaryTypeName","src":"745:6:23","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":4953,"mutability":"mutable","name":"b","nameLocation":"762:1:23","nodeType":"VariableDeclaration","scope":4992,"src":"755:8:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4952,"name":"int256","nodeType":"ElementaryTypeName","src":"755:6:23","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"744:20:23"},"returnParameters":{"id":4957,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4956,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4992,"src":"788:6:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4955,"name":"int256","nodeType":"ElementaryTypeName","src":"788:6:23","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"787:8:23"},"scope":5014,"src":"728:230:23","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5012,"nodeType":"Block","src":"1102:158:23","statements":[{"id":5011,"nodeType":"UncheckedBlock","src":"1112:142:23","statements":[{"expression":{"arguments":[{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5004,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5002,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4995,"src":"1227:1:23","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"hexValue":"30","id":5003,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1232:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1227:6:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":5007,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"-","prefix":true,"src":"1240:2:23","subExpression":{"id":5006,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4995,"src":"1241:1:23","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":5008,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"1227:15:23","trueExpression":{"id":5005,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4995,"src":"1236:1:23","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5001,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1219:7:23","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":5000,"name":"uint256","nodeType":"ElementaryTypeName","src":"1219:7:23","typeDescriptions":{}}},"id":5009,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1219:24:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4999,"id":5010,"nodeType":"Return","src":"1212:31:23"}]}]},"documentation":{"id":4993,"nodeType":"StructuredDocumentation","src":"964:78:23","text":" @dev Returns the absolute unsigned value of a signed value."},"id":5013,"implemented":true,"kind":"function","modifiers":[],"name":"abs","nameLocation":"1056:3:23","nodeType":"FunctionDefinition","parameters":{"id":4996,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4995,"mutability":"mutable","name":"n","nameLocation":"1067:1:23","nodeType":"VariableDeclaration","scope":5013,"src":"1060:8:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4994,"name":"int256","nodeType":"ElementaryTypeName","src":"1060:6:23","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"1059:10:23"},"returnParameters":{"id":4999,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4998,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5013,"src":"1093:7:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4997,"name":"uint256","nodeType":"ElementaryTypeName","src":"1093:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1092:9:23"},"scope":5014,"src":"1047:213:23","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":5015,"src":"215:1047:23","usedErrors":[]}],"src":"109:1154:23"},"id":23},"contracts/CommunityResolver.sol":{"ast":{"absolutePath":"contracts/CommunityResolver.sol","exportedSymbols":{"AddressUpgradeable":[1475],"Attestation":[45],"CommunityResolver":[5185],"ContextUpgradeable":[1517],"IEAS":[346],"Initializable":[1145],"OwnableUpgradeable":[951],"SchemaResolver":[819]},"id":5186,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":5016,"literals":["solidity","0.8",".19"],"nodeType":"PragmaDirective","src":"33:23:24"},{"absolutePath":"@ethereum-attestation-service/eas-contracts/contracts/resolver/SchemaResolver.sol","file":"@ethereum-attestation-service/eas-contracts/contracts/resolver/SchemaResolver.sol","id":5018,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5186,"sourceUnit":820,"src":"58:113:24","symbolAliases":[{"foreign":{"id":5017,"name":"SchemaResolver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":819,"src":"66:14:24","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@ethereum-attestation-service/eas-contracts/contracts/IEAS.sol","file":"@ethereum-attestation-service/eas-contracts/contracts/IEAS.sol","id":5020,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5186,"sourceUnit":347,"src":"172:84:24","symbolAliases":[{"foreign":{"id":5019,"name":"IEAS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":346,"src":"180:4:24","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@ethereum-attestation-service/eas-contracts/contracts/Common.sol","file":"@ethereum-attestation-service/eas-contracts/contracts/Common.sol","id":5022,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5186,"sourceUnit":62,"src":"257:93:24","symbolAliases":[{"foreign":{"id":5021,"name":"Attestation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":45,"src":"265:11:24","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","id":5023,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5186,"sourceUnit":1146,"src":"351:75:24","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol","file":"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol","id":5024,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5186,"sourceUnit":952,"src":"427:75:24","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":5025,"name":"SchemaResolver","nameLocations":["538:14:24"],"nodeType":"IdentifierPath","referencedDeclaration":819,"src":"538:14:24"},"id":5026,"nodeType":"InheritanceSpecifier","src":"538:14:24"},{"baseName":{"id":5027,"name":"Initializable","nameLocations":["558:13:24"],"nodeType":"IdentifierPath","referencedDeclaration":1145,"src":"558:13:24"},"id":5028,"nodeType":"InheritanceSpecifier","src":"558:13:24"},{"baseName":{"id":5029,"name":"OwnableUpgradeable","nameLocations":["577:18:24"],"nodeType":"IdentifierPath","referencedDeclaration":951,"src":"577:18:24"},"id":5030,"nodeType":"InheritanceSpecifier","src":"577:18:24"}],"canonicalName":"CommunityResolver","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":5185,"linearizedBaseContracts":[5185,951,1517,1145,819,454,510],"name":"CommunityResolver","nameLocation":"513:17:24","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":5036,"mutability":"mutable","name":"communityAdmins","nameLocation":"656:15:24","nodeType":"VariableDeclaration","scope":5185,"src":"602:69:24","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_mapping$_t_address_$_t_uint8_$_$","typeString":"mapping(bytes32 => mapping(address => uint8))"},"typeName":{"id":5035,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":5031,"name":"bytes32","nodeType":"ElementaryTypeName","src":"610:7:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Mapping","src":"602:45:24","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_mapping$_t_address_$_t_uint8_$_$","typeString":"mapping(bytes32 => mapping(address => uint8))"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":5034,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":5032,"name":"address","nodeType":"ElementaryTypeName","src":"629:7:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"621:25:24","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint8_$","typeString":"mapping(address => uint8)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":5033,"name":"uint8","nodeType":"ElementaryTypeName","src":"640:5:24","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}}},"visibility":"private"},{"constant":false,"id":5038,"mutability":"mutable","name":"_owner","nameLocation":"694:6:24","nodeType":"VariableDeclaration","scope":5185,"src":"678:22:24","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5037,"name":"address","nodeType":"ElementaryTypeName","src":"678:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"private"},{"body":{"id":5051,"nodeType":"Block","src":"802:39:24","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":5048,"name":"_disableInitializers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1126,"src":"812:20:24","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":5049,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"812:22:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5050,"nodeType":"ExpressionStatement","src":"812:22:24"}]},"documentation":{"id":5039,"nodeType":"StructuredDocumentation","src":"707:48:24","text":"@custom:oz-upgrades-unsafe-allow constructor"},"id":5052,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"id":5045,"name":"eas","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5042,"src":"797:3:24","typeDescriptions":{"typeIdentifier":"t_contract$_IEAS_$346","typeString":"contract IEAS"}}],"id":5046,"kind":"baseConstructorSpecifier","modifierName":{"id":5044,"name":"SchemaResolver","nameLocations":["782:14:24"],"nodeType":"IdentifierPath","referencedDeclaration":819,"src":"782:14:24"},"nodeType":"ModifierInvocation","src":"782:19:24"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":5043,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5042,"mutability":"mutable","name":"eas","nameLocation":"777:3:24","nodeType":"VariableDeclaration","scope":5052,"src":"772:8:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IEAS_$346","typeString":"contract IEAS"},"typeName":{"id":5041,"nodeType":"UserDefinedTypeName","pathNode":{"id":5040,"name":"IEAS","nameLocations":["772:4:24"],"nodeType":"IdentifierPath","referencedDeclaration":346,"src":"772:4:24"},"referencedDeclaration":346,"src":"772:4:24","typeDescriptions":{"typeIdentifier":"t_contract$_IEAS_$346","typeString":"contract IEAS"}},"visibility":"internal"}],"src":"771:10:24"},"returnParameters":{"id":5047,"nodeType":"ParameterList","parameters":[],"src":"802:0:24"},"scope":5185,"src":"760:81:24","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":5065,"nodeType":"Block","src":"888:62:24","statements":[{"expression":{"id":5060,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5057,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5038,"src":"898:6:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":5058,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"907:3:24","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5059,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"911:6:24","memberName":"sender","nodeType":"MemberAccess","src":"907:10:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"898:19:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":5061,"nodeType":"ExpressionStatement","src":"898:19:24"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":5062,"name":"__Ownable_init","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":846,"src":"927:14:24","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":5063,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"927:16:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5064,"nodeType":"ExpressionStatement","src":"927:16:24"}]},"functionSelector":"8129fc1c","id":5066,"implemented":true,"kind":"function","modifiers":[{"id":5055,"kind":"modifierInvocation","modifierName":{"id":5054,"name":"initializer","nameLocations":["876:11:24"],"nodeType":"IdentifierPath","referencedDeclaration":1047,"src":"876:11:24"},"nodeType":"ModifierInvocation","src":"876:11:24"}],"name":"initialize","nameLocation":"856:10:24","nodeType":"FunctionDefinition","parameters":{"id":5053,"nodeType":"ParameterList","parameters":[],"src":"866:2:24"},"returnParameters":{"id":5056,"nodeType":"ParameterList","parameters":[],"src":"888:0:24"},"scope":5185,"src":"847:103:24","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":5088,"nodeType":"Block","src":"1055:85:24","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":5086,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":5078,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":5075,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1072:3:24","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5076,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1076:6:24","memberName":"sender","nodeType":"MemberAccess","src":"1072:10:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":5077,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5038,"src":"1086:6:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1072:20:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":5085,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"baseExpression":{"id":5079,"name":"communityAdmins","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5036,"src":"1096:15:24","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_mapping$_t_address_$_t_uint8_$_$","typeString":"mapping(bytes32 => mapping(address => uint8))"}},"id":5081,"indexExpression":{"id":5080,"name":"community","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5068,"src":"1112:9:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1096:26:24","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint8_$","typeString":"mapping(address => uint8)"}},"id":5083,"indexExpression":{"id":5082,"name":"addr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5070,"src":"1123:4:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1096:32:24","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"31","id":5084,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1132:1:24","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1096:37:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1072:61:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":5074,"id":5087,"nodeType":"Return","src":"1065:68:24"}]},"functionSelector":"b75dbb8e","id":5089,"implemented":true,"kind":"function","modifiers":[],"name":"isAdmin","nameLocation":"965:7:24","nodeType":"FunctionDefinition","parameters":{"id":5071,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5068,"mutability":"mutable","name":"community","nameLocation":"990:9:24","nodeType":"VariableDeclaration","scope":5089,"src":"982:17:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5067,"name":"bytes32","nodeType":"ElementaryTypeName","src":"982:7:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":5070,"mutability":"mutable","name":"addr","nameLocation":"1017:4:24","nodeType":"VariableDeclaration","scope":5089,"src":"1009:12:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5069,"name":"address","nodeType":"ElementaryTypeName","src":"1009:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"972:55:24"},"returnParameters":{"id":5074,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5073,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5089,"src":"1049:4:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5072,"name":"bool","nodeType":"ElementaryTypeName","src":"1049:4:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1048:6:24"},"scope":5185,"src":"956:184:24","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":5100,"nodeType":"Block","src":"1210:42:24","statements":[{"expression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":5098,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5096,"name":"attester","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5091,"src":"1227:8:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":5097,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5038,"src":"1239:6:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1227:18:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":5095,"id":5099,"nodeType":"Return","src":"1220:25:24"}]},"functionSelector":"57692ad2","id":5101,"implemented":true,"kind":"function","modifiers":[],"name":"canAttest","nameLocation":"1155:9:24","nodeType":"FunctionDefinition","parameters":{"id":5092,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5091,"mutability":"mutable","name":"attester","nameLocation":"1173:8:24","nodeType":"VariableDeclaration","scope":5101,"src":"1165:16:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5090,"name":"address","nodeType":"ElementaryTypeName","src":"1165:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1164:18:24"},"returnParameters":{"id":5095,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5094,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5101,"src":"1204:4:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5093,"name":"bool","nodeType":"ElementaryTypeName","src":"1204:4:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1203:6:24"},"scope":5185,"src":"1146:106:24","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":5125,"nodeType":"Block","src":"1322:115:24","statements":[{"expression":{"arguments":[{"arguments":[{"id":5110,"name":"community","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5103,"src":"1348:9:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"expression":{"id":5111,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1359:3:24","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5112,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1363:6:24","memberName":"sender","nodeType":"MemberAccess","src":"1359:10:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":5109,"name":"isAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5089,"src":"1340:7:24","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) view returns (bool)"}},"id":5113,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1340:30:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4e6f74206f776e6572","id":5114,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1372:11:24","typeDescriptions":{"typeIdentifier":"t_stringliteral_c266efca4f4ed37612271196433531dcbb4fca89a694d568d1e290e32feb1682","typeString":"literal_string \"Not owner\""},"value":"Not owner"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_c266efca4f4ed37612271196433531dcbb4fca89a694d568d1e290e32feb1682","typeString":"literal_string \"Not owner\""}],"id":5108,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1332:7:24","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5115,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1332:52:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5116,"nodeType":"ExpressionStatement","src":"1332:52:24"},{"expression":{"id":5123,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":5117,"name":"communityAdmins","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5036,"src":"1394:15:24","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_mapping$_t_address_$_t_uint8_$_$","typeString":"mapping(bytes32 => mapping(address => uint8))"}},"id":5120,"indexExpression":{"id":5118,"name":"community","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5103,"src":"1410:9:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1394:26:24","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint8_$","typeString":"mapping(address => uint8)"}},"id":5121,"indexExpression":{"id":5119,"name":"addr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5105,"src":"1421:4:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1394:32:24","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"31","id":5122,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1429:1:24","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1394:36:24","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":5124,"nodeType":"ExpressionStatement","src":"1394:36:24"}]},"functionSelector":"d5cbe2bc","id":5126,"implemented":true,"kind":"function","modifiers":[],"name":"enlist","nameLocation":"1267:6:24","nodeType":"FunctionDefinition","parameters":{"id":5106,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5103,"mutability":"mutable","name":"community","nameLocation":"1282:9:24","nodeType":"VariableDeclaration","scope":5126,"src":"1274:17:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5102,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1274:7:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":5105,"mutability":"mutable","name":"addr","nameLocation":"1301:4:24","nodeType":"VariableDeclaration","scope":5126,"src":"1293:12:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5104,"name":"address","nodeType":"ElementaryTypeName","src":"1293:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1273:33:24"},"returnParameters":{"id":5107,"nodeType":"ParameterList","parameters":[],"src":"1322:0:24"},"scope":5185,"src":"1258:179:24","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":5150,"nodeType":"Block","src":"1499:115:24","statements":[{"expression":{"arguments":[{"arguments":[{"id":5135,"name":"community","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5128,"src":"1525:9:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"expression":{"id":5136,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1536:3:24","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5137,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1540:6:24","memberName":"sender","nodeType":"MemberAccess","src":"1536:10:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":5134,"name":"isAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5089,"src":"1517:7:24","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) view returns (bool)"}},"id":5138,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1517:30:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4e6f74206f776e6572","id":5139,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1549:11:24","typeDescriptions":{"typeIdentifier":"t_stringliteral_c266efca4f4ed37612271196433531dcbb4fca89a694d568d1e290e32feb1682","typeString":"literal_string \"Not owner\""},"value":"Not owner"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_c266efca4f4ed37612271196433531dcbb4fca89a694d568d1e290e32feb1682","typeString":"literal_string \"Not owner\""}],"id":5133,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1509:7:24","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5140,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1509:52:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5141,"nodeType":"ExpressionStatement","src":"1509:52:24"},{"expression":{"id":5148,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":5142,"name":"communityAdmins","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5036,"src":"1571:15:24","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_mapping$_t_address_$_t_uint8_$_$","typeString":"mapping(bytes32 => mapping(address => uint8))"}},"id":5145,"indexExpression":{"id":5143,"name":"community","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5128,"src":"1587:9:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1571:26:24","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint8_$","typeString":"mapping(address => uint8)"}},"id":5146,"indexExpression":{"id":5144,"name":"addr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5130,"src":"1598:4:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1571:32:24","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":5147,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1606:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1571:36:24","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":5149,"nodeType":"ExpressionStatement","src":"1571:36:24"}]},"functionSelector":"1b494702","id":5151,"implemented":true,"kind":"function","modifiers":[],"name":"delist","nameLocation":"1452:6:24","nodeType":"FunctionDefinition","parameters":{"id":5131,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5128,"mutability":"mutable","name":"community","nameLocation":"1467:9:24","nodeType":"VariableDeclaration","scope":5151,"src":"1459:17:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5127,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1459:7:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":5130,"mutability":"mutable","name":"addr","nameLocation":"1486:4:24","nodeType":"VariableDeclaration","scope":5151,"src":"1478:12:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5129,"name":"address","nodeType":"ElementaryTypeName","src":"1478:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1458:33:24"},"returnParameters":{"id":5132,"nodeType":"ParameterList","parameters":[],"src":"1499:0:24"},"scope":5185,"src":"1443:171:24","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"baseFunctions":[790],"body":{"id":5168,"nodeType":"Block","src":"1834:55:24","statements":[{"expression":{"arguments":[{"expression":{"id":5164,"name":"attestation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5155,"src":"1861:11:24","typeDescriptions":{"typeIdentifier":"t_struct$_Attestation_$45_calldata_ptr","typeString":"struct Attestation calldata"}},"id":5165,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1873:8:24","memberName":"attester","nodeType":"MemberAccess","referencedDeclaration":40,"src":"1861:20:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5163,"name":"canAttest","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5101,"src":"1851:9:24","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":5166,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1851:31:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":5162,"id":5167,"nodeType":"Return","src":"1844:38:24"}]},"documentation":{"id":5152,"nodeType":"StructuredDocumentation","src":"1620:78:24","text":" This is an bottom up event, called from the attest contract"},"id":5169,"implemented":true,"kind":"function","modifiers":[],"name":"onAttest","nameLocation":"1712:8:24","nodeType":"FunctionDefinition","overrides":{"id":5159,"nodeType":"OverrideSpecifier","overrides":[],"src":"1810:8:24"},"parameters":{"id":5158,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5155,"mutability":"mutable","name":"attestation","nameLocation":"1751:11:24","nodeType":"VariableDeclaration","scope":5169,"src":"1730:32:24","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_Attestation_$45_calldata_ptr","typeString":"struct Attestation"},"typeName":{"id":5154,"nodeType":"UserDefinedTypeName","pathNode":{"id":5153,"name":"Attestation","nameLocations":["1730:11:24"],"nodeType":"IdentifierPath","referencedDeclaration":45,"src":"1730:11:24"},"referencedDeclaration":45,"src":"1730:11:24","typeDescriptions":{"typeIdentifier":"t_struct$_Attestation_$45_storage_ptr","typeString":"struct Attestation"}},"visibility":"internal"},{"constant":false,"id":5157,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5169,"src":"1772:7:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5156,"name":"uint256","nodeType":"ElementaryTypeName","src":"1772:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1720:75:24"},"returnParameters":{"id":5162,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5161,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5169,"src":"1828:4:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5160,"name":"bool","nodeType":"ElementaryTypeName","src":"1828:4:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1827:6:24"},"scope":5185,"src":"1703:186:24","stateMutability":"view","virtual":false,"visibility":"internal"},{"baseFunctions":[801],"body":{"id":5183,"nodeType":"Block","src":"2113:28:24","statements":[{"expression":{"hexValue":"74727565","id":5181,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2130:4:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":5180,"id":5182,"nodeType":"Return","src":"2123:11:24"}]},"documentation":{"id":5170,"nodeType":"StructuredDocumentation","src":"1895:78:24","text":" This is an bottom up event, called from the attest contract"},"id":5184,"implemented":true,"kind":"function","modifiers":[],"name":"onRevoke","nameLocation":"1987:8:24","nodeType":"FunctionDefinition","overrides":{"id":5177,"nodeType":"OverrideSpecifier","overrides":[],"src":"2089:8:24"},"parameters":{"id":5176,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5173,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5184,"src":"2005:20:24","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_Attestation_$45_calldata_ptr","typeString":"struct Attestation"},"typeName":{"id":5172,"nodeType":"UserDefinedTypeName","pathNode":{"id":5171,"name":"Attestation","nameLocations":["2005:11:24"],"nodeType":"IdentifierPath","referencedDeclaration":45,"src":"2005:11:24"},"referencedDeclaration":45,"src":"2005:11:24","typeDescriptions":{"typeIdentifier":"t_struct$_Attestation_$45_storage_ptr","typeString":"struct Attestation"}},"visibility":"internal"},{"constant":false,"id":5175,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5184,"src":"2051:7:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5174,"name":"uint256","nodeType":"ElementaryTypeName","src":"2051:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1995:79:24"},"returnParameters":{"id":5180,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5179,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5184,"src":"2107:4:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5178,"name":"bool","nodeType":"ElementaryTypeName","src":"2107:4:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2106:6:24"},"scope":5185,"src":"1978:163:24","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":5186,"src":"504:1639:24","usedErrors":[11,529,531,533]}],"src":"33:2111:24"},"id":24},"contracts/Gap.sol":{"ast":{"absolutePath":"contracts/Gap.sol","exportedSymbols":{"AccessControl":[3683],"AddressUpgradeable":[1475],"Attestation":[45],"AttestationRequest":[87],"AttestationRequestData":[81],"Context":[3778],"ContextUpgradeable":[1517],"ECDSAUpgradeable":[2112],"EIP712Upgradeable":[2396],"ERC165":[4031],"Gap":[5815],"IAccessControl":[3756],"IEAS":[346],"IERC165":[4043],"IERC5267Upgradeable":[976],"Initializable":[1145],"Math":[4909],"MathUpgradeable":[3262],"MultiAttestationRequest":[105],"MultiRevocationRequest":[147],"OwnableUpgradeable":[951],"SignedMath":[5014],"SignedMathUpgradeable":[3367],"Strings":[4007],"StringsUpgradeable":[1746]},"id":5816,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":5187,"literals":["solidity","0.8",".19"],"nodeType":"PragmaDirective","src":"33:23:25"},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","id":5188,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5816,"sourceUnit":1146,"src":"58:75:25","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol","file":"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol","id":5189,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5816,"sourceUnit":952,"src":"134:75:25","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol","file":"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol","id":5190,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5816,"sourceUnit":2397,"src":"210:86:25","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/access/AccessControl.sol","file":"@openzeppelin/contracts/access/AccessControl.sol","id":5191,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5816,"sourceUnit":3684,"src":"297:58:25","symbolAliases":[],"unitAlias":""},{"absolutePath":"@ethereum-attestation-service/eas-contracts/contracts/IEAS.sol","file":"@ethereum-attestation-service/eas-contracts/contracts/IEAS.sol","id":5198,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5816,"sourceUnit":347,"src":"357:190:25","symbolAliases":[{"foreign":{"id":5192,"name":"IEAS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":346,"src":"365:4:25","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":5193,"name":"Attestation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":45,"src":"371:11:25","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":5194,"name":"AttestationRequest","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":87,"src":"384:18:25","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":5195,"name":"AttestationRequestData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":81,"src":"404:22:25","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":5196,"name":"MultiAttestationRequest","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":105,"src":"428:23:25","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":5197,"name":"MultiRevocationRequest","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":147,"src":"453:22:25","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":5199,"name":"Initializable","nameLocations":["565:13:25"],"nodeType":"IdentifierPath","referencedDeclaration":1145,"src":"565:13:25"},"id":5200,"nodeType":"InheritanceSpecifier","src":"565:13:25"},{"baseName":{"id":5201,"name":"OwnableUpgradeable","nameLocations":["580:18:25"],"nodeType":"IdentifierPath","referencedDeclaration":951,"src":"580:18:25"},"id":5202,"nodeType":"InheritanceSpecifier","src":"580:18:25"},{"baseName":{"id":5203,"name":"EIP712Upgradeable","nameLocations":["600:17:25"],"nodeType":"IdentifierPath","referencedDeclaration":2396,"src":"600:17:25"},"id":5204,"nodeType":"InheritanceSpecifier","src":"600:17:25"}],"canonicalName":"Gap","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":5815,"linearizedBaseContracts":[5815,2396,976,951,1517,1145],"name":"Gap","nameLocation":"558:3:25","nodeType":"ContractDefinition","nodes":[{"constant":false,"functionSelector":"8150864d","id":5207,"mutability":"mutable","name":"eas","nameLocation":"636:3:25","nodeType":"VariableDeclaration","scope":5815,"src":"624:15:25","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IEAS_$346","typeString":"contract IEAS"},"typeName":{"id":5206,"nodeType":"UserDefinedTypeName","pathNode":{"id":5205,"name":"IEAS","nameLocations":["624:4:25"],"nodeType":"IdentifierPath","referencedDeclaration":346,"src":"624:4:25"},"referencedDeclaration":346,"src":"624:4:25","typeDescriptions":{"typeIdentifier":"t_contract$_IEAS_$346","typeString":"contract IEAS"}},"visibility":"public"},{"constant":false,"functionSelector":"7ecebe00","id":5211,"mutability":"mutable","name":"nonces","nameLocation":"680:6:25","nodeType":"VariableDeclaration","scope":5815,"src":"645:41:25","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"typeName":{"id":5210,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":5208,"name":"address","nodeType":"ElementaryTypeName","src":"653:7:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"645:27:25","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":5209,"name":"uint256","nodeType":"ElementaryTypeName","src":"664:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"public"},{"constant":true,"functionSelector":"7e4a7d8f","id":5216,"mutability":"constant","name":"ATTEST_TYPEHASH","nameLocation":"717:15:25","nodeType":"VariableDeclaration","scope":5815,"src":"693:118:25","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5212,"name":"bytes32","nodeType":"ElementaryTypeName","src":"693:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"hexValue":"41747465737428737472696e67207061796c6f6164486173682c75696e74323536206e6f6e63652c75696e743235362065787069727929","id":5214,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"753:57:25","typeDescriptions":{"typeIdentifier":"t_stringliteral_17132900f74aadb4a80e6e5d88759b509b5a55861f3e0542632865ccc1180c49","typeString":"literal_string \"Attest(string payloadHash,uint256 nonce,uint256 expiry)\""},"value":"Attest(string payloadHash,uint256 nonce,uint256 expiry)"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_17132900f74aadb4a80e6e5d88759b509b5a55861f3e0542632865ccc1180c49","typeString":"literal_string \"Attest(string payloadHash,uint256 nonce,uint256 expiry)\""}],"id":5213,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"743:9:25","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":5215,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"743:68:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"public"},{"body":{"id":5223,"nodeType":"Block","src":"885:39:25","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":5220,"name":"_disableInitializers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1126,"src":"895:20:25","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":5221,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"895:22:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5222,"nodeType":"ExpressionStatement","src":"895:22:25"}]},"documentation":{"id":5217,"nodeType":"StructuredDocumentation","src":"818:48:25","text":"@custom:oz-upgrades-unsafe-allow constructor"},"id":5224,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":5218,"nodeType":"ParameterList","parameters":[],"src":"882:2:25"},"returnParameters":{"id":5219,"nodeType":"ParameterList","parameters":[],"src":"885:0:25"},"scope":5815,"src":"871:53:25","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"canonicalName":"Gap.AttestationRequestNode","id":5232,"members":[{"constant":false,"id":5226,"mutability":"mutable","name":"uid","nameLocation":"978:3:25","nodeType":"VariableDeclaration","scope":5232,"src":"970:11:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5225,"name":"bytes32","nodeType":"ElementaryTypeName","src":"970:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":5229,"mutability":"mutable","name":"multiRequest","nameLocation":"1015:12:25","nodeType":"VariableDeclaration","scope":5232,"src":"991:36:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_MultiAttestationRequest_$105_storage_ptr","typeString":"struct MultiAttestationRequest"},"typeName":{"id":5228,"nodeType":"UserDefinedTypeName","pathNode":{"id":5227,"name":"MultiAttestationRequest","nameLocations":["991:23:25"],"nodeType":"IdentifierPath","referencedDeclaration":105,"src":"991:23:25"},"referencedDeclaration":105,"src":"991:23:25","typeDescriptions":{"typeIdentifier":"t_struct$_MultiAttestationRequest_$105_storage_ptr","typeString":"struct MultiAttestationRequest"}},"visibility":"internal"},{"constant":false,"id":5231,"mutability":"mutable","name":"refIdx","nameLocation":"1045:6:25","nodeType":"VariableDeclaration","scope":5232,"src":"1037:14:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5230,"name":"uint256","nodeType":"ElementaryTypeName","src":"1037:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"AttestationRequestNode","nameLocation":"937:22:25","nodeType":"StructDefinition","scope":5815,"src":"930:128:25","visibility":"public"},{"body":{"id":5253,"nodeType":"Block","src":"1120:111:25","statements":[{"expression":{"id":5243,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5239,"name":"eas","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5207,"src":"1130:3:25","typeDescriptions":{"typeIdentifier":"t_contract$_IEAS_$346","typeString":"contract IEAS"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":5241,"name":"easAddr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5234,"src":"1141:7:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5240,"name":"IEAS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":346,"src":"1136:4:25","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IEAS_$346_$","typeString":"type(contract IEAS)"}},"id":5242,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1136:13:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IEAS_$346","typeString":"contract IEAS"}},"src":"1130:19:25","typeDescriptions":{"typeIdentifier":"t_contract$_IEAS_$346","typeString":"contract IEAS"}},"id":5244,"nodeType":"ExpressionStatement","src":"1130:19:25"},{"expression":{"arguments":[{"hexValue":"6761702d6174746573746174696f6e","id":5246,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1173:17:25","typeDescriptions":{"typeIdentifier":"t_stringliteral_278a9f782bc53056cdaf3a4d4184cbabff69921e6caddcd4a6b299f4b1853b15","typeString":"literal_string \"gap-attestation\""},"value":"gap-attestation"},{"hexValue":"312e30","id":5247,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1192:5:25","typeDescriptions":{"typeIdentifier":"t_stringliteral_e6bbd6277e1bf288eed5e8d1780f9a50b239e86b153736bceebccf4ea79d90b3","typeString":"literal_string \"1.0\""},"value":"1.0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_278a9f782bc53056cdaf3a4d4184cbabff69921e6caddcd4a6b299f4b1853b15","typeString":"literal_string \"gap-attestation\""},{"typeIdentifier":"t_stringliteral_e6bbd6277e1bf288eed5e8d1780f9a50b239e86b153736bceebccf4ea79d90b3","typeString":"literal_string \"1.0\""}],"id":5245,"name":"__EIP712_init","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2153,"src":"1159:13:25","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_string_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory,string memory)"}},"id":5248,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1159:39:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5249,"nodeType":"ExpressionStatement","src":"1159:39:25"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":5250,"name":"__Ownable_init","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":846,"src":"1208:14:25","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":5251,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1208:16:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5252,"nodeType":"ExpressionStatement","src":"1208:16:25"}]},"functionSelector":"c4d66de8","id":5254,"implemented":true,"kind":"function","modifiers":[{"id":5237,"kind":"modifierInvocation","modifierName":{"id":5236,"name":"initializer","nameLocations":["1108:11:25"],"nodeType":"IdentifierPath","referencedDeclaration":1047,"src":"1108:11:25"},"nodeType":"ModifierInvocation","src":"1108:11:25"}],"name":"initialize","nameLocation":"1073:10:25","nodeType":"FunctionDefinition","parameters":{"id":5235,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5234,"mutability":"mutable","name":"easAddr","nameLocation":"1092:7:25","nodeType":"VariableDeclaration","scope":5254,"src":"1084:15:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5233,"name":"address","nodeType":"ElementaryTypeName","src":"1084:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1083:17:25"},"returnParameters":{"id":5238,"nodeType":"ParameterList","parameters":[],"src":"1120:0:25"},"scope":5815,"src":"1064:167:25","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":5283,"nodeType":"Block","src":"1372:189:25","statements":[{"assignments":[5262],"declarations":[{"constant":false,"id":5262,"mutability":"mutable","name":"ref","nameLocation":"1401:3:25","nodeType":"VariableDeclaration","scope":5283,"src":"1382:22:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Attestation_$45_memory_ptr","typeString":"struct Attestation"},"typeName":{"id":5261,"nodeType":"UserDefinedTypeName","pathNode":{"id":5260,"name":"Attestation","nameLocations":["1382:11:25"],"nodeType":"IdentifierPath","referencedDeclaration":45,"src":"1382:11:25"},"referencedDeclaration":45,"src":"1382:11:25","typeDescriptions":{"typeIdentifier":"t_struct$_Attestation_$45_storage_ptr","typeString":"struct Attestation"}},"visibility":"internal"}],"id":5267,"initialValue":{"arguments":[{"id":5265,"name":"uid","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5257,"src":"1426:3:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":5263,"name":"eas","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5207,"src":"1407:3:25","typeDescriptions":{"typeIdentifier":"t_contract$_IEAS_$346","typeString":"contract IEAS"}},"id":5264,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1411:14:25","memberName":"getAttestation","nodeType":"MemberAccess","referencedDeclaration":319,"src":"1407:18:25","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_bytes32_$returns$_t_struct$_Attestation_$45_memory_ptr_$","typeString":"function (bytes32) view external returns (struct Attestation memory)"}},"id":5266,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1407:23:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Attestation_$45_memory_ptr","typeString":"struct Attestation memory"}},"nodeType":"VariableDeclarationStatement","src":"1382:48:25"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":5279,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":5273,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":5269,"name":"ref","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5262,"src":"1461:3:25","typeDescriptions":{"typeIdentifier":"t_struct$_Attestation_$45_memory_ptr","typeString":"struct Attestation memory"}},"id":5270,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1465:8:25","memberName":"attester","nodeType":"MemberAccess","referencedDeclaration":40,"src":"1461:12:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":5271,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1477:3:25","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5272,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1481:6:25","memberName":"sender","nodeType":"MemberAccess","src":"1477:10:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1461:26:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":5278,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":5274,"name":"ref","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5262,"src":"1491:3:25","typeDescriptions":{"typeIdentifier":"t_struct$_Attestation_$45_memory_ptr","typeString":"struct Attestation memory"}},"id":5275,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1495:9:25","memberName":"recipient","nodeType":"MemberAccess","referencedDeclaration":38,"src":"1491:13:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":5276,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1508:3:25","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5277,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1512:6:25","memberName":"sender","nodeType":"MemberAccess","src":"1508:10:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1491:27:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1461:57:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4e6f74206f776e65722e","id":5280,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1532:12:25","typeDescriptions":{"typeIdentifier":"t_stringliteral_bf2878a0327c5efcb59586051281508822c0d430e7858d25ba3f27d805f4146d","typeString":"literal_string \"Not owner.\""},"value":"Not owner."}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_bf2878a0327c5efcb59586051281508822c0d430e7858d25ba3f27d805f4146d","typeString":"literal_string \"Not owner.\""}],"id":5268,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1440:7:25","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5281,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1440:114:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5282,"nodeType":"ExpressionStatement","src":"1440:114:25"}]},"documentation":{"id":5255,"nodeType":"StructuredDocumentation","src":"1237:72:25","text":"\n Verify if msg.sender owns the referenced attestation"},"id":5284,"implemented":true,"kind":"function","modifiers":[],"name":"validateCanAttestToRef","nameLocation":"1323:22:25","nodeType":"FunctionDefinition","parameters":{"id":5258,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5257,"mutability":"mutable","name":"uid","nameLocation":"1354:3:25","nodeType":"VariableDeclaration","scope":5284,"src":"1346:11:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5256,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1346:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1345:13:25"},"returnParameters":{"id":5259,"nodeType":"ParameterList","parameters":[],"src":"1372:0:25"},"scope":5815,"src":"1314:247:25","stateMutability":"view","virtual":false,"visibility":"private"},{"body":{"id":5323,"nodeType":"Block","src":"1740:190:25","statements":[{"body":{"id":5321,"nodeType":"Block","src":"1793:131:25","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":5311,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"baseExpression":{"id":5303,"name":"datas","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5289,"src":"1811:5:25","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_AttestationRequestData_$81_memory_ptr_$dyn_memory_ptr","typeString":"struct AttestationRequestData memory[] memory"}},"id":5305,"indexExpression":{"id":5304,"name":"j","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5293,"src":"1817:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1811:8:25","typeDescriptions":{"typeIdentifier":"t_struct$_AttestationRequestData_$81_memory_ptr","typeString":"struct AttestationRequestData memory"}},"id":5306,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1820:6:25","memberName":"refUID","nodeType":"MemberAccess","referencedDeclaration":76,"src":"1811:15:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":5309,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1838:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":5308,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1830:7:25","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":5307,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1830:7:25","typeDescriptions":{}}},"id":5310,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1830:10:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"1811:29:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5320,"nodeType":"IfStatement","src":"1807:107:25","trueBody":{"id":5319,"nodeType":"Block","src":"1842:72:25","statements":[{"expression":{"arguments":[{"expression":{"baseExpression":{"id":5313,"name":"datas","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5289,"src":"1883:5:25","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_AttestationRequestData_$81_memory_ptr_$dyn_memory_ptr","typeString":"struct AttestationRequestData memory[] memory"}},"id":5315,"indexExpression":{"id":5314,"name":"j","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5293,"src":"1889:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1883:8:25","typeDescriptions":{"typeIdentifier":"t_struct$_AttestationRequestData_$81_memory_ptr","typeString":"struct AttestationRequestData memory"}},"id":5316,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1892:6:25","memberName":"refUID","nodeType":"MemberAccess","referencedDeclaration":76,"src":"1883:15:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":5312,"name":"validateCanAttestToRef","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5284,"src":"1860:22:25","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$returns$__$","typeString":"function (bytes32) view"}},"id":5317,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1860:39:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5318,"nodeType":"ExpressionStatement","src":"1860:39:25"}]}}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5299,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5296,"name":"j","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5293,"src":"1770:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":5297,"name":"datas","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5289,"src":"1774:5:25","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_AttestationRequestData_$81_memory_ptr_$dyn_memory_ptr","typeString":"struct AttestationRequestData memory[] memory"}},"id":5298,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1780:6:25","memberName":"length","nodeType":"MemberAccess","src":"1774:12:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1770:16:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5322,"initializationExpression":{"assignments":[5293],"declarations":[{"constant":false,"id":5293,"mutability":"mutable","name":"j","nameLocation":"1763:1:25","nodeType":"VariableDeclaration","scope":5322,"src":"1755:9:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5292,"name":"uint256","nodeType":"ElementaryTypeName","src":"1755:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5295,"initialValue":{"hexValue":"30","id":5294,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1767:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"1755:13:25"},"loopExpression":{"expression":{"id":5301,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"1788:3:25","subExpression":{"id":5300,"name":"j","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5293,"src":"1788:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5302,"nodeType":"ExpressionStatement","src":"1788:3:25"},"nodeType":"ForStatement","src":"1750:174:25"}]},"documentation":{"id":5285,"nodeType":"StructuredDocumentation","src":"1567:69:25","text":"\n Verify if msg.sender owns the set of attestations"},"id":5324,"implemented":true,"kind":"function","modifiers":[],"name":"validateCanAttestToRefs","nameLocation":"1650:23:25","nodeType":"FunctionDefinition","parameters":{"id":5290,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5289,"mutability":"mutable","name":"datas","nameLocation":"1715:5:25","nodeType":"VariableDeclaration","scope":5324,"src":"1683:37:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_AttestationRequestData_$81_memory_ptr_$dyn_memory_ptr","typeString":"struct AttestationRequestData[]"},"typeName":{"baseType":{"id":5287,"nodeType":"UserDefinedTypeName","pathNode":{"id":5286,"name":"AttestationRequestData","nameLocations":["1683:22:25"],"nodeType":"IdentifierPath","referencedDeclaration":81,"src":"1683:22:25"},"referencedDeclaration":81,"src":"1683:22:25","typeDescriptions":{"typeIdentifier":"t_struct$_AttestationRequestData_$81_storage_ptr","typeString":"struct AttestationRequestData"}},"id":5288,"nodeType":"ArrayTypeName","src":"1683:24:25","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_AttestationRequestData_$81_storage_$dyn_storage_ptr","typeString":"struct AttestationRequestData[]"}},"visibility":"internal"}],"src":"1673:53:25"},"returnParameters":{"id":5291,"nodeType":"ParameterList","parameters":[],"src":"1740:0:25"},"scope":5815,"src":"1641:289:25","stateMutability":"view","virtual":false,"visibility":"private"},{"body":{"id":5373,"nodeType":"Block","src":"2147:373:25","statements":[{"assignments":[5342],"declarations":[{"constant":false,"id":5342,"mutability":"mutable","name":"digest","nameLocation":"2165:6:25","nodeType":"VariableDeclaration","scope":5373,"src":"2157:14:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5341,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2157:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":5359,"initialValue":{"arguments":[{"arguments":[{"arguments":[{"id":5347,"name":"ATTEST_TYPEHASH","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5216,"src":"2263:15:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"arguments":[{"arguments":[{"id":5351,"name":"payloadHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5326,"src":"2316:11:25","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":5350,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2310:5:25","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":5349,"name":"bytes","nodeType":"ElementaryTypeName","src":"2310:5:25","typeDescriptions":{}}},"id":5352,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2310:18:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":5348,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"2300:9:25","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":5353,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2300:29:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":5354,"name":"nonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5328,"src":"2351:5:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5355,"name":"expiry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5330,"src":"2378:6:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":5345,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"2231:3:25","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":5346,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2235:6:25","memberName":"encode","nodeType":"MemberAccess","src":"2231:10:25","typeDescriptions":{"typeIdentifier":"t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":5356,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2231:171:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":5344,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"2204:9:25","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":5357,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2204:212:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":5343,"name":"_hashTypedDataV4","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2228,"src":"2174:16:25","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32) view returns (bytes32)"}},"id":5358,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2174:252:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"2157:269:25"},{"expression":{"id":5368,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5360,"name":"signer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5339,"src":"2437:6:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":5363,"name":"digest","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5342,"src":"2471:6:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":5364,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5332,"src":"2479:1:25","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":5365,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5334,"src":"2482:1:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":5366,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5336,"src":"2485:1:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":5361,"name":"ECDSAUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2112,"src":"2446:16:25","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ECDSAUpgradeable_$2112_$","typeString":"type(library ECDSAUpgradeable)"}},"id":5362,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2463:7:25","memberName":"recover","nodeType":"MemberAccess","referencedDeclaration":2047,"src":"2446:24:25","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$","typeString":"function (bytes32,uint8,bytes32,bytes32) pure returns (address)"}},"id":5367,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2446:41:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2437:50:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":5369,"nodeType":"ExpressionStatement","src":"2437:50:25"},{"expression":{"components":[{"id":5370,"name":"signer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5339,"src":"2506:6:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":5371,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2505:8:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":5340,"id":5372,"nodeType":"Return","src":"2498:15:25"}]},"functionSelector":"5ffed2f0","id":5374,"implemented":true,"kind":"function","modifiers":[],"name":"_recoverSignerAddress","nameLocation":"1945:21:25","nodeType":"FunctionDefinition","parameters":{"id":5337,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5326,"mutability":"mutable","name":"payloadHash","nameLocation":"1990:11:25","nodeType":"VariableDeclaration","scope":5374,"src":"1976:25:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":5325,"name":"string","nodeType":"ElementaryTypeName","src":"1976:6:25","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":5328,"mutability":"mutable","name":"nonce","nameLocation":"2019:5:25","nodeType":"VariableDeclaration","scope":5374,"src":"2011:13:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5327,"name":"uint256","nodeType":"ElementaryTypeName","src":"2011:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5330,"mutability":"mutable","name":"expiry","nameLocation":"2042:6:25","nodeType":"VariableDeclaration","scope":5374,"src":"2034:14:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5329,"name":"uint256","nodeType":"ElementaryTypeName","src":"2034:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5332,"mutability":"mutable","name":"v","nameLocation":"2064:1:25","nodeType":"VariableDeclaration","scope":5374,"src":"2058:7:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":5331,"name":"uint8","nodeType":"ElementaryTypeName","src":"2058:5:25","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":5334,"mutability":"mutable","name":"r","nameLocation":"2083:1:25","nodeType":"VariableDeclaration","scope":5374,"src":"2075:9:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5333,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2075:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":5336,"mutability":"mutable","name":"s","nameLocation":"2102:1:25","nodeType":"VariableDeclaration","scope":5374,"src":"2094:9:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5335,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2094:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1966:143:25"},"returnParameters":{"id":5340,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5339,"mutability":"mutable","name":"signer","nameLocation":"2139:6:25","nodeType":"VariableDeclaration","scope":5374,"src":"2131:14:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5338,"name":"address","nodeType":"ElementaryTypeName","src":"2131:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2130:16:25"},"scope":5815,"src":"1936:584:25","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":5438,"nodeType":"Block","src":"2848:460:25","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5400,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":5397,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"2866:5:25","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":5398,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2872:9:25","memberName":"timestamp","nodeType":"MemberAccess","src":"2866:15:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"id":5399,"name":"expiry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5387,"src":"2885:6:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2866:25:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5369676e61747572652065787069726564","id":5401,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2893:19:25","typeDescriptions":{"typeIdentifier":"t_stringliteral_99132f8bb903a5d9600420e3899938d8bfd8aa30795f8fee460656e87dd9c517","typeString":"literal_string \"Signature expired\""},"value":"Signature expired"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_99132f8bb903a5d9600420e3899938d8bfd8aa30795f8fee460656e87dd9c517","typeString":"literal_string \"Signature expired\""}],"id":5396,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2858:7:25","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5402,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2858:55:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5403,"nodeType":"ExpressionStatement","src":"2858:55:25"},{"assignments":[5405],"declarations":[{"constant":false,"id":5405,"mutability":"mutable","name":"signer","nameLocation":"2932:6:25","nodeType":"VariableDeclaration","scope":5438,"src":"2924:14:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5404,"name":"address","nodeType":"ElementaryTypeName","src":"2924:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":5414,"initialValue":{"arguments":[{"id":5407,"name":"payloadHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5381,"src":"2976:11:25","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":5408,"name":"nonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5385,"src":"3001:5:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5409,"name":"expiry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5387,"src":"3020:6:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5410,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5389,"src":"3040:1:25","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":5411,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5391,"src":"3055:1:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":5412,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5393,"src":"3070:1:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":5406,"name":"_recoverSignerAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5374,"src":"2941:21:25","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_string_memory_ptr_$_t_uint256_$_t_uint256_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$","typeString":"function (string memory,uint256,uint256,uint8,bytes32,bytes32) view returns (address)"}},"id":5413,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2941:140:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"2924:157:25"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":5418,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5416,"name":"signer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5405,"src":"3113:6:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":5417,"name":"attester","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5383,"src":"3123:8:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3113:18:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5369676e657220616e642061747465737465722061646472657373657320646f6e2774206d617463682e","id":5419,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3145:44:25","typeDescriptions":{"typeIdentifier":"t_stringliteral_4273fbad0f59c6a7ae7dbee11f68ce4ebedcf6c034c1140f12b6e6f0444ffa6c","typeString":"literal_string \"Signer and attester addresses don't match.\""},"value":"Signer and attester addresses don't match."}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_4273fbad0f59c6a7ae7dbee11f68ce4ebedcf6c034c1140f12b6e6f0444ffa6c","typeString":"literal_string \"Signer and attester addresses don't match.\""}],"id":5415,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3092:7:25","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5420,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3092:107:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5421,"nodeType":"ExpressionStatement","src":"3092:107:25"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5428,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5423,"name":"nonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5385,"src":"3217:5:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":5427,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"3226:16:25","subExpression":{"baseExpression":{"id":5424,"name":"nonces","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5211,"src":"3226:6:25","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":5426,"indexExpression":{"id":5425,"name":"signer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5405,"src":"3233:6:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"3226:14:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3217:25:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e76616c6964206e6f6e6365","id":5429,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3244:15:25","typeDescriptions":{"typeIdentifier":"t_stringliteral_19a9c5fdfc984667e300523283171e2aca8bb9e593f19eef41052fcdbfdb1568","typeString":"literal_string \"Invalid nonce\""},"value":"Invalid nonce"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_19a9c5fdfc984667e300523283171e2aca8bb9e593f19eef41052fcdbfdb1568","typeString":"literal_string \"Invalid nonce\""}],"id":5422,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3209:7:25","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5430,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3209:51:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5431,"nodeType":"ExpressionStatement","src":"3209:51:25"},{"expression":{"arguments":[{"id":5435,"name":"multiRequests","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5379,"src":"3287:13:25","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_MultiRevocationRequest_$147_calldata_ptr_$dyn_calldata_ptr","typeString":"struct MultiRevocationRequest calldata[] calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_struct$_MultiRevocationRequest_$147_calldata_ptr_$dyn_calldata_ptr","typeString":"struct MultiRevocationRequest calldata[] calldata"}],"expression":{"id":5432,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"3270:4:25","typeDescriptions":{"typeIdentifier":"t_contract$_Gap_$5815","typeString":"contract Gap"}},"id":5434,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3275:11:25","memberName":"multiRevoke","nodeType":"MemberAccess","referencedDeclaration":5515,"src":"3270:16:25","typeDescriptions":{"typeIdentifier":"t_function_external_payable$_t_array$_t_struct$_MultiRevocationRequest_$147_memory_ptr_$dyn_memory_ptr_$returns$__$","typeString":"function (struct MultiRevocationRequest memory[] memory) payable external"}},"id":5436,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3270:31:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5437,"nodeType":"ExpressionStatement","src":"3270:31:25"}]},"documentation":{"id":5375,"nodeType":"StructuredDocumentation","src":"2526:48:25","text":"\n Performs multi revoke by sig"},"functionSelector":"5cad7555","id":5439,"implemented":true,"kind":"function","modifiers":[],"name":"multiRevokeBySig","nameLocation":"2588:16:25","nodeType":"FunctionDefinition","parameters":{"id":5394,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5379,"mutability":"mutable","name":"multiRequests","nameLocation":"2648:13:25","nodeType":"VariableDeclaration","scope":5439,"src":"2614:47:25","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_MultiRevocationRequest_$147_calldata_ptr_$dyn_calldata_ptr","typeString":"struct MultiRevocationRequest[]"},"typeName":{"baseType":{"id":5377,"nodeType":"UserDefinedTypeName","pathNode":{"id":5376,"name":"MultiRevocationRequest","nameLocations":["2614:22:25"],"nodeType":"IdentifierPath","referencedDeclaration":147,"src":"2614:22:25"},"referencedDeclaration":147,"src":"2614:22:25","typeDescriptions":{"typeIdentifier":"t_struct$_MultiRevocationRequest_$147_storage_ptr","typeString":"struct MultiRevocationRequest"}},"id":5378,"nodeType":"ArrayTypeName","src":"2614:24:25","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_MultiRevocationRequest_$147_storage_$dyn_storage_ptr","typeString":"struct MultiRevocationRequest[]"}},"visibility":"internal"},{"constant":false,"id":5381,"mutability":"mutable","name":"payloadHash","nameLocation":"2685:11:25","nodeType":"VariableDeclaration","scope":5439,"src":"2671:25:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":5380,"name":"string","nodeType":"ElementaryTypeName","src":"2671:6:25","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":5383,"mutability":"mutable","name":"attester","nameLocation":"2714:8:25","nodeType":"VariableDeclaration","scope":5439,"src":"2706:16:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5382,"name":"address","nodeType":"ElementaryTypeName","src":"2706:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5385,"mutability":"mutable","name":"nonce","nameLocation":"2740:5:25","nodeType":"VariableDeclaration","scope":5439,"src":"2732:13:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5384,"name":"uint256","nodeType":"ElementaryTypeName","src":"2732:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5387,"mutability":"mutable","name":"expiry","nameLocation":"2763:6:25","nodeType":"VariableDeclaration","scope":5439,"src":"2755:14:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5386,"name":"uint256","nodeType":"ElementaryTypeName","src":"2755:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5389,"mutability":"mutable","name":"v","nameLocation":"2785:1:25","nodeType":"VariableDeclaration","scope":5439,"src":"2779:7:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":5388,"name":"uint8","nodeType":"ElementaryTypeName","src":"2779:5:25","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":5391,"mutability":"mutable","name":"r","nameLocation":"2804:1:25","nodeType":"VariableDeclaration","scope":5439,"src":"2796:9:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5390,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2796:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":5393,"mutability":"mutable","name":"s","nameLocation":"2823:1:25","nodeType":"VariableDeclaration","scope":5439,"src":"2815:9:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5392,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2815:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2604:226:25"},"returnParameters":{"id":5395,"nodeType":"ParameterList","parameters":[],"src":"2848:0:25"},"scope":5815,"src":"2579:729:25","stateMutability":"nonpayable","virtual":true,"visibility":"external"},{"body":{"id":5514,"nodeType":"Block","src":"3469:707:25","statements":[{"body":{"id":5506,"nodeType":"Block","src":"3661:469:25","statements":[{"assignments":[5460],"declarations":[{"constant":false,"id":5460,"mutability":"mutable","name":"request","nameLocation":"3705:7:25","nodeType":"VariableDeclaration","scope":5506,"src":"3675:37:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_MultiRevocationRequest_$147_memory_ptr","typeString":"struct MultiRevocationRequest"},"typeName":{"id":5459,"nodeType":"UserDefinedTypeName","pathNode":{"id":5458,"name":"MultiRevocationRequest","nameLocations":["3675:22:25"],"nodeType":"IdentifierPath","referencedDeclaration":147,"src":"3675:22:25"},"referencedDeclaration":147,"src":"3675:22:25","typeDescriptions":{"typeIdentifier":"t_struct$_MultiRevocationRequest_$147_storage_ptr","typeString":"struct MultiRevocationRequest"}},"visibility":"internal"}],"id":5464,"initialValue":{"baseExpression":{"id":5461,"name":"multiRequests","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5444,"src":"3715:13:25","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_MultiRevocationRequest_$147_calldata_ptr_$dyn_calldata_ptr","typeString":"struct MultiRevocationRequest calldata[] calldata"}},"id":5463,"indexExpression":{"id":5462,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5448,"src":"3729:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3715:16:25","typeDescriptions":{"typeIdentifier":"t_struct$_MultiRevocationRequest_$147_calldata_ptr","typeString":"struct MultiRevocationRequest calldata"}},"nodeType":"VariableDeclarationStatement","src":"3675:56:25"},{"body":{"id":5504,"nodeType":"Block","src":"3795:325:25","statements":[{"assignments":[5479],"declarations":[{"constant":false,"id":5479,"mutability":"mutable","name":"target","nameLocation":"3832:6:25","nodeType":"VariableDeclaration","scope":5504,"src":"3813:25:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Attestation_$45_memory_ptr","typeString":"struct Attestation"},"typeName":{"id":5478,"nodeType":"UserDefinedTypeName","pathNode":{"id":5477,"name":"Attestation","nameLocations":["3813:11:25"],"nodeType":"IdentifierPath","referencedDeclaration":45,"src":"3813:11:25"},"referencedDeclaration":45,"src":"3813:11:25","typeDescriptions":{"typeIdentifier":"t_struct$_Attestation_$45_storage_ptr","typeString":"struct Attestation"}},"visibility":"internal"}],"id":5488,"initialValue":{"arguments":[{"expression":{"baseExpression":{"expression":{"id":5482,"name":"request","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5460,"src":"3881:7:25","typeDescriptions":{"typeIdentifier":"t_struct$_MultiRevocationRequest_$147_memory_ptr","typeString":"struct MultiRevocationRequest memory"}},"id":5483,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3889:4:25","memberName":"data","nodeType":"MemberAccess","referencedDeclaration":146,"src":"3881:12:25","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_RevocationRequestData_$123_memory_ptr_$dyn_memory_ptr","typeString":"struct RevocationRequestData memory[] memory"}},"id":5485,"indexExpression":{"id":5484,"name":"j","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5466,"src":"3894:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3881:15:25","typeDescriptions":{"typeIdentifier":"t_struct$_RevocationRequestData_$123_memory_ptr","typeString":"struct RevocationRequestData memory"}},"id":5486,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3897:3:25","memberName":"uid","nodeType":"MemberAccess","referencedDeclaration":120,"src":"3881:19:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":5480,"name":"eas","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5207,"src":"3841:3:25","typeDescriptions":{"typeIdentifier":"t_contract$_IEAS_$346","typeString":"contract IEAS"}},"id":5481,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3845:14:25","memberName":"getAttestation","nodeType":"MemberAccess","referencedDeclaration":319,"src":"3841:18:25","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_bytes32_$returns$_t_struct$_Attestation_$45_memory_ptr_$","typeString":"function (bytes32) view external returns (struct Attestation memory)"}},"id":5487,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3841:77:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Attestation_$45_memory_ptr","typeString":"struct Attestation memory"}},"nodeType":"VariableDeclarationStatement","src":"3813:105:25"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":5500,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":5494,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":5490,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5479,"src":"3966:6:25","typeDescriptions":{"typeIdentifier":"t_struct$_Attestation_$45_memory_ptr","typeString":"struct Attestation memory"}},"id":5491,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3973:8:25","memberName":"attester","nodeType":"MemberAccess","referencedDeclaration":40,"src":"3966:15:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":5492,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"3985:3:25","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5493,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3989:6:25","memberName":"sender","nodeType":"MemberAccess","src":"3985:10:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3966:29:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":5499,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":5495,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5479,"src":"4023:6:25","typeDescriptions":{"typeIdentifier":"t_struct$_Attestation_$45_memory_ptr","typeString":"struct Attestation memory"}},"id":5496,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4030:9:25","memberName":"recipient","nodeType":"MemberAccess","referencedDeclaration":38,"src":"4023:16:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":5497,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"4043:3:25","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5498,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4047:6:25","memberName":"sender","nodeType":"MemberAccess","src":"4043:10:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4023:30:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3966:87:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4e6f74206f776e65722e","id":5501,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4075:12:25","typeDescriptions":{"typeIdentifier":"t_stringliteral_bf2878a0327c5efcb59586051281508822c0d430e7858d25ba3f27d805f4146d","typeString":"literal_string \"Not owner.\""},"value":"Not owner."}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_bf2878a0327c5efcb59586051281508822c0d430e7858d25ba3f27d805f4146d","typeString":"literal_string \"Not owner.\""}],"id":5489,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3937:7:25","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5502,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3937:168:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5503,"nodeType":"ExpressionStatement","src":"3937:168:25"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5473,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5469,"name":"j","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5466,"src":"3765:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"expression":{"id":5470,"name":"request","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5460,"src":"3769:7:25","typeDescriptions":{"typeIdentifier":"t_struct$_MultiRevocationRequest_$147_memory_ptr","typeString":"struct MultiRevocationRequest memory"}},"id":5471,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3777:4:25","memberName":"data","nodeType":"MemberAccess","referencedDeclaration":146,"src":"3769:12:25","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_RevocationRequestData_$123_memory_ptr_$dyn_memory_ptr","typeString":"struct RevocationRequestData memory[] memory"}},"id":5472,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3782:6:25","memberName":"length","nodeType":"MemberAccess","src":"3769:19:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3765:23:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5505,"initializationExpression":{"assignments":[5466],"declarations":[{"constant":false,"id":5466,"mutability":"mutable","name":"j","nameLocation":"3758:1:25","nodeType":"VariableDeclaration","scope":5505,"src":"3750:9:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5465,"name":"uint256","nodeType":"ElementaryTypeName","src":"3750:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5468,"initialValue":{"hexValue":"30","id":5467,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3762:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"3750:13:25"},"loopExpression":{"expression":{"id":5475,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"3790:3:25","subExpression":{"id":5474,"name":"j","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5466,"src":"3790:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5476,"nodeType":"ExpressionStatement","src":"3790:3:25"},"nodeType":"ForStatement","src":"3745:375:25"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5454,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5451,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5448,"src":"3630:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":5452,"name":"multiRequests","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5444,"src":"3634:13:25","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_MultiRevocationRequest_$147_calldata_ptr_$dyn_calldata_ptr","typeString":"struct MultiRevocationRequest calldata[] calldata"}},"id":5453,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3648:6:25","memberName":"length","nodeType":"MemberAccess","src":"3634:20:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3630:24:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5507,"initializationExpression":{"assignments":[5448],"declarations":[{"constant":false,"id":5448,"mutability":"mutable","name":"i","nameLocation":"3623:1:25","nodeType":"VariableDeclaration","scope":5507,"src":"3615:9:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5447,"name":"uint256","nodeType":"ElementaryTypeName","src":"3615:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5450,"initialValue":{"hexValue":"30","id":5449,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3627:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"3615:13:25"},"loopExpression":{"expression":{"id":5456,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"3656:3:25","subExpression":{"id":5455,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5448,"src":"3656:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5457,"nodeType":"ExpressionStatement","src":"3656:3:25"},"nodeType":"ForStatement","src":"3610:520:25"},{"expression":{"arguments":[{"id":5511,"name":"multiRequests","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5444,"src":"4155:13:25","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_MultiRevocationRequest_$147_calldata_ptr_$dyn_calldata_ptr","typeString":"struct MultiRevocationRequest calldata[] calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_struct$_MultiRevocationRequest_$147_calldata_ptr_$dyn_calldata_ptr","typeString":"struct MultiRevocationRequest calldata[] calldata"}],"expression":{"id":5508,"name":"eas","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5207,"src":"4139:3:25","typeDescriptions":{"typeIdentifier":"t_contract$_IEAS_$346","typeString":"contract IEAS"}},"id":5510,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4143:11:25","memberName":"multiRevoke","nodeType":"MemberAccess","referencedDeclaration":268,"src":"4139:15:25","typeDescriptions":{"typeIdentifier":"t_function_external_payable$_t_array$_t_struct$_MultiRevocationRequest_$147_memory_ptr_$dyn_memory_ptr_$returns$__$","typeString":"function (struct MultiRevocationRequest memory[] memory) payable external"}},"id":5512,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4139:30:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5513,"nodeType":"ExpressionStatement","src":"4139:30:25"}]},"documentation":{"id":5440,"nodeType":"StructuredDocumentation","src":"3314:49:25","text":"\n Revokes multiple attestations"},"functionSelector":"4cb7e9e5","id":5515,"implemented":true,"kind":"function","modifiers":[],"name":"multiRevoke","nameLocation":"3377:11:25","nodeType":"FunctionDefinition","parameters":{"id":5445,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5444,"mutability":"mutable","name":"multiRequests","nameLocation":"3432:13:25","nodeType":"VariableDeclaration","scope":5515,"src":"3398:47:25","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_MultiRevocationRequest_$147_calldata_ptr_$dyn_calldata_ptr","typeString":"struct MultiRevocationRequest[]"},"typeName":{"baseType":{"id":5442,"nodeType":"UserDefinedTypeName","pathNode":{"id":5441,"name":"MultiRevocationRequest","nameLocations":["3398:22:25"],"nodeType":"IdentifierPath","referencedDeclaration":147,"src":"3398:22:25"},"referencedDeclaration":147,"src":"3398:22:25","typeDescriptions":{"typeIdentifier":"t_struct$_MultiRevocationRequest_$147_storage_ptr","typeString":"struct MultiRevocationRequest"}},"id":5443,"nodeType":"ArrayTypeName","src":"3398:24:25","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_MultiRevocationRequest_$147_storage_$dyn_storage_ptr","typeString":"struct MultiRevocationRequest[]"}},"visibility":"internal"}],"src":"3388:63:25"},"returnParameters":{"id":5446,"nodeType":"ParameterList","parameters":[],"src":"3469:0:25"},"scope":5815,"src":"3368:808:25","stateMutability":"payable","virtual":false,"visibility":"external"},{"body":{"id":5579,"nodeType":"Block","src":"4519:455:25","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5542,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":5539,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"4537:5:25","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":5540,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4543:9:25","memberName":"timestamp","nodeType":"MemberAccess","src":"4537:15:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"id":5541,"name":"expiry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5527,"src":"4556:6:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4537:25:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5369676e61747572652065787069726564","id":5543,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4564:19:25","typeDescriptions":{"typeIdentifier":"t_stringliteral_99132f8bb903a5d9600420e3899938d8bfd8aa30795f8fee460656e87dd9c517","typeString":"literal_string \"Signature expired\""},"value":"Signature expired"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_99132f8bb903a5d9600420e3899938d8bfd8aa30795f8fee460656e87dd9c517","typeString":"literal_string \"Signature expired\""}],"id":5538,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4529:7:25","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5544,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4529:55:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5545,"nodeType":"ExpressionStatement","src":"4529:55:25"},{"assignments":[5547],"declarations":[{"constant":false,"id":5547,"mutability":"mutable","name":"signer","nameLocation":"4603:6:25","nodeType":"VariableDeclaration","scope":5579,"src":"4595:14:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5546,"name":"address","nodeType":"ElementaryTypeName","src":"4595:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":5556,"initialValue":{"arguments":[{"id":5549,"name":"payloadHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5521,"src":"4647:11:25","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":5550,"name":"nonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5525,"src":"4672:5:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5551,"name":"expiry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5527,"src":"4691:6:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5552,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5529,"src":"4711:1:25","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":5553,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5531,"src":"4726:1:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":5554,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5533,"src":"4741:1:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":5548,"name":"_recoverSignerAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5374,"src":"4612:21:25","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_string_memory_ptr_$_t_uint256_$_t_uint256_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$","typeString":"function (string memory,uint256,uint256,uint8,bytes32,bytes32) view returns (address)"}},"id":5555,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4612:140:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"4595:157:25"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":5560,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5558,"name":"signer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5547,"src":"4783:6:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":5559,"name":"attester","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5523,"src":"4793:8:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4783:18:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5369676e657220616e642061747465737465722061646472657373657320646f6e2774206d617463682e","id":5561,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4815:44:25","typeDescriptions":{"typeIdentifier":"t_stringliteral_4273fbad0f59c6a7ae7dbee11f68ce4ebedcf6c034c1140f12b6e6f0444ffa6c","typeString":"literal_string \"Signer and attester addresses don't match.\""},"value":"Signer and attester addresses don't match."}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_4273fbad0f59c6a7ae7dbee11f68ce4ebedcf6c034c1140f12b6e6f0444ffa6c","typeString":"literal_string \"Signer and attester addresses don't match.\""}],"id":5557,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4762:7:25","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5562,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4762:107:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5563,"nodeType":"ExpressionStatement","src":"4762:107:25"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5570,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5565,"name":"nonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5525,"src":"4887:5:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":5569,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"4896:16:25","subExpression":{"baseExpression":{"id":5566,"name":"nonces","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5211,"src":"4896:6:25","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":5568,"indexExpression":{"id":5567,"name":"signer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5547,"src":"4903:6:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"4896:14:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4887:25:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e76616c6964206e6f6e6365","id":5571,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4914:15:25","typeDescriptions":{"typeIdentifier":"t_stringliteral_19a9c5fdfc984667e300523283171e2aca8bb9e593f19eef41052fcdbfdb1568","typeString":"literal_string \"Invalid nonce\""},"value":"Invalid nonce"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_19a9c5fdfc984667e300523283171e2aca8bb9e593f19eef41052fcdbfdb1568","typeString":"literal_string \"Invalid nonce\""}],"id":5564,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4879:7:25","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5572,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4879:51:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5573,"nodeType":"ExpressionStatement","src":"4879:51:25"},{"expression":{"arguments":[{"id":5576,"name":"request","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5519,"src":"4959:7:25","typeDescriptions":{"typeIdentifier":"t_struct$_AttestationRequest_$87_calldata_ptr","typeString":"struct AttestationRequest calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_AttestationRequest_$87_calldata_ptr","typeString":"struct AttestationRequest calldata"}],"expression":{"id":5574,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"4947:4:25","typeDescriptions":{"typeIdentifier":"t_contract$_Gap_$5815","typeString":"contract Gap"}},"id":5575,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4952:6:25","memberName":"attest","nodeType":"MemberAccess","referencedDeclaration":5618,"src":"4947:11:25","typeDescriptions":{"typeIdentifier":"t_function_external_payable$_t_struct$_AttestationRequest_$87_memory_ptr_$returns$_t_bytes32_$","typeString":"function (struct AttestationRequest memory) payable external returns (bytes32)"}},"id":5577,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4947:20:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":5537,"id":5578,"nodeType":"Return","src":"4940:27:25"}]},"documentation":{"id":5516,"nodeType":"StructuredDocumentation","src":"4182:62:25","text":"\n Performs a single attestation by signature"},"functionSelector":"d68a5ab6","id":5580,"implemented":true,"kind":"function","modifiers":[],"name":"attestBySig","nameLocation":"4258:11:25","nodeType":"FunctionDefinition","parameters":{"id":5534,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5519,"mutability":"mutable","name":"request","nameLocation":"4307:7:25","nodeType":"VariableDeclaration","scope":5580,"src":"4279:35:25","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_AttestationRequest_$87_calldata_ptr","typeString":"struct AttestationRequest"},"typeName":{"id":5518,"nodeType":"UserDefinedTypeName","pathNode":{"id":5517,"name":"AttestationRequest","nameLocations":["4279:18:25"],"nodeType":"IdentifierPath","referencedDeclaration":87,"src":"4279:18:25"},"referencedDeclaration":87,"src":"4279:18:25","typeDescriptions":{"typeIdentifier":"t_struct$_AttestationRequest_$87_storage_ptr","typeString":"struct AttestationRequest"}},"visibility":"internal"},{"constant":false,"id":5521,"mutability":"mutable","name":"payloadHash","nameLocation":"4338:11:25","nodeType":"VariableDeclaration","scope":5580,"src":"4324:25:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":5520,"name":"string","nodeType":"ElementaryTypeName","src":"4324:6:25","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":5523,"mutability":"mutable","name":"attester","nameLocation":"4367:8:25","nodeType":"VariableDeclaration","scope":5580,"src":"4359:16:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5522,"name":"address","nodeType":"ElementaryTypeName","src":"4359:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5525,"mutability":"mutable","name":"nonce","nameLocation":"4393:5:25","nodeType":"VariableDeclaration","scope":5580,"src":"4385:13:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5524,"name":"uint256","nodeType":"ElementaryTypeName","src":"4385:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5527,"mutability":"mutable","name":"expiry","nameLocation":"4416:6:25","nodeType":"VariableDeclaration","scope":5580,"src":"4408:14:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5526,"name":"uint256","nodeType":"ElementaryTypeName","src":"4408:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5529,"mutability":"mutable","name":"v","nameLocation":"4438:1:25","nodeType":"VariableDeclaration","scope":5580,"src":"4432:7:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":5528,"name":"uint8","nodeType":"ElementaryTypeName","src":"4432:5:25","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":5531,"mutability":"mutable","name":"r","nameLocation":"4457:1:25","nodeType":"VariableDeclaration","scope":5580,"src":"4449:9:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5530,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4449:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":5533,"mutability":"mutable","name":"s","nameLocation":"4476:1:25","nodeType":"VariableDeclaration","scope":5580,"src":"4468:9:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5532,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4468:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4269:214:25"},"returnParameters":{"id":5537,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5536,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5580,"src":"4510:7:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5535,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4510:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4509:9:25"},"scope":5815,"src":"4249:725:25","stateMutability":"nonpayable","virtual":true,"visibility":"external"},{"body":{"id":5617,"nodeType":"Block","src":"5135:228:25","statements":[{"assignments":[5593],"declarations":[{"constant":false,"id":5593,"mutability":"mutable","name":"requestData","nameLocation":"5189:11:25","nodeType":"VariableDeclaration","scope":5617,"src":"5145:55:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_AttestationRequestData_$81_memory_ptr_$dyn_memory_ptr","typeString":"struct AttestationRequestData[]"},"typeName":{"baseType":{"id":5591,"nodeType":"UserDefinedTypeName","pathNode":{"id":5590,"name":"AttestationRequestData","nameLocations":["5145:22:25"],"nodeType":"IdentifierPath","referencedDeclaration":81,"src":"5145:22:25"},"referencedDeclaration":81,"src":"5145:22:25","typeDescriptions":{"typeIdentifier":"t_struct$_AttestationRequestData_$81_storage_ptr","typeString":"struct AttestationRequestData"}},"id":5592,"nodeType":"ArrayTypeName","src":"5145:24:25","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_AttestationRequestData_$81_storage_$dyn_storage_ptr","typeString":"struct AttestationRequestData[]"}},"visibility":"internal"}],"id":5600,"initialValue":{"arguments":[{"hexValue":"31","id":5598,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5232:1:25","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":5597,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"5203:28:25","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_struct$_AttestationRequestData_$81_memory_ptr_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (struct AttestationRequestData memory[] memory)"},"typeName":{"baseType":{"id":5595,"nodeType":"UserDefinedTypeName","pathNode":{"id":5594,"name":"AttestationRequestData","nameLocations":["5207:22:25"],"nodeType":"IdentifierPath","referencedDeclaration":81,"src":"5207:22:25"},"referencedDeclaration":81,"src":"5207:22:25","typeDescriptions":{"typeIdentifier":"t_struct$_AttestationRequestData_$81_storage_ptr","typeString":"struct AttestationRequestData"}},"id":5596,"nodeType":"ArrayTypeName","src":"5207:24:25","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_AttestationRequestData_$81_storage_$dyn_storage_ptr","typeString":"struct AttestationRequestData[]"}}},"id":5599,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5203:31:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_AttestationRequestData_$81_memory_ptr_$dyn_memory_ptr","typeString":"struct AttestationRequestData memory[] memory"}},"nodeType":"VariableDeclarationStatement","src":"5145:89:25"},{"expression":{"id":5606,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":5601,"name":"requestData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5593,"src":"5244:11:25","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_AttestationRequestData_$81_memory_ptr_$dyn_memory_ptr","typeString":"struct AttestationRequestData memory[] memory"}},"id":5603,"indexExpression":{"hexValue":"30","id":5602,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5256:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"5244:14:25","typeDescriptions":{"typeIdentifier":"t_struct$_AttestationRequestData_$81_memory_ptr","typeString":"struct AttestationRequestData memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":5604,"name":"request","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5584,"src":"5261:7:25","typeDescriptions":{"typeIdentifier":"t_struct$_AttestationRequest_$87_calldata_ptr","typeString":"struct AttestationRequest calldata"}},"id":5605,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5269:4:25","memberName":"data","nodeType":"MemberAccess","referencedDeclaration":86,"src":"5261:12:25","typeDescriptions":{"typeIdentifier":"t_struct$_AttestationRequestData_$81_calldata_ptr","typeString":"struct AttestationRequestData calldata"}},"src":"5244:29:25","typeDescriptions":{"typeIdentifier":"t_struct$_AttestationRequestData_$81_memory_ptr","typeString":"struct AttestationRequestData memory"}},"id":5607,"nodeType":"ExpressionStatement","src":"5244:29:25"},{"expression":{"arguments":[{"id":5609,"name":"requestData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5593,"src":"5307:11:25","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_AttestationRequestData_$81_memory_ptr_$dyn_memory_ptr","typeString":"struct AttestationRequestData memory[] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_struct$_AttestationRequestData_$81_memory_ptr_$dyn_memory_ptr","typeString":"struct AttestationRequestData memory[] memory"}],"id":5608,"name":"validateCanAttestToRefs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5324,"src":"5283:23:25","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_array$_t_struct$_AttestationRequestData_$81_memory_ptr_$dyn_memory_ptr_$returns$__$","typeString":"function (struct AttestationRequestData memory[] memory) view"}},"id":5610,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5283:36:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5611,"nodeType":"ExpressionStatement","src":"5283:36:25"},{"expression":{"arguments":[{"id":5614,"name":"request","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5584,"src":"5348:7:25","typeDescriptions":{"typeIdentifier":"t_struct$_AttestationRequest_$87_calldata_ptr","typeString":"struct AttestationRequest calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_AttestationRequest_$87_calldata_ptr","typeString":"struct AttestationRequest calldata"}],"expression":{"id":5612,"name":"eas","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5207,"src":"5337:3:25","typeDescriptions":{"typeIdentifier":"t_contract$_IEAS_$346","typeString":"contract IEAS"}},"id":5613,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5341:6:25","memberName":"attest","nodeType":"MemberAccess","referencedDeclaration":215,"src":"5337:10:25","typeDescriptions":{"typeIdentifier":"t_function_external_payable$_t_struct$_AttestationRequest_$87_memory_ptr_$returns$_t_bytes32_$","typeString":"function (struct AttestationRequest memory) payable external returns (bytes32)"}},"id":5615,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5337:19:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":5588,"id":5616,"nodeType":"Return","src":"5330:26:25"}]},"documentation":{"id":5581,"nodeType":"StructuredDocumentation","src":"4980:48:25","text":"\n Perform a single attestation"},"functionSelector":"f17325e7","id":5618,"implemented":true,"kind":"function","modifiers":[],"name":"attest","nameLocation":"5042:6:25","nodeType":"FunctionDefinition","parameters":{"id":5585,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5584,"mutability":"mutable","name":"request","nameLocation":"5086:7:25","nodeType":"VariableDeclaration","scope":5618,"src":"5058:35:25","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_AttestationRequest_$87_calldata_ptr","typeString":"struct AttestationRequest"},"typeName":{"id":5583,"nodeType":"UserDefinedTypeName","pathNode":{"id":5582,"name":"AttestationRequest","nameLocations":["5058:18:25"],"nodeType":"IdentifierPath","referencedDeclaration":87,"src":"5058:18:25"},"referencedDeclaration":87,"src":"5058:18:25","typeDescriptions":{"typeIdentifier":"t_struct$_AttestationRequest_$87_storage_ptr","typeString":"struct AttestationRequest"}},"visibility":"internal"}],"src":"5048:51:25"},"returnParameters":{"id":5588,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5587,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5618,"src":"5126:7:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5586,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5126:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"5125:9:25"},"scope":5815,"src":"5033:330:25","stateMutability":"payable","virtual":false,"visibility":"external"},{"body":{"id":5680,"nodeType":"Block","src":"5700:463:25","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5644,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":5641,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"5718:5:25","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":5642,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5724:9:25","memberName":"timestamp","nodeType":"MemberAccess","src":"5718:15:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"id":5643,"name":"expiry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5631,"src":"5737:6:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5718:25:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5369676e61747572652065787069726564","id":5645,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5745:19:25","typeDescriptions":{"typeIdentifier":"t_stringliteral_99132f8bb903a5d9600420e3899938d8bfd8aa30795f8fee460656e87dd9c517","typeString":"literal_string \"Signature expired\""},"value":"Signature expired"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_99132f8bb903a5d9600420e3899938d8bfd8aa30795f8fee460656e87dd9c517","typeString":"literal_string \"Signature expired\""}],"id":5640,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5710:7:25","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5646,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5710:55:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5647,"nodeType":"ExpressionStatement","src":"5710:55:25"},{"assignments":[5649],"declarations":[{"constant":false,"id":5649,"mutability":"mutable","name":"signer","nameLocation":"5784:6:25","nodeType":"VariableDeclaration","scope":5680,"src":"5776:14:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5648,"name":"address","nodeType":"ElementaryTypeName","src":"5776:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":5658,"initialValue":{"arguments":[{"id":5651,"name":"payloadHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5625,"src":"5828:11:25","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":5652,"name":"nonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5629,"src":"5853:5:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5653,"name":"expiry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5631,"src":"5872:6:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5654,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5633,"src":"5892:1:25","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":5655,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5635,"src":"5907:1:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":5656,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5637,"src":"5922:1:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":5650,"name":"_recoverSignerAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5374,"src":"5793:21:25","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_string_memory_ptr_$_t_uint256_$_t_uint256_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$","typeString":"function (string memory,uint256,uint256,uint8,bytes32,bytes32) view returns (address)"}},"id":5657,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5793:140:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"5776:157:25"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":5662,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5660,"name":"signer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5649,"src":"5964:6:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":5661,"name":"attester","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5627,"src":"5974:8:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"5964:18:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5369676e657220616e642061747465737465722061646472657373657320646f6e2774206d617463682e","id":5663,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5996:44:25","typeDescriptions":{"typeIdentifier":"t_stringliteral_4273fbad0f59c6a7ae7dbee11f68ce4ebedcf6c034c1140f12b6e6f0444ffa6c","typeString":"literal_string \"Signer and attester addresses don't match.\""},"value":"Signer and attester addresses don't match."}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_4273fbad0f59c6a7ae7dbee11f68ce4ebedcf6c034c1140f12b6e6f0444ffa6c","typeString":"literal_string \"Signer and attester addresses don't match.\""}],"id":5659,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5943:7:25","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5664,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5943:107:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5665,"nodeType":"ExpressionStatement","src":"5943:107:25"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5672,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5667,"name":"nonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5629,"src":"6068:5:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":5671,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"6077:16:25","subExpression":{"baseExpression":{"id":5668,"name":"nonces","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5211,"src":"6077:6:25","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":5670,"indexExpression":{"id":5669,"name":"signer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5649,"src":"6084:6:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"6077:14:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6068:25:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e76616c6964206e6f6e6365","id":5673,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6095:15:25","typeDescriptions":{"typeIdentifier":"t_stringliteral_19a9c5fdfc984667e300523283171e2aca8bb9e593f19eef41052fcdbfdb1568","typeString":"literal_string \"Invalid nonce\""},"value":"Invalid nonce"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_19a9c5fdfc984667e300523283171e2aca8bb9e593f19eef41052fcdbfdb1568","typeString":"literal_string \"Invalid nonce\""}],"id":5666,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"6060:7:25","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5674,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6060:51:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5675,"nodeType":"ExpressionStatement","src":"6060:51:25"},{"expression":{"arguments":[{"id":5677,"name":"requestNodes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5623,"src":"6143:12:25","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_AttestationRequestNode_$5232_calldata_ptr_$dyn_calldata_ptr","typeString":"struct Gap.AttestationRequestNode calldata[] calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_struct$_AttestationRequestNode_$5232_calldata_ptr_$dyn_calldata_ptr","typeString":"struct Gap.AttestationRequestNode calldata[] calldata"}],"id":5676,"name":"multiSequentialAttest","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5814,"src":"6121:21:25","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_array$_t_struct$_AttestationRequestNode_$5232_calldata_ptr_$dyn_calldata_ptr_$returns$__$","typeString":"function (struct Gap.AttestationRequestNode calldata[] calldata)"}},"id":5678,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6121:35:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5679,"nodeType":"ExpressionStatement","src":"6121:35:25"}]},"documentation":{"id":5619,"nodeType":"StructuredDocumentation","src":"5369:60:25","text":"\n Performs multi attestations by signature"},"functionSelector":"5ea677e9","id":5681,"implemented":true,"kind":"function","modifiers":[],"name":"multiAttestBySig","nameLocation":"5443:16:25","nodeType":"FunctionDefinition","parameters":{"id":5638,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5623,"mutability":"mutable","name":"requestNodes","nameLocation":"5503:12:25","nodeType":"VariableDeclaration","scope":5681,"src":"5469:46:25","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_AttestationRequestNode_$5232_calldata_ptr_$dyn_calldata_ptr","typeString":"struct Gap.AttestationRequestNode[]"},"typeName":{"baseType":{"id":5621,"nodeType":"UserDefinedTypeName","pathNode":{"id":5620,"name":"AttestationRequestNode","nameLocations":["5469:22:25"],"nodeType":"IdentifierPath","referencedDeclaration":5232,"src":"5469:22:25"},"referencedDeclaration":5232,"src":"5469:22:25","typeDescriptions":{"typeIdentifier":"t_struct$_AttestationRequestNode_$5232_storage_ptr","typeString":"struct Gap.AttestationRequestNode"}},"id":5622,"nodeType":"ArrayTypeName","src":"5469:24:25","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_AttestationRequestNode_$5232_storage_$dyn_storage_ptr","typeString":"struct Gap.AttestationRequestNode[]"}},"visibility":"internal"},{"constant":false,"id":5625,"mutability":"mutable","name":"payloadHash","nameLocation":"5539:11:25","nodeType":"VariableDeclaration","scope":5681,"src":"5525:25:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":5624,"name":"string","nodeType":"ElementaryTypeName","src":"5525:6:25","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":5627,"mutability":"mutable","name":"attester","nameLocation":"5568:8:25","nodeType":"VariableDeclaration","scope":5681,"src":"5560:16:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5626,"name":"address","nodeType":"ElementaryTypeName","src":"5560:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5629,"mutability":"mutable","name":"nonce","nameLocation":"5594:5:25","nodeType":"VariableDeclaration","scope":5681,"src":"5586:13:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5628,"name":"uint256","nodeType":"ElementaryTypeName","src":"5586:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5631,"mutability":"mutable","name":"expiry","nameLocation":"5617:6:25","nodeType":"VariableDeclaration","scope":5681,"src":"5609:14:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5630,"name":"uint256","nodeType":"ElementaryTypeName","src":"5609:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5633,"mutability":"mutable","name":"v","nameLocation":"5639:1:25","nodeType":"VariableDeclaration","scope":5681,"src":"5633:7:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":5632,"name":"uint8","nodeType":"ElementaryTypeName","src":"5633:5:25","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":5635,"mutability":"mutable","name":"r","nameLocation":"5658:1:25","nodeType":"VariableDeclaration","scope":5681,"src":"5650:9:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5634,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5650:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":5637,"mutability":"mutable","name":"s","nameLocation":"5677:1:25","nodeType":"VariableDeclaration","scope":5681,"src":"5669:9:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5636,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5669:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"5459:225:25"},"returnParameters":{"id":5639,"nodeType":"ParameterList","parameters":[],"src":"5700:0:25"},"scope":5815,"src":"5434:729:25","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":5813,"nodeType":"Block","src":"6496:1170:25","statements":[{"assignments":[5694],"declarations":[{"constant":false,"id":5694,"mutability":"mutable","name":"totalUids","nameLocation":"6525:9:25","nodeType":"VariableDeclaration","scope":5813,"src":"6506:28:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_array$_t_bytes32_$dyn_memory_ptr_$dyn_memory_ptr","typeString":"bytes32[][]"},"typeName":{"baseType":{"baseType":{"id":5691,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6506:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":5692,"nodeType":"ArrayTypeName","src":"6506:9:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"id":5693,"nodeType":"ArrayTypeName","src":"6506:11:25","typeDescriptions":{"typeIdentifier":"t_array$_t_array$_t_bytes32_$dyn_storage_$dyn_storage_ptr","typeString":"bytes32[][]"}},"visibility":"internal"}],"id":5702,"initialValue":{"arguments":[{"expression":{"id":5699,"name":"requestNodes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5686,"src":"6553:12:25","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_AttestationRequestNode_$5232_calldata_ptr_$dyn_calldata_ptr","typeString":"struct Gap.AttestationRequestNode calldata[] calldata"}},"id":5700,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6566:6:25","memberName":"length","nodeType":"MemberAccess","src":"6553:19:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5698,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"6537:15:25","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_array$_t_bytes32_$dyn_memory_ptr_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (bytes32[] memory[] memory)"},"typeName":{"baseType":{"baseType":{"id":5695,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6541:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":5696,"nodeType":"ArrayTypeName","src":"6541:9:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"id":5697,"nodeType":"ArrayTypeName","src":"6541:11:25","typeDescriptions":{"typeIdentifier":"t_array$_t_array$_t_bytes32_$dyn_storage_$dyn_storage_ptr","typeString":"bytes32[][]"}}},"id":5701,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6537:36:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_array$_t_bytes32_$dyn_memory_ptr_$dyn_memory_ptr","typeString":"bytes32[] memory[] memory"}},"nodeType":"VariableDeclarationStatement","src":"6506:67:25"},{"body":{"id":5811,"nodeType":"Block","src":"6634:1026:25","statements":[{"assignments":[5716],"declarations":[{"constant":false,"id":5716,"mutability":"mutable","name":"request","nameLocation":"6679:7:25","nodeType":"VariableDeclaration","scope":5811,"src":"6648:38:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_MultiAttestationRequest_$105_memory_ptr","typeString":"struct MultiAttestationRequest"},"typeName":{"id":5715,"nodeType":"UserDefinedTypeName","pathNode":{"id":5714,"name":"MultiAttestationRequest","nameLocations":["6648:23:25"],"nodeType":"IdentifierPath","referencedDeclaration":105,"src":"6648:23:25"},"referencedDeclaration":105,"src":"6648:23:25","typeDescriptions":{"typeIdentifier":"t_struct$_MultiAttestationRequest_$105_storage_ptr","typeString":"struct MultiAttestationRequest"}},"visibility":"internal"}],"id":5721,"initialValue":{"expression":{"baseExpression":{"id":5717,"name":"requestNodes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5686,"src":"6689:12:25","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_AttestationRequestNode_$5232_calldata_ptr_$dyn_calldata_ptr","typeString":"struct Gap.AttestationRequestNode calldata[] calldata"}},"id":5719,"indexExpression":{"id":5718,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5704,"src":"6702:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6689:15:25","typeDescriptions":{"typeIdentifier":"t_struct$_AttestationRequestNode_$5232_calldata_ptr","typeString":"struct Gap.AttestationRequestNode calldata"}},"id":5720,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6722:12:25","memberName":"multiRequest","nodeType":"MemberAccess","referencedDeclaration":5229,"src":"6689:45:25","typeDescriptions":{"typeIdentifier":"t_struct$_MultiAttestationRequest_$105_calldata_ptr","typeString":"struct MultiAttestationRequest calldata"}},"nodeType":"VariableDeclarationStatement","src":"6648:86:25"},{"expression":{"arguments":[{"expression":{"id":5723,"name":"request","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5716,"src":"6901:7:25","typeDescriptions":{"typeIdentifier":"t_struct$_MultiAttestationRequest_$105_memory_ptr","typeString":"struct MultiAttestationRequest memory"}},"id":5724,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6909:4:25","memberName":"data","nodeType":"MemberAccess","referencedDeclaration":104,"src":"6901:12:25","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_AttestationRequestData_$81_memory_ptr_$dyn_memory_ptr","typeString":"struct AttestationRequestData memory[] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_struct$_AttestationRequestData_$81_memory_ptr_$dyn_memory_ptr","typeString":"struct AttestationRequestData memory[] memory"}],"id":5722,"name":"validateCanAttestToRefs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5324,"src":"6877:23:25","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_array$_t_struct$_AttestationRequestData_$81_memory_ptr_$dyn_memory_ptr_$returns$__$","typeString":"function (struct AttestationRequestData memory[] memory) view"}},"id":5725,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6877:37:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5726,"nodeType":"ExpressionStatement","src":"6877:37:25"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5729,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5727,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5704,"src":"6996:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":5728,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7000:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6996:5:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5783,"nodeType":"IfStatement","src":"6992:462:25","trueBody":{"id":5782,"nodeType":"Block","src":"7003:451:25","statements":[{"body":{"id":5780,"nodeType":"Block","src":"7071:369:25","statements":[{"assignments":[5744],"declarations":[{"constant":false,"id":5744,"mutability":"mutable","name":"data","nameLocation":"7123:4:25","nodeType":"VariableDeclaration","scope":5780,"src":"7093:34:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_AttestationRequestData_$81_memory_ptr","typeString":"struct AttestationRequestData"},"typeName":{"id":5743,"nodeType":"UserDefinedTypeName","pathNode":{"id":5742,"name":"AttestationRequestData","nameLocations":["7093:22:25"],"nodeType":"IdentifierPath","referencedDeclaration":81,"src":"7093:22:25"},"referencedDeclaration":81,"src":"7093:22:25","typeDescriptions":{"typeIdentifier":"t_struct$_AttestationRequestData_$81_storage_ptr","typeString":"struct AttestationRequestData"}},"visibility":"internal"}],"id":5749,"initialValue":{"baseExpression":{"expression":{"id":5745,"name":"request","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5716,"src":"7130:7:25","typeDescriptions":{"typeIdentifier":"t_struct$_MultiAttestationRequest_$105_memory_ptr","typeString":"struct MultiAttestationRequest memory"}},"id":5746,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7138:4:25","memberName":"data","nodeType":"MemberAccess","referencedDeclaration":104,"src":"7130:12:25","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_AttestationRequestData_$81_memory_ptr_$dyn_memory_ptr","typeString":"struct AttestationRequestData memory[] memory"}},"id":5748,"indexExpression":{"id":5747,"name":"j","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5731,"src":"7143:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7130:15:25","typeDescriptions":{"typeIdentifier":"t_struct$_AttestationRequestData_$81_memory_ptr","typeString":"struct AttestationRequestData memory"}},"nodeType":"VariableDeclarationStatement","src":"7093:52:25"},{"condition":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":5756,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":5750,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5744,"src":"7248:4:25","typeDescriptions":{"typeIdentifier":"t_struct$_AttestationRequestData_$81_memory_ptr","typeString":"struct AttestationRequestData memory"}},"id":5751,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7253:6:25","memberName":"refUID","nodeType":"MemberAccess","referencedDeclaration":76,"src":"7248:11:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":5754,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7271:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":5753,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7263:7:25","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":5752,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7263:7:25","typeDescriptions":{}}},"id":5755,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7263:10:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"7248:25:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5779,"nodeType":"IfStatement","src":"7244:178:25","trueBody":{"id":5778,"nodeType":"Block","src":"7275:147:25","statements":[{"expression":{"id":5768,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":5757,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5744,"src":"7301:4:25","typeDescriptions":{"typeIdentifier":"t_struct$_AttestationRequestData_$81_memory_ptr","typeString":"struct AttestationRequestData memory"}},"id":5759,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"7306:6:25","memberName":"refUID","nodeType":"MemberAccess","referencedDeclaration":76,"src":"7301:11:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"baseExpression":{"id":5760,"name":"totalUids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5694,"src":"7315:9:25","typeDescriptions":{"typeIdentifier":"t_array$_t_array$_t_bytes32_$dyn_memory_ptr_$dyn_memory_ptr","typeString":"bytes32[] memory[] memory"}},"id":5765,"indexExpression":{"expression":{"baseExpression":{"id":5761,"name":"requestNodes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5686,"src":"7325:12:25","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_AttestationRequestNode_$5232_calldata_ptr_$dyn_calldata_ptr","typeString":"struct Gap.AttestationRequestNode calldata[] calldata"}},"id":5763,"indexExpression":{"id":5762,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5704,"src":"7338:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7325:15:25","typeDescriptions":{"typeIdentifier":"t_struct$_AttestationRequestNode_$5232_calldata_ptr","typeString":"struct Gap.AttestationRequestNode calldata"}},"id":5764,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7341:6:25","memberName":"refIdx","nodeType":"MemberAccess","referencedDeclaration":5231,"src":"7325:22:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7315:33:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":5767,"indexExpression":{"hexValue":"30","id":5766,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7349:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7315:36:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"7301:50:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":5769,"nodeType":"ExpressionStatement","src":"7301:50:25"},{"expression":{"id":5776,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"id":5770,"name":"request","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5716,"src":"7377:7:25","typeDescriptions":{"typeIdentifier":"t_struct$_MultiAttestationRequest_$105_memory_ptr","typeString":"struct MultiAttestationRequest memory"}},"id":5773,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7385:4:25","memberName":"data","nodeType":"MemberAccess","referencedDeclaration":104,"src":"7377:12:25","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_AttestationRequestData_$81_memory_ptr_$dyn_memory_ptr","typeString":"struct AttestationRequestData memory[] memory"}},"id":5774,"indexExpression":{"id":5772,"name":"j","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5731,"src":"7390:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"7377:15:25","typeDescriptions":{"typeIdentifier":"t_struct$_AttestationRequestData_$81_memory_ptr","typeString":"struct AttestationRequestData memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":5775,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5744,"src":"7395:4:25","typeDescriptions":{"typeIdentifier":"t_struct$_AttestationRequestData_$81_memory_ptr","typeString":"struct AttestationRequestData memory"}},"src":"7377:22:25","typeDescriptions":{"typeIdentifier":"t_struct$_AttestationRequestData_$81_memory_ptr","typeString":"struct AttestationRequestData memory"}},"id":5777,"nodeType":"ExpressionStatement","src":"7377:22:25"}]}}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5738,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5734,"name":"j","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5731,"src":"7041:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"expression":{"id":5735,"name":"request","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5716,"src":"7045:7:25","typeDescriptions":{"typeIdentifier":"t_struct$_MultiAttestationRequest_$105_memory_ptr","typeString":"struct MultiAttestationRequest memory"}},"id":5736,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7053:4:25","memberName":"data","nodeType":"MemberAccess","referencedDeclaration":104,"src":"7045:12:25","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_AttestationRequestData_$81_memory_ptr_$dyn_memory_ptr","typeString":"struct AttestationRequestData memory[] memory"}},"id":5737,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7058:6:25","memberName":"length","nodeType":"MemberAccess","src":"7045:19:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7041:23:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5781,"initializationExpression":{"assignments":[5731],"declarations":[{"constant":false,"id":5731,"mutability":"mutable","name":"j","nameLocation":"7034:1:25","nodeType":"VariableDeclaration","scope":5781,"src":"7026:9:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5730,"name":"uint256","nodeType":"ElementaryTypeName","src":"7026:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5733,"initialValue":{"hexValue":"30","id":5732,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7038:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"7026:13:25"},"loopExpression":{"expression":{"id":5740,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"7066:3:25","subExpression":{"id":5739,"name":"j","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5731,"src":"7066:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5741,"nodeType":"ExpressionStatement","src":"7066:3:25"},"nodeType":"ForStatement","src":"7021:419:25"}]}},{"assignments":[5788],"declarations":[{"constant":false,"id":5788,"mutability":"mutable","name":"requests","nameLocation":"7517:8:25","nodeType":"VariableDeclaration","scope":5811,"src":"7468:57:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_MultiAttestationRequest_$105_memory_ptr_$dyn_memory_ptr","typeString":"struct MultiAttestationRequest[]"},"typeName":{"baseType":{"id":5786,"nodeType":"UserDefinedTypeName","pathNode":{"id":5785,"name":"MultiAttestationRequest","nameLocations":["7468:23:25"],"nodeType":"IdentifierPath","referencedDeclaration":105,"src":"7468:23:25"},"referencedDeclaration":105,"src":"7468:23:25","typeDescriptions":{"typeIdentifier":"t_struct$_MultiAttestationRequest_$105_storage_ptr","typeString":"struct MultiAttestationRequest"}},"id":5787,"nodeType":"ArrayTypeName","src":"7468:25:25","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_MultiAttestationRequest_$105_storage_$dyn_storage_ptr","typeString":"struct MultiAttestationRequest[]"}},"visibility":"internal"}],"id":5795,"initialValue":{"arguments":[{"hexValue":"31","id":5793,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7558:1:25","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":5792,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"7528:29:25","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_struct$_MultiAttestationRequest_$105_memory_ptr_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (struct MultiAttestationRequest memory[] memory)"},"typeName":{"baseType":{"id":5790,"nodeType":"UserDefinedTypeName","pathNode":{"id":5789,"name":"MultiAttestationRequest","nameLocations":["7532:23:25"],"nodeType":"IdentifierPath","referencedDeclaration":105,"src":"7532:23:25"},"referencedDeclaration":105,"src":"7532:23:25","typeDescriptions":{"typeIdentifier":"t_struct$_MultiAttestationRequest_$105_storage_ptr","typeString":"struct MultiAttestationRequest"}},"id":5791,"nodeType":"ArrayTypeName","src":"7532:25:25","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_MultiAttestationRequest_$105_storage_$dyn_storage_ptr","typeString":"struct MultiAttestationRequest[]"}}},"id":5794,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7528:32:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_MultiAttestationRequest_$105_memory_ptr_$dyn_memory_ptr","typeString":"struct MultiAttestationRequest memory[] memory"}},"nodeType":"VariableDeclarationStatement","src":"7468:92:25"},{"expression":{"id":5800,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":5796,"name":"requests","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5788,"src":"7574:8:25","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_MultiAttestationRequest_$105_memory_ptr_$dyn_memory_ptr","typeString":"struct MultiAttestationRequest memory[] memory"}},"id":5798,"indexExpression":{"hexValue":"30","id":5797,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7583:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"7574:11:25","typeDescriptions":{"typeIdentifier":"t_struct$_MultiAttestationRequest_$105_memory_ptr","typeString":"struct MultiAttestationRequest memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":5799,"name":"request","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5716,"src":"7588:7:25","typeDescriptions":{"typeIdentifier":"t_struct$_MultiAttestationRequest_$105_memory_ptr","typeString":"struct MultiAttestationRequest memory"}},"src":"7574:21:25","typeDescriptions":{"typeIdentifier":"t_struct$_MultiAttestationRequest_$105_memory_ptr","typeString":"struct MultiAttestationRequest memory"}},"id":5801,"nodeType":"ExpressionStatement","src":"7574:21:25"},{"expression":{"id":5809,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":5802,"name":"totalUids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5694,"src":"7609:9:25","typeDescriptions":{"typeIdentifier":"t_array$_t_array$_t_bytes32_$dyn_memory_ptr_$dyn_memory_ptr","typeString":"bytes32[] memory[] memory"}},"id":5804,"indexExpression":{"id":5803,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5704,"src":"7619:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"7609:12:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":5807,"name":"requests","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5788,"src":"7640:8:25","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_MultiAttestationRequest_$105_memory_ptr_$dyn_memory_ptr","typeString":"struct MultiAttestationRequest memory[] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_struct$_MultiAttestationRequest_$105_memory_ptr_$dyn_memory_ptr","typeString":"struct MultiAttestationRequest memory[] memory"}],"expression":{"id":5805,"name":"eas","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5207,"src":"7624:3:25","typeDescriptions":{"typeIdentifier":"t_contract$_IEAS_$346","typeString":"contract IEAS"}},"id":5806,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7628:11:25","memberName":"multiAttest","nodeType":"MemberAccess","referencedDeclaration":235,"src":"7624:15:25","typeDescriptions":{"typeIdentifier":"t_function_external_payable$_t_array$_t_struct$_MultiAttestationRequest_$105_memory_ptr_$dyn_memory_ptr_$returns$_t_array$_t_bytes32_$dyn_memory_ptr_$","typeString":"function (struct MultiAttestationRequest memory[] memory) payable external returns (bytes32[] memory)"}},"id":5808,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7624:25:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"src":"7609:40:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":5810,"nodeType":"ExpressionStatement","src":"7609:40:25"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5710,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5707,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5704,"src":"6604:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":5708,"name":"requestNodes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5686,"src":"6608:12:25","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_AttestationRequestNode_$5232_calldata_ptr_$dyn_calldata_ptr","typeString":"struct Gap.AttestationRequestNode calldata[] calldata"}},"id":5709,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6621:6:25","memberName":"length","nodeType":"MemberAccess","src":"6608:19:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6604:23:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5812,"initializationExpression":{"assignments":[5704],"declarations":[{"constant":false,"id":5704,"mutability":"mutable","name":"i","nameLocation":"6597:1:25","nodeType":"VariableDeclaration","scope":5812,"src":"6589:9:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5703,"name":"uint256","nodeType":"ElementaryTypeName","src":"6589:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5706,"initialValue":{"hexValue":"30","id":5705,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6601:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"6589:13:25"},"loopExpression":{"expression":{"id":5712,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"6629:3:25","subExpression":{"id":5711,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5704,"src":"6629:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5713,"nodeType":"ExpressionStatement","src":"6629:3:25"},"nodeType":"ForStatement","src":"6584:1076:25"}]},"documentation":{"id":5682,"nodeType":"StructuredDocumentation","src":"6169:222:25","text":"\n Performs a multi attest with relations between attestations and\n assess for attesation permissions based on the parent attestation.\n If refUID is set in any attestation it will be ignored."},"functionSelector":"5913a31c","id":5814,"implemented":true,"kind":"function","modifiers":[],"name":"multiSequentialAttest","nameLocation":"6405:21:25","nodeType":"FunctionDefinition","parameters":{"id":5687,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5686,"mutability":"mutable","name":"requestNodes","nameLocation":"6470:12:25","nodeType":"VariableDeclaration","scope":5814,"src":"6436:46:25","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_AttestationRequestNode_$5232_calldata_ptr_$dyn_calldata_ptr","typeString":"struct Gap.AttestationRequestNode[]"},"typeName":{"baseType":{"id":5684,"nodeType":"UserDefinedTypeName","pathNode":{"id":5683,"name":"AttestationRequestNode","nameLocations":["6436:22:25"],"nodeType":"IdentifierPath","referencedDeclaration":5232,"src":"6436:22:25"},"referencedDeclaration":5232,"src":"6436:22:25","typeDescriptions":{"typeIdentifier":"t_struct$_AttestationRequestNode_$5232_storage_ptr","typeString":"struct Gap.AttestationRequestNode"}},"id":5685,"nodeType":"ArrayTypeName","src":"6436:24:25","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_AttestationRequestNode_$5232_storage_$dyn_storage_ptr","typeString":"struct Gap.AttestationRequestNode[]"}},"visibility":"internal"}],"src":"6426:62:25"},"returnParameters":{"id":5688,"nodeType":"ParameterList","parameters":[],"src":"6496:0:25"},"scope":5815,"src":"6396:1270:25","stateMutability":"nonpayable","virtual":false,"visibility":"public"}],"scope":5816,"src":"549:7119:25","usedErrors":[]}],"src":"33:7636:25"},"id":25},"contracts/ICommunityResolver.sol":{"ast":{"absolutePath":"contracts/ICommunityResolver.sol","exportedSymbols":{"ICommunityResolver":[5831],"ISchemaResolver":[510]},"id":5832,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":5817,"literals":["solidity","^","0.8",".19"],"nodeType":"PragmaDirective","src":"33:24:26"},{"absolutePath":"@ethereum-attestation-service/eas-contracts/contracts/resolver/ISchemaResolver.sol","file":"@ethereum-attestation-service/eas-contracts/contracts/resolver/ISchemaResolver.sol","id":5819,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5832,"sourceUnit":511,"src":"61:115:26","symbolAliases":[{"foreign":{"id":5818,"name":"ISchemaResolver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":510,"src":"69:15:26","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":5820,"name":"ISchemaResolver","nameLocations":["212:15:26"],"nodeType":"IdentifierPath","referencedDeclaration":510,"src":"212:15:26"},"id":5821,"nodeType":"InheritanceSpecifier","src":"212:15:26"}],"canonicalName":"ICommunityResolver","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":5831,"linearizedBaseContracts":[5831,510],"name":"ICommunityResolver","nameLocation":"190:18:26","nodeType":"ContractDefinition","nodes":[{"functionSelector":"b75dbb8e","id":5830,"implemented":false,"kind":"function","modifiers":[],"name":"isAdmin","nameLocation":"244:7:26","nodeType":"FunctionDefinition","parameters":{"id":5826,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5823,"mutability":"mutable","name":"communityUID","nameLocation":"260:12:26","nodeType":"VariableDeclaration","scope":5830,"src":"252:20:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5822,"name":"bytes32","nodeType":"ElementaryTypeName","src":"252:7:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":5825,"mutability":"mutable","name":"addr","nameLocation":"282:4:26","nodeType":"VariableDeclaration","scope":5830,"src":"274:12:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5824,"name":"address","nodeType":"ElementaryTypeName","src":"274:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"251:36:26"},"returnParameters":{"id":5829,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5828,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5830,"src":"306:4:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5827,"name":"bool","nodeType":"ElementaryTypeName","src":"306:4:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"305:6:26"},"scope":5831,"src":"235:77:26","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":5832,"src":"180:135:26","usedErrors":[]}],"src":"33:284:26"},"id":26},"contracts/MilestoneStatusResolver.sol":{"ast":{"absolutePath":"contracts/MilestoneStatusResolver.sol","exportedSymbols":{"AddressUpgradeable":[1475],"Attestation":[45],"ContextUpgradeable":[1517],"ICommunityResolver":[5831],"IEAS":[346],"Initializable":[1145],"MilestoneStatusResolver":[6194],"OwnableUpgradeable":[951],"SchemaResolver":[819]},"id":6195,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":5833,"literals":["solidity","0.8",".19"],"nodeType":"PragmaDirective","src":"33:23:27"},{"absolutePath":"@ethereum-attestation-service/eas-contracts/contracts/resolver/SchemaResolver.sol","file":"@ethereum-attestation-service/eas-contracts/contracts/resolver/SchemaResolver.sol","id":5835,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":6195,"sourceUnit":820,"src":"58:113:27","symbolAliases":[{"foreign":{"id":5834,"name":"SchemaResolver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":819,"src":"66:14:27","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@ethereum-attestation-service/eas-contracts/contracts/IEAS.sol","file":"@ethereum-attestation-service/eas-contracts/contracts/IEAS.sol","id":5837,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":6195,"sourceUnit":347,"src":"172:84:27","symbolAliases":[{"foreign":{"id":5836,"name":"IEAS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":346,"src":"180:4:27","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"contracts/ICommunityResolver.sol","file":"./ICommunityResolver.sol","id":5839,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":6195,"sourceUnit":5832,"src":"257:60:27","symbolAliases":[{"foreign":{"id":5838,"name":"ICommunityResolver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5831,"src":"265:18:27","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@ethereum-attestation-service/eas-contracts/contracts/Common.sol","file":"@ethereum-attestation-service/eas-contracts/contracts/Common.sol","id":5841,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":6195,"sourceUnit":62,"src":"318:93:27","symbolAliases":[{"foreign":{"id":5840,"name":"Attestation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":45,"src":"326:11:27","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","id":5842,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":6195,"sourceUnit":1146,"src":"412:75:27","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol","file":"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol","id":5843,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":6195,"sourceUnit":952,"src":"488:75:27","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":5844,"name":"SchemaResolver","nameLocations":["605:14:27"],"nodeType":"IdentifierPath","referencedDeclaration":819,"src":"605:14:27"},"id":5845,"nodeType":"InheritanceSpecifier","src":"605:14:27"},{"baseName":{"id":5846,"name":"Initializable","nameLocations":["625:13:27"],"nodeType":"IdentifierPath","referencedDeclaration":1145,"src":"625:13:27"},"id":5847,"nodeType":"InheritanceSpecifier","src":"625:13:27"},{"baseName":{"id":5848,"name":"OwnableUpgradeable","nameLocations":["644:18:27"],"nodeType":"IdentifierPath","referencedDeclaration":951,"src":"644:18:27"},"id":5849,"nodeType":"InheritanceSpecifier","src":"644:18:27"}],"canonicalName":"MilestoneStatusResolver","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":6194,"linearizedBaseContracts":[6194,951,1517,1145,819,454,510],"name":"MilestoneStatusResolver","nameLocation":"574:23:27","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":5851,"mutability":"mutable","name":"_owner","nameLocation":"685:6:27","nodeType":"VariableDeclaration","scope":6194,"src":"669:22:27","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5850,"name":"address","nodeType":"ElementaryTypeName","src":"669:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"private"},{"constant":false,"id":5854,"mutability":"mutable","name":"communityResolver","nameLocation":"716:17:27","nodeType":"VariableDeclaration","scope":6194,"src":"697:36:27","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_ICommunityResolver_$5831","typeString":"contract ICommunityResolver"},"typeName":{"id":5853,"nodeType":"UserDefinedTypeName","pathNode":{"id":5852,"name":"ICommunityResolver","nameLocations":["697:18:27"],"nodeType":"IdentifierPath","referencedDeclaration":5831,"src":"697:18:27"},"referencedDeclaration":5831,"src":"697:18:27","typeDescriptions":{"typeIdentifier":"t_contract$_ICommunityResolver_$5831","typeString":"contract ICommunityResolver"}},"visibility":"internal"},{"constant":false,"id":5856,"mutability":"mutable","name":"approvedHash","nameLocation":"756:12:27","nodeType":"VariableDeclaration","scope":6194,"src":"740:28:27","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5855,"name":"bytes32","nodeType":"ElementaryTypeName","src":"740:7:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"private"},{"constant":false,"id":5858,"mutability":"mutable","name":"completedHash","nameLocation":"790:13:27","nodeType":"VariableDeclaration","scope":6194,"src":"774:29:27","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5857,"name":"bytes32","nodeType":"ElementaryTypeName","src":"774:7:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"private"},{"constant":false,"id":5860,"mutability":"mutable","name":"rejectedHash","nameLocation":"825:12:27","nodeType":"VariableDeclaration","scope":6194,"src":"809:28:27","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5859,"name":"bytes32","nodeType":"ElementaryTypeName","src":"809:7:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"private"},{"body":{"id":5873,"nodeType":"Block","src":"939:39:27","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":5870,"name":"_disableInitializers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1126,"src":"949:20:27","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":5871,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"949:22:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5872,"nodeType":"ExpressionStatement","src":"949:22:27"}]},"documentation":{"id":5861,"nodeType":"StructuredDocumentation","src":"844:48:27","text":"@custom:oz-upgrades-unsafe-allow constructor"},"id":5874,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"id":5867,"name":"eas","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5864,"src":"934:3:27","typeDescriptions":{"typeIdentifier":"t_contract$_IEAS_$346","typeString":"contract IEAS"}}],"id":5868,"kind":"baseConstructorSpecifier","modifierName":{"id":5866,"name":"SchemaResolver","nameLocations":["919:14:27"],"nodeType":"IdentifierPath","referencedDeclaration":819,"src":"919:14:27"},"nodeType":"ModifierInvocation","src":"919:19:27"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":5865,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5864,"mutability":"mutable","name":"eas","nameLocation":"914:3:27","nodeType":"VariableDeclaration","scope":5874,"src":"909:8:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IEAS_$346","typeString":"contract IEAS"},"typeName":{"id":5863,"nodeType":"UserDefinedTypeName","pathNode":{"id":5862,"name":"IEAS","nameLocations":["909:4:27"],"nodeType":"IdentifierPath","referencedDeclaration":346,"src":"909:4:27"},"referencedDeclaration":346,"src":"909:4:27","typeDescriptions":{"typeIdentifier":"t_contract$_IEAS_$346","typeString":"contract IEAS"}},"visibility":"internal"}],"src":"908:10:27"},"returnParameters":{"id":5869,"nodeType":"ParameterList","parameters":[],"src":"939:0:27"},"scope":6194,"src":"897:81:27","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":5921,"nodeType":"Block","src":"1052:294:27","statements":[{"expression":{"id":5885,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5882,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5851,"src":"1062:6:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":5883,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1071:3:27","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5884,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1075:6:27","memberName":"sender","nodeType":"MemberAccess","src":"1071:10:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1062:19:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":5886,"nodeType":"ExpressionStatement","src":"1062:19:27"},{"expression":{"id":5889,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5887,"name":"communityResolver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5854,"src":"1091:17:27","typeDescriptions":{"typeIdentifier":"t_contract$_ICommunityResolver_$5831","typeString":"contract ICommunityResolver"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":5888,"name":"resolver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5877,"src":"1111:8:27","typeDescriptions":{"typeIdentifier":"t_contract$_ICommunityResolver_$5831","typeString":"contract ICommunityResolver"}},"src":"1091:28:27","typeDescriptions":{"typeIdentifier":"t_contract$_ICommunityResolver_$5831","typeString":"contract ICommunityResolver"}},"id":5890,"nodeType":"ExpressionStatement","src":"1091:28:27"},{"expression":{"id":5898,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5891,"name":"approvedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5856,"src":"1129:12:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"arguments":[{"hexValue":"617070726f766564","id":5895,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1171:10:27","typeDescriptions":{"typeIdentifier":"t_stringliteral_2b29265fc125740ae6bbc5035ae7af720b6932f4a3e44ba5ac02955c21ca9a05","typeString":"literal_string \"approved\""},"value":"approved"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_2b29265fc125740ae6bbc5035ae7af720b6932f4a3e44ba5ac02955c21ca9a05","typeString":"literal_string \"approved\""}],"expression":{"id":5893,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1154:3:27","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":5894,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1158:12:27","memberName":"encodePacked","nodeType":"MemberAccess","src":"1154:16:27","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":5896,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1154:28:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":5892,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"1144:9:27","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":5897,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1144:39:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"1129:54:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":5899,"nodeType":"ExpressionStatement","src":"1129:54:27"},{"expression":{"id":5907,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5900,"name":"completedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5858,"src":"1193:13:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"arguments":[{"hexValue":"636f6d706c65746564","id":5904,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1236:11:27","typeDescriptions":{"typeIdentifier":"t_stringliteral_6216ba39af4188a6d7c765710d7e6075007c3444b59a22a973d1b958c43e60bb","typeString":"literal_string \"completed\""},"value":"completed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_6216ba39af4188a6d7c765710d7e6075007c3444b59a22a973d1b958c43e60bb","typeString":"literal_string \"completed\""}],"expression":{"id":5902,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1219:3:27","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":5903,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1223:12:27","memberName":"encodePacked","nodeType":"MemberAccess","src":"1219:16:27","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":5905,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1219:29:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":5901,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"1209:9:27","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":5906,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1209:40:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"1193:56:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":5908,"nodeType":"ExpressionStatement","src":"1193:56:27"},{"expression":{"id":5916,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5909,"name":"rejectedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5860,"src":"1259:12:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"arguments":[{"hexValue":"72656a6563746564","id":5913,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1301:10:27","typeDescriptions":{"typeIdentifier":"t_stringliteral_5e679716a01be890d854f2c1c5cb5336603215e65ff238044a5b11c586f61c1d","typeString":"literal_string \"rejected\""},"value":"rejected"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_5e679716a01be890d854f2c1c5cb5336603215e65ff238044a5b11c586f61c1d","typeString":"literal_string \"rejected\""}],"expression":{"id":5911,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1284:3:27","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":5912,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1288:12:27","memberName":"encodePacked","nodeType":"MemberAccess","src":"1284:16:27","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":5914,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1284:28:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":5910,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"1274:9:27","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":5915,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1274:39:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"1259:54:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":5917,"nodeType":"ExpressionStatement","src":"1259:54:27"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":5918,"name":"__Ownable_init","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":846,"src":"1323:14:27","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":5919,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1323:16:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5920,"nodeType":"ExpressionStatement","src":"1323:16:27"}]},"functionSelector":"c4d66de8","id":5922,"implemented":true,"kind":"function","modifiers":[{"id":5880,"kind":"modifierInvocation","modifierName":{"id":5879,"name":"initializer","nameLocations":["1040:11:27"],"nodeType":"IdentifierPath","referencedDeclaration":1047,"src":"1040:11:27"},"nodeType":"ModifierInvocation","src":"1040:11:27"}],"name":"initialize","nameLocation":"993:10:27","nodeType":"FunctionDefinition","parameters":{"id":5878,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5877,"mutability":"mutable","name":"resolver","nameLocation":"1023:8:27","nodeType":"VariableDeclaration","scope":5922,"src":"1004:27:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_ICommunityResolver_$5831","typeString":"contract ICommunityResolver"},"typeName":{"id":5876,"nodeType":"UserDefinedTypeName","pathNode":{"id":5875,"name":"ICommunityResolver","nameLocations":["1004:18:27"],"nodeType":"IdentifierPath","referencedDeclaration":5831,"src":"1004:18:27"},"referencedDeclaration":5831,"src":"1004:18:27","typeDescriptions":{"typeIdentifier":"t_contract$_ICommunityResolver_$5831","typeString":"contract ICommunityResolver"}},"visibility":"internal"}],"src":"1003:29:27"},"returnParameters":{"id":5881,"nodeType":"ParameterList","parameters":[],"src":"1052:0:27"},"scope":6194,"src":"984:362:27","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":5941,"nodeType":"Block","src":"1503:98:27","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":5933,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":5930,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1521:3:27","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5931,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1525:6:27","memberName":"sender","nodeType":"MemberAccess","src":"1521:10:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":5932,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5851,"src":"1535:6:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1521:20:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4e6f74206f776e65722e","id":5934,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1543:12:27","typeDescriptions":{"typeIdentifier":"t_stringliteral_bf2878a0327c5efcb59586051281508822c0d430e7858d25ba3f27d805f4146d","typeString":"literal_string \"Not owner.\""},"value":"Not owner."}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_bf2878a0327c5efcb59586051281508822c0d430e7858d25ba3f27d805f4146d","typeString":"literal_string \"Not owner.\""}],"id":5929,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1513:7:27","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5935,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1513:43:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5936,"nodeType":"ExpressionStatement","src":"1513:43:27"},{"expression":{"id":5939,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5937,"name":"communityResolver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5854,"src":"1566:17:27","typeDescriptions":{"typeIdentifier":"t_contract$_ICommunityResolver_$5831","typeString":"contract ICommunityResolver"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":5938,"name":"resolver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5926,"src":"1586:8:27","typeDescriptions":{"typeIdentifier":"t_contract$_ICommunityResolver_$5831","typeString":"contract ICommunityResolver"}},"src":"1566:28:27","typeDescriptions":{"typeIdentifier":"t_contract$_ICommunityResolver_$5831","typeString":"contract ICommunityResolver"}},"id":5940,"nodeType":"ExpressionStatement","src":"1566:28:27"}]},"documentation":{"id":5923,"nodeType":"StructuredDocumentation","src":"1352:75:27","text":" Set the community resolver to check for admin privileges"},"functionSelector":"f39f43e3","id":5942,"implemented":true,"kind":"function","modifiers":[],"name":"changeCommunityResolver","nameLocation":"1441:23:27","nodeType":"FunctionDefinition","parameters":{"id":5927,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5926,"mutability":"mutable","name":"resolver","nameLocation":"1484:8:27","nodeType":"VariableDeclaration","scope":5942,"src":"1465:27:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_ICommunityResolver_$5831","typeString":"contract ICommunityResolver"},"typeName":{"id":5925,"nodeType":"UserDefinedTypeName","pathNode":{"id":5924,"name":"ICommunityResolver","nameLocations":["1465:18:27"],"nodeType":"IdentifierPath","referencedDeclaration":5831,"src":"1465:18:27"},"referencedDeclaration":5831,"src":"1465:18:27","typeDescriptions":{"typeIdentifier":"t_contract$_ICommunityResolver_$5831","typeString":"contract ICommunityResolver"}},"visibility":"internal"}],"src":"1464:29:27"},"returnParameters":{"id":5928,"nodeType":"ParameterList","parameters":[],"src":"1503:0:27"},"scope":6194,"src":"1432:169:27","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":5958,"nodeType":"Block","src":"1820:69:27","statements":[{"expression":{"arguments":[{"id":5954,"name":"communityUID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5945,"src":"1863:12:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":5955,"name":"addr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5947,"src":"1877:4:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":5952,"name":"communityResolver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5854,"src":"1837:17:27","typeDescriptions":{"typeIdentifier":"t_contract$_ICommunityResolver_$5831","typeString":"contract ICommunityResolver"}},"id":5953,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1855:7:27","memberName":"isAdmin","nodeType":"MemberAccess","referencedDeclaration":5830,"src":"1837:25:27","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) external returns (bool)"}},"id":5956,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1837:45:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":5951,"id":5957,"nodeType":"Return","src":"1830:52:27"}]},"documentation":{"id":5943,"nodeType":"StructuredDocumentation","src":"1607:101:27","text":" Calls community resolver whitelist to check if address is\n a community admin"},"id":5959,"implemented":true,"kind":"function","modifiers":[],"name":"isCommunityAdmin","nameLocation":"1722:16:27","nodeType":"FunctionDefinition","parameters":{"id":5948,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5945,"mutability":"mutable","name":"communityUID","nameLocation":"1756:12:27","nodeType":"VariableDeclaration","scope":5959,"src":"1748:20:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5944,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1748:7:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":5947,"mutability":"mutable","name":"addr","nameLocation":"1786:4:27","nodeType":"VariableDeclaration","scope":5959,"src":"1778:12:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5946,"name":"address","nodeType":"ElementaryTypeName","src":"1778:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1738:58:27"},"returnParameters":{"id":5951,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5950,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5959,"src":"1814:4:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5949,"name":"bool","nodeType":"ElementaryTypeName","src":"1814:4:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1813:6:27"},"scope":6194,"src":"1713:176:27","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":6008,"nodeType":"Block","src":"2124:370:27","statements":[{"assignments":[5968,null],"declarations":[{"constant":false,"id":5968,"mutability":"mutable","name":"type_","nameLocation":"2149:5:27","nodeType":"VariableDeclaration","scope":6008,"src":"2135:19:27","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":5967,"name":"string","nodeType":"ElementaryTypeName","src":"2135:6:27","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},null],"id":5978,"initialValue":{"arguments":[{"id":5971,"name":"milestoneData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5962,"src":"2171:13:27","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"components":[{"id":5973,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2187:6:27","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":5972,"name":"string","nodeType":"ElementaryTypeName","src":"2187:6:27","typeDescriptions":{}}},{"id":5975,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2195:6:27","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":5974,"name":"string","nodeType":"ElementaryTypeName","src":"2195:6:27","typeDescriptions":{}}}],"id":5976,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"2186:16:27","typeDescriptions":{"typeIdentifier":"t_tuple$_t_type$_t_string_storage_ptr_$_$_t_type$_t_string_storage_ptr_$_$","typeString":"tuple(type(string storage pointer),type(string storage pointer))"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_tuple$_t_type$_t_string_storage_ptr_$_$_t_type$_t_string_storage_ptr_$_$","typeString":"tuple(type(string storage pointer),type(string storage pointer))"}],"expression":{"id":5969,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"2160:3:27","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":5970,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2164:6:27","memberName":"decode","nodeType":"MemberAccess","src":"2160:10:27","typeDescriptions":{"typeIdentifier":"t_function_abidecode_pure$__$returns$__$","typeString":"function () pure"}},"id":5977,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2160:43:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_string_memory_ptr_$_t_string_memory_ptr_$","typeString":"tuple(string memory,string memory)"}},"nodeType":"VariableDeclarationStatement","src":"2134:69:27"},{"expression":{"id":5986,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5979,"name":"typeHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5965,"src":"2214:8:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"arguments":[{"id":5983,"name":"type_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5968,"src":"2252:5:27","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"expression":{"id":5981,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"2235:3:27","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":5982,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2239:12:27","memberName":"encodePacked","nodeType":"MemberAccess","src":"2235:16:27","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":5984,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2235:23:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":5980,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"2225:9:27","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":5985,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2225:34:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"2214:45:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":5987,"nodeType":"ExpressionStatement","src":"2214:45:27"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":5998,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":5994,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":5990,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5988,"name":"typeHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5965,"src":"2287:8:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":5989,"name":"approvedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5856,"src":"2299:12:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"2287:24:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":5993,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5991,"name":"typeHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5965,"src":"2327:8:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":5992,"name":"completedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5858,"src":"2339:13:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"2327:25:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"2287:65:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":5997,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5995,"name":"typeHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5965,"src":"2368:8:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":5996,"name":"rejectedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5860,"src":"2380:12:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"2368:24:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"2287:105:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6004,"nodeType":"IfStatement","src":"2270:190:27","trueBody":{"id":6003,"nodeType":"Block","src":"2403:57:27","statements":[{"expression":{"arguments":[{"hexValue":"496e76616c696420617070726f76616c20747970652e","id":6000,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2424:24:27","typeDescriptions":{"typeIdentifier":"t_stringliteral_d3fa315f0692cefa5147859dc5bcffd7cd5202c8eef9347371d8c490e123f860","typeString":"literal_string \"Invalid approval type.\""},"value":"Invalid approval type."}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_d3fa315f0692cefa5147859dc5bcffd7cd5202c8eef9347371d8c490e123f860","typeString":"literal_string \"Invalid approval type.\""}],"id":5999,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"2417:6:27","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":6001,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2417:32:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6002,"nodeType":"ExpressionStatement","src":"2417:32:27"}]}},{"expression":{"components":[{"id":6005,"name":"typeHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5965,"src":"2478:8:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":6006,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2477:10:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":5966,"id":6007,"nodeType":"Return","src":"2470:17:27"}]},"documentation":{"id":5960,"nodeType":"StructuredDocumentation","src":"1895:109:27","text":" Decodes the milestone schema\n @return typeHash \"approved\" | \"rejected\" | \"completed\""},"functionSelector":"4a47bb60","id":6009,"implemented":true,"kind":"function","modifiers":[],"name":"getMilestoneApprovalType","nameLocation":"2018:24:27","nodeType":"FunctionDefinition","parameters":{"id":5963,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5962,"mutability":"mutable","name":"milestoneData","nameLocation":"2065:13:27","nodeType":"VariableDeclaration","scope":6009,"src":"2052:26:27","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":5961,"name":"bytes","nodeType":"ElementaryTypeName","src":"2052:5:27","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2042:42:27"},"returnParameters":{"id":5966,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5965,"mutability":"mutable","name":"typeHash","nameLocation":"2114:8:27","nodeType":"VariableDeclaration","scope":6009,"src":"2106:16:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5964,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2106:7:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2105:18:27"},"scope":6194,"src":"2009:485:27","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":6025,"nodeType":"Block","src":"2688:56:27","statements":[{"expression":{"arguments":[{"id":6019,"name":"grantData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6012,"src":"2716:9:27","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"components":[{"id":6021,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2728:7:27","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":6020,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2728:7:27","typeDescriptions":{}}}],"id":6022,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"2727:9:27","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"}],"expression":{"id":6017,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"2705:3:27","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":6018,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2709:6:27","memberName":"decode","nodeType":"MemberAccess","src":"2705:10:27","typeDescriptions":{"typeIdentifier":"t_function_abidecode_pure$__$returns$__$","typeString":"function () pure"}},"id":6023,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2705:32:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":6016,"id":6024,"nodeType":"Return","src":"2698:39:27"}]},"documentation":{"id":6010,"nodeType":"StructuredDocumentation","src":"2500:85:27","text":" Decodes the grant schema\n @return the referred community UID"},"functionSelector":"cd2c78b8","id":6026,"implemented":true,"kind":"function","modifiers":[],"name":"getGrantCommunityUID","nameLocation":"2599:20:27","nodeType":"FunctionDefinition","parameters":{"id":6013,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6012,"mutability":"mutable","name":"grantData","nameLocation":"2642:9:27","nodeType":"VariableDeclaration","scope":6026,"src":"2629:22:27","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":6011,"name":"bytes","nodeType":"ElementaryTypeName","src":"2629:5:27","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2619:38:27"},"returnParameters":{"id":6016,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6015,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6026,"src":"2679:7:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":6014,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2679:7:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2678:9:27"},"scope":6194,"src":"2590:154:27","stateMutability":"pure","virtual":false,"visibility":"public"},{"baseFunctions":[790],"body":{"id":6178,"nodeType":"Block","src":"2876:1354:27","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":6044,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":6038,"name":"attestation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6029,"src":"2894:11:27","typeDescriptions":{"typeIdentifier":"t_struct$_Attestation_$45_calldata_ptr","typeString":"struct Attestation calldata"}},"id":6039,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2906:6:27","memberName":"refUID","nodeType":"MemberAccess","referencedDeclaration":36,"src":"2894:18:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":6042,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2924:1:27","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":6041,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2916:7:27","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":6040,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2916:7:27","typeDescriptions":{}}},"id":6043,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2916:10:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"2894:32:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e76616c6964207265666572726564206d696c6573746f6e65","id":6045,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2928:28:27","typeDescriptions":{"typeIdentifier":"t_stringliteral_c8d92ba241a01d394399edff03dbdd829b53a5aee4d8b9ac9494e05c9df945d7","typeString":"literal_string \"Invalid referred milestone\""},"value":"Invalid referred milestone"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_c8d92ba241a01d394399edff03dbdd829b53a5aee4d8b9ac9494e05c9df945d7","typeString":"literal_string \"Invalid referred milestone\""}],"id":6037,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2886:7:27","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":6046,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2886:71:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6047,"nodeType":"ExpressionStatement","src":"2886:71:27"},{"assignments":[6049],"declarations":[{"constant":false,"id":6049,"mutability":"mutable","name":"typeHash","nameLocation":"2975:8:27","nodeType":"VariableDeclaration","scope":6178,"src":"2967:16:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":6048,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2967:7:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":6054,"initialValue":{"arguments":[{"expression":{"id":6051,"name":"attestation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6029,"src":"3011:11:27","typeDescriptions":{"typeIdentifier":"t_struct$_Attestation_$45_calldata_ptr","typeString":"struct Attestation calldata"}},"id":6052,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3023:4:27","memberName":"data","nodeType":"MemberAccess","referencedDeclaration":44,"src":"3011:16:27","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}],"id":6050,"name":"getMilestoneApprovalType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6009,"src":"2986:24:27","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) view returns (bytes32)"}},"id":6053,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2986:42:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"2967:61:27"},{"assignments":[6057],"declarations":[{"constant":false,"id":6057,"mutability":"mutable","name":"milestone","nameLocation":"3058:9:27","nodeType":"VariableDeclaration","scope":6178,"src":"3039:28:27","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Attestation_$45_memory_ptr","typeString":"struct Attestation"},"typeName":{"id":6056,"nodeType":"UserDefinedTypeName","pathNode":{"id":6055,"name":"Attestation","nameLocations":["3039:11:27"],"nodeType":"IdentifierPath","referencedDeclaration":45,"src":"3039:11:27"},"referencedDeclaration":45,"src":"3039:11:27","typeDescriptions":{"typeIdentifier":"t_struct$_Attestation_$45_storage_ptr","typeString":"struct Attestation"}},"visibility":"internal"}],"id":6063,"initialValue":{"arguments":[{"expression":{"id":6060,"name":"attestation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6029,"src":"3090:11:27","typeDescriptions":{"typeIdentifier":"t_struct$_Attestation_$45_calldata_ptr","typeString":"struct Attestation calldata"}},"id":6061,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3102:6:27","memberName":"refUID","nodeType":"MemberAccess","referencedDeclaration":36,"src":"3090:18:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":6058,"name":"_eas","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":536,"src":"3070:4:27","typeDescriptions":{"typeIdentifier":"t_contract$_IEAS_$346","typeString":"contract IEAS"}},"id":6059,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3075:14:27","memberName":"getAttestation","nodeType":"MemberAccess","referencedDeclaration":319,"src":"3070:19:27","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_bytes32_$returns$_t_struct$_Attestation_$45_memory_ptr_$","typeString":"function (bytes32) view external returns (struct Attestation memory)"}},"id":6062,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3070:39:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Attestation_$45_memory_ptr","typeString":"struct Attestation memory"}},"nodeType":"VariableDeclarationStatement","src":"3039:70:27"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":6071,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":6065,"name":"milestone","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6057,"src":"3127:9:27","typeDescriptions":{"typeIdentifier":"t_struct$_Attestation_$45_memory_ptr","typeString":"struct Attestation memory"}},"id":6066,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3137:3:27","memberName":"uid","nodeType":"MemberAccess","referencedDeclaration":26,"src":"3127:13:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":6069,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3152:1:27","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":6068,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3144:7:27","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":6067,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3144:7:27","typeDescriptions":{}}},"id":6070,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3144:10:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"3127:27:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e76616c6964206d696c6573746f6e65207265666572656e6365","id":6072,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3156:29:27","typeDescriptions":{"typeIdentifier":"t_stringliteral_904dc0e9fab3e65a75e96a21689602e2df418289adcd3917bdf2ae7f9f8c078b","typeString":"literal_string \"Invalid milestone reference\""},"value":"Invalid milestone reference"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_904dc0e9fab3e65a75e96a21689602e2df418289adcd3917bdf2ae7f9f8c078b","typeString":"literal_string \"Invalid milestone reference\""}],"id":6064,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3119:7:27","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":6073,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3119:67:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6074,"nodeType":"ExpressionStatement","src":"3119:67:27"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":6082,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":6076,"name":"milestone","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6057,"src":"3217:9:27","typeDescriptions":{"typeIdentifier":"t_struct$_Attestation_$45_memory_ptr","typeString":"struct Attestation memory"}},"id":6077,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3227:6:27","memberName":"refUID","nodeType":"MemberAccess","referencedDeclaration":36,"src":"3217:16:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":6080,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3245:1:27","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":6079,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3237:7:27","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":6078,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3237:7:27","typeDescriptions":{}}},"id":6081,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3237:10:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"3217:30:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e76616c6964206772616e74207265666572656e6365206f6e206d696c6573746f6e65","id":6083,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3261:38:27","typeDescriptions":{"typeIdentifier":"t_stringliteral_097b7dfef69a49741fd5f77b6fb5b8e666d014c06d719bb64cca3fac9d4602b3","typeString":"literal_string \"Invalid grant reference on milestone\""},"value":"Invalid grant reference on milestone"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_097b7dfef69a49741fd5f77b6fb5b8e666d014c06d719bb64cca3fac9d4602b3","typeString":"literal_string \"Invalid grant reference on milestone\""}],"id":6075,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3196:7:27","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":6084,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3196:113:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6085,"nodeType":"ExpressionStatement","src":"3196:113:27"},{"assignments":[6088],"declarations":[{"constant":false,"id":6088,"mutability":"mutable","name":"grant","nameLocation":"3339:5:27","nodeType":"VariableDeclaration","scope":6178,"src":"3320:24:27","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Attestation_$45_memory_ptr","typeString":"struct Attestation"},"typeName":{"id":6087,"nodeType":"UserDefinedTypeName","pathNode":{"id":6086,"name":"Attestation","nameLocations":["3320:11:27"],"nodeType":"IdentifierPath","referencedDeclaration":45,"src":"3320:11:27"},"referencedDeclaration":45,"src":"3320:11:27","typeDescriptions":{"typeIdentifier":"t_struct$_Attestation_$45_storage_ptr","typeString":"struct Attestation"}},"visibility":"internal"}],"id":6094,"initialValue":{"arguments":[{"expression":{"id":6091,"name":"milestone","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6057,"src":"3367:9:27","typeDescriptions":{"typeIdentifier":"t_struct$_Attestation_$45_memory_ptr","typeString":"struct Attestation memory"}},"id":6092,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3377:6:27","memberName":"refUID","nodeType":"MemberAccess","referencedDeclaration":36,"src":"3367:16:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":6089,"name":"_eas","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":536,"src":"3347:4:27","typeDescriptions":{"typeIdentifier":"t_contract$_IEAS_$346","typeString":"contract IEAS"}},"id":6090,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3352:14:27","memberName":"getAttestation","nodeType":"MemberAccess","referencedDeclaration":319,"src":"3347:19:27","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_bytes32_$returns$_t_struct$_Attestation_$45_memory_ptr_$","typeString":"function (bytes32) view external returns (struct Attestation memory)"}},"id":6093,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3347:37:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Attestation_$45_memory_ptr","typeString":"struct Attestation memory"}},"nodeType":"VariableDeclarationStatement","src":"3320:64:27"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":6102,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":6096,"name":"grant","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6088,"src":"3402:5:27","typeDescriptions":{"typeIdentifier":"t_struct$_Attestation_$45_memory_ptr","typeString":"struct Attestation memory"}},"id":6097,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3408:3:27","memberName":"uid","nodeType":"MemberAccess","referencedDeclaration":26,"src":"3402:9:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":6100,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3423:1:27","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":6099,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3415:7:27","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":6098,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3415:7:27","typeDescriptions":{}}},"id":6101,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3415:10:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"3402:23:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e76616c6964206772616e74207265666572656e6365","id":6103,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3427:25:27","typeDescriptions":{"typeIdentifier":"t_stringliteral_6d7436c5ac5ad34ac90d2a8c36871f55305b7c9e8280bed97bf6354cc8438858","typeString":"literal_string \"Invalid grant reference\""},"value":"Invalid grant reference"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_6d7436c5ac5ad34ac90d2a8c36871f55305b7c9e8280bed97bf6354cc8438858","typeString":"literal_string \"Invalid grant reference\""}],"id":6095,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3394:7:27","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":6104,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3394:59:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6105,"nodeType":"ExpressionStatement","src":"3394:59:27"},{"assignments":[6107],"declarations":[{"constant":false,"id":6107,"mutability":"mutable","name":"communityUID","nameLocation":"3471:12:27","nodeType":"VariableDeclaration","scope":6178,"src":"3463:20:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":6106,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3463:7:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":6112,"initialValue":{"arguments":[{"expression":{"id":6109,"name":"grant","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6088,"src":"3507:5:27","typeDescriptions":{"typeIdentifier":"t_struct$_Attestation_$45_memory_ptr","typeString":"struct Attestation memory"}},"id":6110,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3513:4:27","memberName":"data","nodeType":"MemberAccess","referencedDeclaration":44,"src":"3507:10:27","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":6108,"name":"getGrantCommunityUID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6026,"src":"3486:20:27","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":6111,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3486:32:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"3463:55:27"},{"assignments":[6114],"declarations":[{"constant":false,"id":6114,"mutability":"mutable","name":"communityAdmin","nameLocation":"3534:14:27","nodeType":"VariableDeclaration","scope":6178,"src":"3529:19:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":6113,"name":"bool","nodeType":"ElementaryTypeName","src":"3529:4:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":6120,"initialValue":{"arguments":[{"id":6116,"name":"communityUID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6107,"src":"3581:12:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"expression":{"id":6117,"name":"attestation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6029,"src":"3607:11:27","typeDescriptions":{"typeIdentifier":"t_struct$_Attestation_$45_calldata_ptr","typeString":"struct Attestation calldata"}},"id":6118,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3619:8:27","memberName":"attester","nodeType":"MemberAccess","referencedDeclaration":40,"src":"3607:20:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":6115,"name":"isCommunityAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5959,"src":"3551:16:27","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) returns (bool)"}},"id":6119,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3551:86:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"VariableDeclarationStatement","src":"3529:108:27"},{"condition":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":6123,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6121,"name":"typeHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6049,"src":"3652:8:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":6122,"name":"completedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5858,"src":"3664:13:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"3652:25:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":6148,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":6144,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6142,"name":"typeHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6049,"src":"3929:8:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":6143,"name":"rejectedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5860,"src":"3941:12:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"3929:24:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":6147,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6145,"name":"typeHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6049,"src":"3957:8:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":6146,"name":"approvedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5856,"src":"3969:12:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"3957:24:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3929:52:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6174,"nodeType":"IfStatement","src":"3925:278:27","trueBody":{"id":6173,"nodeType":"Block","src":"3983:220:27","statements":[{"expression":{"arguments":[{"id":6150,"name":"communityAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6114,"src":"4005:14:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4e6f74206f776e6572","id":6151,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4021:11:27","typeDescriptions":{"typeIdentifier":"t_stringliteral_c266efca4f4ed37612271196433531dcbb4fca89a694d568d1e290e32feb1682","typeString":"literal_string \"Not owner\""},"value":"Not owner"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_c266efca4f4ed37612271196433531dcbb4fca89a694d568d1e290e32feb1682","typeString":"literal_string \"Not owner\""}],"id":6149,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3997:7:27","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":6152,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3997:36:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6153,"nodeType":"ExpressionStatement","src":"3997:36:27"},{"assignments":[6156],"declarations":[{"constant":false,"id":6156,"mutability":"mutable","name":"community","nameLocation":"4066:9:27","nodeType":"VariableDeclaration","scope":6173,"src":"4047:28:27","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Attestation_$45_memory_ptr","typeString":"struct Attestation"},"typeName":{"id":6155,"nodeType":"UserDefinedTypeName","pathNode":{"id":6154,"name":"Attestation","nameLocations":["4047:11:27"],"nodeType":"IdentifierPath","referencedDeclaration":45,"src":"4047:11:27"},"referencedDeclaration":45,"src":"4047:11:27","typeDescriptions":{"typeIdentifier":"t_struct$_Attestation_$45_storage_ptr","typeString":"struct Attestation"}},"visibility":"internal"}],"id":6161,"initialValue":{"arguments":[{"id":6159,"name":"communityUID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6107,"src":"4098:12:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":6157,"name":"_eas","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":536,"src":"4078:4:27","typeDescriptions":{"typeIdentifier":"t_contract$_IEAS_$346","typeString":"contract IEAS"}},"id":6158,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4083:14:27","memberName":"getAttestation","nodeType":"MemberAccess","referencedDeclaration":319,"src":"4078:19:27","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_bytes32_$returns$_t_struct$_Attestation_$45_memory_ptr_$","typeString":"function (bytes32) view external returns (struct Attestation memory)"}},"id":6160,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4078:33:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Attestation_$45_memory_ptr","typeString":"struct Attestation memory"}},"nodeType":"VariableDeclarationStatement","src":"4047:64:27"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":6169,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":6163,"name":"community","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6156,"src":"4133:9:27","typeDescriptions":{"typeIdentifier":"t_struct$_Attestation_$45_memory_ptr","typeString":"struct Attestation memory"}},"id":6164,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4143:3:27","memberName":"uid","nodeType":"MemberAccess","referencedDeclaration":26,"src":"4133:13:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":6167,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4158:1:27","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":6166,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4150:7:27","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":6165,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4150:7:27","typeDescriptions":{}}},"id":6168,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4150:10:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"4133:27:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e76616c696420636f6d6d756e697479207265666572656e6365","id":6170,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4162:29:27","typeDescriptions":{"typeIdentifier":"t_stringliteral_6280dcc46e5ffd6accac4e830af14125986da285d00557ee32e5749338ab89d7","typeString":"literal_string \"Invalid community reference\""},"value":"Invalid community reference"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_6280dcc46e5ffd6accac4e830af14125986da285d00557ee32e5749338ab89d7","typeString":"literal_string \"Invalid community reference\""}],"id":6162,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4125:7:27","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":6171,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4125:67:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6172,"nodeType":"ExpressionStatement","src":"4125:67:27"}]}},"id":6175,"nodeType":"IfStatement","src":"3648:555:27","trueBody":{"id":6141,"nodeType":"Block","src":"3679:240:27","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":6137,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":6135,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":6129,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":6125,"name":"milestone","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6057,"src":"3718:9:27","typeDescriptions":{"typeIdentifier":"t_struct$_Attestation_$45_memory_ptr","typeString":"struct Attestation memory"}},"id":6126,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3728:8:27","memberName":"attester","nodeType":"MemberAccess","referencedDeclaration":40,"src":"3718:18:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":6127,"name":"attestation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6029,"src":"3740:11:27","typeDescriptions":{"typeIdentifier":"t_struct$_Attestation_$45_calldata_ptr","typeString":"struct Attestation calldata"}},"id":6128,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3752:8:27","memberName":"attester","nodeType":"MemberAccess","referencedDeclaration":40,"src":"3740:20:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3718:42:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":6134,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":6130,"name":"milestone","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6057,"src":"3784:9:27","typeDescriptions":{"typeIdentifier":"t_struct$_Attestation_$45_memory_ptr","typeString":"struct Attestation memory"}},"id":6131,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3794:9:27","memberName":"recipient","nodeType":"MemberAccess","referencedDeclaration":38,"src":"3784:19:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":6132,"name":"attestation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6029,"src":"3807:11:27","typeDescriptions":{"typeIdentifier":"t_struct$_Attestation_$45_calldata_ptr","typeString":"struct Attestation calldata"}},"id":6133,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3819:8:27","memberName":"attester","nodeType":"MemberAccess","referencedDeclaration":40,"src":"3807:20:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3784:43:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3718:109:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"id":6136,"name":"communityAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6114,"src":"3851:14:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3718:147:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4e6f742061646d696e","id":6138,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3883:11:27","typeDescriptions":{"typeIdentifier":"t_stringliteral_fa7e120cf98867f00c0ac28b387a73caec64b93b1889065f7b4c5e5232c0bad6","typeString":"literal_string \"Not admin\""},"value":"Not admin"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_fa7e120cf98867f00c0ac28b387a73caec64b93b1889065f7b4c5e5232c0bad6","typeString":"literal_string \"Not admin\""}],"id":6124,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3693:7:27","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":6139,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3693:215:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6140,"nodeType":"ExpressionStatement","src":"3693:215:27"}]}},{"expression":{"hexValue":"74727565","id":6176,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"4219:4:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":6036,"id":6177,"nodeType":"Return","src":"4212:11:27"}]},"id":6179,"implemented":true,"kind":"function","modifiers":[],"name":"onAttest","nameLocation":"2759:8:27","nodeType":"FunctionDefinition","overrides":{"id":6033,"nodeType":"OverrideSpecifier","overrides":[],"src":"2852:8:27"},"parameters":{"id":6032,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6029,"mutability":"mutable","name":"attestation","nameLocation":"2798:11:27","nodeType":"VariableDeclaration","scope":6179,"src":"2777:32:27","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_Attestation_$45_calldata_ptr","typeString":"struct Attestation"},"typeName":{"id":6028,"nodeType":"UserDefinedTypeName","pathNode":{"id":6027,"name":"Attestation","nameLocations":["2777:11:27"],"nodeType":"IdentifierPath","referencedDeclaration":45,"src":"2777:11:27"},"referencedDeclaration":45,"src":"2777:11:27","typeDescriptions":{"typeIdentifier":"t_struct$_Attestation_$45_storage_ptr","typeString":"struct Attestation"}},"visibility":"internal"},{"constant":false,"id":6031,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6179,"src":"2819:7:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6030,"name":"uint256","nodeType":"ElementaryTypeName","src":"2819:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2767:75:27"},"returnParameters":{"id":6036,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6035,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6179,"src":"2870:4:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":6034,"name":"bool","nodeType":"ElementaryTypeName","src":"2870:4:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2869:6:27"},"scope":6194,"src":"2750:1480:27","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"baseFunctions":[801],"body":{"id":6192,"nodeType":"Block","src":"4371:28:27","statements":[{"expression":{"hexValue":"74727565","id":6190,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"4388:4:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":6189,"id":6191,"nodeType":"Return","src":"4381:11:27"}]},"id":6193,"implemented":true,"kind":"function","modifiers":[],"name":"onRevoke","nameLocation":"4245:8:27","nodeType":"FunctionDefinition","overrides":{"id":6186,"nodeType":"OverrideSpecifier","overrides":[],"src":"4347:8:27"},"parameters":{"id":6185,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6182,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6193,"src":"4263:20:27","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_Attestation_$45_calldata_ptr","typeString":"struct Attestation"},"typeName":{"id":6181,"nodeType":"UserDefinedTypeName","pathNode":{"id":6180,"name":"Attestation","nameLocations":["4263:11:27"],"nodeType":"IdentifierPath","referencedDeclaration":45,"src":"4263:11:27"},"referencedDeclaration":45,"src":"4263:11:27","typeDescriptions":{"typeIdentifier":"t_struct$_Attestation_$45_storage_ptr","typeString":"struct Attestation"}},"visibility":"internal"},{"constant":false,"id":6184,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6193,"src":"4309:7:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6183,"name":"uint256","nodeType":"ElementaryTypeName","src":"4309:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4253:79:27"},"returnParameters":{"id":6189,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6188,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6193,"src":"4365:4:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":6187,"name":"bool","nodeType":"ElementaryTypeName","src":"4365:4:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4364:6:27"},"scope":6194,"src":"4236:163:27","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":6195,"src":"565:3836:27","usedErrors":[11,529,531,533]}],"src":"33:4369:27"},"id":27},"contracts/ReferrerResolver.sol":{"ast":{"absolutePath":"contracts/ReferrerResolver.sol","exportedSymbols":{"AddressUpgradeable":[1475],"Attestation":[45],"ContextUpgradeable":[1517],"IEAS":[346],"Initializable":[1145],"OwnableUpgradeable":[951],"ReferrerResolver":[6318],"SchemaResolver":[819]},"id":6319,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":6196,"literals":["solidity","0.8",".19"],"nodeType":"PragmaDirective","src":"33:23:28"},{"absolutePath":"@ethereum-attestation-service/eas-contracts/contracts/resolver/SchemaResolver.sol","file":"@ethereum-attestation-service/eas-contracts/contracts/resolver/SchemaResolver.sol","id":6198,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":6319,"sourceUnit":820,"src":"58:113:28","symbolAliases":[{"foreign":{"id":6197,"name":"SchemaResolver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":819,"src":"66:14:28","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@ethereum-attestation-service/eas-contracts/contracts/IEAS.sol","file":"@ethereum-attestation-service/eas-contracts/contracts/IEAS.sol","id":6200,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":6319,"sourceUnit":347,"src":"172:84:28","symbolAliases":[{"foreign":{"id":6199,"name":"IEAS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":346,"src":"180:4:28","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@ethereum-attestation-service/eas-contracts/contracts/Common.sol","file":"@ethereum-attestation-service/eas-contracts/contracts/Common.sol","id":6202,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":6319,"sourceUnit":62,"src":"257:93:28","symbolAliases":[{"foreign":{"id":6201,"name":"Attestation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":45,"src":"265:11:28","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","id":6203,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":6319,"sourceUnit":1146,"src":"351:75:28","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol","file":"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol","id":6204,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":6319,"sourceUnit":952,"src":"427:75:28","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":6205,"name":"SchemaResolver","nameLocations":["533:14:28"],"nodeType":"IdentifierPath","referencedDeclaration":819,"src":"533:14:28"},"id":6206,"nodeType":"InheritanceSpecifier","src":"533:14:28"},{"baseName":{"id":6207,"name":"Initializable","nameLocations":["549:13:28"],"nodeType":"IdentifierPath","referencedDeclaration":1145,"src":"549:13:28"},"id":6208,"nodeType":"InheritanceSpecifier","src":"549:13:28"},{"baseName":{"id":6209,"name":"OwnableUpgradeable","nameLocations":["564:18:28"],"nodeType":"IdentifierPath","referencedDeclaration":951,"src":"564:18:28"},"id":6210,"nodeType":"InheritanceSpecifier","src":"564:18:28"}],"canonicalName":"ReferrerResolver","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":6318,"linearizedBaseContracts":[6318,951,1517,1145,819,454,510],"name":"ReferrerResolver","nameLocation":"513:16:28","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":6212,"mutability":"mutable","name":"_owner","nameLocation":"605:6:28","nodeType":"VariableDeclaration","scope":6318,"src":"589:22:28","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6211,"name":"address","nodeType":"ElementaryTypeName","src":"589:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"private"},{"body":{"id":6225,"nodeType":"Block","src":"713:39:28","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":6222,"name":"_disableInitializers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1126,"src":"723:20:28","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":6223,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"723:22:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6224,"nodeType":"ExpressionStatement","src":"723:22:28"}]},"documentation":{"id":6213,"nodeType":"StructuredDocumentation","src":"618:48:28","text":"@custom:oz-upgrades-unsafe-allow constructor"},"id":6226,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"id":6219,"name":"eas","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6216,"src":"708:3:28","typeDescriptions":{"typeIdentifier":"t_contract$_IEAS_$346","typeString":"contract IEAS"}}],"id":6220,"kind":"baseConstructorSpecifier","modifierName":{"id":6218,"name":"SchemaResolver","nameLocations":["693:14:28"],"nodeType":"IdentifierPath","referencedDeclaration":819,"src":"693:14:28"},"nodeType":"ModifierInvocation","src":"693:19:28"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":6217,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6216,"mutability":"mutable","name":"eas","nameLocation":"688:3:28","nodeType":"VariableDeclaration","scope":6226,"src":"683:8:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IEAS_$346","typeString":"contract IEAS"},"typeName":{"id":6215,"nodeType":"UserDefinedTypeName","pathNode":{"id":6214,"name":"IEAS","nameLocations":["683:4:28"],"nodeType":"IdentifierPath","referencedDeclaration":346,"src":"683:4:28"},"referencedDeclaration":346,"src":"683:4:28","typeDescriptions":{"typeIdentifier":"t_contract$_IEAS_$346","typeString":"contract IEAS"}},"visibility":"internal"}],"src":"682:10:28"},"returnParameters":{"id":6221,"nodeType":"ParameterList","parameters":[],"src":"713:0:28"},"scope":6318,"src":"671:81:28","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":6239,"nodeType":"Block","src":"799:62:28","statements":[{"expression":{"id":6234,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":6231,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6212,"src":"809:6:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":6232,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"818:3:28","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":6233,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"822:6:28","memberName":"sender","nodeType":"MemberAccess","src":"818:10:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"809:19:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":6235,"nodeType":"ExpressionStatement","src":"809:19:28"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":6236,"name":"__Ownable_init","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":846,"src":"838:14:28","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":6237,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"838:16:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6238,"nodeType":"ExpressionStatement","src":"838:16:28"}]},"functionSelector":"8129fc1c","id":6240,"implemented":true,"kind":"function","modifiers":[{"id":6229,"kind":"modifierInvocation","modifierName":{"id":6228,"name":"initializer","nameLocations":["787:11:28"],"nodeType":"IdentifierPath","referencedDeclaration":1047,"src":"787:11:28"},"nodeType":"ModifierInvocation","src":"787:11:28"}],"name":"initialize","nameLocation":"767:10:28","nodeType":"FunctionDefinition","parameters":{"id":6227,"nodeType":"ParameterList","parameters":[],"src":"777:2:28"},"returnParameters":{"id":6230,"nodeType":"ParameterList","parameters":[],"src":"799:0:28"},"scope":6318,"src":"758:103:28","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"baseFunctions":[790],"body":{"id":6302,"nodeType":"Block","src":"998:476:28","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":6257,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":6251,"name":"attestation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6243,"src":"1012:11:28","typeDescriptions":{"typeIdentifier":"t_struct$_Attestation_$45_calldata_ptr","typeString":"struct Attestation calldata"}},"id":6252,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1024:6:28","memberName":"refUID","nodeType":"MemberAccess","referencedDeclaration":36,"src":"1012:18:28","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":6255,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1042:1:28","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":6254,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1034:7:28","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":6253,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1034:7:28","typeDescriptions":{}}},"id":6256,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1034:10:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"1012:32:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6299,"nodeType":"IfStatement","src":"1008:439:28","trueBody":{"id":6298,"nodeType":"Block","src":"1046:401:28","statements":[{"assignments":[6260],"declarations":[{"constant":false,"id":6260,"mutability":"mutable","name":"ref","nameLocation":"1079:3:28","nodeType":"VariableDeclaration","scope":6298,"src":"1060:22:28","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Attestation_$45_memory_ptr","typeString":"struct Attestation"},"typeName":{"id":6259,"nodeType":"UserDefinedTypeName","pathNode":{"id":6258,"name":"Attestation","nameLocations":["1060:11:28"],"nodeType":"IdentifierPath","referencedDeclaration":45,"src":"1060:11:28"},"referencedDeclaration":45,"src":"1060:11:28","typeDescriptions":{"typeIdentifier":"t_struct$_Attestation_$45_storage_ptr","typeString":"struct Attestation"}},"visibility":"internal"}],"id":6266,"initialValue":{"arguments":[{"expression":{"id":6263,"name":"attestation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6243,"src":"1105:11:28","typeDescriptions":{"typeIdentifier":"t_struct$_Attestation_$45_calldata_ptr","typeString":"struct Attestation calldata"}},"id":6264,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1117:6:28","memberName":"refUID","nodeType":"MemberAccess","referencedDeclaration":36,"src":"1105:18:28","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":6261,"name":"_eas","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":536,"src":"1085:4:28","typeDescriptions":{"typeIdentifier":"t_contract$_IEAS_$346","typeString":"contract IEAS"}},"id":6262,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1090:14:28","memberName":"getAttestation","nodeType":"MemberAccess","referencedDeclaration":319,"src":"1085:19:28","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_bytes32_$returns$_t_struct$_Attestation_$45_memory_ptr_$","typeString":"function (bytes32) view external returns (struct Attestation memory)"}},"id":6265,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1085:39:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Attestation_$45_memory_ptr","typeString":"struct Attestation memory"}},"nodeType":"VariableDeclarationStatement","src":"1060:64:28"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":6274,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":6268,"name":"ref","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6260,"src":"1146:3:28","typeDescriptions":{"typeIdentifier":"t_struct$_Attestation_$45_memory_ptr","typeString":"struct Attestation memory"}},"id":6269,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1150:3:28","memberName":"uid","nodeType":"MemberAccess","referencedDeclaration":26,"src":"1146:7:28","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":6272,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1165:1:28","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":6271,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1157:7:28","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":6270,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1157:7:28","typeDescriptions":{}}},"id":6273,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1157:10:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"1146:21:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5265666572726564206174746573746174696f6e206e6f742076616c69642e","id":6275,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1169:33:28","typeDescriptions":{"typeIdentifier":"t_stringliteral_f304c73ad664b98fadff16b5d10bf8a01088a1758e54be0253cb4027e74e7f2a","typeString":"literal_string \"Referred attestation not valid.\""},"value":"Referred attestation not valid."}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_f304c73ad664b98fadff16b5d10bf8a01088a1758e54be0253cb4027e74e7f2a","typeString":"literal_string \"Referred attestation not valid.\""}],"id":6267,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1138:7:28","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":6276,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1138:65:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6277,"nodeType":"ExpressionStatement","src":"1138:65:28"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":6294,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":6289,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":6283,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":6279,"name":"ref","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6260,"src":"1242:3:28","typeDescriptions":{"typeIdentifier":"t_struct$_Attestation_$45_memory_ptr","typeString":"struct Attestation memory"}},"id":6280,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1246:8:28","memberName":"attester","nodeType":"MemberAccess","referencedDeclaration":40,"src":"1242:12:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":6281,"name":"attestation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6243,"src":"1258:11:28","typeDescriptions":{"typeIdentifier":"t_struct$_Attestation_$45_calldata_ptr","typeString":"struct Attestation calldata"}},"id":6282,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1270:8:28","memberName":"attester","nodeType":"MemberAccess","referencedDeclaration":40,"src":"1258:20:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1242:36:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":6288,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":6284,"name":"ref","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6260,"src":"1302:3:28","typeDescriptions":{"typeIdentifier":"t_struct$_Attestation_$45_memory_ptr","typeString":"struct Attestation memory"}},"id":6285,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1306:9:28","memberName":"recipient","nodeType":"MemberAccess","referencedDeclaration":38,"src":"1302:13:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":6286,"name":"attestation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6243,"src":"1319:11:28","typeDescriptions":{"typeIdentifier":"t_struct$_Attestation_$45_calldata_ptr","typeString":"struct Attestation calldata"}},"id":6287,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1331:8:28","memberName":"attester","nodeType":"MemberAccess","referencedDeclaration":40,"src":"1319:20:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1302:37:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1242:97:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":6293,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6290,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6212,"src":"1363:6:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":6291,"name":"attestation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6243,"src":"1373:11:28","typeDescriptions":{"typeIdentifier":"t_struct$_Attestation_$45_calldata_ptr","typeString":"struct Attestation calldata"}},"id":6292,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1385:8:28","memberName":"attester","nodeType":"MemberAccess","referencedDeclaration":40,"src":"1373:20:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1363:30:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1242:151:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4e6f74206f776e6572","id":6295,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1411:11:28","typeDescriptions":{"typeIdentifier":"t_stringliteral_c266efca4f4ed37612271196433531dcbb4fca89a694d568d1e290e32feb1682","typeString":"literal_string \"Not owner\""},"value":"Not owner"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_c266efca4f4ed37612271196433531dcbb4fca89a694d568d1e290e32feb1682","typeString":"literal_string \"Not owner\""}],"id":6278,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1217:7:28","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":6296,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1217:219:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6297,"nodeType":"ExpressionStatement","src":"1217:219:28"}]}},{"expression":{"hexValue":"74727565","id":6300,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1463:4:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":6250,"id":6301,"nodeType":"Return","src":"1456:11:28"}]},"id":6303,"implemented":true,"kind":"function","modifiers":[],"name":"onAttest","nameLocation":"876:8:28","nodeType":"FunctionDefinition","overrides":{"id":6247,"nodeType":"OverrideSpecifier","overrides":[],"src":"974:8:28"},"parameters":{"id":6246,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6243,"mutability":"mutable","name":"attestation","nameLocation":"915:11:28","nodeType":"VariableDeclaration","scope":6303,"src":"894:32:28","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_Attestation_$45_calldata_ptr","typeString":"struct Attestation"},"typeName":{"id":6242,"nodeType":"UserDefinedTypeName","pathNode":{"id":6241,"name":"Attestation","nameLocations":["894:11:28"],"nodeType":"IdentifierPath","referencedDeclaration":45,"src":"894:11:28"},"referencedDeclaration":45,"src":"894:11:28","typeDescriptions":{"typeIdentifier":"t_struct$_Attestation_$45_storage_ptr","typeString":"struct Attestation"}},"visibility":"internal"},{"constant":false,"id":6245,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6303,"src":"936:7:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6244,"name":"uint256","nodeType":"ElementaryTypeName","src":"936:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"884:75:28"},"returnParameters":{"id":6250,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6249,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6303,"src":"992:4:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":6248,"name":"bool","nodeType":"ElementaryTypeName","src":"992:4:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"991:6:28"},"scope":6318,"src":"867:607:28","stateMutability":"view","virtual":false,"visibility":"internal"},{"baseFunctions":[801],"body":{"id":6316,"nodeType":"Block","src":"1615:28:28","statements":[{"expression":{"hexValue":"74727565","id":6314,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1632:4:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":6313,"id":6315,"nodeType":"Return","src":"1625:11:28"}]},"id":6317,"implemented":true,"kind":"function","modifiers":[],"name":"onRevoke","nameLocation":"1489:8:28","nodeType":"FunctionDefinition","overrides":{"id":6310,"nodeType":"OverrideSpecifier","overrides":[],"src":"1591:8:28"},"parameters":{"id":6309,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6306,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6317,"src":"1507:20:28","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_Attestation_$45_calldata_ptr","typeString":"struct Attestation"},"typeName":{"id":6305,"nodeType":"UserDefinedTypeName","pathNode":{"id":6304,"name":"Attestation","nameLocations":["1507:11:28"],"nodeType":"IdentifierPath","referencedDeclaration":45,"src":"1507:11:28"},"referencedDeclaration":45,"src":"1507:11:28","typeDescriptions":{"typeIdentifier":"t_struct$_Attestation_$45_storage_ptr","typeString":"struct Attestation"}},"visibility":"internal"},{"constant":false,"id":6308,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6317,"src":"1553:7:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6307,"name":"uint256","nodeType":"ElementaryTypeName","src":"1553:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1497:79:28"},"returnParameters":{"id":6313,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6312,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6317,"src":"1609:4:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":6311,"name":"bool","nodeType":"ElementaryTypeName","src":"1609:4:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1608:6:28"},"scope":6318,"src":"1480:163:28","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":6319,"src":"504:1141:28","usedErrors":[11,529,531,533]}],"src":"33:1613:28"},"id":28}},"contracts":{"@ethereum-attestation-service/eas-contracts/contracts/IEAS.sol":{"IEAS":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"recipient","type":"address"},{"indexed":true,"internalType":"address","name":"attester","type":"address"},{"indexed":false,"internalType":"bytes32","name":"uid","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"schema","type":"bytes32"}],"name":"Attested","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"recipient","type":"address"},{"indexed":true,"internalType":"address","name":"attester","type":"address"},{"indexed":false,"internalType":"bytes32","name":"uid","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"schema","type":"bytes32"}],"name":"Revoked","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"revoker","type":"address"},{"indexed":true,"internalType":"bytes32","name":"data","type":"bytes32"},{"indexed":true,"internalType":"uint64","name":"timestamp","type":"uint64"}],"name":"RevokedOffchain","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"data","type":"bytes32"},{"indexed":true,"internalType":"uint64","name":"timestamp","type":"uint64"}],"name":"Timestamped","type":"event"},{"inputs":[{"components":[{"internalType":"bytes32","name":"schema","type":"bytes32"},{"components":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"uint256","name":"value","type":"uint256"}],"internalType":"struct AttestationRequestData","name":"data","type":"tuple"}],"internalType":"struct AttestationRequest","name":"request","type":"tuple"}],"name":"attest","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"payable","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"schema","type":"bytes32"},{"components":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"uint256","name":"value","type":"uint256"}],"internalType":"struct AttestationRequestData","name":"data","type":"tuple"},{"components":[{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"internalType":"struct EIP712Signature","name":"signature","type":"tuple"},{"internalType":"address","name":"attester","type":"address"}],"internalType":"struct DelegatedAttestationRequest","name":"delegatedRequest","type":"tuple"}],"name":"attestByDelegation","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"uid","type":"bytes32"}],"name":"getAttestation","outputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"bytes32","name":"schema","type":"bytes32"},{"internalType":"uint64","name":"time","type":"uint64"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"uint64","name":"revocationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Attestation","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"revoker","type":"address"},{"internalType":"bytes32","name":"data","type":"bytes32"}],"name":"getRevokeOffchain","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getSchemaRegistry","outputs":[{"internalType":"contract ISchemaRegistry","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"data","type":"bytes32"}],"name":"getTimestamp","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"uid","type":"bytes32"}],"name":"isAttestationValid","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"schema","type":"bytes32"},{"components":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"uint256","name":"value","type":"uint256"}],"internalType":"struct AttestationRequestData[]","name":"data","type":"tuple[]"}],"internalType":"struct MultiAttestationRequest[]","name":"multiRequests","type":"tuple[]"}],"name":"multiAttest","outputs":[{"internalType":"bytes32[]","name":"","type":"bytes32[]"}],"stateMutability":"payable","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"schema","type":"bytes32"},{"components":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"uint256","name":"value","type":"uint256"}],"internalType":"struct AttestationRequestData[]","name":"data","type":"tuple[]"},{"components":[{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"internalType":"struct EIP712Signature[]","name":"signatures","type":"tuple[]"},{"internalType":"address","name":"attester","type":"address"}],"internalType":"struct MultiDelegatedAttestationRequest[]","name":"multiDelegatedRequests","type":"tuple[]"}],"name":"multiAttestByDelegation","outputs":[{"internalType":"bytes32[]","name":"","type":"bytes32[]"}],"stateMutability":"payable","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"schema","type":"bytes32"},{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"uint256","name":"value","type":"uint256"}],"internalType":"struct RevocationRequestData[]","name":"data","type":"tuple[]"}],"internalType":"struct MultiRevocationRequest[]","name":"multiRequests","type":"tuple[]"}],"name":"multiRevoke","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"schema","type":"bytes32"},{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"uint256","name":"value","type":"uint256"}],"internalType":"struct RevocationRequestData[]","name":"data","type":"tuple[]"},{"components":[{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"internalType":"struct EIP712Signature[]","name":"signatures","type":"tuple[]"},{"internalType":"address","name":"revoker","type":"address"}],"internalType":"struct MultiDelegatedRevocationRequest[]","name":"multiDelegatedRequests","type":"tuple[]"}],"name":"multiRevokeByDelegation","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes32[]","name":"data","type":"bytes32[]"}],"name":"multiRevokeOffchain","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32[]","name":"data","type":"bytes32[]"}],"name":"multiTimestamp","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"schema","type":"bytes32"},{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"uint256","name":"value","type":"uint256"}],"internalType":"struct RevocationRequestData","name":"data","type":"tuple"}],"internalType":"struct RevocationRequest","name":"request","type":"tuple"}],"name":"revoke","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"schema","type":"bytes32"},{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"uint256","name":"value","type":"uint256"}],"internalType":"struct RevocationRequestData","name":"data","type":"tuple"},{"components":[{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"internalType":"struct EIP712Signature","name":"signature","type":"tuple"},{"internalType":"address","name":"revoker","type":"address"}],"internalType":"struct DelegatedRevocationRequest","name":"delegatedRequest","type":"tuple"}],"name":"revokeByDelegation","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"data","type":"bytes32"}],"name":"revokeOffchain","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"data","type":"bytes32"}],"name":"timestamp","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"events":{"Attested(address,address,bytes32,bytes32)":{"details":"Emitted when an attestation has been made.","params":{"attester":"The attesting account.","recipient":"The recipient of the attestation.","schema":"The UID of the schema.","uid":"The UID the revoked attestation."}},"Revoked(address,address,bytes32,bytes32)":{"details":"Emitted when an attestation has been revoked.","params":{"attester":"The attesting account.","recipient":"The recipient of the attestation.","schema":"The UID of the schema.","uid":"The UID the revoked attestation."}},"RevokedOffchain(address,bytes32,uint64)":{"details":"Emitted when a data has been revoked.","params":{"data":"The data.","revoker":"The address of the revoker.","timestamp":"The timestamp."}},"Timestamped(bytes32,uint64)":{"details":"Emitted when a data has been timestamped.","params":{"data":"The data.","timestamp":"The timestamp."}}},"kind":"dev","methods":{"attest((bytes32,(address,uint64,bool,bytes32,bytes,uint256)))":{"details":"Attests to a specific schema.","params":{"request":"The arguments of the attestation request. Example: attest({     schema: \"0facc36681cbe2456019c1b0d1e7bedd6d1d40f6f324bf3dd3a4cef2999200a0\",     data: {         recipient: \"0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf\",         expirationTime: 0,         revocable: true,         refUID: \"0x0000000000000000000000000000000000000000000000000000000000000000\",         data: \"0xF00D\",         value: 0     } })"},"returns":{"_0":"The UID of the new attestation."}},"attestByDelegation((bytes32,(address,uint64,bool,bytes32,bytes,uint256),(uint8,bytes32,bytes32),address))":{"details":"Attests to a specific schema via the provided EIP712 signature.","params":{"delegatedRequest":"The arguments of the delegated attestation request. Example: attestByDelegation({     schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',     data: {         recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',         expirationTime: 1673891048,         revocable: true,         refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',         data: '0x1234',         value: 0     },     signature: {         v: 28,         r: '0x148c...b25b',         s: '0x5a72...be22'     },     attester: '0xc5E8740aD971409492b1A63Db8d83025e0Fc427e' })"},"returns":{"_0":"The UID of the new attestation."}},"getAttestation(bytes32)":{"details":"Returns an existing attestation by UID.","params":{"uid":"The UID of the attestation to retrieve."},"returns":{"_0":"The attestation data members."}},"getRevokeOffchain(address,bytes32)":{"details":"Returns the timestamp that the specified data was timestamped with.","params":{"data":"The data to query."},"returns":{"_0":"The timestamp the data was timestamped with."}},"getSchemaRegistry()":{"details":"Returns the address of the global schema registry.","returns":{"_0":"The address of the global schema registry."}},"getTimestamp(bytes32)":{"details":"Returns the timestamp that the specified data was timestamped with.","params":{"data":"The data to query."},"returns":{"_0":"The timestamp the data was timestamped with."}},"isAttestationValid(bytes32)":{"details":"Checks whether an attestation exists.","params":{"uid":"The UID of the attestation to retrieve."},"returns":{"_0":"Whether an attestation exists."}},"multiAttest((bytes32,(address,uint64,bool,bytes32,bytes,uint256)[])[])":{"details":"Attests to multiple schemas.","params":{"multiRequests":"The arguments of the multi attestation requests. The requests should be grouped by distinct schema ids to benefit from the best batching optimization. Example: multiAttest([{     schema: '0x33e9094830a5cba5554d1954310e4fbed2ef5f859ec1404619adea4207f391fd',     data: [{         recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',         expirationTime: 1673891048,         revocable: true,         refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',         data: '0x1234',         value: 1000     },     {         recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',         expirationTime: 0,         revocable: false,         refUID: '0x480df4a039efc31b11bfdf491b383ca138b6bde160988222a2a3509c02cee174',         data: '0x00',         value: 0     }], }, {     schema: '0x5ac273ce41e3c8bfa383efe7c03e54c5f0bff29c9f11ef6ffa930fc84ca32425',     data: [{         recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',         expirationTime: 0,         revocable: true,         refUID: '0x75bf2ed8dca25a8190c50c52db136664de25b2449535839008ccfdab469b214f',         data: '0x12345678',         value: 0     }, }])"},"returns":{"_0":"The UIDs of the new attestations."}},"multiAttestByDelegation((bytes32,(address,uint64,bool,bytes32,bytes,uint256)[],(uint8,bytes32,bytes32)[],address)[])":{"details":"Attests to multiple schemas using via provided EIP712 signatures.","params":{"multiDelegatedRequests":"The arguments of the delegated multi attestation requests. The requests should be grouped by distinct schema ids to benefit from the best batching optimization. Example: multiAttestByDelegation([{     schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',     data: [{         recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',         expirationTime: 1673891048,         revocable: true,         refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',         data: '0x1234',         value: 0     },     {         recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',         expirationTime: 0,         revocable: false,         refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',         data: '0x00',         value: 0     }],     signatures: [{         v: 28,         r: '0x148c...b25b',         s: '0x5a72...be22'     },     {         v: 28,         r: '0x487s...67bb',         s: '0x12ad...2366'     }],     attester: '0x1D86495b2A7B524D747d2839b3C645Bed32e8CF4' }])"},"returns":{"_0":"The UIDs of the new attestations."}},"multiRevoke((bytes32,(bytes32,uint256)[])[])":{"details":"Revokes existing attestations to multiple schemas.","params":{"multiRequests":"The arguments of the multi revocation requests. The requests should be grouped by distinct schema ids to benefit from the best batching optimization. Example: multiRevoke([{     schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',     data: [{         uid: '0x211296a1ca0d7f9f2cfebf0daaa575bea9b20e968d81aef4e743d699c6ac4b25',         value: 1000     },     {         uid: '0xe160ac1bd3606a287b4d53d5d1d6da5895f65b4b4bab6d93aaf5046e48167ade',         value: 0     }], }, {     schema: '0x5ac273ce41e3c8bfa383efe7c03e54c5f0bff29c9f11ef6ffa930fc84ca32425',     data: [{         uid: '0x053d42abce1fd7c8fcddfae21845ad34dae287b2c326220b03ba241bc5a8f019',         value: 0     }, }])"}},"multiRevokeByDelegation((bytes32,(bytes32,uint256)[],(uint8,bytes32,bytes32)[],address)[])":{"details":"Revokes existing attestations to multiple schemas via provided EIP712 signatures.","params":{"multiDelegatedRequests":"The arguments of the delegated multi revocation attestation requests. The requests should be grouped by distinct schema ids to benefit from the best batching optimization. Example: multiRevokeByDelegation([{     schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',     data: [{         uid: '0x211296a1ca0d7f9f2cfebf0daaa575bea9b20e968d81aef4e743d699c6ac4b25',         value: 1000     },     {         uid: '0xe160ac1bd3606a287b4d53d5d1d6da5895f65b4b4bab6d93aaf5046e48167ade',         value: 0     }],     signatures: [{         v: 28,         r: '0x148c...b25b',         s: '0x5a72...be22'     },     {         v: 28,         r: '0x487s...67bb',         s: '0x12ad...2366'     }],     revoker: '0x244934dd3e31bE2c81f84ECf0b3E6329F5381992' }])"}},"multiRevokeOffchain(bytes32[])":{"details":"Revokes the specified multiple bytes32 data.","params":{"data":"The data to timestamp."},"returns":{"_0":"The timestamp the data was revoked with."}},"multiTimestamp(bytes32[])":{"details":"Timestamps the specified multiple bytes32 data.","params":{"data":"The data to timestamp."},"returns":{"_0":"The timestamp the data was timestamped with."}},"revoke((bytes32,(bytes32,uint256)))":{"details":"Revokes an existing attestation to a specific schema. Example: revoke({     schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',     data: {         uid: '0x101032e487642ee04ee17049f99a70590c735b8614079fc9275f9dd57c00966d',         value: 0     } })","params":{"request":"The arguments of the revocation request."}},"revokeByDelegation((bytes32,(bytes32,uint256),(uint8,bytes32,bytes32),address))":{"details":"Revokes an existing attestation to a specific schema via the provided EIP712 signature. Example: revokeByDelegation({     schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',     data: {         uid: '0xcbbc12102578c642a0f7b34fe7111e41afa25683b6cd7b5a14caf90fa14d24ba',         value: 0     },     signature: {         v: 27,         r: '0xb593...7142',         s: '0x0f5b...2cce'     },     revoker: '0x244934dd3e31bE2c81f84ECf0b3E6329F5381992' })","params":{"delegatedRequest":"The arguments of the delegated revocation request."}},"revokeOffchain(bytes32)":{"details":"Revokes the specified bytes32 data.","params":{"data":"The data to timestamp."},"returns":{"_0":"The timestamp the data was revoked with."}},"timestamp(bytes32)":{"details":"Timestamps the specified bytes32 data.","params":{"data":"The data to timestamp."},"returns":{"_0":"The timestamp the data was timestamped with."}}},"title":"EAS - Ethereum Attestation Service interface.","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"attest((bytes32,(address,uint64,bool,bytes32,bytes,uint256)))":"f17325e7","attestByDelegation((bytes32,(address,uint64,bool,bytes32,bytes,uint256),(uint8,bytes32,bytes32),address))":"e13458fc","getAttestation(bytes32)":"a3112a64","getRevokeOffchain(address,bytes32)":"b469318d","getSchemaRegistry()":"f10b5cc8","getTimestamp(bytes32)":"d45c4435","isAttestationValid(bytes32)":"e30bb563","multiAttest((bytes32,(address,uint64,bool,bytes32,bytes,uint256)[])[])":"44adc90e","multiAttestByDelegation((bytes32,(address,uint64,bool,bytes32,bytes,uint256)[],(uint8,bytes32,bytes32)[],address)[])":"831e05a1","multiRevoke((bytes32,(bytes32,uint256)[])[])":"4cb7e9e5","multiRevokeByDelegation((bytes32,(bytes32,uint256)[],(uint8,bytes32,bytes32)[],address)[])":"e45d03f9","multiRevokeOffchain(bytes32[])":"13893f61","multiTimestamp(bytes32[])":"e71ff365","revoke((bytes32,(bytes32,uint256)))":"46926267","revokeByDelegation((bytes32,(bytes32,uint256),(uint8,bytes32,bytes32),address))":"e57a6b1b","revokeOffchain(bytes32)":"cf190f34","timestamp(bytes32)":"4d003070"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"attester\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"uid\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"schema\",\"type\":\"bytes32\"}],\"name\":\"Attested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"attester\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"uid\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"schema\",\"type\":\"bytes32\"}],\"name\":\"Revoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"revoker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"data\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"timestamp\",\"type\":\"uint64\"}],\"name\":\"RevokedOffchain\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"data\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"timestamp\",\"type\":\"uint64\"}],\"name\":\"Timestamped\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"schema\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"expirationTime\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"revocable\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"refUID\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct AttestationRequestData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct AttestationRequest\",\"name\":\"request\",\"type\":\"tuple\"}],\"name\":\"attest\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"schema\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"expirationTime\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"revocable\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"refUID\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct AttestationRequestData\",\"name\":\"data\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct EIP712Signature\",\"name\":\"signature\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"attester\",\"type\":\"address\"}],\"internalType\":\"struct DelegatedAttestationRequest\",\"name\":\"delegatedRequest\",\"type\":\"tuple\"}],\"name\":\"attestByDelegation\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"uid\",\"type\":\"bytes32\"}],\"name\":\"getAttestation\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"uid\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"schema\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"time\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"expirationTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"revocationTime\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"refUID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"attester\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"revocable\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct Attestation\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"revoker\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"data\",\"type\":\"bytes32\"}],\"name\":\"getRevokeOffchain\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSchemaRegistry\",\"outputs\":[{\"internalType\":\"contract ISchemaRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"data\",\"type\":\"bytes32\"}],\"name\":\"getTimestamp\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"uid\",\"type\":\"bytes32\"}],\"name\":\"isAttestationValid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"schema\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"expirationTime\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"revocable\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"refUID\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct AttestationRequestData[]\",\"name\":\"data\",\"type\":\"tuple[]\"}],\"internalType\":\"struct MultiAttestationRequest[]\",\"name\":\"multiRequests\",\"type\":\"tuple[]\"}],\"name\":\"multiAttest\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"schema\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"expirationTime\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"revocable\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"refUID\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct AttestationRequestData[]\",\"name\":\"data\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct EIP712Signature[]\",\"name\":\"signatures\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"attester\",\"type\":\"address\"}],\"internalType\":\"struct MultiDelegatedAttestationRequest[]\",\"name\":\"multiDelegatedRequests\",\"type\":\"tuple[]\"}],\"name\":\"multiAttestByDelegation\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"schema\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"uid\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct RevocationRequestData[]\",\"name\":\"data\",\"type\":\"tuple[]\"}],\"internalType\":\"struct MultiRevocationRequest[]\",\"name\":\"multiRequests\",\"type\":\"tuple[]\"}],\"name\":\"multiRevoke\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"schema\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"uid\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct RevocationRequestData[]\",\"name\":\"data\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct EIP712Signature[]\",\"name\":\"signatures\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"revoker\",\"type\":\"address\"}],\"internalType\":\"struct MultiDelegatedRevocationRequest[]\",\"name\":\"multiDelegatedRequests\",\"type\":\"tuple[]\"}],\"name\":\"multiRevokeByDelegation\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"data\",\"type\":\"bytes32[]\"}],\"name\":\"multiRevokeOffchain\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"data\",\"type\":\"bytes32[]\"}],\"name\":\"multiTimestamp\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"schema\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"uid\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct RevocationRequestData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct RevocationRequest\",\"name\":\"request\",\"type\":\"tuple\"}],\"name\":\"revoke\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"schema\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"uid\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct RevocationRequestData\",\"name\":\"data\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct EIP712Signature\",\"name\":\"signature\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"revoker\",\"type\":\"address\"}],\"internalType\":\"struct DelegatedRevocationRequest\",\"name\":\"delegatedRequest\",\"type\":\"tuple\"}],\"name\":\"revokeByDelegation\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"data\",\"type\":\"bytes32\"}],\"name\":\"revokeOffchain\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"data\",\"type\":\"bytes32\"}],\"name\":\"timestamp\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Attested(address,address,bytes32,bytes32)\":{\"details\":\"Emitted when an attestation has been made.\",\"params\":{\"attester\":\"The attesting account.\",\"recipient\":\"The recipient of the attestation.\",\"schema\":\"The UID of the schema.\",\"uid\":\"The UID the revoked attestation.\"}},\"Revoked(address,address,bytes32,bytes32)\":{\"details\":\"Emitted when an attestation has been revoked.\",\"params\":{\"attester\":\"The attesting account.\",\"recipient\":\"The recipient of the attestation.\",\"schema\":\"The UID of the schema.\",\"uid\":\"The UID the revoked attestation.\"}},\"RevokedOffchain(address,bytes32,uint64)\":{\"details\":\"Emitted when a data has been revoked.\",\"params\":{\"data\":\"The data.\",\"revoker\":\"The address of the revoker.\",\"timestamp\":\"The timestamp.\"}},\"Timestamped(bytes32,uint64)\":{\"details\":\"Emitted when a data has been timestamped.\",\"params\":{\"data\":\"The data.\",\"timestamp\":\"The timestamp.\"}}},\"kind\":\"dev\",\"methods\":{\"attest((bytes32,(address,uint64,bool,bytes32,bytes,uint256)))\":{\"details\":\"Attests to a specific schema.\",\"params\":{\"request\":\"The arguments of the attestation request. Example: attest({     schema: \\\"0facc36681cbe2456019c1b0d1e7bedd6d1d40f6f324bf3dd3a4cef2999200a0\\\",     data: {         recipient: \\\"0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf\\\",         expirationTime: 0,         revocable: true,         refUID: \\\"0x0000000000000000000000000000000000000000000000000000000000000000\\\",         data: \\\"0xF00D\\\",         value: 0     } })\"},\"returns\":{\"_0\":\"The UID of the new attestation.\"}},\"attestByDelegation((bytes32,(address,uint64,bool,bytes32,bytes,uint256),(uint8,bytes32,bytes32),address))\":{\"details\":\"Attests to a specific schema via the provided EIP712 signature.\",\"params\":{\"delegatedRequest\":\"The arguments of the delegated attestation request. Example: attestByDelegation({     schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',     data: {         recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',         expirationTime: 1673891048,         revocable: true,         refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',         data: '0x1234',         value: 0     },     signature: {         v: 28,         r: '0x148c...b25b',         s: '0x5a72...be22'     },     attester: '0xc5E8740aD971409492b1A63Db8d83025e0Fc427e' })\"},\"returns\":{\"_0\":\"The UID of the new attestation.\"}},\"getAttestation(bytes32)\":{\"details\":\"Returns an existing attestation by UID.\",\"params\":{\"uid\":\"The UID of the attestation to retrieve.\"},\"returns\":{\"_0\":\"The attestation data members.\"}},\"getRevokeOffchain(address,bytes32)\":{\"details\":\"Returns the timestamp that the specified data was timestamped with.\",\"params\":{\"data\":\"The data to query.\"},\"returns\":{\"_0\":\"The timestamp the data was timestamped with.\"}},\"getSchemaRegistry()\":{\"details\":\"Returns the address of the global schema registry.\",\"returns\":{\"_0\":\"The address of the global schema registry.\"}},\"getTimestamp(bytes32)\":{\"details\":\"Returns the timestamp that the specified data was timestamped with.\",\"params\":{\"data\":\"The data to query.\"},\"returns\":{\"_0\":\"The timestamp the data was timestamped with.\"}},\"isAttestationValid(bytes32)\":{\"details\":\"Checks whether an attestation exists.\",\"params\":{\"uid\":\"The UID of the attestation to retrieve.\"},\"returns\":{\"_0\":\"Whether an attestation exists.\"}},\"multiAttest((bytes32,(address,uint64,bool,bytes32,bytes,uint256)[])[])\":{\"details\":\"Attests to multiple schemas.\",\"params\":{\"multiRequests\":\"The arguments of the multi attestation requests. The requests should be grouped by distinct schema ids to benefit from the best batching optimization. Example: multiAttest([{     schema: '0x33e9094830a5cba5554d1954310e4fbed2ef5f859ec1404619adea4207f391fd',     data: [{         recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',         expirationTime: 1673891048,         revocable: true,         refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',         data: '0x1234',         value: 1000     },     {         recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',         expirationTime: 0,         revocable: false,         refUID: '0x480df4a039efc31b11bfdf491b383ca138b6bde160988222a2a3509c02cee174',         data: '0x00',         value: 0     }], }, {     schema: '0x5ac273ce41e3c8bfa383efe7c03e54c5f0bff29c9f11ef6ffa930fc84ca32425',     data: [{         recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',         expirationTime: 0,         revocable: true,         refUID: '0x75bf2ed8dca25a8190c50c52db136664de25b2449535839008ccfdab469b214f',         data: '0x12345678',         value: 0     }, }])\"},\"returns\":{\"_0\":\"The UIDs of the new attestations.\"}},\"multiAttestByDelegation((bytes32,(address,uint64,bool,bytes32,bytes,uint256)[],(uint8,bytes32,bytes32)[],address)[])\":{\"details\":\"Attests to multiple schemas using via provided EIP712 signatures.\",\"params\":{\"multiDelegatedRequests\":\"The arguments of the delegated multi attestation requests. The requests should be grouped by distinct schema ids to benefit from the best batching optimization. Example: multiAttestByDelegation([{     schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',     data: [{         recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',         expirationTime: 1673891048,         revocable: true,         refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',         data: '0x1234',         value: 0     },     {         recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',         expirationTime: 0,         revocable: false,         refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',         data: '0x00',         value: 0     }],     signatures: [{         v: 28,         r: '0x148c...b25b',         s: '0x5a72...be22'     },     {         v: 28,         r: '0x487s...67bb',         s: '0x12ad...2366'     }],     attester: '0x1D86495b2A7B524D747d2839b3C645Bed32e8CF4' }])\"},\"returns\":{\"_0\":\"The UIDs of the new attestations.\"}},\"multiRevoke((bytes32,(bytes32,uint256)[])[])\":{\"details\":\"Revokes existing attestations to multiple schemas.\",\"params\":{\"multiRequests\":\"The arguments of the multi revocation requests. The requests should be grouped by distinct schema ids to benefit from the best batching optimization. Example: multiRevoke([{     schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',     data: [{         uid: '0x211296a1ca0d7f9f2cfebf0daaa575bea9b20e968d81aef4e743d699c6ac4b25',         value: 1000     },     {         uid: '0xe160ac1bd3606a287b4d53d5d1d6da5895f65b4b4bab6d93aaf5046e48167ade',         value: 0     }], }, {     schema: '0x5ac273ce41e3c8bfa383efe7c03e54c5f0bff29c9f11ef6ffa930fc84ca32425',     data: [{         uid: '0x053d42abce1fd7c8fcddfae21845ad34dae287b2c326220b03ba241bc5a8f019',         value: 0     }, }])\"}},\"multiRevokeByDelegation((bytes32,(bytes32,uint256)[],(uint8,bytes32,bytes32)[],address)[])\":{\"details\":\"Revokes existing attestations to multiple schemas via provided EIP712 signatures.\",\"params\":{\"multiDelegatedRequests\":\"The arguments of the delegated multi revocation attestation requests. The requests should be grouped by distinct schema ids to benefit from the best batching optimization. Example: multiRevokeByDelegation([{     schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',     data: [{         uid: '0x211296a1ca0d7f9f2cfebf0daaa575bea9b20e968d81aef4e743d699c6ac4b25',         value: 1000     },     {         uid: '0xe160ac1bd3606a287b4d53d5d1d6da5895f65b4b4bab6d93aaf5046e48167ade',         value: 0     }],     signatures: [{         v: 28,         r: '0x148c...b25b',         s: '0x5a72...be22'     },     {         v: 28,         r: '0x487s...67bb',         s: '0x12ad...2366'     }],     revoker: '0x244934dd3e31bE2c81f84ECf0b3E6329F5381992' }])\"}},\"multiRevokeOffchain(bytes32[])\":{\"details\":\"Revokes the specified multiple bytes32 data.\",\"params\":{\"data\":\"The data to timestamp.\"},\"returns\":{\"_0\":\"The timestamp the data was revoked with.\"}},\"multiTimestamp(bytes32[])\":{\"details\":\"Timestamps the specified multiple bytes32 data.\",\"params\":{\"data\":\"The data to timestamp.\"},\"returns\":{\"_0\":\"The timestamp the data was timestamped with.\"}},\"revoke((bytes32,(bytes32,uint256)))\":{\"details\":\"Revokes an existing attestation to a specific schema. Example: revoke({     schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',     data: {         uid: '0x101032e487642ee04ee17049f99a70590c735b8614079fc9275f9dd57c00966d',         value: 0     } })\",\"params\":{\"request\":\"The arguments of the revocation request.\"}},\"revokeByDelegation((bytes32,(bytes32,uint256),(uint8,bytes32,bytes32),address))\":{\"details\":\"Revokes an existing attestation to a specific schema via the provided EIP712 signature. Example: revokeByDelegation({     schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',     data: {         uid: '0xcbbc12102578c642a0f7b34fe7111e41afa25683b6cd7b5a14caf90fa14d24ba',         value: 0     },     signature: {         v: 27,         r: '0xb593...7142',         s: '0x0f5b...2cce'     },     revoker: '0x244934dd3e31bE2c81f84ECf0b3E6329F5381992' })\",\"params\":{\"delegatedRequest\":\"The arguments of the delegated revocation request.\"}},\"revokeOffchain(bytes32)\":{\"details\":\"Revokes the specified bytes32 data.\",\"params\":{\"data\":\"The data to timestamp.\"},\"returns\":{\"_0\":\"The timestamp the data was revoked with.\"}},\"timestamp(bytes32)\":{\"details\":\"Timestamps the specified bytes32 data.\",\"params\":{\"data\":\"The data to timestamp.\"},\"returns\":{\"_0\":\"The timestamp the data was timestamped with.\"}}},\"title\":\"EAS - Ethereum Attestation Service interface.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@ethereum-attestation-service/eas-contracts/contracts/IEAS.sol\":\"IEAS\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@ethereum-attestation-service/eas-contracts/contracts/Common.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// A representation of an empty/uninitialized UID.\\nbytes32 constant EMPTY_UID = 0;\\n\\n// A zero expiration represents an non-expiring attestation.\\nuint64 constant NO_EXPIRATION_TIME = 0;\\n\\nerror AccessDenied();\\nerror InvalidEAS();\\nerror InvalidLength();\\nerror InvalidSignature();\\nerror NotFound();\\n\\n/**\\n * @dev A struct representing EIP712 signature data.\\n */\\nstruct EIP712Signature {\\n    uint8 v; // The recovery ID.\\n    bytes32 r; // The x-coordinate of the nonce R.\\n    bytes32 s; // The signature data.\\n}\\n\\n/**\\n * @dev A struct representing a single attestation.\\n */\\nstruct Attestation {\\n    bytes32 uid; // A unique identifier of the attestation.\\n    bytes32 schema; // The unique identifier of the schema.\\n    uint64 time; // The time when the attestation was created (Unix timestamp).\\n    uint64 expirationTime; // The time when the attestation expires (Unix timestamp).\\n    uint64 revocationTime; // The time when the attestation was revoked (Unix timestamp).\\n    bytes32 refUID; // The UID of the related attestation.\\n    address recipient; // The recipient of the attestation.\\n    address attester; // The attester/sender of the attestation.\\n    bool revocable; // Whether the attestation is revocable.\\n    bytes data; // Custom attestation data.\\n}\\n\\n/**\\n * @dev A helper function to work with unchecked iterators in loops.\\n */\\nfunction uncheckedInc(uint256 i) pure returns (uint256 j) {\\n    unchecked {\\n        j = i + 1;\\n    }\\n}\\n\",\"keccak256\":\"0x4bab9ec76bdb009e9fb505c45a679d39c9e80771eb13ed901029a1068025752a\",\"license\":\"MIT\"},\"@ethereum-attestation-service/eas-contracts/contracts/IEAS.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { ISchemaRegistry } from \\\"./ISchemaRegistry.sol\\\";\\nimport { Attestation, EIP712Signature } from \\\"./Common.sol\\\";\\n\\n/**\\n * @dev A struct representing the arguments of the attestation request.\\n */\\nstruct AttestationRequestData {\\n    address recipient; // The recipient of the attestation.\\n    uint64 expirationTime; // The time when the attestation expires (Unix timestamp).\\n    bool revocable; // Whether the attestation is revocable.\\n    bytes32 refUID; // The UID of the related attestation.\\n    bytes data; // Custom attestation data.\\n    uint256 value; // An explicit ETH amount to send to the resolver. This is important to prevent accidental user errors.\\n}\\n\\n/**\\n * @dev A struct representing the full arguments of the attestation request.\\n */\\nstruct AttestationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    AttestationRequestData data; // The arguments of the attestation request.\\n}\\n\\n/**\\n * @dev A struct representing the full arguments of the full delegated attestation request.\\n */\\nstruct DelegatedAttestationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    AttestationRequestData data; // The arguments of the attestation request.\\n    EIP712Signature signature; // The EIP712 signature data.\\n    address attester; // The attesting account.\\n}\\n\\n/**\\n * @dev A struct representing the full arguments of the multi attestation request.\\n */\\nstruct MultiAttestationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    AttestationRequestData[] data; // The arguments of the attestation request.\\n}\\n\\n/**\\n * @dev A struct representing the full arguments of the delegated multi attestation request.\\n */\\nstruct MultiDelegatedAttestationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    AttestationRequestData[] data; // The arguments of the attestation requests.\\n    EIP712Signature[] signatures; // The EIP712 signatures data. Please note that the signatures are assumed to be signed with increasing nonces.\\n    address attester; // The attesting account.\\n}\\n\\n/**\\n * @dev A struct representing the arguments of the revocation request.\\n */\\nstruct RevocationRequestData {\\n    bytes32 uid; // The UID of the attestation to revoke.\\n    uint256 value; // An explicit ETH amount to send to the resolver. This is important to prevent accidental user errors.\\n}\\n\\n/**\\n * @dev A struct representing the full arguments of the revocation request.\\n */\\nstruct RevocationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    RevocationRequestData data; // The arguments of the revocation request.\\n}\\n\\n/**\\n * @dev A struct representing the arguments of the full delegated revocation request.\\n */\\nstruct DelegatedRevocationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    RevocationRequestData data; // The arguments of the revocation request.\\n    EIP712Signature signature; // The EIP712 signature data.\\n    address revoker; // The revoking account.\\n}\\n\\n/**\\n * @dev A struct representing the full arguments of the multi revocation request.\\n */\\nstruct MultiRevocationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    RevocationRequestData[] data; // The arguments of the revocation request.\\n}\\n\\n/**\\n * @dev A struct representing the full arguments of the delegated multi revocation request.\\n */\\nstruct MultiDelegatedRevocationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    RevocationRequestData[] data; // The arguments of the revocation requests.\\n    EIP712Signature[] signatures; // The EIP712 signatures data. Please note that the signatures are assumed to be signed with increasing nonces.\\n    address revoker; // The revoking account.\\n}\\n\\n/**\\n * @title EAS - Ethereum Attestation Service interface.\\n */\\ninterface IEAS {\\n    /**\\n     * @dev Emitted when an attestation has been made.\\n     *\\n     * @param recipient The recipient of the attestation.\\n     * @param attester The attesting account.\\n     * @param uid The UID the revoked attestation.\\n     * @param schema The UID of the schema.\\n     */\\n    event Attested(address indexed recipient, address indexed attester, bytes32 uid, bytes32 indexed schema);\\n\\n    /**\\n     * @dev Emitted when an attestation has been revoked.\\n     *\\n     * @param recipient The recipient of the attestation.\\n     * @param attester The attesting account.\\n     * @param schema The UID of the schema.\\n     * @param uid The UID the revoked attestation.\\n     */\\n    event Revoked(address indexed recipient, address indexed attester, bytes32 uid, bytes32 indexed schema);\\n\\n    /**\\n     * @dev Emitted when a data has been timestamped.\\n     *\\n     * @param data The data.\\n     * @param timestamp The timestamp.\\n     */\\n    event Timestamped(bytes32 indexed data, uint64 indexed timestamp);\\n\\n    /**\\n     * @dev Emitted when a data has been revoked.\\n     *\\n     * @param revoker The address of the revoker.\\n     * @param data The data.\\n     * @param timestamp The timestamp.\\n     */\\n    event RevokedOffchain(address indexed revoker, bytes32 indexed data, uint64 indexed timestamp);\\n\\n    /**\\n     * @dev Returns the address of the global schema registry.\\n     *\\n     * @return The address of the global schema registry.\\n     */\\n    function getSchemaRegistry() external view returns (ISchemaRegistry);\\n\\n    /**\\n     * @dev Attests to a specific schema.\\n     *\\n     * @param request The arguments of the attestation request.\\n     *\\n     * Example:\\n     *\\n     * attest({\\n     *     schema: \\\"0facc36681cbe2456019c1b0d1e7bedd6d1d40f6f324bf3dd3a4cef2999200a0\\\",\\n     *     data: {\\n     *         recipient: \\\"0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf\\\",\\n     *         expirationTime: 0,\\n     *         revocable: true,\\n     *         refUID: \\\"0x0000000000000000000000000000000000000000000000000000000000000000\\\",\\n     *         data: \\\"0xF00D\\\",\\n     *         value: 0\\n     *     }\\n     * })\\n     *\\n     * @return The UID of the new attestation.\\n     */\\n    function attest(AttestationRequest calldata request) external payable returns (bytes32);\\n\\n    /**\\n     * @dev Attests to a specific schema via the provided EIP712 signature.\\n     *\\n     * @param delegatedRequest The arguments of the delegated attestation request.\\n     *\\n     * Example:\\n     *\\n     * attestByDelegation({\\n     *     schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n     *     data: {\\n     *         recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',\\n     *         expirationTime: 1673891048,\\n     *         revocable: true,\\n     *         refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\\n     *         data: '0x1234',\\n     *         value: 0\\n     *     },\\n     *     signature: {\\n     *         v: 28,\\n     *         r: '0x148c...b25b',\\n     *         s: '0x5a72...be22'\\n     *     },\\n     *     attester: '0xc5E8740aD971409492b1A63Db8d83025e0Fc427e'\\n     * })\\n     *\\n     * @return The UID of the new attestation.\\n     */\\n    function attestByDelegation(\\n        DelegatedAttestationRequest calldata delegatedRequest\\n    ) external payable returns (bytes32);\\n\\n    /**\\n     * @dev Attests to multiple schemas.\\n     *\\n     * @param multiRequests The arguments of the multi attestation requests. The requests should be grouped by distinct\\n     * schema ids to benefit from the best batching optimization.\\n     *\\n     * Example:\\n     *\\n     * multiAttest([{\\n     *     schema: '0x33e9094830a5cba5554d1954310e4fbed2ef5f859ec1404619adea4207f391fd',\\n     *     data: [{\\n     *         recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',\\n     *         expirationTime: 1673891048,\\n     *         revocable: true,\\n     *         refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\\n     *         data: '0x1234',\\n     *         value: 1000\\n     *     },\\n     *     {\\n     *         recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',\\n     *         expirationTime: 0,\\n     *         revocable: false,\\n     *         refUID: '0x480df4a039efc31b11bfdf491b383ca138b6bde160988222a2a3509c02cee174',\\n     *         data: '0x00',\\n     *         value: 0\\n     *     }],\\n     * },\\n     * {\\n     *     schema: '0x5ac273ce41e3c8bfa383efe7c03e54c5f0bff29c9f11ef6ffa930fc84ca32425',\\n     *     data: [{\\n     *         recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',\\n     *         expirationTime: 0,\\n     *         revocable: true,\\n     *         refUID: '0x75bf2ed8dca25a8190c50c52db136664de25b2449535839008ccfdab469b214f',\\n     *         data: '0x12345678',\\n     *         value: 0\\n     *     },\\n     * }])\\n     *\\n     * @return The UIDs of the new attestations.\\n     */\\n    function multiAttest(MultiAttestationRequest[] calldata multiRequests) external payable returns (bytes32[] memory);\\n\\n    /**\\n     * @dev Attests to multiple schemas using via provided EIP712 signatures.\\n     *\\n     * @param multiDelegatedRequests The arguments of the delegated multi attestation requests. The requests should be\\n     * grouped by distinct schema ids to benefit from the best batching optimization.\\n     *\\n     * Example:\\n     *\\n     * multiAttestByDelegation([{\\n     *     schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n     *     data: [{\\n     *         recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',\\n     *         expirationTime: 1673891048,\\n     *         revocable: true,\\n     *         refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\\n     *         data: '0x1234',\\n     *         value: 0\\n     *     },\\n     *     {\\n     *         recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',\\n     *         expirationTime: 0,\\n     *         revocable: false,\\n     *         refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\\n     *         data: '0x00',\\n     *         value: 0\\n     *     }],\\n     *     signatures: [{\\n     *         v: 28,\\n     *         r: '0x148c...b25b',\\n     *         s: '0x5a72...be22'\\n     *     },\\n     *     {\\n     *         v: 28,\\n     *         r: '0x487s...67bb',\\n     *         s: '0x12ad...2366'\\n     *     }],\\n     *     attester: '0x1D86495b2A7B524D747d2839b3C645Bed32e8CF4'\\n     * }])\\n     *\\n     * @return The UIDs of the new attestations.\\n     */\\n    function multiAttestByDelegation(\\n        MultiDelegatedAttestationRequest[] calldata multiDelegatedRequests\\n    ) external payable returns (bytes32[] memory);\\n\\n    /**\\n     * @dev Revokes an existing attestation to a specific schema.\\n     *\\n     * Example:\\n     *\\n     * revoke({\\n     *     schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n     *     data: {\\n     *         uid: '0x101032e487642ee04ee17049f99a70590c735b8614079fc9275f9dd57c00966d',\\n     *         value: 0\\n     *     }\\n     * })\\n     *\\n     * @param request The arguments of the revocation request.\\n     */\\n    function revoke(RevocationRequest calldata request) external payable;\\n\\n    /**\\n     * @dev Revokes an existing attestation to a specific schema via the provided EIP712 signature.\\n     *\\n     * Example:\\n     *\\n     * revokeByDelegation({\\n     *     schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n     *     data: {\\n     *         uid: '0xcbbc12102578c642a0f7b34fe7111e41afa25683b6cd7b5a14caf90fa14d24ba',\\n     *         value: 0\\n     *     },\\n     *     signature: {\\n     *         v: 27,\\n     *         r: '0xb593...7142',\\n     *         s: '0x0f5b...2cce'\\n     *     },\\n     *     revoker: '0x244934dd3e31bE2c81f84ECf0b3E6329F5381992'\\n     * })\\n     *\\n     * @param delegatedRequest The arguments of the delegated revocation request.\\n     */\\n    function revokeByDelegation(DelegatedRevocationRequest calldata delegatedRequest) external payable;\\n\\n    /**\\n     * @dev Revokes existing attestations to multiple schemas.\\n     *\\n     * @param multiRequests The arguments of the multi revocation requests. The requests should be grouped by distinct\\n     * schema ids to benefit from the best batching optimization.\\n     *\\n     * Example:\\n     *\\n     * multiRevoke([{\\n     *     schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n     *     data: [{\\n     *         uid: '0x211296a1ca0d7f9f2cfebf0daaa575bea9b20e968d81aef4e743d699c6ac4b25',\\n     *         value: 1000\\n     *     },\\n     *     {\\n     *         uid: '0xe160ac1bd3606a287b4d53d5d1d6da5895f65b4b4bab6d93aaf5046e48167ade',\\n     *         value: 0\\n     *     }],\\n     * },\\n     * {\\n     *     schema: '0x5ac273ce41e3c8bfa383efe7c03e54c5f0bff29c9f11ef6ffa930fc84ca32425',\\n     *     data: [{\\n     *         uid: '0x053d42abce1fd7c8fcddfae21845ad34dae287b2c326220b03ba241bc5a8f019',\\n     *         value: 0\\n     *     },\\n     * }])\\n     */\\n    function multiRevoke(MultiRevocationRequest[] calldata multiRequests) external payable;\\n\\n    /**\\n     * @dev Revokes existing attestations to multiple schemas via provided EIP712 signatures.\\n     *\\n     * @param multiDelegatedRequests The arguments of the delegated multi revocation attestation requests. The requests should be\\n     * grouped by distinct schema ids to benefit from the best batching optimization.\\n     *\\n     * Example:\\n     *\\n     * multiRevokeByDelegation([{\\n     *     schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n     *     data: [{\\n     *         uid: '0x211296a1ca0d7f9f2cfebf0daaa575bea9b20e968d81aef4e743d699c6ac4b25',\\n     *         value: 1000\\n     *     },\\n     *     {\\n     *         uid: '0xe160ac1bd3606a287b4d53d5d1d6da5895f65b4b4bab6d93aaf5046e48167ade',\\n     *         value: 0\\n     *     }],\\n     *     signatures: [{\\n     *         v: 28,\\n     *         r: '0x148c...b25b',\\n     *         s: '0x5a72...be22'\\n     *     },\\n     *     {\\n     *         v: 28,\\n     *         r: '0x487s...67bb',\\n     *         s: '0x12ad...2366'\\n     *     }],\\n     *     revoker: '0x244934dd3e31bE2c81f84ECf0b3E6329F5381992'\\n     * }])\\n     *\\n     */\\n    function multiRevokeByDelegation(\\n        MultiDelegatedRevocationRequest[] calldata multiDelegatedRequests\\n    ) external payable;\\n\\n    /**\\n     * @dev Timestamps the specified bytes32 data.\\n     *\\n     * @param data The data to timestamp.\\n     *\\n     * @return The timestamp the data was timestamped with.\\n     */\\n    function timestamp(bytes32 data) external returns (uint64);\\n\\n    /**\\n     * @dev Timestamps the specified multiple bytes32 data.\\n     *\\n     * @param data The data to timestamp.\\n     *\\n     * @return The timestamp the data was timestamped with.\\n     */\\n    function multiTimestamp(bytes32[] calldata data) external returns (uint64);\\n\\n    /**\\n     * @dev Revokes the specified bytes32 data.\\n     *\\n     * @param data The data to timestamp.\\n     *\\n     * @return The timestamp the data was revoked with.\\n     */\\n    function revokeOffchain(bytes32 data) external returns (uint64);\\n\\n    /**\\n     * @dev Revokes the specified multiple bytes32 data.\\n     *\\n     * @param data The data to timestamp.\\n     *\\n     * @return The timestamp the data was revoked with.\\n     */\\n    function multiRevokeOffchain(bytes32[] calldata data) external returns (uint64);\\n\\n    /**\\n     * @dev Returns an existing attestation by UID.\\n     *\\n     * @param uid The UID of the attestation to retrieve.\\n     *\\n     * @return The attestation data members.\\n     */\\n    function getAttestation(bytes32 uid) external view returns (Attestation memory);\\n\\n    /**\\n     * @dev Checks whether an attestation exists.\\n     *\\n     * @param uid The UID of the attestation to retrieve.\\n     *\\n     * @return Whether an attestation exists.\\n     */\\n    function isAttestationValid(bytes32 uid) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the timestamp that the specified data was timestamped with.\\n     *\\n     * @param data The data to query.\\n     *\\n     * @return The timestamp the data was timestamped with.\\n     */\\n    function getTimestamp(bytes32 data) external view returns (uint64);\\n\\n    /**\\n     * @dev Returns the timestamp that the specified data was timestamped with.\\n     *\\n     * @param data The data to query.\\n     *\\n     * @return The timestamp the data was timestamped with.\\n     */\\n    function getRevokeOffchain(address revoker, bytes32 data) external view returns (uint64);\\n}\\n\",\"keccak256\":\"0xd530be686226f3c8d7b02bb59797901620f64749a02228539afc8b082a1ee036\",\"license\":\"MIT\"},\"@ethereum-attestation-service/eas-contracts/contracts/ISchemaRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { ISchemaResolver } from \\\"./resolver/ISchemaResolver.sol\\\";\\n\\n/**\\n * @title A struct representing a record for a submitted schema.\\n */\\nstruct SchemaRecord {\\n    bytes32 uid; // The unique identifier of the schema.\\n    ISchemaResolver resolver; // Optional schema resolver.\\n    bool revocable; // Whether the schema allows revocations explicitly.\\n    string schema; // Custom specification of the schema (e.g., an ABI).\\n}\\n\\n/**\\n * @title The global schema registry interface.\\n */\\ninterface ISchemaRegistry {\\n    /**\\n     * @dev Emitted when a new schema has been registered\\n     *\\n     * @param uid The schema UID.\\n     * @param registerer The address of the account used to register the schema.\\n     */\\n    event Registered(bytes32 indexed uid, address registerer);\\n\\n    /**\\n     * @dev Submits and reserves a new schema\\n     *\\n     * @param schema The schema data schema.\\n     * @param resolver An optional schema resolver.\\n     * @param revocable Whether the schema allows revocations explicitly.\\n     *\\n     * @return The UID of the new schema.\\n     */\\n    function register(string calldata schema, ISchemaResolver resolver, bool revocable) external returns (bytes32);\\n\\n    /**\\n     * @dev Returns an existing schema by UID\\n     *\\n     * @param uid The UID of the schema to retrieve.\\n     *\\n     * @return The schema data members.\\n     */\\n    function getSchema(bytes32 uid) external view returns (SchemaRecord memory);\\n}\\n\",\"keccak256\":\"0xef47e449dd02bd034e26b1dea505ce533906f8462fc674c938ed0e872a68d640\",\"license\":\"MIT\"},\"@ethereum-attestation-service/eas-contracts/contracts/resolver/ISchemaResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { Attestation } from \\\"../Common.sol\\\";\\n\\n/**\\n * @title The interface of an optional schema resolver.\\n */\\ninterface ISchemaResolver {\\n    /**\\n     * @dev Returns whether the resolver supports ETH transfers.\\n     */\\n    function isPayable() external pure returns (bool);\\n\\n    /**\\n     * @dev Processes an attestation and verifies whether it's valid.\\n     *\\n     * @param attestation The new attestation.\\n     *\\n     * @return Whether the attestation is valid.\\n     */\\n    function attest(Attestation calldata attestation) external payable returns (bool);\\n\\n    /**\\n     * @dev Processes multiple attestations and verifies whether they are valid.\\n     *\\n     * @param attestations The new attestations.\\n     * @param values Explicit ETH amounts which were sent with each attestation.\\n     *\\n     * @return Whether all the attestations are valid.\\n     */\\n    function multiAttest(\\n        Attestation[] calldata attestations,\\n        uint256[] calldata values\\n    ) external payable returns (bool);\\n\\n    /**\\n     * @dev Processes an attestation revocation and verifies if it can be revoked.\\n     *\\n     * @param attestation The existing attestation to be revoked.\\n     *\\n     * @return Whether the attestation can be revoked.\\n     */\\n    function revoke(Attestation calldata attestation) external payable returns (bool);\\n\\n    /**\\n     * @dev Processes revocation of multiple attestation and verifies they can be revoked.\\n     *\\n     * @param attestations The existing attestations to be revoked.\\n     * @param values Explicit ETH amounts which were sent with each revocation.\\n     *\\n     * @return Whether the attestations can be revoked.\\n     */\\n    function multiRevoke(\\n        Attestation[] calldata attestations,\\n        uint256[] calldata values\\n    ) external payable returns (bool);\\n}\\n\",\"keccak256\":\"0xc628c6540da258f76192eaa34c21699c9cbcc4a4029d7ee04e88dc9c18c981fd\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@ethereum-attestation-service/eas-contracts/contracts/ISchemaRegistry.sol":{"ISchemaRegistry":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"uid","type":"bytes32"},{"indexed":false,"internalType":"address","name":"registerer","type":"address"}],"name":"Registered","type":"event"},{"inputs":[{"internalType":"bytes32","name":"uid","type":"bytes32"}],"name":"getSchema","outputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"contract ISchemaResolver","name":"resolver","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"string","name":"schema","type":"string"}],"internalType":"struct SchemaRecord","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"string","name":"schema","type":"string"},{"internalType":"contract ISchemaResolver","name":"resolver","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"}],"name":"register","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"events":{"Registered(bytes32,address)":{"details":"Emitted when a new schema has been registered","params":{"registerer":"The address of the account used to register the schema.","uid":"The schema UID."}}},"kind":"dev","methods":{"getSchema(bytes32)":{"details":"Returns an existing schema by UID","params":{"uid":"The UID of the schema to retrieve."},"returns":{"_0":"The schema data members."}},"register(string,address,bool)":{"details":"Submits and reserves a new schema","params":{"resolver":"An optional schema resolver.","revocable":"Whether the schema allows revocations explicitly.","schema":"The schema data schema."},"returns":{"_0":"The UID of the new schema."}}},"title":"The global schema registry interface.","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"getSchema(bytes32)":"a2ea7c6e","register(string,address,bool)":"60d7a278"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"uid\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"registerer\",\"type\":\"address\"}],\"name\":\"Registered\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"uid\",\"type\":\"bytes32\"}],\"name\":\"getSchema\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"uid\",\"type\":\"bytes32\"},{\"internalType\":\"contract ISchemaResolver\",\"name\":\"resolver\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"revocable\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"schema\",\"type\":\"string\"}],\"internalType\":\"struct SchemaRecord\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"schema\",\"type\":\"string\"},{\"internalType\":\"contract ISchemaResolver\",\"name\":\"resolver\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"revocable\",\"type\":\"bool\"}],\"name\":\"register\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Registered(bytes32,address)\":{\"details\":\"Emitted when a new schema has been registered\",\"params\":{\"registerer\":\"The address of the account used to register the schema.\",\"uid\":\"The schema UID.\"}}},\"kind\":\"dev\",\"methods\":{\"getSchema(bytes32)\":{\"details\":\"Returns an existing schema by UID\",\"params\":{\"uid\":\"The UID of the schema to retrieve.\"},\"returns\":{\"_0\":\"The schema data members.\"}},\"register(string,address,bool)\":{\"details\":\"Submits and reserves a new schema\",\"params\":{\"resolver\":\"An optional schema resolver.\",\"revocable\":\"Whether the schema allows revocations explicitly.\",\"schema\":\"The schema data schema.\"},\"returns\":{\"_0\":\"The UID of the new schema.\"}}},\"title\":\"The global schema registry interface.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@ethereum-attestation-service/eas-contracts/contracts/ISchemaRegistry.sol\":\"ISchemaRegistry\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@ethereum-attestation-service/eas-contracts/contracts/Common.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// A representation of an empty/uninitialized UID.\\nbytes32 constant EMPTY_UID = 0;\\n\\n// A zero expiration represents an non-expiring attestation.\\nuint64 constant NO_EXPIRATION_TIME = 0;\\n\\nerror AccessDenied();\\nerror InvalidEAS();\\nerror InvalidLength();\\nerror InvalidSignature();\\nerror NotFound();\\n\\n/**\\n * @dev A struct representing EIP712 signature data.\\n */\\nstruct EIP712Signature {\\n    uint8 v; // The recovery ID.\\n    bytes32 r; // The x-coordinate of the nonce R.\\n    bytes32 s; // The signature data.\\n}\\n\\n/**\\n * @dev A struct representing a single attestation.\\n */\\nstruct Attestation {\\n    bytes32 uid; // A unique identifier of the attestation.\\n    bytes32 schema; // The unique identifier of the schema.\\n    uint64 time; // The time when the attestation was created (Unix timestamp).\\n    uint64 expirationTime; // The time when the attestation expires (Unix timestamp).\\n    uint64 revocationTime; // The time when the attestation was revoked (Unix timestamp).\\n    bytes32 refUID; // The UID of the related attestation.\\n    address recipient; // The recipient of the attestation.\\n    address attester; // The attester/sender of the attestation.\\n    bool revocable; // Whether the attestation is revocable.\\n    bytes data; // Custom attestation data.\\n}\\n\\n/**\\n * @dev A helper function to work with unchecked iterators in loops.\\n */\\nfunction uncheckedInc(uint256 i) pure returns (uint256 j) {\\n    unchecked {\\n        j = i + 1;\\n    }\\n}\\n\",\"keccak256\":\"0x4bab9ec76bdb009e9fb505c45a679d39c9e80771eb13ed901029a1068025752a\",\"license\":\"MIT\"},\"@ethereum-attestation-service/eas-contracts/contracts/ISchemaRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { ISchemaResolver } from \\\"./resolver/ISchemaResolver.sol\\\";\\n\\n/**\\n * @title A struct representing a record for a submitted schema.\\n */\\nstruct SchemaRecord {\\n    bytes32 uid; // The unique identifier of the schema.\\n    ISchemaResolver resolver; // Optional schema resolver.\\n    bool revocable; // Whether the schema allows revocations explicitly.\\n    string schema; // Custom specification of the schema (e.g., an ABI).\\n}\\n\\n/**\\n * @title The global schema registry interface.\\n */\\ninterface ISchemaRegistry {\\n    /**\\n     * @dev Emitted when a new schema has been registered\\n     *\\n     * @param uid The schema UID.\\n     * @param registerer The address of the account used to register the schema.\\n     */\\n    event Registered(bytes32 indexed uid, address registerer);\\n\\n    /**\\n     * @dev Submits and reserves a new schema\\n     *\\n     * @param schema The schema data schema.\\n     * @param resolver An optional schema resolver.\\n     * @param revocable Whether the schema allows revocations explicitly.\\n     *\\n     * @return The UID of the new schema.\\n     */\\n    function register(string calldata schema, ISchemaResolver resolver, bool revocable) external returns (bytes32);\\n\\n    /**\\n     * @dev Returns an existing schema by UID\\n     *\\n     * @param uid The UID of the schema to retrieve.\\n     *\\n     * @return The schema data members.\\n     */\\n    function getSchema(bytes32 uid) external view returns (SchemaRecord memory);\\n}\\n\",\"keccak256\":\"0xef47e449dd02bd034e26b1dea505ce533906f8462fc674c938ed0e872a68d640\",\"license\":\"MIT\"},\"@ethereum-attestation-service/eas-contracts/contracts/resolver/ISchemaResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { Attestation } from \\\"../Common.sol\\\";\\n\\n/**\\n * @title The interface of an optional schema resolver.\\n */\\ninterface ISchemaResolver {\\n    /**\\n     * @dev Returns whether the resolver supports ETH transfers.\\n     */\\n    function isPayable() external pure returns (bool);\\n\\n    /**\\n     * @dev Processes an attestation and verifies whether it's valid.\\n     *\\n     * @param attestation The new attestation.\\n     *\\n     * @return Whether the attestation is valid.\\n     */\\n    function attest(Attestation calldata attestation) external payable returns (bool);\\n\\n    /**\\n     * @dev Processes multiple attestations and verifies whether they are valid.\\n     *\\n     * @param attestations The new attestations.\\n     * @param values Explicit ETH amounts which were sent with each attestation.\\n     *\\n     * @return Whether all the attestations are valid.\\n     */\\n    function multiAttest(\\n        Attestation[] calldata attestations,\\n        uint256[] calldata values\\n    ) external payable returns (bool);\\n\\n    /**\\n     * @dev Processes an attestation revocation and verifies if it can be revoked.\\n     *\\n     * @param attestation The existing attestation to be revoked.\\n     *\\n     * @return Whether the attestation can be revoked.\\n     */\\n    function revoke(Attestation calldata attestation) external payable returns (bool);\\n\\n    /**\\n     * @dev Processes revocation of multiple attestation and verifies they can be revoked.\\n     *\\n     * @param attestations The existing attestations to be revoked.\\n     * @param values Explicit ETH amounts which were sent with each revocation.\\n     *\\n     * @return Whether the attestations can be revoked.\\n     */\\n    function multiRevoke(\\n        Attestation[] calldata attestations,\\n        uint256[] calldata values\\n    ) external payable returns (bool);\\n}\\n\",\"keccak256\":\"0xc628c6540da258f76192eaa34c21699c9cbcc4a4029d7ee04e88dc9c18c981fd\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@ethereum-attestation-service/eas-contracts/contracts/Semver.sol":{"Semver":{"abi":[{"inputs":[{"internalType":"uint256","name":"major","type":"uint256"},{"internalType":"uint256","name":"minor","type":"uint256"},{"internalType":"uint256","name":"patch","type":"uint256"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"version","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"A simple contract for managing contract versions.","kind":"dev","methods":{"constructor":{"params":{"major":"Major version number.","minor":"Minor version number.","patch":"Patch version number."}},"version()":{"returns":{"_0":"Semver contract version as a string."}}},"version":1},"evm":{"bytecode":{"functionDebugData":{"@_425":{"entryPoint":null,"id":425,"parameterSlots":3,"returnSlots":0},"abi_decode_tuple_t_uint256t_uint256t_uint256_fromMemory":{"entryPoint":64,"id":null,"parameterSlots":2,"returnSlots":3}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:322:29","statements":[{"nodeType":"YulBlock","src":"6:3:29","statements":[]},{"body":{"nodeType":"YulBlock","src":"129:191:29","statements":[{"body":{"nodeType":"YulBlock","src":"175:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"184:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"187:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"177:6:29"},"nodeType":"YulFunctionCall","src":"177:12:29"},"nodeType":"YulExpressionStatement","src":"177:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"150:7:29"},{"name":"headStart","nodeType":"YulIdentifier","src":"159:9:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"146:3:29"},"nodeType":"YulFunctionCall","src":"146:23:29"},{"kind":"number","nodeType":"YulLiteral","src":"171:2:29","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"142:3:29"},"nodeType":"YulFunctionCall","src":"142:32:29"},"nodeType":"YulIf","src":"139:52:29"},{"nodeType":"YulAssignment","src":"200:26:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"216:9:29"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"210:5:29"},"nodeType":"YulFunctionCall","src":"210:16:29"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"200:6:29"}]},{"nodeType":"YulAssignment","src":"235:35:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"255:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"266:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"251:3:29"},"nodeType":"YulFunctionCall","src":"251:18:29"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"245:5:29"},"nodeType":"YulFunctionCall","src":"245:25:29"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"235:6:29"}]},{"nodeType":"YulAssignment","src":"279:35:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"299:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"310:2:29","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"295:3:29"},"nodeType":"YulFunctionCall","src":"295:18:29"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"289:5:29"},"nodeType":"YulFunctionCall","src":"289:25:29"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"279:6:29"}]}]},"name":"abi_decode_tuple_t_uint256t_uint256t_uint256_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"79:9:29","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"90:7:29","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"102:6:29","type":""},{"name":"value1","nodeType":"YulTypedName","src":"110:6:29","type":""},{"name":"value2","nodeType":"YulTypedName","src":"118:6:29","type":""}],"src":"14:306:29"}]},"contents":"{\n    { }\n    function abi_decode_tuple_t_uint256t_uint256t_uint256_fromMemory(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := mload(headStart)\n        value1 := mload(add(headStart, 32))\n        value2 := mload(add(headStart, 64))\n    }\n}","id":29,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"60e060405234801561001057600080fd5b5060405161044038038061044083398101604081905261002f91610040565b60809290925260a05260c05261006e565b60008060006060848603121561005557600080fd5b8351925060208401519150604084015190509250925092565b60805160a05160c0516103a661009a600039600060a701526000607e01526000605501526103a66000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c806354fd4d5014610030575b600080fd5b61003861004e565b6040516100459190610298565b60405180910390f35b60606100797f00000000000000000000000000000000000000000000000000000000000000006100f1565b6100a27f00000000000000000000000000000000000000000000000000000000000000006100f1565b6100cb7f00000000000000000000000000000000000000000000000000000000000000006100f1565b6040516020016100dd939291906102cb565b604051602081830303815290604052905090565b606060006100fe83610191565b600101905060008167ffffffffffffffff81111561011e5761011e610341565b6040519080825280601f01601f191660200182016040528015610148576020820181803683370190505b5090508181016020015b600019017f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a850494508461015257509392505050565b6000807a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000083106101da577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000830492506040015b6d04ee2d6d415b85acef81000000008310610206576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc10000831061022457662386f26fc10000830492506010015b6305f5e100831061023c576305f5e100830492506008015b612710831061025057612710830492506004015b60648310610262576064830492506002015b600a831061026e576001015b92915050565b60005b8381101561028f578181015183820152602001610277565b50506000910152565b60208152600082518060208401526102b7816040850160208701610274565b601f01601f19169190910160400192915050565b600084516102dd818460208901610274565b80830190507f2e000000000000000000000000000000000000000000000000000000000000008082528551610319816001850160208a01610274565b60019201918201528351610334816002840160208801610274565b0160020195945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fdfea26469706673582212208b782aeb23f5f6dbdca84a6850ee444fee0b111b689960fe57679eb2acebe53064736f6c63430008130033","opcodes":"PUSH1 0xE0 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH2 0x440 CODESIZE SUB DUP1 PUSH2 0x440 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH2 0x2F SWAP2 PUSH2 0x40 JUMP JUMPDEST PUSH1 0x80 SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0xA0 MSTORE PUSH1 0xC0 MSTORE PUSH2 0x6E JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x55 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 MLOAD SWAP3 POP PUSH1 0x20 DUP5 ADD MLOAD SWAP2 POP PUSH1 0x40 DUP5 ADD MLOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x80 MLOAD PUSH1 0xA0 MLOAD PUSH1 0xC0 MLOAD PUSH2 0x3A6 PUSH2 0x9A PUSH1 0x0 CODECOPY PUSH1 0x0 PUSH1 0xA7 ADD MSTORE PUSH1 0x0 PUSH1 0x7E ADD MSTORE PUSH1 0x0 PUSH1 0x55 ADD MSTORE PUSH2 0x3A6 PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x2B JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x54FD4D50 EQ PUSH2 0x30 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x38 PUSH2 0x4E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x45 SWAP2 SWAP1 PUSH2 0x298 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x60 PUSH2 0x79 PUSH32 0x0 PUSH2 0xF1 JUMP JUMPDEST PUSH2 0xA2 PUSH32 0x0 PUSH2 0xF1 JUMP JUMPDEST PUSH2 0xCB PUSH32 0x0 PUSH2 0xF1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xDD SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2CB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0xFE DUP4 PUSH2 0x191 JUMP JUMPDEST PUSH1 0x1 ADD SWAP1 POP PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x11E JUMPI PUSH2 0x11E PUSH2 0x341 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x148 JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP DUP2 DUP2 ADD PUSH1 0x20 ADD JUMPDEST PUSH1 0x0 NOT ADD PUSH32 0x3031323334353637383961626364656600000000000000000000000000000000 PUSH1 0xA DUP7 MOD BYTE DUP2 MSTORE8 PUSH1 0xA DUP6 DIV SWAP5 POP DUP5 PUSH2 0x152 JUMPI POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP4 LT PUSH2 0x1DA JUMPI PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP4 DIV SWAP3 POP PUSH1 0x40 ADD JUMPDEST PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 LT PUSH2 0x206 JUMPI PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 DIV SWAP3 POP PUSH1 0x20 ADD JUMPDEST PUSH7 0x2386F26FC10000 DUP4 LT PUSH2 0x224 JUMPI PUSH7 0x2386F26FC10000 DUP4 DIV SWAP3 POP PUSH1 0x10 ADD JUMPDEST PUSH4 0x5F5E100 DUP4 LT PUSH2 0x23C JUMPI PUSH4 0x5F5E100 DUP4 DIV SWAP3 POP PUSH1 0x8 ADD JUMPDEST PUSH2 0x2710 DUP4 LT PUSH2 0x250 JUMPI PUSH2 0x2710 DUP4 DIV SWAP3 POP PUSH1 0x4 ADD JUMPDEST PUSH1 0x64 DUP4 LT PUSH2 0x262 JUMPI PUSH1 0x64 DUP4 DIV SWAP3 POP PUSH1 0x2 ADD JUMPDEST PUSH1 0xA DUP4 LT PUSH2 0x26E JUMPI PUSH1 0x1 ADD JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x28F JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x277 JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x2B7 DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x274 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP5 MLOAD PUSH2 0x2DD DUP2 DUP5 PUSH1 0x20 DUP10 ADD PUSH2 0x274 JUMP JUMPDEST DUP1 DUP4 ADD SWAP1 POP PUSH32 0x2E00000000000000000000000000000000000000000000000000000000000000 DUP1 DUP3 MSTORE DUP6 MLOAD PUSH2 0x319 DUP2 PUSH1 0x1 DUP6 ADD PUSH1 0x20 DUP11 ADD PUSH2 0x274 JUMP JUMPDEST PUSH1 0x1 SWAP3 ADD SWAP2 DUP3 ADD MSTORE DUP4 MLOAD PUSH2 0x334 DUP2 PUSH1 0x2 DUP5 ADD PUSH1 0x20 DUP9 ADD PUSH2 0x274 JUMP JUMPDEST ADD PUSH1 0x2 ADD SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP12 PUSH25 0x2AEB23F5F6DBDCA84A6850EE444FEE0B111B689960FE57679E 0xB2 0xAC 0xEB 0xE5 ADDRESS PUSH5 0x736F6C6343 STOP ADDMOD SGT STOP CALLER ","sourceMap":"194:909:3:-:0;;;594:135;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;661:14;;;;;685;;709:13;;194:909;;14:306:29;102:6;110;118;171:2;159:9;150:7;146:23;142:32;139:52;;;187:1;184;177:12;139:52;216:9;210:16;200:26;;266:2;255:9;251:18;245:25;235:35;;310:2;299:9;295:18;289:25;279:35;;14:306;;;;;:::o;:::-;194:909:3;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@log10_4746":{"entryPoint":401,"id":4746,"parameterSlots":1,"returnSlots":1},"@toString_3837":{"entryPoint":241,"id":3837,"parameterSlots":1,"returnSlots":1},"@version_453":{"entryPoint":78,"id":453,"parameterSlots":0,"returnSlots":1},"abi_encode_tuple_packed_t_string_memory_ptr_t_stringliteral_6f010af653ebe3cb07d297a4ef13366103d392ceffa68dd48232e6e9ff2187bf_t_string_memory_ptr_t_stringliteral_6f010af653ebe3cb07d297a4ef13366103d392ceffa68dd48232e6e9ff2187bf_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":715,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":664,"id":null,"parameterSlots":2,"returnSlots":1},"copy_memory_to_memory_with_cleanup":{"entryPoint":628,"id":null,"parameterSlots":3,"returnSlots":0},"panic_error_0x12":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":833,"id":null,"parameterSlots":0,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:2049:29","statements":[{"nodeType":"YulBlock","src":"6:3:29","statements":[]},{"body":{"nodeType":"YulBlock","src":"80:184:29","statements":[{"nodeType":"YulVariableDeclaration","src":"90:10:29","value":{"kind":"number","nodeType":"YulLiteral","src":"99:1:29","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"94:1:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"159:63:29","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"184:3:29"},{"name":"i","nodeType":"YulIdentifier","src":"189:1:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"180:3:29"},"nodeType":"YulFunctionCall","src":"180:11:29"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"203:3:29"},{"name":"i","nodeType":"YulIdentifier","src":"208:1:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"199:3:29"},"nodeType":"YulFunctionCall","src":"199:11:29"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"193:5:29"},"nodeType":"YulFunctionCall","src":"193:18:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"173:6:29"},"nodeType":"YulFunctionCall","src":"173:39:29"},"nodeType":"YulExpressionStatement","src":"173:39:29"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"120:1:29"},{"name":"length","nodeType":"YulIdentifier","src":"123:6:29"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"117:2:29"},"nodeType":"YulFunctionCall","src":"117:13:29"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"131:19:29","statements":[{"nodeType":"YulAssignment","src":"133:15:29","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"142:1:29"},{"kind":"number","nodeType":"YulLiteral","src":"145:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"138:3:29"},"nodeType":"YulFunctionCall","src":"138:10:29"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"133:1:29"}]}]},"pre":{"nodeType":"YulBlock","src":"113:3:29","statements":[]},"src":"109:113:29"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"242:3:29"},{"name":"length","nodeType":"YulIdentifier","src":"247:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"238:3:29"},"nodeType":"YulFunctionCall","src":"238:16:29"},{"kind":"number","nodeType":"YulLiteral","src":"256:1:29","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"231:6:29"},"nodeType":"YulFunctionCall","src":"231:27:29"},"nodeType":"YulExpressionStatement","src":"231:27:29"}]},"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"58:3:29","type":""},{"name":"dst","nodeType":"YulTypedName","src":"63:3:29","type":""},{"name":"length","nodeType":"YulTypedName","src":"68:6:29","type":""}],"src":"14:250:29"},{"body":{"nodeType":"YulBlock","src":"390:275:29","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"407:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"418:2:29","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"400:6:29"},"nodeType":"YulFunctionCall","src":"400:21:29"},"nodeType":"YulExpressionStatement","src":"400:21:29"},{"nodeType":"YulVariableDeclaration","src":"430:27:29","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"450:6:29"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"444:5:29"},"nodeType":"YulFunctionCall","src":"444:13:29"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"434:6:29","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"477:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"488:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"473:3:29"},"nodeType":"YulFunctionCall","src":"473:18:29"},{"name":"length","nodeType":"YulIdentifier","src":"493:6:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"466:6:29"},"nodeType":"YulFunctionCall","src":"466:34:29"},"nodeType":"YulExpressionStatement","src":"466:34:29"},{"expression":{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"548:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"556:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"544:3:29"},"nodeType":"YulFunctionCall","src":"544:15:29"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"565:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"576:2:29","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"561:3:29"},"nodeType":"YulFunctionCall","src":"561:18:29"},{"name":"length","nodeType":"YulIdentifier","src":"581:6:29"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"509:34:29"},"nodeType":"YulFunctionCall","src":"509:79:29"},"nodeType":"YulExpressionStatement","src":"509:79:29"},{"nodeType":"YulAssignment","src":"597:62:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"613:9:29"},{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"632:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"640:2:29","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"628:3:29"},"nodeType":"YulFunctionCall","src":"628:15:29"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"649:2:29","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"645:3:29"},"nodeType":"YulFunctionCall","src":"645:7:29"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"624:3:29"},"nodeType":"YulFunctionCall","src":"624:29:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"609:3:29"},"nodeType":"YulFunctionCall","src":"609:45:29"},{"kind":"number","nodeType":"YulLiteral","src":"656:2:29","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"605:3:29"},"nodeType":"YulFunctionCall","src":"605:54:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"597:4:29"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"359:9:29","type":""},{"name":"value0","nodeType":"YulTypedName","src":"370:6:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"381:4:29","type":""}],"src":"269:396:29"},{"body":{"nodeType":"YulBlock","src":"1107:562:29","statements":[{"nodeType":"YulVariableDeclaration","src":"1117:27:29","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1137:6:29"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1131:5:29"},"nodeType":"YulFunctionCall","src":"1131:13:29"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"1121:6:29","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1192:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"1200:4:29","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1188:3:29"},"nodeType":"YulFunctionCall","src":"1188:17:29"},{"name":"pos","nodeType":"YulIdentifier","src":"1207:3:29"},{"name":"length","nodeType":"YulIdentifier","src":"1212:6:29"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"1153:34:29"},"nodeType":"YulFunctionCall","src":"1153:66:29"},"nodeType":"YulExpressionStatement","src":"1153:66:29"},{"nodeType":"YulVariableDeclaration","src":"1228:29:29","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1245:3:29"},{"name":"length","nodeType":"YulIdentifier","src":"1250:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1241:3:29"},"nodeType":"YulFunctionCall","src":"1241:16:29"},"variables":[{"name":"end_1","nodeType":"YulTypedName","src":"1232:5:29","type":""}]},{"nodeType":"YulVariableDeclaration","src":"1266:13:29","value":{"hexValue":"2e","kind":"string","nodeType":"YulLiteral","src":"1276:3:29","type":"","value":"."},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"1270:2:29","type":""}]},{"expression":{"arguments":[{"name":"end_1","nodeType":"YulIdentifier","src":"1295:5:29"},{"name":"_1","nodeType":"YulIdentifier","src":"1302:2:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1288:6:29"},"nodeType":"YulFunctionCall","src":"1288:17:29"},"nodeType":"YulExpressionStatement","src":"1288:17:29"},{"nodeType":"YulVariableDeclaration","src":"1314:29:29","value":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"1336:6:29"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1330:5:29"},"nodeType":"YulFunctionCall","src":"1330:13:29"},"variables":[{"name":"length_1","nodeType":"YulTypedName","src":"1318:8:29","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"1391:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"1399:4:29","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1387:3:29"},"nodeType":"YulFunctionCall","src":"1387:17:29"},{"arguments":[{"name":"end_1","nodeType":"YulIdentifier","src":"1410:5:29"},{"kind":"number","nodeType":"YulLiteral","src":"1417:1:29","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1406:3:29"},"nodeType":"YulFunctionCall","src":"1406:13:29"},{"name":"length_1","nodeType":"YulIdentifier","src":"1421:8:29"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"1352:34:29"},"nodeType":"YulFunctionCall","src":"1352:78:29"},"nodeType":"YulExpressionStatement","src":"1352:78:29"},{"nodeType":"YulVariableDeclaration","src":"1439:30:29","value":{"arguments":[{"name":"end_1","nodeType":"YulIdentifier","src":"1453:5:29"},{"name":"length_1","nodeType":"YulIdentifier","src":"1460:8:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1449:3:29"},"nodeType":"YulFunctionCall","src":"1449:20:29"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"1443:2:29","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"1489:2:29"},{"kind":"number","nodeType":"YulLiteral","src":"1493:1:29","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1485:3:29"},"nodeType":"YulFunctionCall","src":"1485:10:29"},{"name":"_1","nodeType":"YulIdentifier","src":"1497:2:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1478:6:29"},"nodeType":"YulFunctionCall","src":"1478:22:29"},"nodeType":"YulExpressionStatement","src":"1478:22:29"},{"nodeType":"YulVariableDeclaration","src":"1509:29:29","value":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"1531:6:29"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1525:5:29"},"nodeType":"YulFunctionCall","src":"1525:13:29"},"variables":[{"name":"length_2","nodeType":"YulTypedName","src":"1513:8:29","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"1586:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"1594:4:29","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1582:3:29"},"nodeType":"YulFunctionCall","src":"1582:17:29"},{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"1605:2:29"},{"kind":"number","nodeType":"YulLiteral","src":"1609:1:29","type":"","value":"2"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1601:3:29"},"nodeType":"YulFunctionCall","src":"1601:10:29"},{"name":"length_2","nodeType":"YulIdentifier","src":"1613:8:29"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"1547:34:29"},"nodeType":"YulFunctionCall","src":"1547:75:29"},"nodeType":"YulExpressionStatement","src":"1547:75:29"},{"nodeType":"YulAssignment","src":"1631:32:29","value":{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"1646:2:29"},{"name":"length_2","nodeType":"YulIdentifier","src":"1650:8:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1642:3:29"},"nodeType":"YulFunctionCall","src":"1642:17:29"},{"kind":"number","nodeType":"YulLiteral","src":"1661:1:29","type":"","value":"2"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1638:3:29"},"nodeType":"YulFunctionCall","src":"1638:25:29"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"1631:3:29"}]}]},"name":"abi_encode_tuple_packed_t_string_memory_ptr_t_stringliteral_6f010af653ebe3cb07d297a4ef13366103d392ceffa68dd48232e6e9ff2187bf_t_string_memory_ptr_t_stringliteral_6f010af653ebe3cb07d297a4ef13366103d392ceffa68dd48232e6e9ff2187bf_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"1067:3:29","type":""},{"name":"value2","nodeType":"YulTypedName","src":"1072:6:29","type":""},{"name":"value1","nodeType":"YulTypedName","src":"1080:6:29","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1088:6:29","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"1099:3:29","type":""}],"src":"670:999:29"},{"body":{"nodeType":"YulBlock","src":"1706:152:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1723:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1726:77:29","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1716:6:29"},"nodeType":"YulFunctionCall","src":"1716:88:29"},"nodeType":"YulExpressionStatement","src":"1716:88:29"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1820:1:29","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"1823:4:29","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1813:6:29"},"nodeType":"YulFunctionCall","src":"1813:15:29"},"nodeType":"YulExpressionStatement","src":"1813:15:29"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1844:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1847:4:29","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1837:6:29"},"nodeType":"YulFunctionCall","src":"1837:15:29"},"nodeType":"YulExpressionStatement","src":"1837:15:29"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"1674:184:29"},{"body":{"nodeType":"YulBlock","src":"1895:152:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1912:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1915:77:29","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1905:6:29"},"nodeType":"YulFunctionCall","src":"1905:88:29"},"nodeType":"YulExpressionStatement","src":"1905:88:29"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2009:1:29","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"2012:4:29","type":"","value":"0x12"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2002:6:29"},"nodeType":"YulFunctionCall","src":"2002:15:29"},"nodeType":"YulExpressionStatement","src":"2002:15:29"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2033:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2036:4:29","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2026:6:29"},"nodeType":"YulFunctionCall","src":"2026:15:29"},"nodeType":"YulExpressionStatement","src":"2026:15:29"}]},"name":"panic_error_0x12","nodeType":"YulFunctionDefinition","src":"1863:184:29"}]},"contents":"{\n    { }\n    function copy_memory_to_memory_with_cleanup(src, dst, length)\n    {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        let length := mload(value0)\n        mstore(add(headStart, 32), length)\n        copy_memory_to_memory_with_cleanup(add(value0, 32), add(headStart, 64), length)\n        tail := add(add(headStart, and(add(length, 31), not(31))), 64)\n    }\n    function abi_encode_tuple_packed_t_string_memory_ptr_t_stringliteral_6f010af653ebe3cb07d297a4ef13366103d392ceffa68dd48232e6e9ff2187bf_t_string_memory_ptr_t_stringliteral_6f010af653ebe3cb07d297a4ef13366103d392ceffa68dd48232e6e9ff2187bf_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value2, value1, value0) -> end\n    {\n        let length := mload(value0)\n        copy_memory_to_memory_with_cleanup(add(value0, 0x20), pos, length)\n        let end_1 := add(pos, length)\n        let _1 := \".\"\n        mstore(end_1, _1)\n        let length_1 := mload(value1)\n        copy_memory_to_memory_with_cleanup(add(value1, 0x20), add(end_1, 1), length_1)\n        let _2 := add(end_1, length_1)\n        mstore(add(_2, 1), _1)\n        let length_2 := mload(value2)\n        copy_memory_to_memory_with_cleanup(add(value2, 0x20), add(_2, 2), length_2)\n        end := add(add(_2, length_2), 2)\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function panic_error_0x12()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x12)\n        revert(0, 0x24)\n    }\n}","id":29,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{"398":[{"length":32,"start":85}],"400":[{"length":32,"start":126}],"402":[{"length":32,"start":167}]},"linkReferences":{},"object":"608060405234801561001057600080fd5b506004361061002b5760003560e01c806354fd4d5014610030575b600080fd5b61003861004e565b6040516100459190610298565b60405180910390f35b60606100797f00000000000000000000000000000000000000000000000000000000000000006100f1565b6100a27f00000000000000000000000000000000000000000000000000000000000000006100f1565b6100cb7f00000000000000000000000000000000000000000000000000000000000000006100f1565b6040516020016100dd939291906102cb565b604051602081830303815290604052905090565b606060006100fe83610191565b600101905060008167ffffffffffffffff81111561011e5761011e610341565b6040519080825280601f01601f191660200182016040528015610148576020820181803683370190505b5090508181016020015b600019017f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a850494508461015257509392505050565b6000807a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000083106101da577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000830492506040015b6d04ee2d6d415b85acef81000000008310610206576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc10000831061022457662386f26fc10000830492506010015b6305f5e100831061023c576305f5e100830492506008015b612710831061025057612710830492506004015b60648310610262576064830492506002015b600a831061026e576001015b92915050565b60005b8381101561028f578181015183820152602001610277565b50506000910152565b60208152600082518060208401526102b7816040850160208701610274565b601f01601f19169190910160400192915050565b600084516102dd818460208901610274565b80830190507f2e000000000000000000000000000000000000000000000000000000000000008082528551610319816001850160208a01610274565b60019201918201528351610334816002840160208801610274565b0160020195945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fdfea26469706673582212208b782aeb23f5f6dbdca84a6850ee444fee0b111b689960fe57679eb2acebe53064736f6c63430008130033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x2B JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x54FD4D50 EQ PUSH2 0x30 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x38 PUSH2 0x4E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x45 SWAP2 SWAP1 PUSH2 0x298 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x60 PUSH2 0x79 PUSH32 0x0 PUSH2 0xF1 JUMP JUMPDEST PUSH2 0xA2 PUSH32 0x0 PUSH2 0xF1 JUMP JUMPDEST PUSH2 0xCB PUSH32 0x0 PUSH2 0xF1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xDD SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2CB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0xFE DUP4 PUSH2 0x191 JUMP JUMPDEST PUSH1 0x1 ADD SWAP1 POP PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x11E JUMPI PUSH2 0x11E PUSH2 0x341 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x148 JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP DUP2 DUP2 ADD PUSH1 0x20 ADD JUMPDEST PUSH1 0x0 NOT ADD PUSH32 0x3031323334353637383961626364656600000000000000000000000000000000 PUSH1 0xA DUP7 MOD BYTE DUP2 MSTORE8 PUSH1 0xA DUP6 DIV SWAP5 POP DUP5 PUSH2 0x152 JUMPI POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP4 LT PUSH2 0x1DA JUMPI PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP4 DIV SWAP3 POP PUSH1 0x40 ADD JUMPDEST PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 LT PUSH2 0x206 JUMPI PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 DIV SWAP3 POP PUSH1 0x20 ADD JUMPDEST PUSH7 0x2386F26FC10000 DUP4 LT PUSH2 0x224 JUMPI PUSH7 0x2386F26FC10000 DUP4 DIV SWAP3 POP PUSH1 0x10 ADD JUMPDEST PUSH4 0x5F5E100 DUP4 LT PUSH2 0x23C JUMPI PUSH4 0x5F5E100 DUP4 DIV SWAP3 POP PUSH1 0x8 ADD JUMPDEST PUSH2 0x2710 DUP4 LT PUSH2 0x250 JUMPI PUSH2 0x2710 DUP4 DIV SWAP3 POP PUSH1 0x4 ADD JUMPDEST PUSH1 0x64 DUP4 LT PUSH2 0x262 JUMPI PUSH1 0x64 DUP4 DIV SWAP3 POP PUSH1 0x2 ADD JUMPDEST PUSH1 0xA DUP4 LT PUSH2 0x26E JUMPI PUSH1 0x1 ADD JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x28F JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x277 JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x2B7 DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x274 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP5 MLOAD PUSH2 0x2DD DUP2 DUP5 PUSH1 0x20 DUP10 ADD PUSH2 0x274 JUMP JUMPDEST DUP1 DUP4 ADD SWAP1 POP PUSH32 0x2E00000000000000000000000000000000000000000000000000000000000000 DUP1 DUP3 MSTORE DUP6 MLOAD PUSH2 0x319 DUP2 PUSH1 0x1 DUP6 ADD PUSH1 0x20 DUP11 ADD PUSH2 0x274 JUMP JUMPDEST PUSH1 0x1 SWAP3 ADD SWAP2 DUP3 ADD MSTORE DUP4 MLOAD PUSH2 0x334 DUP2 PUSH1 0x2 DUP5 ADD PUSH1 0x20 DUP9 ADD PUSH2 0x274 JUMP JUMPDEST ADD PUSH1 0x2 ADD SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP12 PUSH25 0x2AEB23F5F6DBDCA84A6850EE444FEE0B111B689960FE57679E 0xB2 0xAC 0xEB 0xE5 ADDRESS PUSH5 0x736F6C6343 STOP ADDMOD SGT STOP CALLER ","sourceMap":"194:909:3:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;867:234;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;;909:13;994:24;1011:6;994:16;:24::i;:::-;1025;1042:6;1025:16;:24::i;:::-;1056:23;1073:5;1056:16;:23::i;:::-;977:103;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;934:160;;867:234;:::o;447:696:19:-;503:13;552:14;569:17;580:5;569:10;:17::i;:::-;589:1;569:21;552:38;;604:20;638:6;627:18;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;627:18:19;-1:-1:-1;604:41:19;-1:-1:-1;765:28:19;;;781:2;765:28;820:280;-1:-1:-1;;851:5:19;990:8;985:2;974:14;;969:30;851:5;956:44;1044:2;1035:11;;;-1:-1:-1;1064:21:19;820:280;1064:21;-1:-1:-1;1120:6:19;447:696;-1:-1:-1;;;447:696:19:o;10139:916:22:-;10192:7;;10276:8;10267:17;;10263:103;;10313:8;10304:17;;;-1:-1:-1;10349:2:22;10339:12;10263:103;10392:8;10383:5;:17;10379:103;;10429:8;10420:17;;;-1:-1:-1;10465:2:22;10455:12;10379:103;10508:8;10499:5;:17;10495:103;;10545:8;10536:17;;;-1:-1:-1;10581:2:22;10571:12;10495:103;10624:7;10615:5;:16;10611:100;;10660:7;10651:16;;;-1:-1:-1;10695:1:22;10685:11;10611:100;10737:7;10728:5;:16;10724:100;;10773:7;10764:16;;;-1:-1:-1;10808:1:22;10798:11;10724:100;10850:7;10841:5;:16;10837:100;;10886:7;10877:16;;;-1:-1:-1;10921:1:22;10911:11;10837:100;10963:7;10954:5;:16;10950:66;;11000:1;10990:11;10950:66;11042:6;10139:916;-1:-1:-1;;10139:916:22:o;14:250:29:-;99:1;109:113;123:6;120:1;117:13;109:113;;;199:11;;;193:18;180:11;;;173:39;145:2;138:10;109:113;;;-1:-1:-1;;256:1:29;238:16;;231:27;14:250::o;269:396::-;418:2;407:9;400:21;381:4;450:6;444:13;493:6;488:2;477:9;473:18;466:34;509:79;581:6;576:2;565:9;561:18;556:2;548:6;544:15;509:79;:::i;:::-;649:2;628:15;-1:-1:-1;;624:29:29;609:45;;;;656:2;605:54;;269:396;-1:-1:-1;;269:396:29:o;670:999::-;1099:3;1137:6;1131:13;1153:66;1212:6;1207:3;1200:4;1192:6;1188:17;1153:66;:::i;:::-;1250:6;1245:3;1241:16;1228:29;;1276:3;1302:2;1295:5;1288:17;1336:6;1330:13;1352:78;1421:8;1417:1;1410:5;1406:13;1399:4;1391:6;1387:17;1352:78;:::i;:::-;1493:1;1449:20;;1485:10;;;1478:22;1525:13;;1547:75;1525:13;1609:1;1601:10;;1594:4;1582:17;;1547:75;:::i;:::-;1642:17;1661:1;1638:25;;670:999;-1:-1:-1;;;;;670:999:29:o;1674:184::-;1726:77;1723:1;1716:88;1823:4;1820:1;1813:15;1847:4;1844:1;1837:15"},"gasEstimates":{"creation":{"codeDepositCost":"186800","executionCost":"infinite","totalCost":"infinite"},"external":{"version()":"infinite"}},"methodIdentifiers":{"version()":"54fd4d50"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"major\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"patch\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"A simple contract for managing contract versions.\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"major\":\"Major version number.\",\"minor\":\"Minor version number.\",\"patch\":\"Patch version number.\"}},\"version()\":{\"returns\":{\"_0\":\"Semver contract version as a string.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"version()\":{\"notice\":\"Returns the full semver contract version.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@ethereum-attestation-service/eas-contracts/contracts/Semver.sol\":\"Semver\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@ethereum-attestation-service/eas-contracts/contracts/Semver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\nimport { Strings } from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\n/**\\n * @dev A simple contract for managing contract versions.\\n */\\ncontract Semver {\\n    // Contract's major version number.\\n    uint256 private immutable _major;\\n\\n    // Contract's minor version number.\\n    uint256 private immutable _minor;\\n\\n    // Contract's patch version number.\\n    uint256 private immutable _path;\\n\\n    /**\\n     * @param major Major version number.\\n     * @param minor Minor version number.\\n     * @param patch Patch version number.\\n     */\\n    constructor(uint256 major, uint256 minor, uint256 patch) {\\n        _major = major;\\n        _minor = minor;\\n        _path = patch;\\n    }\\n\\n    /**\\n     * @notice Returns the full semver contract version.\\n     *\\n     * @return Semver contract version as a string.\\n     */\\n    function version() external view returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(Strings.toString(_major), \\\".\\\", Strings.toString(_minor), \\\".\\\", Strings.toString(_path))\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0xdd3bfff2af5b5cea194f5a771080d13ad458040825b148e0d7eb65f6e3a2a7c7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"version()":{"notice":"Returns the full semver contract version."}},"version":1}}},"@ethereum-attestation-service/eas-contracts/contracts/resolver/ISchemaResolver.sol":{"ISchemaResolver":{"abi":[{"inputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"bytes32","name":"schema","type":"bytes32"},{"internalType":"uint64","name":"time","type":"uint64"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"uint64","name":"revocationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Attestation","name":"attestation","type":"tuple"}],"name":"attest","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"isPayable","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"pure","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"bytes32","name":"schema","type":"bytes32"},{"internalType":"uint64","name":"time","type":"uint64"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"uint64","name":"revocationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Attestation[]","name":"attestations","type":"tuple[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"}],"name":"multiAttest","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"payable","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"bytes32","name":"schema","type":"bytes32"},{"internalType":"uint64","name":"time","type":"uint64"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"uint64","name":"revocationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Attestation[]","name":"attestations","type":"tuple[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"}],"name":"multiRevoke","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"payable","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"bytes32","name":"schema","type":"bytes32"},{"internalType":"uint64","name":"time","type":"uint64"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"uint64","name":"revocationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Attestation","name":"attestation","type":"tuple"}],"name":"revoke","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"payable","type":"function"}],"devdoc":{"kind":"dev","methods":{"attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))":{"details":"Processes an attestation and verifies whether it's valid.","params":{"attestation":"The new attestation."},"returns":{"_0":"Whether the attestation is valid."}},"isPayable()":{"details":"Returns whether the resolver supports ETH transfers."},"multiAttest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])":{"details":"Processes multiple attestations and verifies whether they are valid.","params":{"attestations":"The new attestations.","values":"Explicit ETH amounts which were sent with each attestation."},"returns":{"_0":"Whether all the attestations are valid."}},"multiRevoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])":{"details":"Processes revocation of multiple attestation and verifies they can be revoked.","params":{"attestations":"The existing attestations to be revoked.","values":"Explicit ETH amounts which were sent with each revocation."},"returns":{"_0":"Whether the attestations can be revoked."}},"revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))":{"details":"Processes an attestation revocation and verifies if it can be revoked.","params":{"attestation":"The existing attestation to be revoked."},"returns":{"_0":"Whether the attestation can be revoked."}}},"title":"The interface of an optional schema resolver.","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))":"e60c3505","isPayable()":"ce46e046","multiAttest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])":"91db0b7e","multiRevoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])":"88e5b2d9","revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))":"e49617e1"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"uid\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"schema\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"time\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"expirationTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"revocationTime\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"refUID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"attester\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"revocable\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct Attestation\",\"name\":\"attestation\",\"type\":\"tuple\"}],\"name\":\"attest\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPayable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"uid\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"schema\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"time\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"expirationTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"revocationTime\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"refUID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"attester\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"revocable\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct Attestation[]\",\"name\":\"attestations\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"multiAttest\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"uid\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"schema\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"time\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"expirationTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"revocationTime\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"refUID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"attester\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"revocable\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct Attestation[]\",\"name\":\"attestations\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"multiRevoke\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"uid\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"schema\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"time\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"expirationTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"revocationTime\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"refUID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"attester\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"revocable\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct Attestation\",\"name\":\"attestation\",\"type\":\"tuple\"}],\"name\":\"revoke\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))\":{\"details\":\"Processes an attestation and verifies whether it's valid.\",\"params\":{\"attestation\":\"The new attestation.\"},\"returns\":{\"_0\":\"Whether the attestation is valid.\"}},\"isPayable()\":{\"details\":\"Returns whether the resolver supports ETH transfers.\"},\"multiAttest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])\":{\"details\":\"Processes multiple attestations and verifies whether they are valid.\",\"params\":{\"attestations\":\"The new attestations.\",\"values\":\"Explicit ETH amounts which were sent with each attestation.\"},\"returns\":{\"_0\":\"Whether all the attestations are valid.\"}},\"multiRevoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])\":{\"details\":\"Processes revocation of multiple attestation and verifies they can be revoked.\",\"params\":{\"attestations\":\"The existing attestations to be revoked.\",\"values\":\"Explicit ETH amounts which were sent with each revocation.\"},\"returns\":{\"_0\":\"Whether the attestations can be revoked.\"}},\"revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))\":{\"details\":\"Processes an attestation revocation and verifies if it can be revoked.\",\"params\":{\"attestation\":\"The existing attestation to be revoked.\"},\"returns\":{\"_0\":\"Whether the attestation can be revoked.\"}}},\"title\":\"The interface of an optional schema resolver.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@ethereum-attestation-service/eas-contracts/contracts/resolver/ISchemaResolver.sol\":\"ISchemaResolver\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@ethereum-attestation-service/eas-contracts/contracts/Common.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// A representation of an empty/uninitialized UID.\\nbytes32 constant EMPTY_UID = 0;\\n\\n// A zero expiration represents an non-expiring attestation.\\nuint64 constant NO_EXPIRATION_TIME = 0;\\n\\nerror AccessDenied();\\nerror InvalidEAS();\\nerror InvalidLength();\\nerror InvalidSignature();\\nerror NotFound();\\n\\n/**\\n * @dev A struct representing EIP712 signature data.\\n */\\nstruct EIP712Signature {\\n    uint8 v; // The recovery ID.\\n    bytes32 r; // The x-coordinate of the nonce R.\\n    bytes32 s; // The signature data.\\n}\\n\\n/**\\n * @dev A struct representing a single attestation.\\n */\\nstruct Attestation {\\n    bytes32 uid; // A unique identifier of the attestation.\\n    bytes32 schema; // The unique identifier of the schema.\\n    uint64 time; // The time when the attestation was created (Unix timestamp).\\n    uint64 expirationTime; // The time when the attestation expires (Unix timestamp).\\n    uint64 revocationTime; // The time when the attestation was revoked (Unix timestamp).\\n    bytes32 refUID; // The UID of the related attestation.\\n    address recipient; // The recipient of the attestation.\\n    address attester; // The attester/sender of the attestation.\\n    bool revocable; // Whether the attestation is revocable.\\n    bytes data; // Custom attestation data.\\n}\\n\\n/**\\n * @dev A helper function to work with unchecked iterators in loops.\\n */\\nfunction uncheckedInc(uint256 i) pure returns (uint256 j) {\\n    unchecked {\\n        j = i + 1;\\n    }\\n}\\n\",\"keccak256\":\"0x4bab9ec76bdb009e9fb505c45a679d39c9e80771eb13ed901029a1068025752a\",\"license\":\"MIT\"},\"@ethereum-attestation-service/eas-contracts/contracts/resolver/ISchemaResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { Attestation } from \\\"../Common.sol\\\";\\n\\n/**\\n * @title The interface of an optional schema resolver.\\n */\\ninterface ISchemaResolver {\\n    /**\\n     * @dev Returns whether the resolver supports ETH transfers.\\n     */\\n    function isPayable() external pure returns (bool);\\n\\n    /**\\n     * @dev Processes an attestation and verifies whether it's valid.\\n     *\\n     * @param attestation The new attestation.\\n     *\\n     * @return Whether the attestation is valid.\\n     */\\n    function attest(Attestation calldata attestation) external payable returns (bool);\\n\\n    /**\\n     * @dev Processes multiple attestations and verifies whether they are valid.\\n     *\\n     * @param attestations The new attestations.\\n     * @param values Explicit ETH amounts which were sent with each attestation.\\n     *\\n     * @return Whether all the attestations are valid.\\n     */\\n    function multiAttest(\\n        Attestation[] calldata attestations,\\n        uint256[] calldata values\\n    ) external payable returns (bool);\\n\\n    /**\\n     * @dev Processes an attestation revocation and verifies if it can be revoked.\\n     *\\n     * @param attestation The existing attestation to be revoked.\\n     *\\n     * @return Whether the attestation can be revoked.\\n     */\\n    function revoke(Attestation calldata attestation) external payable returns (bool);\\n\\n    /**\\n     * @dev Processes revocation of multiple attestation and verifies they can be revoked.\\n     *\\n     * @param attestations The existing attestations to be revoked.\\n     * @param values Explicit ETH amounts which were sent with each revocation.\\n     *\\n     * @return Whether the attestations can be revoked.\\n     */\\n    function multiRevoke(\\n        Attestation[] calldata attestations,\\n        uint256[] calldata values\\n    ) external payable returns (bool);\\n}\\n\",\"keccak256\":\"0xc628c6540da258f76192eaa34c21699c9cbcc4a4029d7ee04e88dc9c18c981fd\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@ethereum-attestation-service/eas-contracts/contracts/resolver/SchemaResolver.sol":{"SchemaResolver":{"abi":[{"inputs":[],"name":"AccessDenied","type":"error"},{"inputs":[],"name":"InsufficientValue","type":"error"},{"inputs":[],"name":"InvalidEAS","type":"error"},{"inputs":[],"name":"NotPayable","type":"error"},{"inputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"bytes32","name":"schema","type":"bytes32"},{"internalType":"uint64","name":"time","type":"uint64"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"uint64","name":"revocationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Attestation","name":"attestation","type":"tuple"}],"name":"attest","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"isPayable","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"pure","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"bytes32","name":"schema","type":"bytes32"},{"internalType":"uint64","name":"time","type":"uint64"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"uint64","name":"revocationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Attestation[]","name":"attestations","type":"tuple[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"}],"name":"multiAttest","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"payable","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"bytes32","name":"schema","type":"bytes32"},{"internalType":"uint64","name":"time","type":"uint64"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"uint64","name":"revocationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Attestation[]","name":"attestations","type":"tuple[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"}],"name":"multiRevoke","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"payable","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"bytes32","name":"schema","type":"bytes32"},{"internalType":"uint64","name":"time","type":"uint64"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"uint64","name":"revocationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Attestation","name":"attestation","type":"tuple"}],"name":"revoke","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"version","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"stateMutability":"payable","type":"receive"}],"devdoc":{"kind":"dev","methods":{"attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))":{"details":"Processes an attestation and verifies whether it's valid.","params":{"attestation":"The new attestation."},"returns":{"_0":"Whether the attestation is valid."}},"constructor":{"details":"Creates a new resolver.","params":{"eas":"The address of the global EAS contract."}},"isPayable()":{"details":"Returns whether the resolver supports ETH transfers."},"multiAttest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])":{"details":"Processes multiple attestations and verifies whether they are valid.","params":{"attestations":"The new attestations.","values":"Explicit ETH amounts which were sent with each attestation."},"returns":{"_0":"Whether all the attestations are valid."}},"multiRevoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])":{"details":"Processes revocation of multiple attestation and verifies they can be revoked.","params":{"attestations":"The existing attestations to be revoked.","values":"Explicit ETH amounts which were sent with each revocation."},"returns":{"_0":"Whether the attestations can be revoked."}},"revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))":{"details":"Processes an attestation revocation and verifies if it can be revoked.","params":{"attestation":"The existing attestation to be revoked."},"returns":{"_0":"Whether the attestation can be revoked."}},"version()":{"returns":{"_0":"Semver contract version as a string."}}},"title":"A base resolver contract","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))":"e60c3505","isPayable()":"ce46e046","multiAttest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])":"91db0b7e","multiRevoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])":"88e5b2d9","revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))":"e49617e1","version()":"54fd4d50"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"AccessDenied\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientValue\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidEAS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotPayable\",\"type\":\"error\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"uid\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"schema\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"time\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"expirationTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"revocationTime\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"refUID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"attester\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"revocable\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct Attestation\",\"name\":\"attestation\",\"type\":\"tuple\"}],\"name\":\"attest\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPayable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"uid\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"schema\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"time\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"expirationTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"revocationTime\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"refUID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"attester\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"revocable\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct Attestation[]\",\"name\":\"attestations\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"multiAttest\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"uid\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"schema\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"time\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"expirationTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"revocationTime\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"refUID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"attester\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"revocable\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct Attestation[]\",\"name\":\"attestations\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"multiRevoke\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"uid\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"schema\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"time\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"expirationTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"revocationTime\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"refUID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"attester\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"revocable\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct Attestation\",\"name\":\"attestation\",\"type\":\"tuple\"}],\"name\":\"revoke\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))\":{\"details\":\"Processes an attestation and verifies whether it's valid.\",\"params\":{\"attestation\":\"The new attestation.\"},\"returns\":{\"_0\":\"Whether the attestation is valid.\"}},\"constructor\":{\"details\":\"Creates a new resolver.\",\"params\":{\"eas\":\"The address of the global EAS contract.\"}},\"isPayable()\":{\"details\":\"Returns whether the resolver supports ETH transfers.\"},\"multiAttest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])\":{\"details\":\"Processes multiple attestations and verifies whether they are valid.\",\"params\":{\"attestations\":\"The new attestations.\",\"values\":\"Explicit ETH amounts which were sent with each attestation.\"},\"returns\":{\"_0\":\"Whether all the attestations are valid.\"}},\"multiRevoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])\":{\"details\":\"Processes revocation of multiple attestation and verifies they can be revoked.\",\"params\":{\"attestations\":\"The existing attestations to be revoked.\",\"values\":\"Explicit ETH amounts which were sent with each revocation.\"},\"returns\":{\"_0\":\"Whether the attestations can be revoked.\"}},\"revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))\":{\"details\":\"Processes an attestation revocation and verifies if it can be revoked.\",\"params\":{\"attestation\":\"The existing attestation to be revoked.\"},\"returns\":{\"_0\":\"Whether the attestation can be revoked.\"}},\"version()\":{\"returns\":{\"_0\":\"Semver contract version as a string.\"}}},\"title\":\"A base resolver contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"version()\":{\"notice\":\"Returns the full semver contract version.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@ethereum-attestation-service/eas-contracts/contracts/resolver/SchemaResolver.sol\":\"SchemaResolver\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@ethereum-attestation-service/eas-contracts/contracts/Common.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// A representation of an empty/uninitialized UID.\\nbytes32 constant EMPTY_UID = 0;\\n\\n// A zero expiration represents an non-expiring attestation.\\nuint64 constant NO_EXPIRATION_TIME = 0;\\n\\nerror AccessDenied();\\nerror InvalidEAS();\\nerror InvalidLength();\\nerror InvalidSignature();\\nerror NotFound();\\n\\n/**\\n * @dev A struct representing EIP712 signature data.\\n */\\nstruct EIP712Signature {\\n    uint8 v; // The recovery ID.\\n    bytes32 r; // The x-coordinate of the nonce R.\\n    bytes32 s; // The signature data.\\n}\\n\\n/**\\n * @dev A struct representing a single attestation.\\n */\\nstruct Attestation {\\n    bytes32 uid; // A unique identifier of the attestation.\\n    bytes32 schema; // The unique identifier of the schema.\\n    uint64 time; // The time when the attestation was created (Unix timestamp).\\n    uint64 expirationTime; // The time when the attestation expires (Unix timestamp).\\n    uint64 revocationTime; // The time when the attestation was revoked (Unix timestamp).\\n    bytes32 refUID; // The UID of the related attestation.\\n    address recipient; // The recipient of the attestation.\\n    address attester; // The attester/sender of the attestation.\\n    bool revocable; // Whether the attestation is revocable.\\n    bytes data; // Custom attestation data.\\n}\\n\\n/**\\n * @dev A helper function to work with unchecked iterators in loops.\\n */\\nfunction uncheckedInc(uint256 i) pure returns (uint256 j) {\\n    unchecked {\\n        j = i + 1;\\n    }\\n}\\n\",\"keccak256\":\"0x4bab9ec76bdb009e9fb505c45a679d39c9e80771eb13ed901029a1068025752a\",\"license\":\"MIT\"},\"@ethereum-attestation-service/eas-contracts/contracts/IEAS.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { ISchemaRegistry } from \\\"./ISchemaRegistry.sol\\\";\\nimport { Attestation, EIP712Signature } from \\\"./Common.sol\\\";\\n\\n/**\\n * @dev A struct representing the arguments of the attestation request.\\n */\\nstruct AttestationRequestData {\\n    address recipient; // The recipient of the attestation.\\n    uint64 expirationTime; // The time when the attestation expires (Unix timestamp).\\n    bool revocable; // Whether the attestation is revocable.\\n    bytes32 refUID; // The UID of the related attestation.\\n    bytes data; // Custom attestation data.\\n    uint256 value; // An explicit ETH amount to send to the resolver. This is important to prevent accidental user errors.\\n}\\n\\n/**\\n * @dev A struct representing the full arguments of the attestation request.\\n */\\nstruct AttestationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    AttestationRequestData data; // The arguments of the attestation request.\\n}\\n\\n/**\\n * @dev A struct representing the full arguments of the full delegated attestation request.\\n */\\nstruct DelegatedAttestationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    AttestationRequestData data; // The arguments of the attestation request.\\n    EIP712Signature signature; // The EIP712 signature data.\\n    address attester; // The attesting account.\\n}\\n\\n/**\\n * @dev A struct representing the full arguments of the multi attestation request.\\n */\\nstruct MultiAttestationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    AttestationRequestData[] data; // The arguments of the attestation request.\\n}\\n\\n/**\\n * @dev A struct representing the full arguments of the delegated multi attestation request.\\n */\\nstruct MultiDelegatedAttestationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    AttestationRequestData[] data; // The arguments of the attestation requests.\\n    EIP712Signature[] signatures; // The EIP712 signatures data. Please note that the signatures are assumed to be signed with increasing nonces.\\n    address attester; // The attesting account.\\n}\\n\\n/**\\n * @dev A struct representing the arguments of the revocation request.\\n */\\nstruct RevocationRequestData {\\n    bytes32 uid; // The UID of the attestation to revoke.\\n    uint256 value; // An explicit ETH amount to send to the resolver. This is important to prevent accidental user errors.\\n}\\n\\n/**\\n * @dev A struct representing the full arguments of the revocation request.\\n */\\nstruct RevocationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    RevocationRequestData data; // The arguments of the revocation request.\\n}\\n\\n/**\\n * @dev A struct representing the arguments of the full delegated revocation request.\\n */\\nstruct DelegatedRevocationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    RevocationRequestData data; // The arguments of the revocation request.\\n    EIP712Signature signature; // The EIP712 signature data.\\n    address revoker; // The revoking account.\\n}\\n\\n/**\\n * @dev A struct representing the full arguments of the multi revocation request.\\n */\\nstruct MultiRevocationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    RevocationRequestData[] data; // The arguments of the revocation request.\\n}\\n\\n/**\\n * @dev A struct representing the full arguments of the delegated multi revocation request.\\n */\\nstruct MultiDelegatedRevocationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    RevocationRequestData[] data; // The arguments of the revocation requests.\\n    EIP712Signature[] signatures; // The EIP712 signatures data. Please note that the signatures are assumed to be signed with increasing nonces.\\n    address revoker; // The revoking account.\\n}\\n\\n/**\\n * @title EAS - Ethereum Attestation Service interface.\\n */\\ninterface IEAS {\\n    /**\\n     * @dev Emitted when an attestation has been made.\\n     *\\n     * @param recipient The recipient of the attestation.\\n     * @param attester The attesting account.\\n     * @param uid The UID the revoked attestation.\\n     * @param schema The UID of the schema.\\n     */\\n    event Attested(address indexed recipient, address indexed attester, bytes32 uid, bytes32 indexed schema);\\n\\n    /**\\n     * @dev Emitted when an attestation has been revoked.\\n     *\\n     * @param recipient The recipient of the attestation.\\n     * @param attester The attesting account.\\n     * @param schema The UID of the schema.\\n     * @param uid The UID the revoked attestation.\\n     */\\n    event Revoked(address indexed recipient, address indexed attester, bytes32 uid, bytes32 indexed schema);\\n\\n    /**\\n     * @dev Emitted when a data has been timestamped.\\n     *\\n     * @param data The data.\\n     * @param timestamp The timestamp.\\n     */\\n    event Timestamped(bytes32 indexed data, uint64 indexed timestamp);\\n\\n    /**\\n     * @dev Emitted when a data has been revoked.\\n     *\\n     * @param revoker The address of the revoker.\\n     * @param data The data.\\n     * @param timestamp The timestamp.\\n     */\\n    event RevokedOffchain(address indexed revoker, bytes32 indexed data, uint64 indexed timestamp);\\n\\n    /**\\n     * @dev Returns the address of the global schema registry.\\n     *\\n     * @return The address of the global schema registry.\\n     */\\n    function getSchemaRegistry() external view returns (ISchemaRegistry);\\n\\n    /**\\n     * @dev Attests to a specific schema.\\n     *\\n     * @param request The arguments of the attestation request.\\n     *\\n     * Example:\\n     *\\n     * attest({\\n     *     schema: \\\"0facc36681cbe2456019c1b0d1e7bedd6d1d40f6f324bf3dd3a4cef2999200a0\\\",\\n     *     data: {\\n     *         recipient: \\\"0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf\\\",\\n     *         expirationTime: 0,\\n     *         revocable: true,\\n     *         refUID: \\\"0x0000000000000000000000000000000000000000000000000000000000000000\\\",\\n     *         data: \\\"0xF00D\\\",\\n     *         value: 0\\n     *     }\\n     * })\\n     *\\n     * @return The UID of the new attestation.\\n     */\\n    function attest(AttestationRequest calldata request) external payable returns (bytes32);\\n\\n    /**\\n     * @dev Attests to a specific schema via the provided EIP712 signature.\\n     *\\n     * @param delegatedRequest The arguments of the delegated attestation request.\\n     *\\n     * Example:\\n     *\\n     * attestByDelegation({\\n     *     schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n     *     data: {\\n     *         recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',\\n     *         expirationTime: 1673891048,\\n     *         revocable: true,\\n     *         refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\\n     *         data: '0x1234',\\n     *         value: 0\\n     *     },\\n     *     signature: {\\n     *         v: 28,\\n     *         r: '0x148c...b25b',\\n     *         s: '0x5a72...be22'\\n     *     },\\n     *     attester: '0xc5E8740aD971409492b1A63Db8d83025e0Fc427e'\\n     * })\\n     *\\n     * @return The UID of the new attestation.\\n     */\\n    function attestByDelegation(\\n        DelegatedAttestationRequest calldata delegatedRequest\\n    ) external payable returns (bytes32);\\n\\n    /**\\n     * @dev Attests to multiple schemas.\\n     *\\n     * @param multiRequests The arguments of the multi attestation requests. The requests should be grouped by distinct\\n     * schema ids to benefit from the best batching optimization.\\n     *\\n     * Example:\\n     *\\n     * multiAttest([{\\n     *     schema: '0x33e9094830a5cba5554d1954310e4fbed2ef5f859ec1404619adea4207f391fd',\\n     *     data: [{\\n     *         recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',\\n     *         expirationTime: 1673891048,\\n     *         revocable: true,\\n     *         refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\\n     *         data: '0x1234',\\n     *         value: 1000\\n     *     },\\n     *     {\\n     *         recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',\\n     *         expirationTime: 0,\\n     *         revocable: false,\\n     *         refUID: '0x480df4a039efc31b11bfdf491b383ca138b6bde160988222a2a3509c02cee174',\\n     *         data: '0x00',\\n     *         value: 0\\n     *     }],\\n     * },\\n     * {\\n     *     schema: '0x5ac273ce41e3c8bfa383efe7c03e54c5f0bff29c9f11ef6ffa930fc84ca32425',\\n     *     data: [{\\n     *         recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',\\n     *         expirationTime: 0,\\n     *         revocable: true,\\n     *         refUID: '0x75bf2ed8dca25a8190c50c52db136664de25b2449535839008ccfdab469b214f',\\n     *         data: '0x12345678',\\n     *         value: 0\\n     *     },\\n     * }])\\n     *\\n     * @return The UIDs of the new attestations.\\n     */\\n    function multiAttest(MultiAttestationRequest[] calldata multiRequests) external payable returns (bytes32[] memory);\\n\\n    /**\\n     * @dev Attests to multiple schemas using via provided EIP712 signatures.\\n     *\\n     * @param multiDelegatedRequests The arguments of the delegated multi attestation requests. The requests should be\\n     * grouped by distinct schema ids to benefit from the best batching optimization.\\n     *\\n     * Example:\\n     *\\n     * multiAttestByDelegation([{\\n     *     schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n     *     data: [{\\n     *         recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',\\n     *         expirationTime: 1673891048,\\n     *         revocable: true,\\n     *         refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\\n     *         data: '0x1234',\\n     *         value: 0\\n     *     },\\n     *     {\\n     *         recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',\\n     *         expirationTime: 0,\\n     *         revocable: false,\\n     *         refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\\n     *         data: '0x00',\\n     *         value: 0\\n     *     }],\\n     *     signatures: [{\\n     *         v: 28,\\n     *         r: '0x148c...b25b',\\n     *         s: '0x5a72...be22'\\n     *     },\\n     *     {\\n     *         v: 28,\\n     *         r: '0x487s...67bb',\\n     *         s: '0x12ad...2366'\\n     *     }],\\n     *     attester: '0x1D86495b2A7B524D747d2839b3C645Bed32e8CF4'\\n     * }])\\n     *\\n     * @return The UIDs of the new attestations.\\n     */\\n    function multiAttestByDelegation(\\n        MultiDelegatedAttestationRequest[] calldata multiDelegatedRequests\\n    ) external payable returns (bytes32[] memory);\\n\\n    /**\\n     * @dev Revokes an existing attestation to a specific schema.\\n     *\\n     * Example:\\n     *\\n     * revoke({\\n     *     schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n     *     data: {\\n     *         uid: '0x101032e487642ee04ee17049f99a70590c735b8614079fc9275f9dd57c00966d',\\n     *         value: 0\\n     *     }\\n     * })\\n     *\\n     * @param request The arguments of the revocation request.\\n     */\\n    function revoke(RevocationRequest calldata request) external payable;\\n\\n    /**\\n     * @dev Revokes an existing attestation to a specific schema via the provided EIP712 signature.\\n     *\\n     * Example:\\n     *\\n     * revokeByDelegation({\\n     *     schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n     *     data: {\\n     *         uid: '0xcbbc12102578c642a0f7b34fe7111e41afa25683b6cd7b5a14caf90fa14d24ba',\\n     *         value: 0\\n     *     },\\n     *     signature: {\\n     *         v: 27,\\n     *         r: '0xb593...7142',\\n     *         s: '0x0f5b...2cce'\\n     *     },\\n     *     revoker: '0x244934dd3e31bE2c81f84ECf0b3E6329F5381992'\\n     * })\\n     *\\n     * @param delegatedRequest The arguments of the delegated revocation request.\\n     */\\n    function revokeByDelegation(DelegatedRevocationRequest calldata delegatedRequest) external payable;\\n\\n    /**\\n     * @dev Revokes existing attestations to multiple schemas.\\n     *\\n     * @param multiRequests The arguments of the multi revocation requests. The requests should be grouped by distinct\\n     * schema ids to benefit from the best batching optimization.\\n     *\\n     * Example:\\n     *\\n     * multiRevoke([{\\n     *     schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n     *     data: [{\\n     *         uid: '0x211296a1ca0d7f9f2cfebf0daaa575bea9b20e968d81aef4e743d699c6ac4b25',\\n     *         value: 1000\\n     *     },\\n     *     {\\n     *         uid: '0xe160ac1bd3606a287b4d53d5d1d6da5895f65b4b4bab6d93aaf5046e48167ade',\\n     *         value: 0\\n     *     }],\\n     * },\\n     * {\\n     *     schema: '0x5ac273ce41e3c8bfa383efe7c03e54c5f0bff29c9f11ef6ffa930fc84ca32425',\\n     *     data: [{\\n     *         uid: '0x053d42abce1fd7c8fcddfae21845ad34dae287b2c326220b03ba241bc5a8f019',\\n     *         value: 0\\n     *     },\\n     * }])\\n     */\\n    function multiRevoke(MultiRevocationRequest[] calldata multiRequests) external payable;\\n\\n    /**\\n     * @dev Revokes existing attestations to multiple schemas via provided EIP712 signatures.\\n     *\\n     * @param multiDelegatedRequests The arguments of the delegated multi revocation attestation requests. The requests should be\\n     * grouped by distinct schema ids to benefit from the best batching optimization.\\n     *\\n     * Example:\\n     *\\n     * multiRevokeByDelegation([{\\n     *     schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n     *     data: [{\\n     *         uid: '0x211296a1ca0d7f9f2cfebf0daaa575bea9b20e968d81aef4e743d699c6ac4b25',\\n     *         value: 1000\\n     *     },\\n     *     {\\n     *         uid: '0xe160ac1bd3606a287b4d53d5d1d6da5895f65b4b4bab6d93aaf5046e48167ade',\\n     *         value: 0\\n     *     }],\\n     *     signatures: [{\\n     *         v: 28,\\n     *         r: '0x148c...b25b',\\n     *         s: '0x5a72...be22'\\n     *     },\\n     *     {\\n     *         v: 28,\\n     *         r: '0x487s...67bb',\\n     *         s: '0x12ad...2366'\\n     *     }],\\n     *     revoker: '0x244934dd3e31bE2c81f84ECf0b3E6329F5381992'\\n     * }])\\n     *\\n     */\\n    function multiRevokeByDelegation(\\n        MultiDelegatedRevocationRequest[] calldata multiDelegatedRequests\\n    ) external payable;\\n\\n    /**\\n     * @dev Timestamps the specified bytes32 data.\\n     *\\n     * @param data The data to timestamp.\\n     *\\n     * @return The timestamp the data was timestamped with.\\n     */\\n    function timestamp(bytes32 data) external returns (uint64);\\n\\n    /**\\n     * @dev Timestamps the specified multiple bytes32 data.\\n     *\\n     * @param data The data to timestamp.\\n     *\\n     * @return The timestamp the data was timestamped with.\\n     */\\n    function multiTimestamp(bytes32[] calldata data) external returns (uint64);\\n\\n    /**\\n     * @dev Revokes the specified bytes32 data.\\n     *\\n     * @param data The data to timestamp.\\n     *\\n     * @return The timestamp the data was revoked with.\\n     */\\n    function revokeOffchain(bytes32 data) external returns (uint64);\\n\\n    /**\\n     * @dev Revokes the specified multiple bytes32 data.\\n     *\\n     * @param data The data to timestamp.\\n     *\\n     * @return The timestamp the data was revoked with.\\n     */\\n    function multiRevokeOffchain(bytes32[] calldata data) external returns (uint64);\\n\\n    /**\\n     * @dev Returns an existing attestation by UID.\\n     *\\n     * @param uid The UID of the attestation to retrieve.\\n     *\\n     * @return The attestation data members.\\n     */\\n    function getAttestation(bytes32 uid) external view returns (Attestation memory);\\n\\n    /**\\n     * @dev Checks whether an attestation exists.\\n     *\\n     * @param uid The UID of the attestation to retrieve.\\n     *\\n     * @return Whether an attestation exists.\\n     */\\n    function isAttestationValid(bytes32 uid) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the timestamp that the specified data was timestamped with.\\n     *\\n     * @param data The data to query.\\n     *\\n     * @return The timestamp the data was timestamped with.\\n     */\\n    function getTimestamp(bytes32 data) external view returns (uint64);\\n\\n    /**\\n     * @dev Returns the timestamp that the specified data was timestamped with.\\n     *\\n     * @param data The data to query.\\n     *\\n     * @return The timestamp the data was timestamped with.\\n     */\\n    function getRevokeOffchain(address revoker, bytes32 data) external view returns (uint64);\\n}\\n\",\"keccak256\":\"0xd530be686226f3c8d7b02bb59797901620f64749a02228539afc8b082a1ee036\",\"license\":\"MIT\"},\"@ethereum-attestation-service/eas-contracts/contracts/ISchemaRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { ISchemaResolver } from \\\"./resolver/ISchemaResolver.sol\\\";\\n\\n/**\\n * @title A struct representing a record for a submitted schema.\\n */\\nstruct SchemaRecord {\\n    bytes32 uid; // The unique identifier of the schema.\\n    ISchemaResolver resolver; // Optional schema resolver.\\n    bool revocable; // Whether the schema allows revocations explicitly.\\n    string schema; // Custom specification of the schema (e.g., an ABI).\\n}\\n\\n/**\\n * @title The global schema registry interface.\\n */\\ninterface ISchemaRegistry {\\n    /**\\n     * @dev Emitted when a new schema has been registered\\n     *\\n     * @param uid The schema UID.\\n     * @param registerer The address of the account used to register the schema.\\n     */\\n    event Registered(bytes32 indexed uid, address registerer);\\n\\n    /**\\n     * @dev Submits and reserves a new schema\\n     *\\n     * @param schema The schema data schema.\\n     * @param resolver An optional schema resolver.\\n     * @param revocable Whether the schema allows revocations explicitly.\\n     *\\n     * @return The UID of the new schema.\\n     */\\n    function register(string calldata schema, ISchemaResolver resolver, bool revocable) external returns (bytes32);\\n\\n    /**\\n     * @dev Returns an existing schema by UID\\n     *\\n     * @param uid The UID of the schema to retrieve.\\n     *\\n     * @return The schema data members.\\n     */\\n    function getSchema(bytes32 uid) external view returns (SchemaRecord memory);\\n}\\n\",\"keccak256\":\"0xef47e449dd02bd034e26b1dea505ce533906f8462fc674c938ed0e872a68d640\",\"license\":\"MIT\"},\"@ethereum-attestation-service/eas-contracts/contracts/Semver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\nimport { Strings } from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\n/**\\n * @dev A simple contract for managing contract versions.\\n */\\ncontract Semver {\\n    // Contract's major version number.\\n    uint256 private immutable _major;\\n\\n    // Contract's minor version number.\\n    uint256 private immutable _minor;\\n\\n    // Contract's patch version number.\\n    uint256 private immutable _path;\\n\\n    /**\\n     * @param major Major version number.\\n     * @param minor Minor version number.\\n     * @param patch Patch version number.\\n     */\\n    constructor(uint256 major, uint256 minor, uint256 patch) {\\n        _major = major;\\n        _minor = minor;\\n        _path = patch;\\n    }\\n\\n    /**\\n     * @notice Returns the full semver contract version.\\n     *\\n     * @return Semver contract version as a string.\\n     */\\n    function version() external view returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(Strings.toString(_major), \\\".\\\", Strings.toString(_minor), \\\".\\\", Strings.toString(_path))\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0xdd3bfff2af5b5cea194f5a771080d13ad458040825b148e0d7eb65f6e3a2a7c7\",\"license\":\"MIT\"},\"@ethereum-attestation-service/eas-contracts/contracts/resolver/ISchemaResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { Attestation } from \\\"../Common.sol\\\";\\n\\n/**\\n * @title The interface of an optional schema resolver.\\n */\\ninterface ISchemaResolver {\\n    /**\\n     * @dev Returns whether the resolver supports ETH transfers.\\n     */\\n    function isPayable() external pure returns (bool);\\n\\n    /**\\n     * @dev Processes an attestation and verifies whether it's valid.\\n     *\\n     * @param attestation The new attestation.\\n     *\\n     * @return Whether the attestation is valid.\\n     */\\n    function attest(Attestation calldata attestation) external payable returns (bool);\\n\\n    /**\\n     * @dev Processes multiple attestations and verifies whether they are valid.\\n     *\\n     * @param attestations The new attestations.\\n     * @param values Explicit ETH amounts which were sent with each attestation.\\n     *\\n     * @return Whether all the attestations are valid.\\n     */\\n    function multiAttest(\\n        Attestation[] calldata attestations,\\n        uint256[] calldata values\\n    ) external payable returns (bool);\\n\\n    /**\\n     * @dev Processes an attestation revocation and verifies if it can be revoked.\\n     *\\n     * @param attestation The existing attestation to be revoked.\\n     *\\n     * @return Whether the attestation can be revoked.\\n     */\\n    function revoke(Attestation calldata attestation) external payable returns (bool);\\n\\n    /**\\n     * @dev Processes revocation of multiple attestation and verifies they can be revoked.\\n     *\\n     * @param attestations The existing attestations to be revoked.\\n     * @param values Explicit ETH amounts which were sent with each revocation.\\n     *\\n     * @return Whether the attestations can be revoked.\\n     */\\n    function multiRevoke(\\n        Attestation[] calldata attestations,\\n        uint256[] calldata values\\n    ) external payable returns (bool);\\n}\\n\",\"keccak256\":\"0xc628c6540da258f76192eaa34c21699c9cbcc4a4029d7ee04e88dc9c18c981fd\",\"license\":\"MIT\"},\"@ethereum-attestation-service/eas-contracts/contracts/resolver/SchemaResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\nimport { IEAS, Attestation } from \\\"../IEAS.sol\\\";\\nimport { InvalidEAS, uncheckedInc } from \\\"../Common.sol\\\";\\nimport { Semver } from \\\"../Semver.sol\\\";\\n\\nimport { ISchemaResolver } from \\\"./ISchemaResolver.sol\\\";\\n\\n/**\\n * @title A base resolver contract\\n */\\nabstract contract SchemaResolver is ISchemaResolver, Semver {\\n    error AccessDenied();\\n    error InsufficientValue();\\n    error NotPayable();\\n\\n    // The global EAS contract.\\n    IEAS internal immutable _eas;\\n\\n    /**\\n     * @dev Creates a new resolver.\\n     *\\n     * @param eas The address of the global EAS contract.\\n     */\\n    constructor(IEAS eas) Semver(1, 0, 0) {\\n        if (address(eas) == address(0)) {\\n            revert InvalidEAS();\\n        }\\n\\n        _eas = eas;\\n    }\\n\\n    /**\\n     * @dev Ensures that only the EAS contract can make this call.\\n     */\\n    modifier onlyEAS() {\\n        _onlyEAS();\\n\\n        _;\\n    }\\n\\n    /**\\n     * @inheritdoc ISchemaResolver\\n     */\\n    function isPayable() public pure virtual returns (bool) {\\n        return false;\\n    }\\n\\n    /**\\n     * @dev ETH callback.\\n     */\\n    receive() external payable virtual {\\n        if (!isPayable()) {\\n            revert NotPayable();\\n        }\\n    }\\n\\n    /**\\n     * @inheritdoc ISchemaResolver\\n     */\\n    function attest(Attestation calldata attestation) external payable onlyEAS returns (bool) {\\n        return onAttest(attestation, msg.value);\\n    }\\n\\n    /**\\n     * @inheritdoc ISchemaResolver\\n     */\\n    function multiAttest(\\n        Attestation[] calldata attestations,\\n        uint256[] calldata values\\n    ) external payable onlyEAS returns (bool) {\\n        uint256 length = attestations.length;\\n\\n        // We are keeping track of the remaining ETH amount that can be sent to resolvers and will keep deducting\\n        // from it to verify that there isn't any attempt to send too much ETH to resolvers. Please note that unless\\n        // some ETH was stuck in the contract by accident (which shouldn't happen in normal conditions), it won't be\\n        // possible to send too much ETH anyway.\\n        uint256 remainingValue = msg.value;\\n\\n        for (uint256 i = 0; i < length; i = uncheckedInc(i)) {\\n            // Ensure that the attester/revoker doesn't try to spend more than available.\\n            uint256 value = values[i];\\n            if (value > remainingValue) {\\n                revert InsufficientValue();\\n            }\\n\\n            // Forward the attestation to the underlying resolver and revert in case it isn't approved.\\n            if (!onAttest(attestations[i], value)) {\\n                return false;\\n            }\\n\\n            unchecked {\\n                // Subtract the ETH amount, that was provided to this attestation, from the global remaining ETH amount.\\n                remainingValue -= value;\\n            }\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @inheritdoc ISchemaResolver\\n     */\\n    function revoke(Attestation calldata attestation) external payable onlyEAS returns (bool) {\\n        return onRevoke(attestation, msg.value);\\n    }\\n\\n    /**\\n     * @inheritdoc ISchemaResolver\\n     */\\n    function multiRevoke(\\n        Attestation[] calldata attestations,\\n        uint256[] calldata values\\n    ) external payable onlyEAS returns (bool) {\\n        uint256 length = attestations.length;\\n\\n        // We are keeping track of the remaining ETH amount that can be sent to resolvers and will keep deducting\\n        // from it to verify that there isn't any attempt to send too much ETH to resolvers. Please note that unless\\n        // some ETH was stuck in the contract by accident (which shouldn't happen in normal conditions), it won't be\\n        // possible to send too much ETH anyway.\\n        uint256 remainingValue = msg.value;\\n\\n        for (uint256 i = 0; i < length; i = uncheckedInc(i)) {\\n            // Ensure that the attester/revoker doesn't try to spend more than available.\\n            uint256 value = values[i];\\n            if (value > remainingValue) {\\n                revert InsufficientValue();\\n            }\\n\\n            // Forward the revocation to the underlying resolver and revert in case it isn't approved.\\n            if (!onRevoke(attestations[i], value)) {\\n                return false;\\n            }\\n\\n            unchecked {\\n                // Subtract the ETH amount, that was provided to this attestation, from the global remaining ETH amount.\\n                remainingValue -= value;\\n            }\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev A resolver callback that should be implemented by child contracts.\\n     *\\n     * @param attestation The new attestation.\\n     * @param value An explicit ETH amount that was sent to the resolver. Please note that this value is verified in\\n     * both attest() and multiAttest() callbacks EAS-only callbacks and that in case of multi attestations, it'll\\n     * usually hold that msg.value != value, since msg.value aggregated the sent ETH amounts for all the attestations\\n     * in the batch.\\n     *\\n     * @return Whether the attestation is valid.\\n     */\\n    function onAttest(Attestation calldata attestation, uint256 value) internal virtual returns (bool);\\n\\n    /**\\n     * @dev Processes an attestation revocation and verifies if it can be revoked.\\n     *\\n     * @param attestation The existing attestation to be revoked.\\n     * @param value An explicit ETH amount that was sent to the resolver. Please note that this value is verified in\\n     * both revoke() and multiRevoke() callbacks EAS-only callbacks and that in case of multi attestations, it'll\\n     * usually hold that msg.value != value, since msg.value aggregated the sent ETH amounts for all the attestations\\n     * in the batch.\\n     *\\n     * @return Whether the attestation can be revoked.\\n     */\\n    function onRevoke(Attestation calldata attestation, uint256 value) internal virtual returns (bool);\\n\\n    /**\\n     * @dev Ensures that only the EAS contract can make this call.\\n     */\\n    function _onlyEAS() private view {\\n        if (msg.sender != address(_eas)) {\\n            revert AccessDenied();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8bac9997f3c6b2e9a165342e35c1263d1942ce55a98ecbe0aa6ec84fcb6538d7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"version()":{"notice":"Returns the full semver contract version."}},"version":1}}},"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol":{"OwnableUpgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.","events":{"Initialized(uint8)":{"details":"Triggered when the contract has been initialized or reinitialized."}},"kind":"dev","methods":{"owner()":{"details":"Returns the address of the current owner."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"stateVariables":{"__gap":{"details":"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"owner()":"8da5cb5b","renounceOwnership()":"715018a6","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.\",\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":\"OwnableUpgradeable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x4075622496acc77fd6d4de4cc30a8577a744d5c75afad33fdeacf1704d6eda98\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":983,"contract":"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":986,"contract":"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":1516,"contract":"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"},{"astId":830,"contract":"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable","label":"_owner","offset":0,"slot":"51","type":"t_address"},{"astId":950,"contract":"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable","label":"__gap","offset":0,"slot":"52","type":"t_array(t_uint256)49_storage"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_uint256)49_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[49]","numberOfBytes":"1568"},"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/interfaces/IERC5267Upgradeable.sol":{"IERC5267Upgradeable":{"abi":[{"anonymous":false,"inputs":[],"name":"EIP712DomainChanged","type":"event"},{"inputs":[],"name":"eip712Domain","outputs":[{"internalType":"bytes1","name":"fields","type":"bytes1"},{"internalType":"string","name":"name","type":"string"},{"internalType":"string","name":"version","type":"string"},{"internalType":"uint256","name":"chainId","type":"uint256"},{"internalType":"address","name":"verifyingContract","type":"address"},{"internalType":"bytes32","name":"salt","type":"bytes32"},{"internalType":"uint256[]","name":"extensions","type":"uint256[]"}],"stateMutability":"view","type":"function"}],"devdoc":{"events":{"EIP712DomainChanged()":{"details":"MAY be emitted to signal that the domain could have changed."}},"kind":"dev","methods":{"eip712Domain()":{"details":"returns the fields and values that describe the domain separator used by this contract for EIP-712 signature."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"eip712Domain()":"84b0196e"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[],\"name\":\"EIP712DomainChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"eip712Domain\",\"outputs\":[{\"internalType\":\"bytes1\",\"name\":\"fields\",\"type\":\"bytes1\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"verifyingContract\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"extensions\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"EIP712DomainChanged()\":{\"details\":\"MAY be emitted to signal that the domain could have changed.\"}},\"kind\":\"dev\",\"methods\":{\"eip712Domain()\":{\"details\":\"returns the fields and values that describe the domain separator used by this contract for EIP-712 signature.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/interfaces/IERC5267Upgradeable.sol\":\"IERC5267Upgradeable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/interfaces/IERC5267Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC5267.sol)\\n\\npragma solidity ^0.8.0;\\n\\ninterface IERC5267Upgradeable {\\n    /**\\n     * @dev MAY be emitted to signal that the domain could have changed.\\n     */\\n    event EIP712DomainChanged();\\n\\n    /**\\n     * @dev returns the fields and values that describe the domain separator used by this contract for EIP-712\\n     * signature.\\n     */\\n    function eip712Domain()\\n        external\\n        view\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        );\\n}\\n\",\"keccak256\":\"0xe562dab443278837fa50faddb76743399e942181881db8dccaea3bd1712994db\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol":{"Initializable":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"}],"devdoc":{"custom:oz-upgrades-unsafe-allow":"constructor constructor() {     _disableInitializers(); } ``` ====","details":"This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer function so it can only be called once. The {initializer} modifier provided by this contract will have this effect. The initialization functions use a version number. Once a version number is used, it is consumed and cannot be reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in case an upgrade adds a module that needs to be initialized. For example: [.hljs-theme-light.nopadding] ```solidity contract MyToken is ERC20Upgradeable {     function initialize() initializer public {         __ERC20_init(\"MyToken\", \"MTK\");     } } contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {     function initializeV2() reinitializer(2) public {         __ERC20Permit_init(\"MyToken\");     } } ``` TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}. CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure that all initializers are idempotent. This is not verified automatically as constructors are by Solidity. [CAUTION] ==== Avoid leaving a contract uninitialized. An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke the {_disableInitializers} function in the constructor to automatically lock it when it is deployed: [.hljs-theme-light.nopadding] ```","events":{"Initialized(uint8)":{"details":"Triggered when the contract has been initialized or reinitialized."}},"kind":"dev","methods":{},"stateVariables":{"_initialized":{"custom:oz-retyped-from":"bool","details":"Indicates that the contract has been initialized."},"_initializing":{"details":"Indicates that the contract is in the process of being initialized."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"}],\"devdoc\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor constructor() {     _disableInitializers(); } ``` ====\",\"details\":\"This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer function so it can only be called once. The {initializer} modifier provided by this contract will have this effect. The initialization functions use a version number. Once a version number is used, it is consumed and cannot be reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in case an upgrade adds a module that needs to be initialized. For example: [.hljs-theme-light.nopadding] ```solidity contract MyToken is ERC20Upgradeable {     function initialize() initializer public {         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");     } } contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {     function initializeV2() reinitializer(2) public {         __ERC20Permit_init(\\\"MyToken\\\");     } } ``` TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}. CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure that all initializers are idempotent. This is not verified automatically as constructors are by Solidity. [CAUTION] ==== Avoid leaving a contract uninitialized. An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke the {_disableInitializers} function in the constructor to automatically lock it when it is deployed: [.hljs-theme-light.nopadding] ```\",\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"_initialized\":{\"custom:oz-retyped-from\":\"bool\",\"details\":\"Indicates that the contract has been initialized.\"},\"_initializing\":{\"details\":\"Indicates that the contract is in the process of being initialized.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":\"Initializable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":983,"contract":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":986,"contract":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"}],"types":{"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol":{"AddressUpgradeable":{"abi":[],"devdoc":{"details":"Collection of functions related to the address type","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212208f24ba9a5a6e3582a4aaa793687200136073a24ff34e004616c7d8fc302c652d64736f6c63430008130033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP16 0x24 0xBA SWAP11 GAS PUSH15 0x3582A4AAA793687200136073A24FF3 0x4E STOP CHAINID AND 0xC7 0xD8 0xFC ADDRESS 0x2C PUSH6 0x2D64736F6C63 NUMBER STOP ADDMOD SGT STOP CALLER ","sourceMap":"194:9180:9:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;194:9180:9;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212208f24ba9a5a6e3582a4aaa793687200136073a24ff34e004616c7d8fc302c652d64736f6c63430008130033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP16 0x24 0xBA SWAP11 GAS PUSH15 0x3582A4AAA793687200136073A24FF3 0x4E STOP CHAINID AND 0xC7 0xD8 0xFC ADDRESS 0x2C PUSH6 0x2D64736F6C63 NUMBER STOP ADDMOD SGT STOP CALLER ","sourceMap":"194:9180:9:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"_revert(bytes memory,string memory)":"infinite","functionCall(address,bytes memory)":"infinite","functionCall(address,bytes memory,string memory)":"infinite","functionCallWithValue(address,bytes memory,uint256)":"infinite","functionCallWithValue(address,bytes memory,uint256,string memory)":"infinite","functionDelegateCall(address,bytes memory)":"infinite","functionDelegateCall(address,bytes memory,string memory)":"infinite","functionStaticCall(address,bytes memory)":"infinite","functionStaticCall(address,bytes memory,string memory)":"infinite","isContract(address)":"infinite","sendValue(address payable,uint256)":"infinite","verifyCallResult(bool,bytes memory,string memory)":"infinite","verifyCallResultFromTarget(address,bool,bytes memory,string memory)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Collection of functions related to the address type\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":\"AddressUpgradeable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol":{"ContextUpgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"}],"devdoc":{"details":"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.","events":{"Initialized(uint8)":{"details":"Triggered when the contract has been initialized or reinitialized."}},"kind":"dev","methods":{},"stateVariables":{"__gap":{"details":"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"}],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":\"ContextUpgradeable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":983,"contract":"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":986,"contract":"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":1516,"contract":"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"}],"types":{"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol":{"StringsUpgradeable":{"abi":[],"devdoc":{"details":"String operations.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220de5f436c77cbbb4ecaf850b95422593ef5f1924c989aa859581df9855f1015db64736f6c63430008130033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xDE 0x5F NUMBER PUSH13 0x77CBBB4ECAF850B95422593EF5 CALL SWAP3 0x4C SWAP9 SWAP11 0xA8 MSIZE PC SAR 0xF9 DUP6 0x5F LT ISZERO 0xDB PUSH5 0x736F6C6343 STOP ADDMOD SGT STOP CALLER ","sourceMap":"242:2603:11:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;242:2603:11;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220de5f436c77cbbb4ecaf850b95422593ef5f1924c989aa859581df9855f1015db64736f6c63430008130033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xDE 0x5F NUMBER PUSH13 0x77CBBB4ECAF850B95422593EF5 CALL SWAP3 0x4C SWAP9 SWAP11 0xA8 MSIZE PC SAR 0xF9 DUP6 0x5F LT ISZERO 0xDB PUSH5 0x736F6C6343 STOP ADDMOD SGT STOP CALLER ","sourceMap":"242:2603:11:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"equal(string memory,string memory)":"infinite","toHexString(address)":"infinite","toHexString(uint256)":"infinite","toHexString(uint256,uint256)":"infinite","toString(int256)":"infinite","toString(uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"String operations.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":\"StringsUpgradeable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\nimport \\\"./math/SignedMathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMathUpgradeable.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0xb96dc79b65b7c37937919dcdb356a969ce0aa2e8338322bf4dc027a3c9c9a7eb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2bc0007987c229ae7624eb29be6a9b84f6a6a5872f76248b15208b131ea41c4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMathUpgradeable {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x88f6b7bba3ee33eeb741f9a0f5bc98b6e6e352d0fe4905377bb328590f84095a\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol":{"ECDSAUpgradeable":{"abi":[],"devdoc":{"details":"Elliptic Curve Digital Signature Algorithm (ECDSA) operations. These functions can be used to verify that a message was signed by the holder of the private keys of a given address.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212203dd5cf46a38852f42e7367d604545b37c5cf125b7ddae25ea090e5b89d05474264736f6c63430008130033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 RETURNDATASIZE 0xD5 0xCF CHAINID LOG3 DUP9 MSTORE DELEGATECALL 0x2E PUSH20 0x67D604545B37C5CF125B7DDAE25EA090E5B89D05 SELFBALANCE TIMESTAMP PUSH5 0x736F6C6343 STOP ADDMOD SGT STOP CALLER ","sourceMap":"380:8783:12:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;380:8783:12;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212203dd5cf46a38852f42e7367d604545b37c5cf125b7ddae25ea090e5b89d05474264736f6c63430008130033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 RETURNDATASIZE 0xD5 0xCF CHAINID LOG3 DUP9 MSTORE DELEGATECALL 0x2E PUSH20 0x67D604545B37C5CF125B7DDAE25EA090E5B89D05 SELFBALANCE TIMESTAMP PUSH5 0x736F6C6343 STOP ADDMOD SGT STOP CALLER ","sourceMap":"380:8783:12:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"_throwError(enum ECDSAUpgradeable.RecoverError)":"infinite","recover(bytes32,bytes memory)":"infinite","recover(bytes32,bytes32,bytes32)":"infinite","recover(bytes32,uint8,bytes32,bytes32)":"infinite","toDataWithIntendedValidatorHash(address,bytes memory)":"infinite","toEthSignedMessageHash(bytes memory)":"infinite","toEthSignedMessageHash(bytes32)":"infinite","toTypedDataHash(bytes32,bytes32)":"infinite","tryRecover(bytes32,bytes memory)":"infinite","tryRecover(bytes32,bytes32,bytes32)":"infinite","tryRecover(bytes32,uint8,bytes32,bytes32)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Elliptic Curve Digital Signature Algorithm (ECDSA) operations. These functions can be used to verify that a message was signed by the holder of the private keys of a given address.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\":\"ECDSAUpgradeable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\nimport \\\"./math/SignedMathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMathUpgradeable.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0xb96dc79b65b7c37937919dcdb356a969ce0aa2e8338322bf4dc027a3c9c9a7eb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../StringsUpgradeable.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSAUpgradeable {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\")\\n            mstore(0x1c, hash)\\n            message := keccak256(0x00, 0x3c)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", StringsUpgradeable.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, \\\"\\\\x19\\\\x01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            data := keccak256(ptr, 0x42)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\\n     * `validator` and `data` according to the version 0 of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x00\\\", validator, data));\\n    }\\n}\\n\",\"keccak256\":\"0xa014f65d84b02827055d99993ccdbfb4b56b2c9e91eb278d82a93330659d06e4\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2bc0007987c229ae7624eb29be6a9b84f6a6a5872f76248b15208b131ea41c4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMathUpgradeable {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x88f6b7bba3ee33eeb741f9a0f5bc98b6e6e352d0fe4905377bb328590f84095a\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol":{"EIP712Upgradeable":{"abi":[{"anonymous":false,"inputs":[],"name":"EIP712DomainChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"inputs":[],"name":"eip712Domain","outputs":[{"internalType":"bytes1","name":"fields","type":"bytes1"},{"internalType":"string","name":"name","type":"string"},{"internalType":"string","name":"version","type":"string"},{"internalType":"uint256","name":"chainId","type":"uint256"},{"internalType":"address","name":"verifyingContract","type":"address"},{"internalType":"bytes32","name":"salt","type":"bytes32"},{"internalType":"uint256[]","name":"extensions","type":"uint256[]"}],"stateMutability":"view","type":"function"}],"devdoc":{"custom:storage-size":"52","details":"https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data. The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible, thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding they need in their contracts using a combination of `abi.encode` and `keccak256`. This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA ({_hashTypedDataV4}). The implementation of the domain separator was designed to be as efficient as possible while still properly updating the chain id to protect against replay attacks on an eventual fork of the chain. NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask]. NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain separator of the implementation contract. This will cause the `_domainSeparatorV4` function to always rebuild the separator from the immutable values, which is cheaper than accessing a cached version in cold storage. _Available since v3.4._","events":{"EIP712DomainChanged()":{"details":"MAY be emitted to signal that the domain could have changed."},"Initialized(uint8)":{"details":"Triggered when the contract has been initialized or reinitialized."}},"kind":"dev","methods":{"eip712Domain()":{"details":"See {EIP-5267}. _Available since v4.9._"}},"stateVariables":{"__gap":{"details":"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"},"_hashedName":{"custom:oz-renamed-from":"_HASHED_NAME"},"_hashedVersion":{"custom:oz-renamed-from":"_HASHED_VERSION"}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"eip712Domain()":"84b0196e"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[],\"name\":\"EIP712DomainChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"eip712Domain\",\"outputs\":[{\"internalType\":\"bytes1\",\"name\":\"fields\",\"type\":\"bytes1\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"verifyingContract\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"extensions\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"custom:storage-size\":\"52\",\"details\":\"https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data. The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible, thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding they need in their contracts using a combination of `abi.encode` and `keccak256`. This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA ({_hashTypedDataV4}). The implementation of the domain separator was designed to be as efficient as possible while still properly updating the chain id to protect against replay attacks on an eventual fork of the chain. NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask]. NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain separator of the implementation contract. This will cause the `_domainSeparatorV4` function to always rebuild the separator from the immutable values, which is cheaper than accessing a cached version in cold storage. _Available since v3.4._\",\"events\":{\"EIP712DomainChanged()\":{\"details\":\"MAY be emitted to signal that the domain could have changed.\"},\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{\"eip712Domain()\":{\"details\":\"See {EIP-5267}. _Available since v4.9._\"}},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"},\"_hashedName\":{\"custom:oz-renamed-from\":\"_HASHED_NAME\"},\"_hashedVersion\":{\"custom:oz-renamed-from\":\"_HASHED_VERSION\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":\"EIP712Upgradeable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/interfaces/IERC5267Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC5267.sol)\\n\\npragma solidity ^0.8.0;\\n\\ninterface IERC5267Upgradeable {\\n    /**\\n     * @dev MAY be emitted to signal that the domain could have changed.\\n     */\\n    event EIP712DomainChanged();\\n\\n    /**\\n     * @dev returns the fields and values that describe the domain separator used by this contract for EIP-712\\n     * signature.\\n     */\\n    function eip712Domain()\\n        external\\n        view\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        );\\n}\\n\",\"keccak256\":\"0xe562dab443278837fa50faddb76743399e942181881db8dccaea3bd1712994db\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\nimport \\\"./math/SignedMathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMathUpgradeable.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0xb96dc79b65b7c37937919dcdb356a969ce0aa2e8338322bf4dc027a3c9c9a7eb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../StringsUpgradeable.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSAUpgradeable {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\")\\n            mstore(0x1c, hash)\\n            message := keccak256(0x00, 0x3c)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", StringsUpgradeable.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, \\\"\\\\x19\\\\x01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            data := keccak256(ptr, 0x42)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\\n     * `validator` and `data` according to the version 0 of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x00\\\", validator, data));\\n    }\\n}\\n\",\"keccak256\":\"0xa014f65d84b02827055d99993ccdbfb4b56b2c9e91eb278d82a93330659d06e4\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/EIP712.sol)\\n\\npragma solidity ^0.8.8;\\n\\nimport \\\"./ECDSAUpgradeable.sol\\\";\\nimport \\\"../../interfaces/IERC5267Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain\\n * separator of the implementation contract. This will cause the `_domainSeparatorV4` function to always rebuild the\\n * separator from the immutable values, which is cheaper than accessing a cached version in cold storage.\\n *\\n * _Available since v3.4._\\n *\\n * @custom:storage-size 52\\n */\\nabstract contract EIP712Upgradeable is Initializable, IERC5267Upgradeable {\\n    bytes32 private constant _TYPE_HASH =\\n        keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n\\n    /// @custom:oz-renamed-from _HASHED_NAME\\n    bytes32 private _hashedName;\\n    /// @custom:oz-renamed-from _HASHED_VERSION\\n    bytes32 private _hashedVersion;\\n\\n    string private _name;\\n    string private _version;\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    function __EIP712_init(string memory name, string memory version) internal onlyInitializing {\\n        __EIP712_init_unchained(name, version);\\n    }\\n\\n    function __EIP712_init_unchained(string memory name, string memory version) internal onlyInitializing {\\n        _name = name;\\n        _version = version;\\n\\n        // Reset prior values in storage if upgrading\\n        _hashedName = 0;\\n        _hashedVersion = 0;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        return _buildDomainSeparator();\\n    }\\n\\n    function _buildDomainSeparator() private view returns (bytes32) {\\n        return keccak256(abi.encode(_TYPE_HASH, _EIP712NameHash(), _EIP712VersionHash(), block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSAUpgradeable.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n\\n    /**\\n     * @dev See {EIP-5267}.\\n     *\\n     * _Available since v4.9._\\n     */\\n    function eip712Domain()\\n        public\\n        view\\n        virtual\\n        override\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        )\\n    {\\n        // If the hashed name and version in storage are non-zero, the contract hasn't been properly initialized\\n        // and the EIP712 domain is not reliable, as it will be missing name and version.\\n        require(_hashedName == 0 && _hashedVersion == 0, \\\"EIP712: Uninitialized\\\");\\n\\n        return (\\n            hex\\\"0f\\\", // 01111\\n            _EIP712Name(),\\n            _EIP712Version(),\\n            block.chainid,\\n            address(this),\\n            bytes32(0),\\n            new uint256[](0)\\n        );\\n    }\\n\\n    /**\\n     * @dev The name parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712Name() internal virtual view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev The version parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712Version() internal virtual view returns (string memory) {\\n        return _version;\\n    }\\n\\n    /**\\n     * @dev The hash of the name parameter for the EIP712 domain.\\n     *\\n     * NOTE: In previous versions this function was virtual. In this version you should override `_EIP712Name` instead.\\n     */\\n    function _EIP712NameHash() internal view returns (bytes32) {\\n        string memory name = _EIP712Name();\\n        if (bytes(name).length > 0) {\\n            return keccak256(bytes(name));\\n        } else {\\n            // If the name is empty, the contract may have been upgraded without initializing the new storage.\\n            // We return the name hash in storage if non-zero, otherwise we assume the name is empty by design.\\n            bytes32 hashedName = _hashedName;\\n            if (hashedName != 0) {\\n                return hashedName;\\n            } else {\\n                return keccak256(\\\"\\\");\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev The hash of the version parameter for the EIP712 domain.\\n     *\\n     * NOTE: In previous versions this function was virtual. In this version you should override `_EIP712Version` instead.\\n     */\\n    function _EIP712VersionHash() internal view returns (bytes32) {\\n        string memory version = _EIP712Version();\\n        if (bytes(version).length > 0) {\\n            return keccak256(bytes(version));\\n        } else {\\n            // If the version is empty, the contract may have been upgraded without initializing the new storage.\\n            // We return the version hash in storage if non-zero, otherwise we assume the version is empty by design.\\n            bytes32 hashedVersion = _hashedVersion;\\n            if (hashedVersion != 0) {\\n                return hashedVersion;\\n            } else {\\n                return keccak256(\\\"\\\");\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[48] private __gap;\\n}\\n\",\"keccak256\":\"0xeb8d6be406a373771724922eb41b5d593bc8e2dc705daa22cd1145cfc8f5a3a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2bc0007987c229ae7624eb29be6a9b84f6a6a5872f76248b15208b131ea41c4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMathUpgradeable {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x88f6b7bba3ee33eeb741f9a0f5bc98b6e6e352d0fe4905377bb328590f84095a\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":983,"contract":"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:EIP712Upgradeable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":986,"contract":"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:EIP712Upgradeable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":2130,"contract":"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:EIP712Upgradeable","label":"_hashedName","offset":0,"slot":"1","type":"t_bytes32"},{"astId":2133,"contract":"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:EIP712Upgradeable","label":"_hashedVersion","offset":0,"slot":"2","type":"t_bytes32"},{"astId":2135,"contract":"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:EIP712Upgradeable","label":"_name","offset":0,"slot":"3","type":"t_string_storage"},{"astId":2137,"contract":"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:EIP712Upgradeable","label":"_version","offset":0,"slot":"4","type":"t_string_storage"},{"astId":2395,"contract":"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:EIP712Upgradeable","label":"__gap","offset":0,"slot":"5","type":"t_array(t_uint256)48_storage"}],"types":{"t_array(t_uint256)48_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[48]","numberOfBytes":"1536"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol":{"MathUpgradeable":{"abi":[],"devdoc":{"details":"Standard math utilities missing in the Solidity language.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212205be48b501992482ac0667b4163bf1b210487373482b5679764505f866fefa3f664736f6c63430008130033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 JUMPDEST 0xE4 DUP12 POP NOT SWAP3 BASEFEE 0x2A 0xC0 PUSH7 0x7B4163BF1B2104 DUP8 CALLDATACOPY CALLVALUE DUP3 0xB5 PUSH8 0x9764505F866FEFA3 0xF6 PUSH5 0x736F6C6343 STOP ADDMOD SGT STOP CALLER ","sourceMap":"202:12593:14:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;202:12593:14;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212205be48b501992482ac0667b4163bf1b210487373482b5679764505f866fefa3f664736f6c63430008130033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 JUMPDEST 0xE4 DUP12 POP NOT SWAP3 BASEFEE 0x2A 0xC0 PUSH7 0x7B4163BF1B2104 DUP8 CALLDATACOPY CALLVALUE DUP3 0xB5 PUSH8 0x9764505F866FEFA3 0xF6 PUSH5 0x736F6C6343 STOP ADDMOD SGT STOP CALLER ","sourceMap":"202:12593:14:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"average(uint256,uint256)":"infinite","ceilDiv(uint256,uint256)":"infinite","log10(uint256)":"infinite","log10(uint256,enum MathUpgradeable.Rounding)":"infinite","log2(uint256)":"infinite","log2(uint256,enum MathUpgradeable.Rounding)":"infinite","log256(uint256)":"infinite","log256(uint256,enum MathUpgradeable.Rounding)":"infinite","max(uint256,uint256)":"infinite","min(uint256,uint256)":"infinite","mulDiv(uint256,uint256,uint256)":"infinite","mulDiv(uint256,uint256,uint256,enum MathUpgradeable.Rounding)":"infinite","sqrt(uint256)":"infinite","sqrt(uint256,enum MathUpgradeable.Rounding)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Standard math utilities missing in the Solidity language.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":\"MathUpgradeable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2bc0007987c229ae7624eb29be6a9b84f6a6a5872f76248b15208b131ea41c4e\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol":{"SignedMathUpgradeable":{"abi":[],"devdoc":{"details":"Standard signed math utilities missing in the Solidity language.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212208e5711d5da3ca2dd71717a2d7873fb6dfca0e2ccaafcea6fddb6a5177816ac7664736f6c63430008130033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP15 JUMPI GT 0xD5 0xDA EXTCODECOPY LOG2 0xDD PUSH18 0x717A2D7873FB6DFCA0E2CCAAFCEA6FDDB6A5 OR PUSH25 0x16AC7664736F6C634300081300330000000000000000000000 ","sourceMap":"215:1058:15:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;215:1058:15;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212208e5711d5da3ca2dd71717a2d7873fb6dfca0e2ccaafcea6fddb6a5177816ac7664736f6c63430008130033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP15 JUMPI GT 0xD5 0xDA EXTCODECOPY LOG2 0xDD PUSH18 0x717A2D7873FB6DFCA0E2CCAAFCEA6FDDB6A5 OR PUSH25 0x16AC7664736F6C634300081300330000000000000000000000 ","sourceMap":"215:1058:15:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"abs(int256)":"infinite","average(int256,int256)":"infinite","max(int256,int256)":"infinite","min(int256,int256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Standard signed math utilities missing in the Solidity language.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol\":\"SignedMathUpgradeable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMathUpgradeable {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x88f6b7bba3ee33eeb741f9a0f5bc98b6e6e352d0fe4905377bb328590f84095a\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/access/AccessControl.sol":{"AccessControl":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"previousAdminRole","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"newAdminRole","type":"bytes32"}],"name":"RoleAdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleRevoked","type":"event"},{"inputs":[],"name":"DEFAULT_ADMIN_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleAdmin","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"grantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Contract module that allows children to implement role-based access control mechanisms. This is a lightweight version that doesn't allow enumerating role members except through off-chain means by accessing the contract event logs. Some applications may benefit from on-chain enumerability, for those cases see {AccessControlEnumerable}. Roles are referred to by their `bytes32` identifier. These should be exposed in the external API and be unique. The best way to achieve this is by using `public constant` hash digests: ```solidity bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\"); ``` Roles can be used to represent a set of permissions. To restrict access to a function call, use {hasRole}: ```solidity function foo() public {     require(hasRole(MY_ROLE, msg.sender));     ... } ``` Roles can be granted and revoked dynamically via the {grantRole} and {revokeRole} functions. Each role has an associated admin role, and only accounts that have a role's admin role can call {grantRole} and {revokeRole}. By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means that only accounts with this role will be able to grant or revoke other roles. More complex role relationships can be created by using {_setRoleAdmin}. WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to grant and revoke this role. Extra precautions should be taken to secure accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules} to enforce additional security measures for this role.","events":{"RoleAdminChanged(bytes32,bytes32,bytes32)":{"details":"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._"},"RoleGranted(bytes32,address,address)":{"details":"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."},"RoleRevoked(bytes32,address,address)":{"details":"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"}},"kind":"dev","methods":{"getRoleAdmin(bytes32)":{"details":"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."},"grantRole(bytes32,address)":{"details":"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."},"hasRole(bytes32,address)":{"details":"Returns `true` if `account` has been granted `role`."},"renounceRole(bytes32,address)":{"details":"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."},"revokeRole(bytes32,address)":{"details":"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."},"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"DEFAULT_ADMIN_ROLE()":"a217fddf","getRoleAdmin(bytes32)":"248a9ca3","grantRole(bytes32,address)":"2f2ff15d","hasRole(bytes32,address)":"91d14854","renounceRole(bytes32,address)":"36568abe","revokeRole(bytes32,address)":"d547741f","supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module that allows children to implement role-based access control mechanisms. This is a lightweight version that doesn't allow enumerating role members except through off-chain means by accessing the contract event logs. Some applications may benefit from on-chain enumerability, for those cases see {AccessControlEnumerable}. Roles are referred to by their `bytes32` identifier. These should be exposed in the external API and be unique. The best way to achieve this is by using `public constant` hash digests: ```solidity bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\"); ``` Roles can be used to represent a set of permissions. To restrict access to a function call, use {hasRole}: ```solidity function foo() public {     require(hasRole(MY_ROLE, msg.sender));     ... } ``` Roles can be granted and revoked dynamically via the {grantRole} and {revokeRole} functions. Each role has an associated admin role, and only accounts that have a role's admin role can call {grantRole} and {revokeRole}. By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means that only accounts with this role will be able to grant or revoke other roles. More complex role relationships can be created by using {_setRoleAdmin}. WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to grant and revoke this role. Extra precautions should be taken to secure accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules} to enforce additional security measures for this role.\",\"events\":{\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/access/AccessControl.sol\":\"AccessControl\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0dd6e52cb394d7f5abe5dca2d4908a6be40417914720932de757de34a99ab87f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":3392,"contract":"@openzeppelin/contracts/access/AccessControl.sol:AccessControl","label":"_roles","offset":0,"slot":"0","type":"t_mapping(t_bytes32,t_struct(RoleData)3387_storage)"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_bytes32,t_struct(RoleData)3387_storage)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => struct AccessControl.RoleData)","numberOfBytes":"32","value":"t_struct(RoleData)3387_storage"},"t_struct(RoleData)3387_storage":{"encoding":"inplace","label":"struct AccessControl.RoleData","members":[{"astId":3384,"contract":"@openzeppelin/contracts/access/AccessControl.sol:AccessControl","label":"members","offset":0,"slot":"0","type":"t_mapping(t_address,t_bool)"},{"astId":3386,"contract":"@openzeppelin/contracts/access/AccessControl.sol:AccessControl","label":"adminRole","offset":0,"slot":"1","type":"t_bytes32"}],"numberOfBytes":"64"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/access/IAccessControl.sol":{"IAccessControl":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"previousAdminRole","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"newAdminRole","type":"bytes32"}],"name":"RoleAdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleRevoked","type":"event"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleAdmin","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"grantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeRole","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"External interface of AccessControl declared to support ERC165 detection.","events":{"RoleAdminChanged(bytes32,bytes32,bytes32)":{"details":"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._"},"RoleGranted(bytes32,address,address)":{"details":"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."},"RoleRevoked(bytes32,address,address)":{"details":"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"}},"kind":"dev","methods":{"getRoleAdmin(bytes32)":{"details":"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {AccessControl-_setRoleAdmin}."},"grantRole(bytes32,address)":{"details":"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."},"hasRole(bytes32,address)":{"details":"Returns `true` if `account` has been granted `role`."},"renounceRole(bytes32,address)":{"details":"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."},"revokeRole(bytes32,address)":{"details":"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"getRoleAdmin(bytes32)":"248a9ca3","grantRole(bytes32,address)":"2f2ff15d","hasRole(bytes32,address)":"91d14854","renounceRole(bytes32,address)":"36568abe","revokeRole(bytes32,address)":"d547741f"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"External interface of AccessControl declared to support ERC165 detection.\",\"events\":{\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {AccessControl-_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/access/IAccessControl.sol\":\"IAccessControl\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Context.sol":{"Context":{"abi":[],"devdoc":{"details":"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Strings.sol":{"Strings":{"abi":[],"devdoc":{"details":"String operations.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212203783145742130ecb4e9eeb5973d7b9b9f2e57ca8b0e5a7a2eaa933203faa5f8a64736f6c63430008130033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CALLDATACOPY DUP4 EQ JUMPI TIMESTAMP SGT 0xE 0xCB 0x4E SWAP15 0xEB MSIZE PUSH20 0xD7B9B9F2E57CA8B0E5A7A2EAA933203FAA5F8A64 PUSH20 0x6F6C634300081300330000000000000000000000 ","sourceMap":"220:2559:19:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;220:2559:19;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212203783145742130ecb4e9eeb5973d7b9b9f2e57ca8b0e5a7a2eaa933203faa5f8a64736f6c63430008130033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CALLDATACOPY DUP4 EQ JUMPI TIMESTAMP SGT 0xE 0xCB 0x4E SWAP15 0xEB MSIZE PUSH20 0xD7B9B9F2E57CA8B0E5A7A2EAA933203FAA5F8A64 PUSH20 0x6F6C634300081300330000000000000000000000 ","sourceMap":"220:2559:19:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"equal(string memory,string memory)":"infinite","toHexString(address)":"infinite","toHexString(uint256)":"infinite","toHexString(uint256,uint256)":"infinite","toString(int256)":"infinite","toString(uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"String operations.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Strings.sol\":\"Strings\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/introspection/ERC165.sol":{"ERC165":{"abi":[{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Implementation of the {IERC165} interface. Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check for the additional interface id that will be supported. For example: ```solidity function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId); } ``` Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.","kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the {IERC165} interface. Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check for the additional interface id that will be supported. For example: ```solidity function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId); } ``` Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":\"ERC165\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/introspection/IERC165.sol":{"IERC165":{"abi":[{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.","kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":\"IERC165\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/math/Math.sol":{"Math":{"abi":[],"devdoc":{"details":"Standard math utilities missing in the Solidity language.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220053fb831170067167b9394e674a090873f1054abf2a089ae33b6ce25edcb719d64736f6c63430008130033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SDIV EXTCODEHASH 0xB8 BALANCE OR STOP PUSH8 0x167B9394E674A090 DUP8 EXTCODEHASH LT SLOAD 0xAB CALLCODE LOG0 DUP10 0xAE CALLER 0xB6 0xCE 0x25 0xED 0xCB PUSH18 0x9D64736F6C63430008130033000000000000 ","sourceMap":"202:12582:22:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;202:12582:22;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220053fb831170067167b9394e674a090873f1054abf2a089ae33b6ce25edcb719d64736f6c63430008130033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SDIV EXTCODEHASH 0xB8 BALANCE OR STOP PUSH8 0x167B9394E674A090 DUP8 EXTCODEHASH LT SLOAD 0xAB CALLCODE LOG0 DUP10 0xAE CALLER 0xB6 0xCE 0x25 0xED 0xCB PUSH18 0x9D64736F6C63430008130033000000000000 ","sourceMap":"202:12582:22:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"average(uint256,uint256)":"infinite","ceilDiv(uint256,uint256)":"infinite","log10(uint256)":"infinite","log10(uint256,enum Math.Rounding)":"infinite","log2(uint256)":"infinite","log2(uint256,enum Math.Rounding)":"infinite","log256(uint256)":"infinite","log256(uint256,enum Math.Rounding)":"infinite","max(uint256,uint256)":"infinite","min(uint256,uint256)":"infinite","mulDiv(uint256,uint256,uint256)":"infinite","mulDiv(uint256,uint256,uint256,enum Math.Rounding)":"infinite","sqrt(uint256)":"infinite","sqrt(uint256,enum Math.Rounding)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Standard math utilities missing in the Solidity language.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/math/Math.sol\":\"Math\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/math/SignedMath.sol":{"SignedMath":{"abi":[],"devdoc":{"details":"Standard signed math utilities missing in the Solidity language.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220989089e3d30af72e48ae27353eef5970c2bbf01f4540b5de3ff8115c91b17b5f64736f6c63430008130033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP9 SWAP1 DUP10 0xE3 0xD3 EXP 0xF7 0x2E BASEFEE 0xAE 0x27 CALLDATALOAD RETURNDATACOPY 0xEF MSIZE PUSH17 0xC2BBF01F4540B5DE3FF8115C91B17B5F64 PUSH20 0x6F6C634300081300330000000000000000000000 ","sourceMap":"215:1047:23:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;215:1047:23;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220989089e3d30af72e48ae27353eef5970c2bbf01f4540b5de3ff8115c91b17b5f64736f6c63430008130033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP9 SWAP1 DUP10 0xE3 0xD3 EXP 0xF7 0x2E BASEFEE 0xAE 0x27 CALLDATALOAD RETURNDATACOPY 0xEF MSIZE PUSH17 0xC2BBF01F4540B5DE3FF8115C91B17B5F64 PUSH20 0x6F6C634300081300330000000000000000000000 ","sourceMap":"215:1047:23:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"abs(int256)":"infinite","average(int256,int256)":"infinite","max(int256,int256)":"infinite","min(int256,int256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Standard signed math utilities missing in the Solidity language.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/math/SignedMath.sol\":\"SignedMath\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/CommunityResolver.sol":{"CommunityResolver":{"abi":[{"inputs":[{"internalType":"contract IEAS","name":"eas","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"AccessDenied","type":"error"},{"inputs":[],"name":"InsufficientValue","type":"error"},{"inputs":[],"name":"InvalidEAS","type":"error"},{"inputs":[],"name":"NotPayable","type":"error"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"bytes32","name":"schema","type":"bytes32"},{"internalType":"uint64","name":"time","type":"uint64"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"uint64","name":"revocationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Attestation","name":"attestation","type":"tuple"}],"name":"attest","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"attester","type":"address"}],"name":"canAttest","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"community","type":"bytes32"},{"internalType":"address","name":"addr","type":"address"}],"name":"delist","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"community","type":"bytes32"},{"internalType":"address","name":"addr","type":"address"}],"name":"enlist","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"initialize","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"community","type":"bytes32"},{"internalType":"address","name":"addr","type":"address"}],"name":"isAdmin","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"isPayable","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"pure","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"bytes32","name":"schema","type":"bytes32"},{"internalType":"uint64","name":"time","type":"uint64"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"uint64","name":"revocationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Attestation[]","name":"attestations","type":"tuple[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"}],"name":"multiAttest","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"payable","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"bytes32","name":"schema","type":"bytes32"},{"internalType":"uint64","name":"time","type":"uint64"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"uint64","name":"revocationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Attestation[]","name":"attestations","type":"tuple[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"}],"name":"multiRevoke","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"bytes32","name":"schema","type":"bytes32"},{"internalType":"uint64","name":"time","type":"uint64"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"uint64","name":"revocationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Attestation","name":"attestation","type":"tuple"}],"name":"revoke","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"version","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"stateMutability":"payable","type":"receive"}],"devdoc":{"events":{"Initialized(uint8)":{"details":"Triggered when the contract has been initialized or reinitialized."}},"kind":"dev","methods":{"attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))":{"details":"Processes an attestation and verifies whether it's valid.","params":{"attestation":"The new attestation."},"returns":{"_0":"Whether the attestation is valid."}},"constructor":{"custom:oz-upgrades-unsafe-allow":"constructor"},"isPayable()":{"details":"Returns whether the resolver supports ETH transfers."},"multiAttest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])":{"details":"Processes multiple attestations and verifies whether they are valid.","params":{"attestations":"The new attestations.","values":"Explicit ETH amounts which were sent with each attestation."},"returns":{"_0":"Whether all the attestations are valid."}},"multiRevoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])":{"details":"Processes revocation of multiple attestation and verifies they can be revoked.","params":{"attestations":"The existing attestations to be revoked.","values":"Explicit ETH amounts which were sent with each revocation."},"returns":{"_0":"Whether the attestations can be revoked."}},"owner()":{"details":"Returns the address of the current owner."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."},"revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))":{"details":"Processes an attestation revocation and verifies if it can be revoked.","params":{"attestation":"The existing attestation to be revoked."},"returns":{"_0":"Whether the attestation can be revoked."}},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."},"version()":{"returns":{"_0":"Semver contract version as a string."}}},"version":1},"evm":{"bytecode":{"functionDebugData":{"@_425":{"entryPoint":null,"id":425,"parameterSlots":3,"returnSlots":0},"@_5052":{"entryPoint":null,"id":5052,"parameterSlots":1,"returnSlots":0},"@_567":{"entryPoint":null,"id":567,"parameterSlots":1,"returnSlots":0},"@_disableInitializers_1126":{"entryPoint":129,"id":1126,"parameterSlots":0,"returnSlots":0},"abi_decode_tuple_t_contract$_IEAS_$346_fromMemory":{"entryPoint":320,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:915:29","statements":[{"nodeType":"YulBlock","src":"6:3:29","statements":[]},{"body":{"nodeType":"YulBlock","src":"107:209:29","statements":[{"body":{"nodeType":"YulBlock","src":"153:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"162:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"165:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"155:6:29"},"nodeType":"YulFunctionCall","src":"155:12:29"},"nodeType":"YulExpressionStatement","src":"155:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"128:7:29"},{"name":"headStart","nodeType":"YulIdentifier","src":"137:9:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"124:3:29"},"nodeType":"YulFunctionCall","src":"124:23:29"},{"kind":"number","nodeType":"YulLiteral","src":"149:2:29","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"120:3:29"},"nodeType":"YulFunctionCall","src":"120:32:29"},"nodeType":"YulIf","src":"117:52:29"},{"nodeType":"YulVariableDeclaration","src":"178:29:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"197:9:29"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"191:5:29"},"nodeType":"YulFunctionCall","src":"191:16:29"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"182:5:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"270:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"279:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"282:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"272:6:29"},"nodeType":"YulFunctionCall","src":"272:12:29"},"nodeType":"YulExpressionStatement","src":"272:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"229:5:29"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"240:5:29"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"255:3:29","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"260:1:29","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"251:3:29"},"nodeType":"YulFunctionCall","src":"251:11:29"},{"kind":"number","nodeType":"YulLiteral","src":"264:1:29","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"247:3:29"},"nodeType":"YulFunctionCall","src":"247:19:29"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"236:3:29"},"nodeType":"YulFunctionCall","src":"236:31:29"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"226:2:29"},"nodeType":"YulFunctionCall","src":"226:42:29"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"219:6:29"},"nodeType":"YulFunctionCall","src":"219:50:29"},"nodeType":"YulIf","src":"216:70:29"},{"nodeType":"YulAssignment","src":"295:15:29","value":{"name":"value","nodeType":"YulIdentifier","src":"305:5:29"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"295:6:29"}]}]},"name":"abi_decode_tuple_t_contract$_IEAS_$346_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"73:9:29","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"84:7:29","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"96:6:29","type":""}],"src":"14:302:29"},{"body":{"nodeType":"YulBlock","src":"495:229:29","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"512:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"523:2:29","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"505:6:29"},"nodeType":"YulFunctionCall","src":"505:21:29"},"nodeType":"YulExpressionStatement","src":"505:21:29"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"546:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"557:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"542:3:29"},"nodeType":"YulFunctionCall","src":"542:18:29"},{"kind":"number","nodeType":"YulLiteral","src":"562:2:29","type":"","value":"39"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"535:6:29"},"nodeType":"YulFunctionCall","src":"535:30:29"},"nodeType":"YulExpressionStatement","src":"535:30:29"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"585:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"596:2:29","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"581:3:29"},"nodeType":"YulFunctionCall","src":"581:18:29"},{"hexValue":"496e697469616c697a61626c653a20636f6e747261637420697320696e697469","kind":"string","nodeType":"YulLiteral","src":"601:34:29","type":"","value":"Initializable: contract is initi"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"574:6:29"},"nodeType":"YulFunctionCall","src":"574:62:29"},"nodeType":"YulExpressionStatement","src":"574:62:29"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"656:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"667:2:29","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"652:3:29"},"nodeType":"YulFunctionCall","src":"652:18:29"},{"hexValue":"616c697a696e67","kind":"string","nodeType":"YulLiteral","src":"672:9:29","type":"","value":"alizing"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"645:6:29"},"nodeType":"YulFunctionCall","src":"645:37:29"},"nodeType":"YulExpressionStatement","src":"645:37:29"},{"nodeType":"YulAssignment","src":"691:27:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"703:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"714:3:29","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"699:3:29"},"nodeType":"YulFunctionCall","src":"699:19:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"691:4:29"}]}]},"name":"abi_encode_tuple_t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"472:9:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"486:4:29","type":""}],"src":"321:403:29"},{"body":{"nodeType":"YulBlock","src":"826:87:29","statements":[{"nodeType":"YulAssignment","src":"836:26:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"848:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"859:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"844:3:29"},"nodeType":"YulFunctionCall","src":"844:18:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"836:4:29"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"878:9:29"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"893:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"901:4:29","type":"","value":"0xff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"889:3:29"},"nodeType":"YulFunctionCall","src":"889:17:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"871:6:29"},"nodeType":"YulFunctionCall","src":"871:36:29"},"nodeType":"YulExpressionStatement","src":"871:36:29"}]},"name":"abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"795:9:29","type":""},{"name":"value0","nodeType":"YulTypedName","src":"806:6:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"817:4:29","type":""}],"src":"729:184:29"}]},"contents":"{\n    { }\n    function abi_decode_tuple_t_contract$_IEAS_$346_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 39)\n        mstore(add(headStart, 64), \"Initializable: contract is initi\")\n        mstore(add(headStart, 96), \"alizing\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xff))\n    }\n}","id":29,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"","opcodes":"PUSH2 0x100 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH2 0xFC9 CODESIZE SUB DUP1 PUSH2 0xFC9 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH2 0x30 SWAP2 PUSH2 0x140 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x80 MSTORE PUSH1 0x0 PUSH1 0xA0 DUP2 SWAP1 MSTORE PUSH1 0xC0 MSTORE DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x67 JUMPI PUSH1 0x40 MLOAD PUSH4 0x41BC07FF PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0xE0 MSTORE PUSH2 0x7B PUSH2 0x81 JUMP JUMPDEST POP PUSH2 0x170 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0xED JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x27 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E747261637420697320696E697469 PUSH1 0x44 DUP3 ADD MSTORE PUSH7 0x616C697A696E67 PUSH1 0xC8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 SLOAD PUSH1 0xFF SWAP1 DUP2 AND EQ PUSH2 0x13E JUMPI PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0xFF SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH32 0x7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x152 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x169 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x80 MLOAD PUSH1 0xA0 MLOAD PUSH1 0xC0 MLOAD PUSH1 0xE0 MLOAD PUSH2 0xE20 PUSH2 0x1A9 PUSH1 0x0 CODECOPY PUSH1 0x0 PUSH2 0x9BA ADD MSTORE PUSH1 0x0 PUSH2 0x388 ADD MSTORE PUSH1 0x0 PUSH2 0x35F ADD MSTORE PUSH1 0x0 PUSH2 0x336 ADD MSTORE PUSH2 0xE20 PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0xE1 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x91DB0B7E GT PUSH2 0x7F JUMPI DUP1 PUSH4 0xD5CBE2BC GT PUSH2 0x59 JUMPI DUP1 PUSH4 0xD5CBE2BC EQ PUSH2 0x255 JUMPI DUP1 PUSH4 0xE49617E1 EQ PUSH2 0x275 JUMPI DUP1 PUSH4 0xE60C3505 EQ PUSH2 0x288 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x29B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x91DB0B7E EQ PUSH2 0x20E JUMPI DUP1 PUSH4 0xB75DBB8E EQ PUSH2 0x221 JUMPI DUP1 PUSH4 0xCE46E046 EQ PUSH2 0x241 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x715018A6 GT PUSH2 0xBB JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x1A9 JUMPI DUP1 PUSH4 0x8129FC1C EQ PUSH2 0x1BE JUMPI DUP1 PUSH4 0x88E5B2D9 EQ PUSH2 0x1D3 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x1E6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1B494702 EQ PUSH2 0x11F JUMPI DUP1 PUSH4 0x54FD4D50 EQ PUSH2 0x13F JUMPI DUP1 PUSH4 0x57692AD2 EQ PUSH2 0x16A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLDATASIZE PUSH2 0x11A JUMPI PUSH1 0x40 MLOAD PUSH32 0x1574F9F300000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST STOP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x12B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x118 PUSH2 0x13A CALLDATASIZE PUSH1 0x4 PUSH2 0xB95 JUMP JUMPDEST PUSH2 0x2BB JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x14B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x154 PUSH2 0x32F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x161 SWAP2 SWAP1 PUSH2 0xBE5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x176 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x199 PUSH2 0x185 CALLDATASIZE PUSH1 0x4 PUSH2 0xC18 JUMP JUMPDEST PUSH1 0x66 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND SWAP2 AND EQ SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x161 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1B5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x118 PUSH2 0x3D2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1CA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x118 PUSH2 0x3E6 JUMP JUMPDEST PUSH2 0x199 PUSH2 0x1E1 CALLDATASIZE PUSH1 0x4 PUSH2 0xC7F JUMP JUMPDEST PUSH2 0x525 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1F2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x33 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x161 JUMP JUMPDEST PUSH2 0x199 PUSH2 0x21C CALLDATASIZE PUSH1 0x4 PUSH2 0xC7F JUMP JUMPDEST PUSH2 0x5D4 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x22D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x199 PUSH2 0x23C CALLDATASIZE PUSH1 0x4 PUSH2 0xB95 JUMP JUMPDEST PUSH2 0x673 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x24D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x0 PUSH2 0x199 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x261 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x118 PUSH2 0x270 CALLDATASIZE PUSH1 0x4 PUSH2 0xB95 JUMP JUMPDEST PUSH2 0x6BB JUMP JUMPDEST PUSH2 0x199 PUSH2 0x283 CALLDATASIZE PUSH1 0x4 PUSH2 0xCEB JUMP JUMPDEST PUSH2 0x72D JUMP JUMPDEST PUSH2 0x199 PUSH2 0x296 CALLDATASIZE PUSH1 0x4 PUSH2 0xCEB JUMP JUMPDEST PUSH2 0x742 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2A7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x118 PUSH2 0x2B6 CALLDATASIZE PUSH1 0x4 PUSH2 0xC18 JUMP JUMPDEST PUSH2 0x756 JUMP JUMPDEST PUSH2 0x2C5 DUP3 CALLER PUSH2 0x673 JUMP JUMPDEST PUSH2 0x302 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x9 PUSH1 0x24 DUP3 ADD MSTORE PUSH9 0x2737BA1037BBB732B9 PUSH1 0xB9 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x65 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP4 AND DUP5 MSTORE SWAP2 SWAP1 MSTORE SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x60 PUSH2 0x35A PUSH32 0x0 PUSH2 0x7E3 JUMP JUMPDEST PUSH2 0x383 PUSH32 0x0 PUSH2 0x7E3 JUMP JUMPDEST PUSH2 0x3AC PUSH32 0x0 PUSH2 0x7E3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x3BE SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xD27 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x3DA PUSH2 0x883 JUMP JUMPDEST PUSH2 0x3E4 PUSH1 0x0 PUSH2 0x8DD JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND ISZERO DUP1 DUP1 ISZERO PUSH2 0x406 JUMPI POP PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0xFF SWAP1 SWAP2 AND LT JUMPDEST DUP1 PUSH2 0x420 JUMPI POP ADDRESS EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x420 JUMPI POP PUSH1 0x0 SLOAD PUSH1 0xFF AND PUSH1 0x1 EQ JUMPDEST PUSH2 0x492 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E747261637420697320616C726561 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x647920696E697469616C697A6564000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x2F9 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE DUP1 ISZERO PUSH2 0x4B5 JUMPI PUSH1 0x0 DUP1 SLOAD PUSH2 0xFF00 NOT AND PUSH2 0x100 OR SWAP1 SSTORE JUMPDEST PUSH1 0x66 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND CALLER OR SWAP1 SSTORE PUSH2 0x4DC PUSH2 0x93C JUMP JUMPDEST DUP1 ISZERO PUSH2 0x522 JUMPI PUSH1 0x0 DUP1 SLOAD PUSH2 0xFF00 NOT AND SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH1 0x1 DUP2 MSTORE PUSH32 0x7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x52F PUSH2 0x9AF JUMP JUMPDEST DUP4 CALLVALUE PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x5C4 JUMPI PUSH1 0x0 DUP7 DUP7 DUP4 DUP2 DUP2 LT PUSH2 0x550 JUMPI PUSH2 0x550 PUSH2 0xD9D JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD SWAP1 POP DUP3 DUP2 GT ISZERO PUSH2 0x57A JUMPI PUSH1 0x40 MLOAD PUSH4 0x44044A5 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x5A7 DUP10 DUP10 DUP5 DUP2 DUP2 LT PUSH2 0x58F JUMPI PUSH2 0x58F PUSH2 0xD9D JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0x5A1 SWAP2 SWAP1 PUSH2 0xDB3 JUMP JUMPDEST POP PUSH1 0x1 SWAP1 JUMP JUMPDEST PUSH2 0x5B8 JUMPI PUSH1 0x0 SWAP5 POP POP POP POP POP PUSH2 0x5CC JUMP JUMPDEST SWAP1 SWAP2 SUB SWAP1 PUSH1 0x1 ADD PUSH2 0x534 JUMP JUMPDEST POP PUSH1 0x1 SWAP3 POP POP POP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5DE PUSH2 0x9AF JUMP JUMPDEST DUP4 CALLVALUE PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x5C4 JUMPI PUSH1 0x0 DUP7 DUP7 DUP4 DUP2 DUP2 LT PUSH2 0x5FF JUMPI PUSH2 0x5FF PUSH2 0xD9D JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD SWAP1 POP DUP3 DUP2 GT ISZERO PUSH2 0x629 JUMPI PUSH1 0x40 MLOAD PUSH4 0x44044A5 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x656 DUP10 DUP10 DUP5 DUP2 DUP2 LT PUSH2 0x63E JUMPI PUSH2 0x63E PUSH2 0xD9D JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0x650 SWAP2 SWAP1 PUSH2 0xDB3 JUMP JUMPDEST DUP3 PUSH2 0xA11 JUMP JUMPDEST PUSH2 0x667 JUMPI PUSH1 0x0 SWAP5 POP POP POP POP POP PUSH2 0x5CC JUMP JUMPDEST SWAP1 SWAP2 SUB SWAP1 PUSH1 0x1 ADD PUSH2 0x5E3 JUMP JUMPDEST PUSH1 0x66 SLOAD PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ DUP1 PUSH2 0x6B4 JUMPI POP PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x65 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH1 0x1 EQ JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x6C5 DUP3 CALLER PUSH2 0x673 JUMP JUMPDEST PUSH2 0x6FD JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x9 PUSH1 0x24 DUP3 ADD MSTORE PUSH9 0x2737BA1037BBB732B9 PUSH1 0xB9 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x2F9 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x65 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP4 AND DUP5 MSTORE SWAP2 SWAP1 MSTORE SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 PUSH2 0x737 PUSH2 0x9AF JUMP JUMPDEST PUSH1 0x1 JUMPDEST SWAP1 POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x74C PUSH2 0x9AF JUMP JUMPDEST PUSH2 0x73A DUP3 CALLVALUE PUSH2 0xA11 JUMP JUMPDEST PUSH2 0x75E PUSH2 0x883 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x7DA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6464726573730000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x2F9 JUMP JUMPDEST PUSH2 0x522 DUP2 PUSH2 0x8DD JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x7F0 DUP4 PUSH2 0xA27 JUMP JUMPDEST PUSH1 0x1 ADD SWAP1 POP PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x810 JUMPI PUSH2 0x810 PUSH2 0xDD4 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x83A JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP DUP2 DUP2 ADD PUSH1 0x20 ADD JUMPDEST PUSH1 0x0 NOT ADD PUSH32 0x3031323334353637383961626364656600000000000000000000000000000000 PUSH1 0xA DUP7 MOD BYTE DUP2 MSTORE8 PUSH1 0xA DUP6 DIV SWAP5 POP DUP5 PUSH2 0x844 JUMPI POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x33 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x3E4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x2F9 JUMP JUMPDEST PUSH1 0x33 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 MLOAD SWAP2 AND SWAP2 SWAP1 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x9A7 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E7472616374206973206E6F742069 PUSH1 0x44 DUP3 ADD MSTORE PUSH11 0x6E697469616C697A696E67 PUSH1 0xA8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x2F9 JUMP JUMPDEST PUSH2 0x3E4 PUSH2 0xB0A JUMP JUMPDEST CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND EQ PUSH2 0x3E4 JUMPI PUSH1 0x40 MLOAD PUSH32 0x4CA8886700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x6B4 PUSH2 0x185 PUSH2 0x100 DUP6 ADD PUSH1 0xE0 DUP7 ADD PUSH2 0xC18 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP4 LT PUSH2 0xA70 JUMPI PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP4 DIV SWAP3 POP PUSH1 0x40 ADD JUMPDEST PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 LT PUSH2 0xA9C JUMPI PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 DIV SWAP3 POP PUSH1 0x20 ADD JUMPDEST PUSH7 0x2386F26FC10000 DUP4 LT PUSH2 0xABA JUMPI PUSH7 0x2386F26FC10000 DUP4 DIV SWAP3 POP PUSH1 0x10 ADD JUMPDEST PUSH4 0x5F5E100 DUP4 LT PUSH2 0xAD2 JUMPI PUSH4 0x5F5E100 DUP4 DIV SWAP3 POP PUSH1 0x8 ADD JUMPDEST PUSH2 0x2710 DUP4 LT PUSH2 0xAE6 JUMPI PUSH2 0x2710 DUP4 DIV SWAP3 POP PUSH1 0x4 ADD JUMPDEST PUSH1 0x64 DUP4 LT PUSH2 0xAF8 JUMPI PUSH1 0x64 DUP4 DIV SWAP3 POP PUSH1 0x2 ADD JUMPDEST PUSH1 0xA DUP4 LT PUSH2 0xB04 JUMPI PUSH1 0x1 ADD JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0xB75 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E7472616374206973206E6F742069 PUSH1 0x44 DUP3 ADD MSTORE PUSH11 0x6E697469616C697A696E67 PUSH1 0xA8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x2F9 JUMP JUMPDEST PUSH2 0x3E4 CALLER PUSH2 0x8DD JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x73D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xBA8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH2 0xBB8 PUSH1 0x20 DUP5 ADD PUSH2 0xB7E JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xBDC JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0xBC4 JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0xC04 DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0xBC1 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xC2A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x6B4 DUP3 PUSH2 0xB7E JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0xC45 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xC5D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP6 ADD ADD GT ISZERO PUSH2 0xC78 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x40 DUP6 DUP8 SUB SLT ISZERO PUSH2 0xC95 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0xCAD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xCB9 DUP9 DUP4 DUP10 ADD PUSH2 0xC33 JUMP JUMPDEST SWAP1 SWAP7 POP SWAP5 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0xCD2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xCDF DUP8 DUP3 DUP9 ADD PUSH2 0xC33 JUMP JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP SWAP6 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xCFD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xD14 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD PUSH2 0x140 DUP2 DUP6 SUB SLT ISZERO PUSH2 0x6B4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP5 MLOAD PUSH2 0xD39 DUP2 DUP5 PUSH1 0x20 DUP10 ADD PUSH2 0xBC1 JUMP JUMPDEST DUP1 DUP4 ADD SWAP1 POP PUSH32 0x2E00000000000000000000000000000000000000000000000000000000000000 DUP1 DUP3 MSTORE DUP6 MLOAD PUSH2 0xD75 DUP2 PUSH1 0x1 DUP6 ADD PUSH1 0x20 DUP11 ADD PUSH2 0xBC1 JUMP JUMPDEST PUSH1 0x1 SWAP3 ADD SWAP2 DUP3 ADD MSTORE DUP4 MLOAD PUSH2 0xD90 DUP2 PUSH1 0x2 DUP5 ADD PUSH1 0x20 DUP9 ADD PUSH2 0xBC1 JUMP JUMPDEST ADD PUSH1 0x2 ADD SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 CALLDATALOAD PUSH2 0x13E NOT DUP4 CALLDATASIZE SUB ADD DUP2 SLT PUSH2 0xDCA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DIV SWAP12 LOG2 SWAP13 0x5D MSIZE 0xBB SWAP2 DUP6 SELFDESTRUCT 0x49 SUB SWAP16 SELFBALANCE DUP9 0xD1 0xA6 0xC5 0xE5 ADDMOD 0xCC KECCAK256 0x28 COINBASE SWAP7 0xD5 0xAB 0xEC 0xC0 0xE5 NOT SGT PUSH5 0x736F6C6343 STOP ADDMOD SGT STOP CALLER ","sourceMap":"504:1639:24:-:0;;;760:81;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;668:1:5;661:14:3;;671:1:5;685:14:3;;;;709:13;;797:3:24;-1:-1:-1;;;;;691:26:5;::::1;687:76;;740:12;;-1:-1:-1::0;;;740:12:5::1;;;;;;;;;;;687:76;-1:-1:-1::0;;;;;773:10:5::1;;::::0;812:22:24::1;:20;:22::i;:::-;760:81:::0;504:1639;;5939:280:8;6007:13;;;;;;;6006:14;5998:66;;;;-1:-1:-1;;;5998:66:8;;523:2:29;5998:66:8;;;505:21:29;562:2;542:18;;;535:30;601:34;581:18;;;574:62;-1:-1:-1;;;652:18:29;;;645:37;699:19;;5998:66:8;;;;;;;;6078:12;;6094:15;6078:12;;;:31;6074:139;;6125:12;:30;;-1:-1:-1;;6125:30:8;6140:15;6125:30;;;;;;6174:28;;871:36:29;;;6174:28:8;;859:2:29;844:18;6174:28:8;;;;;;;6074:139;5939:280::o;14:302:29:-;96:6;149:2;137:9;128:7;124:23;120:32;117:52;;;165:1;162;155:12;117:52;191:16;;-1:-1:-1;;;;;236:31:29;;226:42;;216:70;;282:1;279;272:12;216:70;305:5;14:302;-1:-1:-1;;;14:302:29:o;729:184::-;504:1639:24;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@_597":{"entryPoint":null,"id":597,"parameterSlots":0,"returnSlots":0},"@__Ownable_init_846":{"entryPoint":2364,"id":846,"parameterSlots":0,"returnSlots":0},"@__Ownable_init_unchained_857":{"entryPoint":2826,"id":857,"parameterSlots":0,"returnSlots":0},"@_checkOwner_888":{"entryPoint":2179,"id":888,"parameterSlots":0,"returnSlots":0},"@_msgSender_1502":{"entryPoint":null,"id":1502,"parameterSlots":0,"returnSlots":1},"@_onlyEAS_818":{"entryPoint":2479,"id":818,"parameterSlots":0,"returnSlots":0},"@_transferOwnership_945":{"entryPoint":2269,"id":945,"parameterSlots":1,"returnSlots":0},"@attest_615":{"entryPoint":1858,"id":615,"parameterSlots":1,"returnSlots":1},"@canAttest_5101":{"entryPoint":null,"id":5101,"parameterSlots":1,"returnSlots":1},"@delist_5151":{"entryPoint":699,"id":5151,"parameterSlots":2,"returnSlots":0},"@enlist_5126":{"entryPoint":1723,"id":5126,"parameterSlots":2,"returnSlots":0},"@initialize_5066":{"entryPoint":998,"id":5066,"parameterSlots":0,"returnSlots":0},"@isAdmin_5089":{"entryPoint":1651,"id":5089,"parameterSlots":2,"returnSlots":1},"@isContract_1163":{"entryPoint":null,"id":1163,"parameterSlots":1,"returnSlots":1},"@isPayable_584":{"entryPoint":null,"id":584,"parameterSlots":0,"returnSlots":1},"@log10_4746":{"entryPoint":2599,"id":4746,"parameterSlots":1,"returnSlots":1},"@multiAttest_688":{"entryPoint":1492,"id":688,"parameterSlots":4,"returnSlots":1},"@multiRevoke_779":{"entryPoint":1317,"id":779,"parameterSlots":4,"returnSlots":1},"@onAttest_5169":{"entryPoint":2577,"id":5169,"parameterSlots":2,"returnSlots":1},"@onRevoke_5184":{"entryPoint":null,"id":5184,"parameterSlots":2,"returnSlots":1},"@owner_874":{"entryPoint":null,"id":874,"parameterSlots":0,"returnSlots":1},"@renounceOwnership_902":{"entryPoint":978,"id":902,"parameterSlots":0,"returnSlots":0},"@revoke_706":{"entryPoint":1837,"id":706,"parameterSlots":1,"returnSlots":1},"@toString_3837":{"entryPoint":2019,"id":3837,"parameterSlots":1,"returnSlots":1},"@transferOwnership_925":{"entryPoint":1878,"id":925,"parameterSlots":1,"returnSlots":0},"@uncheckedInc_61":{"entryPoint":null,"id":61,"parameterSlots":1,"returnSlots":1},"@version_453":{"entryPoint":815,"id":453,"parameterSlots":0,"returnSlots":1},"abi_decode_address":{"entryPoint":2942,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_array_struct_Attestation_calldata_dyn_calldata":{"entryPoint":3123,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_address":{"entryPoint":3096,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_array$_t_struct$_Attestation_$45_calldata_ptr_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr":{"entryPoint":3199,"id":null,"parameterSlots":2,"returnSlots":4},"abi_decode_tuple_t_bytes32t_address":{"entryPoint":2965,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_struct$_Attestation_$45_calldata_ptr":{"entryPoint":3307,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_packed_t_string_memory_ptr_t_stringliteral_6f010af653ebe3cb07d297a4ef13366103d392ceffa68dd48232e6e9ff2187bf_t_string_memory_ptr_t_stringliteral_6f010af653ebe3cb07d297a4ef13366103d392ceffa68dd48232e6e9ff2187bf_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":3367,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":3045,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_c266efca4f4ed37612271196433531dcbb4fca89a694d568d1e290e32feb1682__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"access_calldata_tail_t_struct$_Attestation_$45_calldata_ptr":{"entryPoint":3507,"id":null,"parameterSlots":2,"returnSlots":1},"copy_memory_to_memory_with_cleanup":{"entryPoint":3009,"id":null,"parameterSlots":3,"returnSlots":0},"panic_error_0x12":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x32":{"entryPoint":3485,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":3540,"id":null,"parameterSlots":0,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:7408:29","statements":[{"nodeType":"YulBlock","src":"6:3:29","statements":[]},{"body":{"nodeType":"YulBlock","src":"63:147:29","statements":[{"nodeType":"YulAssignment","src":"73:29:29","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"95:6:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"82:12:29"},"nodeType":"YulFunctionCall","src":"82:20:29"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"73:5:29"}]},{"body":{"nodeType":"YulBlock","src":"188:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"197:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"200:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"190:6:29"},"nodeType":"YulFunctionCall","src":"190:12:29"},"nodeType":"YulExpressionStatement","src":"190:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"124:5:29"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"135:5:29"},{"kind":"number","nodeType":"YulLiteral","src":"142:42:29","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"131:3:29"},"nodeType":"YulFunctionCall","src":"131:54:29"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"121:2:29"},"nodeType":"YulFunctionCall","src":"121:65:29"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"114:6:29"},"nodeType":"YulFunctionCall","src":"114:73:29"},"nodeType":"YulIf","src":"111:93:29"}]},"name":"abi_decode_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"42:6:29","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"53:5:29","type":""}],"src":"14:196:29"},{"body":{"nodeType":"YulBlock","src":"302:167:29","statements":[{"body":{"nodeType":"YulBlock","src":"348:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"357:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"360:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"350:6:29"},"nodeType":"YulFunctionCall","src":"350:12:29"},"nodeType":"YulExpressionStatement","src":"350:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"323:7:29"},{"name":"headStart","nodeType":"YulIdentifier","src":"332:9:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"319:3:29"},"nodeType":"YulFunctionCall","src":"319:23:29"},{"kind":"number","nodeType":"YulLiteral","src":"344:2:29","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"315:3:29"},"nodeType":"YulFunctionCall","src":"315:32:29"},"nodeType":"YulIf","src":"312:52:29"},{"nodeType":"YulAssignment","src":"373:33:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"396:9:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"383:12:29"},"nodeType":"YulFunctionCall","src":"383:23:29"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"373:6:29"}]},{"nodeType":"YulAssignment","src":"415:48:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"448:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"459:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"444:3:29"},"nodeType":"YulFunctionCall","src":"444:18:29"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"425:18:29"},"nodeType":"YulFunctionCall","src":"425:38:29"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"415:6:29"}]}]},"name":"abi_decode_tuple_t_bytes32t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"260:9:29","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"271:7:29","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"283:6:29","type":""},{"name":"value1","nodeType":"YulTypedName","src":"291:6:29","type":""}],"src":"215:254:29"},{"body":{"nodeType":"YulBlock","src":"540:184:29","statements":[{"nodeType":"YulVariableDeclaration","src":"550:10:29","value":{"kind":"number","nodeType":"YulLiteral","src":"559:1:29","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"554:1:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"619:63:29","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"644:3:29"},{"name":"i","nodeType":"YulIdentifier","src":"649:1:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"640:3:29"},"nodeType":"YulFunctionCall","src":"640:11:29"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"663:3:29"},{"name":"i","nodeType":"YulIdentifier","src":"668:1:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"659:3:29"},"nodeType":"YulFunctionCall","src":"659:11:29"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"653:5:29"},"nodeType":"YulFunctionCall","src":"653:18:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"633:6:29"},"nodeType":"YulFunctionCall","src":"633:39:29"},"nodeType":"YulExpressionStatement","src":"633:39:29"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"580:1:29"},{"name":"length","nodeType":"YulIdentifier","src":"583:6:29"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"577:2:29"},"nodeType":"YulFunctionCall","src":"577:13:29"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"591:19:29","statements":[{"nodeType":"YulAssignment","src":"593:15:29","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"602:1:29"},{"kind":"number","nodeType":"YulLiteral","src":"605:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"598:3:29"},"nodeType":"YulFunctionCall","src":"598:10:29"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"593:1:29"}]}]},"pre":{"nodeType":"YulBlock","src":"573:3:29","statements":[]},"src":"569:113:29"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"702:3:29"},{"name":"length","nodeType":"YulIdentifier","src":"707:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"698:3:29"},"nodeType":"YulFunctionCall","src":"698:16:29"},{"kind":"number","nodeType":"YulLiteral","src":"716:1:29","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"691:6:29"},"nodeType":"YulFunctionCall","src":"691:27:29"},"nodeType":"YulExpressionStatement","src":"691:27:29"}]},"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"518:3:29","type":""},{"name":"dst","nodeType":"YulTypedName","src":"523:3:29","type":""},{"name":"length","nodeType":"YulTypedName","src":"528:6:29","type":""}],"src":"474:250:29"},{"body":{"nodeType":"YulBlock","src":"850:275:29","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"867:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"878:2:29","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"860:6:29"},"nodeType":"YulFunctionCall","src":"860:21:29"},"nodeType":"YulExpressionStatement","src":"860:21:29"},{"nodeType":"YulVariableDeclaration","src":"890:27:29","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"910:6:29"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"904:5:29"},"nodeType":"YulFunctionCall","src":"904:13:29"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"894:6:29","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"937:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"948:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"933:3:29"},"nodeType":"YulFunctionCall","src":"933:18:29"},{"name":"length","nodeType":"YulIdentifier","src":"953:6:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"926:6:29"},"nodeType":"YulFunctionCall","src":"926:34:29"},"nodeType":"YulExpressionStatement","src":"926:34:29"},{"expression":{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1008:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"1016:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1004:3:29"},"nodeType":"YulFunctionCall","src":"1004:15:29"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1025:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"1036:2:29","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1021:3:29"},"nodeType":"YulFunctionCall","src":"1021:18:29"},{"name":"length","nodeType":"YulIdentifier","src":"1041:6:29"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"969:34:29"},"nodeType":"YulFunctionCall","src":"969:79:29"},"nodeType":"YulExpressionStatement","src":"969:79:29"},{"nodeType":"YulAssignment","src":"1057:62:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1073:9:29"},{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"1092:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"1100:2:29","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1088:3:29"},"nodeType":"YulFunctionCall","src":"1088:15:29"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1109:2:29","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"1105:3:29"},"nodeType":"YulFunctionCall","src":"1105:7:29"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1084:3:29"},"nodeType":"YulFunctionCall","src":"1084:29:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1069:3:29"},"nodeType":"YulFunctionCall","src":"1069:45:29"},{"kind":"number","nodeType":"YulLiteral","src":"1116:2:29","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1065:3:29"},"nodeType":"YulFunctionCall","src":"1065:54:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1057:4:29"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"819:9:29","type":""},{"name":"value0","nodeType":"YulTypedName","src":"830:6:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"841:4:29","type":""}],"src":"729:396:29"},{"body":{"nodeType":"YulBlock","src":"1200:116:29","statements":[{"body":{"nodeType":"YulBlock","src":"1246:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1255:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1258:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1248:6:29"},"nodeType":"YulFunctionCall","src":"1248:12:29"},"nodeType":"YulExpressionStatement","src":"1248:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1221:7:29"},{"name":"headStart","nodeType":"YulIdentifier","src":"1230:9:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1217:3:29"},"nodeType":"YulFunctionCall","src":"1217:23:29"},{"kind":"number","nodeType":"YulLiteral","src":"1242:2:29","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1213:3:29"},"nodeType":"YulFunctionCall","src":"1213:32:29"},"nodeType":"YulIf","src":"1210:52:29"},{"nodeType":"YulAssignment","src":"1271:39:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1300:9:29"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"1281:18:29"},"nodeType":"YulFunctionCall","src":"1281:29:29"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1271:6:29"}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1166:9:29","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1177:7:29","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1189:6:29","type":""}],"src":"1130:186:29"},{"body":{"nodeType":"YulBlock","src":"1416:92:29","statements":[{"nodeType":"YulAssignment","src":"1426:26:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1438:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"1449:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1434:3:29"},"nodeType":"YulFunctionCall","src":"1434:18:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1426:4:29"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1468:9:29"},{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1493:6:29"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1486:6:29"},"nodeType":"YulFunctionCall","src":"1486:14:29"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1479:6:29"},"nodeType":"YulFunctionCall","src":"1479:22:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1461:6:29"},"nodeType":"YulFunctionCall","src":"1461:41:29"},"nodeType":"YulExpressionStatement","src":"1461:41:29"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1385:9:29","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1396:6:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1407:4:29","type":""}],"src":"1321:187:29"},{"body":{"nodeType":"YulBlock","src":"1617:283:29","statements":[{"body":{"nodeType":"YulBlock","src":"1666:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1675:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1678:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1668:6:29"},"nodeType":"YulFunctionCall","src":"1668:12:29"},"nodeType":"YulExpressionStatement","src":"1668:12:29"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1645:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"1653:4:29","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1641:3:29"},"nodeType":"YulFunctionCall","src":"1641:17:29"},{"name":"end","nodeType":"YulIdentifier","src":"1660:3:29"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1637:3:29"},"nodeType":"YulFunctionCall","src":"1637:27:29"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1630:6:29"},"nodeType":"YulFunctionCall","src":"1630:35:29"},"nodeType":"YulIf","src":"1627:55:29"},{"nodeType":"YulAssignment","src":"1691:30:29","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1714:6:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1701:12:29"},"nodeType":"YulFunctionCall","src":"1701:20:29"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"1691:6:29"}]},{"body":{"nodeType":"YulBlock","src":"1764:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1773:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1776:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1766:6:29"},"nodeType":"YulFunctionCall","src":"1766:12:29"},"nodeType":"YulExpressionStatement","src":"1766:12:29"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"1736:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"1744:18:29","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1733:2:29"},"nodeType":"YulFunctionCall","src":"1733:30:29"},"nodeType":"YulIf","src":"1730:50:29"},{"nodeType":"YulAssignment","src":"1789:29:29","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1805:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"1813:4:29","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1801:3:29"},"nodeType":"YulFunctionCall","src":"1801:17:29"},"variableNames":[{"name":"arrayPos","nodeType":"YulIdentifier","src":"1789:8:29"}]},{"body":{"nodeType":"YulBlock","src":"1878:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1887:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1890:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1880:6:29"},"nodeType":"YulFunctionCall","src":"1880:12:29"},"nodeType":"YulExpressionStatement","src":"1880:12:29"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1841:6:29"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1853:1:29","type":"","value":"5"},{"name":"length","nodeType":"YulIdentifier","src":"1856:6:29"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1849:3:29"},"nodeType":"YulFunctionCall","src":"1849:14:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1837:3:29"},"nodeType":"YulFunctionCall","src":"1837:27:29"},{"kind":"number","nodeType":"YulLiteral","src":"1866:4:29","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1833:3:29"},"nodeType":"YulFunctionCall","src":"1833:38:29"},{"name":"end","nodeType":"YulIdentifier","src":"1873:3:29"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1830:2:29"},"nodeType":"YulFunctionCall","src":"1830:47:29"},"nodeType":"YulIf","src":"1827:67:29"}]},"name":"abi_decode_array_struct_Attestation_calldata_dyn_calldata","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"1580:6:29","type":""},{"name":"end","nodeType":"YulTypedName","src":"1588:3:29","type":""}],"returnVariables":[{"name":"arrayPos","nodeType":"YulTypedName","src":"1596:8:29","type":""},{"name":"length","nodeType":"YulTypedName","src":"1606:6:29","type":""}],"src":"1513:387:29"},{"body":{"nodeType":"YulBlock","src":"2091:656:29","statements":[{"body":{"nodeType":"YulBlock","src":"2137:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2146:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2149:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2139:6:29"},"nodeType":"YulFunctionCall","src":"2139:12:29"},"nodeType":"YulExpressionStatement","src":"2139:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2112:7:29"},{"name":"headStart","nodeType":"YulIdentifier","src":"2121:9:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2108:3:29"},"nodeType":"YulFunctionCall","src":"2108:23:29"},{"kind":"number","nodeType":"YulLiteral","src":"2133:2:29","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2104:3:29"},"nodeType":"YulFunctionCall","src":"2104:32:29"},"nodeType":"YulIf","src":"2101:52:29"},{"nodeType":"YulVariableDeclaration","src":"2162:37:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2189:9:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2176:12:29"},"nodeType":"YulFunctionCall","src":"2176:23:29"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"2166:6:29","type":""}]},{"nodeType":"YulVariableDeclaration","src":"2208:28:29","value":{"kind":"number","nodeType":"YulLiteral","src":"2218:18:29","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"2212:2:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"2263:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2272:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2275:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2265:6:29"},"nodeType":"YulFunctionCall","src":"2265:12:29"},"nodeType":"YulExpressionStatement","src":"2265:12:29"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2251:6:29"},{"name":"_1","nodeType":"YulIdentifier","src":"2259:2:29"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2248:2:29"},"nodeType":"YulFunctionCall","src":"2248:14:29"},"nodeType":"YulIf","src":"2245:34:29"},{"nodeType":"YulVariableDeclaration","src":"2288:116:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2376:9:29"},{"name":"offset","nodeType":"YulIdentifier","src":"2387:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2372:3:29"},"nodeType":"YulFunctionCall","src":"2372:22:29"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"2396:7:29"}],"functionName":{"name":"abi_decode_array_struct_Attestation_calldata_dyn_calldata","nodeType":"YulIdentifier","src":"2314:57:29"},"nodeType":"YulFunctionCall","src":"2314:90:29"},"variables":[{"name":"value0_1","nodeType":"YulTypedName","src":"2292:8:29","type":""},{"name":"value1_1","nodeType":"YulTypedName","src":"2302:8:29","type":""}]},{"nodeType":"YulAssignment","src":"2413:18:29","value":{"name":"value0_1","nodeType":"YulIdentifier","src":"2423:8:29"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2413:6:29"}]},{"nodeType":"YulAssignment","src":"2440:18:29","value":{"name":"value1_1","nodeType":"YulIdentifier","src":"2450:8:29"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"2440:6:29"}]},{"nodeType":"YulVariableDeclaration","src":"2467:48:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2500:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"2511:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2496:3:29"},"nodeType":"YulFunctionCall","src":"2496:18:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2483:12:29"},"nodeType":"YulFunctionCall","src":"2483:32:29"},"variables":[{"name":"offset_1","nodeType":"YulTypedName","src":"2471:8:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"2544:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2553:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2556:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2546:6:29"},"nodeType":"YulFunctionCall","src":"2546:12:29"},"nodeType":"YulExpressionStatement","src":"2546:12:29"}]},"condition":{"arguments":[{"name":"offset_1","nodeType":"YulIdentifier","src":"2530:8:29"},{"name":"_1","nodeType":"YulIdentifier","src":"2540:2:29"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2527:2:29"},"nodeType":"YulFunctionCall","src":"2527:16:29"},"nodeType":"YulIf","src":"2524:36:29"},{"nodeType":"YulVariableDeclaration","src":"2569:118:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2657:9:29"},{"name":"offset_1","nodeType":"YulIdentifier","src":"2668:8:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2653:3:29"},"nodeType":"YulFunctionCall","src":"2653:24:29"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"2679:7:29"}],"functionName":{"name":"abi_decode_array_struct_Attestation_calldata_dyn_calldata","nodeType":"YulIdentifier","src":"2595:57:29"},"nodeType":"YulFunctionCall","src":"2595:92:29"},"variables":[{"name":"value2_1","nodeType":"YulTypedName","src":"2573:8:29","type":""},{"name":"value3_1","nodeType":"YulTypedName","src":"2583:8:29","type":""}]},{"nodeType":"YulAssignment","src":"2696:18:29","value":{"name":"value2_1","nodeType":"YulIdentifier","src":"2706:8:29"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"2696:6:29"}]},{"nodeType":"YulAssignment","src":"2723:18:29","value":{"name":"value3_1","nodeType":"YulIdentifier","src":"2733:8:29"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"2723:6:29"}]}]},"name":"abi_decode_tuple_t_array$_t_struct$_Attestation_$45_calldata_ptr_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2033:9:29","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2044:7:29","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2056:6:29","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2064:6:29","type":""},{"name":"value2","nodeType":"YulTypedName","src":"2072:6:29","type":""},{"name":"value3","nodeType":"YulTypedName","src":"2080:6:29","type":""}],"src":"1905:842:29"},{"body":{"nodeType":"YulBlock","src":"2853:125:29","statements":[{"nodeType":"YulAssignment","src":"2863:26:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2875:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"2886:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2871:3:29"},"nodeType":"YulFunctionCall","src":"2871:18:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2863:4:29"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2905:9:29"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"2920:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"2928:42:29","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2916:3:29"},"nodeType":"YulFunctionCall","src":"2916:55:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2898:6:29"},"nodeType":"YulFunctionCall","src":"2898:74:29"},"nodeType":"YulExpressionStatement","src":"2898:74:29"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2822:9:29","type":""},{"name":"value0","nodeType":"YulTypedName","src":"2833:6:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2844:4:29","type":""}],"src":"2752:226:29"},{"body":{"nodeType":"YulBlock","src":"3082:290:29","statements":[{"body":{"nodeType":"YulBlock","src":"3128:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3137:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3140:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3130:6:29"},"nodeType":"YulFunctionCall","src":"3130:12:29"},"nodeType":"YulExpressionStatement","src":"3130:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3103:7:29"},{"name":"headStart","nodeType":"YulIdentifier","src":"3112:9:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3099:3:29"},"nodeType":"YulFunctionCall","src":"3099:23:29"},{"kind":"number","nodeType":"YulLiteral","src":"3124:2:29","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3095:3:29"},"nodeType":"YulFunctionCall","src":"3095:32:29"},"nodeType":"YulIf","src":"3092:52:29"},{"nodeType":"YulVariableDeclaration","src":"3153:37:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3180:9:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3167:12:29"},"nodeType":"YulFunctionCall","src":"3167:23:29"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3157:6:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"3233:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3242:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3245:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3235:6:29"},"nodeType":"YulFunctionCall","src":"3235:12:29"},"nodeType":"YulExpressionStatement","src":"3235:12:29"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3205:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"3213:18:29","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3202:2:29"},"nodeType":"YulFunctionCall","src":"3202:30:29"},"nodeType":"YulIf","src":"3199:50:29"},{"nodeType":"YulVariableDeclaration","src":"3258:32:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3272:9:29"},{"name":"offset","nodeType":"YulIdentifier","src":"3283:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3268:3:29"},"nodeType":"YulFunctionCall","src":"3268:22:29"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"3262:2:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"3329:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3338:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3341:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3331:6:29"},"nodeType":"YulFunctionCall","src":"3331:12:29"},"nodeType":"YulExpressionStatement","src":"3331:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3310:7:29"},{"name":"_1","nodeType":"YulIdentifier","src":"3319:2:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3306:3:29"},"nodeType":"YulFunctionCall","src":"3306:16:29"},{"kind":"number","nodeType":"YulLiteral","src":"3324:3:29","type":"","value":"320"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3302:3:29"},"nodeType":"YulFunctionCall","src":"3302:26:29"},"nodeType":"YulIf","src":"3299:46:29"},{"nodeType":"YulAssignment","src":"3354:12:29","value":{"name":"_1","nodeType":"YulIdentifier","src":"3364:2:29"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3354:6:29"}]}]},"name":"abi_decode_tuple_t_struct$_Attestation_$45_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3048:9:29","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3059:7:29","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3071:6:29","type":""}],"src":"2983:389:29"},{"body":{"nodeType":"YulBlock","src":"3551:158:29","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3568:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"3579:2:29","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3561:6:29"},"nodeType":"YulFunctionCall","src":"3561:21:29"},"nodeType":"YulExpressionStatement","src":"3561:21:29"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3602:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"3613:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3598:3:29"},"nodeType":"YulFunctionCall","src":"3598:18:29"},{"kind":"number","nodeType":"YulLiteral","src":"3618:1:29","type":"","value":"9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3591:6:29"},"nodeType":"YulFunctionCall","src":"3591:29:29"},"nodeType":"YulExpressionStatement","src":"3591:29:29"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3640:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"3651:2:29","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3636:3:29"},"nodeType":"YulFunctionCall","src":"3636:18:29"},{"hexValue":"4e6f74206f776e6572","kind":"string","nodeType":"YulLiteral","src":"3656:11:29","type":"","value":"Not owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3629:6:29"},"nodeType":"YulFunctionCall","src":"3629:39:29"},"nodeType":"YulExpressionStatement","src":"3629:39:29"},{"nodeType":"YulAssignment","src":"3677:26:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3689:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"3700:2:29","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3685:3:29"},"nodeType":"YulFunctionCall","src":"3685:18:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"3677:4:29"}]}]},"name":"abi_encode_tuple_t_stringliteral_c266efca4f4ed37612271196433531dcbb4fca89a694d568d1e290e32feb1682__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3528:9:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"3542:4:29","type":""}],"src":"3377:332:29"},{"body":{"nodeType":"YulBlock","src":"4151:562:29","statements":[{"nodeType":"YulVariableDeclaration","src":"4161:27:29","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"4181:6:29"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"4175:5:29"},"nodeType":"YulFunctionCall","src":"4175:13:29"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"4165:6:29","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"4236:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"4244:4:29","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4232:3:29"},"nodeType":"YulFunctionCall","src":"4232:17:29"},{"name":"pos","nodeType":"YulIdentifier","src":"4251:3:29"},{"name":"length","nodeType":"YulIdentifier","src":"4256:6:29"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"4197:34:29"},"nodeType":"YulFunctionCall","src":"4197:66:29"},"nodeType":"YulExpressionStatement","src":"4197:66:29"},{"nodeType":"YulVariableDeclaration","src":"4272:29:29","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"4289:3:29"},{"name":"length","nodeType":"YulIdentifier","src":"4294:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4285:3:29"},"nodeType":"YulFunctionCall","src":"4285:16:29"},"variables":[{"name":"end_1","nodeType":"YulTypedName","src":"4276:5:29","type":""}]},{"nodeType":"YulVariableDeclaration","src":"4310:13:29","value":{"hexValue":"2e","kind":"string","nodeType":"YulLiteral","src":"4320:3:29","type":"","value":"."},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"4314:2:29","type":""}]},{"expression":{"arguments":[{"name":"end_1","nodeType":"YulIdentifier","src":"4339:5:29"},{"name":"_1","nodeType":"YulIdentifier","src":"4346:2:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4332:6:29"},"nodeType":"YulFunctionCall","src":"4332:17:29"},"nodeType":"YulExpressionStatement","src":"4332:17:29"},{"nodeType":"YulVariableDeclaration","src":"4358:29:29","value":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"4380:6:29"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"4374:5:29"},"nodeType":"YulFunctionCall","src":"4374:13:29"},"variables":[{"name":"length_1","nodeType":"YulTypedName","src":"4362:8:29","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"4435:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"4443:4:29","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4431:3:29"},"nodeType":"YulFunctionCall","src":"4431:17:29"},{"arguments":[{"name":"end_1","nodeType":"YulIdentifier","src":"4454:5:29"},{"kind":"number","nodeType":"YulLiteral","src":"4461:1:29","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4450:3:29"},"nodeType":"YulFunctionCall","src":"4450:13:29"},{"name":"length_1","nodeType":"YulIdentifier","src":"4465:8:29"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"4396:34:29"},"nodeType":"YulFunctionCall","src":"4396:78:29"},"nodeType":"YulExpressionStatement","src":"4396:78:29"},{"nodeType":"YulVariableDeclaration","src":"4483:30:29","value":{"arguments":[{"name":"end_1","nodeType":"YulIdentifier","src":"4497:5:29"},{"name":"length_1","nodeType":"YulIdentifier","src":"4504:8:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4493:3:29"},"nodeType":"YulFunctionCall","src":"4493:20:29"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"4487:2:29","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"4533:2:29"},{"kind":"number","nodeType":"YulLiteral","src":"4537:1:29","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4529:3:29"},"nodeType":"YulFunctionCall","src":"4529:10:29"},{"name":"_1","nodeType":"YulIdentifier","src":"4541:2:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4522:6:29"},"nodeType":"YulFunctionCall","src":"4522:22:29"},"nodeType":"YulExpressionStatement","src":"4522:22:29"},{"nodeType":"YulVariableDeclaration","src":"4553:29:29","value":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"4575:6:29"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"4569:5:29"},"nodeType":"YulFunctionCall","src":"4569:13:29"},"variables":[{"name":"length_2","nodeType":"YulTypedName","src":"4557:8:29","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"4630:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"4638:4:29","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4626:3:29"},"nodeType":"YulFunctionCall","src":"4626:17:29"},{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"4649:2:29"},{"kind":"number","nodeType":"YulLiteral","src":"4653:1:29","type":"","value":"2"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4645:3:29"},"nodeType":"YulFunctionCall","src":"4645:10:29"},{"name":"length_2","nodeType":"YulIdentifier","src":"4657:8:29"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"4591:34:29"},"nodeType":"YulFunctionCall","src":"4591:75:29"},"nodeType":"YulExpressionStatement","src":"4591:75:29"},{"nodeType":"YulAssignment","src":"4675:32:29","value":{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"4690:2:29"},{"name":"length_2","nodeType":"YulIdentifier","src":"4694:8:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4686:3:29"},"nodeType":"YulFunctionCall","src":"4686:17:29"},{"kind":"number","nodeType":"YulLiteral","src":"4705:1:29","type":"","value":"2"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4682:3:29"},"nodeType":"YulFunctionCall","src":"4682:25:29"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"4675:3:29"}]}]},"name":"abi_encode_tuple_packed_t_string_memory_ptr_t_stringliteral_6f010af653ebe3cb07d297a4ef13366103d392ceffa68dd48232e6e9ff2187bf_t_string_memory_ptr_t_stringliteral_6f010af653ebe3cb07d297a4ef13366103d392ceffa68dd48232e6e9ff2187bf_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"4111:3:29","type":""},{"name":"value2","nodeType":"YulTypedName","src":"4116:6:29","type":""},{"name":"value1","nodeType":"YulTypedName","src":"4124:6:29","type":""},{"name":"value0","nodeType":"YulTypedName","src":"4132:6:29","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"4143:3:29","type":""}],"src":"3714:999:29"},{"body":{"nodeType":"YulBlock","src":"4892:236:29","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4909:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"4920:2:29","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4902:6:29"},"nodeType":"YulFunctionCall","src":"4902:21:29"},"nodeType":"YulExpressionStatement","src":"4902:21:29"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4943:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"4954:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4939:3:29"},"nodeType":"YulFunctionCall","src":"4939:18:29"},{"kind":"number","nodeType":"YulLiteral","src":"4959:2:29","type":"","value":"46"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4932:6:29"},"nodeType":"YulFunctionCall","src":"4932:30:29"},"nodeType":"YulExpressionStatement","src":"4932:30:29"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4982:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"4993:2:29","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4978:3:29"},"nodeType":"YulFunctionCall","src":"4978:18:29"},{"hexValue":"496e697469616c697a61626c653a20636f6e747261637420697320616c726561","kind":"string","nodeType":"YulLiteral","src":"4998:34:29","type":"","value":"Initializable: contract is alrea"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4971:6:29"},"nodeType":"YulFunctionCall","src":"4971:62:29"},"nodeType":"YulExpressionStatement","src":"4971:62:29"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5053:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"5064:2:29","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5049:3:29"},"nodeType":"YulFunctionCall","src":"5049:18:29"},{"hexValue":"647920696e697469616c697a6564","kind":"string","nodeType":"YulLiteral","src":"5069:16:29","type":"","value":"dy initialized"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5042:6:29"},"nodeType":"YulFunctionCall","src":"5042:44:29"},"nodeType":"YulExpressionStatement","src":"5042:44:29"},{"nodeType":"YulAssignment","src":"5095:27:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5107:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"5118:3:29","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5103:3:29"},"nodeType":"YulFunctionCall","src":"5103:19:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"5095:4:29"}]}]},"name":"abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4869:9:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4883:4:29","type":""}],"src":"4718:410:29"},{"body":{"nodeType":"YulBlock","src":"5240:87:29","statements":[{"nodeType":"YulAssignment","src":"5250:26:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5262:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"5273:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5258:3:29"},"nodeType":"YulFunctionCall","src":"5258:18:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"5250:4:29"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5292:9:29"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"5307:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"5315:4:29","type":"","value":"0xff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"5303:3:29"},"nodeType":"YulFunctionCall","src":"5303:17:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5285:6:29"},"nodeType":"YulFunctionCall","src":"5285:36:29"},"nodeType":"YulExpressionStatement","src":"5285:36:29"}]},"name":"abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5209:9:29","type":""},{"name":"value0","nodeType":"YulTypedName","src":"5220:6:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"5231:4:29","type":""}],"src":"5133:194:29"},{"body":{"nodeType":"YulBlock","src":"5364:152:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5381:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5384:77:29","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5374:6:29"},"nodeType":"YulFunctionCall","src":"5374:88:29"},"nodeType":"YulExpressionStatement","src":"5374:88:29"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5478:1:29","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"5481:4:29","type":"","value":"0x32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5471:6:29"},"nodeType":"YulFunctionCall","src":"5471:15:29"},"nodeType":"YulExpressionStatement","src":"5471:15:29"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5502:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5505:4:29","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5495:6:29"},"nodeType":"YulFunctionCall","src":"5495:15:29"},"nodeType":"YulExpressionStatement","src":"5495:15:29"}]},"name":"panic_error_0x32","nodeType":"YulFunctionDefinition","src":"5332:184:29"},{"body":{"nodeType":"YulBlock","src":"5625:223:29","statements":[{"nodeType":"YulVariableDeclaration","src":"5635:51:29","value":{"arguments":[{"name":"ptr_to_tail","nodeType":"YulIdentifier","src":"5674:11:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5661:12:29"},"nodeType":"YulFunctionCall","src":"5661:25:29"},"variables":[{"name":"rel_offset_of_tail","nodeType":"YulTypedName","src":"5639:18:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"5776:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5785:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5788:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5778:6:29"},"nodeType":"YulFunctionCall","src":"5778:12:29"},"nodeType":"YulExpressionStatement","src":"5778:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"rel_offset_of_tail","nodeType":"YulIdentifier","src":"5709:18:29"},{"arguments":[{"arguments":[{"arguments":[],"functionName":{"name":"calldatasize","nodeType":"YulIdentifier","src":"5737:12:29"},"nodeType":"YulFunctionCall","src":"5737:14:29"},{"name":"base_ref","nodeType":"YulIdentifier","src":"5753:8:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5733:3:29"},"nodeType":"YulFunctionCall","src":"5733:29:29"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5768:3:29","type":"","value":"318"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"5764:3:29"},"nodeType":"YulFunctionCall","src":"5764:8:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5729:3:29"},"nodeType":"YulFunctionCall","src":"5729:44:29"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"5705:3:29"},"nodeType":"YulFunctionCall","src":"5705:69:29"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"5698:6:29"},"nodeType":"YulFunctionCall","src":"5698:77:29"},"nodeType":"YulIf","src":"5695:97:29"},{"nodeType":"YulAssignment","src":"5801:41:29","value":{"arguments":[{"name":"base_ref","nodeType":"YulIdentifier","src":"5813:8:29"},{"name":"rel_offset_of_tail","nodeType":"YulIdentifier","src":"5823:18:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5809:3:29"},"nodeType":"YulFunctionCall","src":"5809:33:29"},"variableNames":[{"name":"addr","nodeType":"YulIdentifier","src":"5801:4:29"}]}]},"name":"access_calldata_tail_t_struct$_Attestation_$45_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"base_ref","nodeType":"YulTypedName","src":"5590:8:29","type":""},{"name":"ptr_to_tail","nodeType":"YulTypedName","src":"5600:11:29","type":""}],"returnVariables":[{"name":"addr","nodeType":"YulTypedName","src":"5616:4:29","type":""}],"src":"5521:327:29"},{"body":{"nodeType":"YulBlock","src":"6027:228:29","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6044:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"6055:2:29","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6037:6:29"},"nodeType":"YulFunctionCall","src":"6037:21:29"},"nodeType":"YulExpressionStatement","src":"6037:21:29"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6078:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"6089:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6074:3:29"},"nodeType":"YulFunctionCall","src":"6074:18:29"},{"kind":"number","nodeType":"YulLiteral","src":"6094:2:29","type":"","value":"38"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6067:6:29"},"nodeType":"YulFunctionCall","src":"6067:30:29"},"nodeType":"YulExpressionStatement","src":"6067:30:29"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6117:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"6128:2:29","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6113:3:29"},"nodeType":"YulFunctionCall","src":"6113:18:29"},{"hexValue":"4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061","kind":"string","nodeType":"YulLiteral","src":"6133:34:29","type":"","value":"Ownable: new owner is the zero a"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6106:6:29"},"nodeType":"YulFunctionCall","src":"6106:62:29"},"nodeType":"YulExpressionStatement","src":"6106:62:29"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6188:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"6199:2:29","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6184:3:29"},"nodeType":"YulFunctionCall","src":"6184:18:29"},{"hexValue":"646472657373","kind":"string","nodeType":"YulLiteral","src":"6204:8:29","type":"","value":"ddress"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6177:6:29"},"nodeType":"YulFunctionCall","src":"6177:36:29"},"nodeType":"YulExpressionStatement","src":"6177:36:29"},{"nodeType":"YulAssignment","src":"6222:27:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6234:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"6245:3:29","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6230:3:29"},"nodeType":"YulFunctionCall","src":"6230:19:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"6222:4:29"}]}]},"name":"abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6004:9:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"6018:4:29","type":""}],"src":"5853:402:29"},{"body":{"nodeType":"YulBlock","src":"6292:152:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6309:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6312:77:29","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6302:6:29"},"nodeType":"YulFunctionCall","src":"6302:88:29"},"nodeType":"YulExpressionStatement","src":"6302:88:29"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6406:1:29","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"6409:4:29","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6399:6:29"},"nodeType":"YulFunctionCall","src":"6399:15:29"},"nodeType":"YulExpressionStatement","src":"6399:15:29"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6430:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6433:4:29","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6423:6:29"},"nodeType":"YulFunctionCall","src":"6423:15:29"},"nodeType":"YulExpressionStatement","src":"6423:15:29"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"6260:184:29"},{"body":{"nodeType":"YulBlock","src":"6481:152:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6498:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6501:77:29","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6491:6:29"},"nodeType":"YulFunctionCall","src":"6491:88:29"},"nodeType":"YulExpressionStatement","src":"6491:88:29"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6595:1:29","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"6598:4:29","type":"","value":"0x12"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6588:6:29"},"nodeType":"YulFunctionCall","src":"6588:15:29"},"nodeType":"YulExpressionStatement","src":"6588:15:29"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6619:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6622:4:29","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6612:6:29"},"nodeType":"YulFunctionCall","src":"6612:15:29"},"nodeType":"YulExpressionStatement","src":"6612:15:29"}]},"name":"panic_error_0x12","nodeType":"YulFunctionDefinition","src":"6449:184:29"},{"body":{"nodeType":"YulBlock","src":"6812:182:29","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6829:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"6840:2:29","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6822:6:29"},"nodeType":"YulFunctionCall","src":"6822:21:29"},"nodeType":"YulExpressionStatement","src":"6822:21:29"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6863:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"6874:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6859:3:29"},"nodeType":"YulFunctionCall","src":"6859:18:29"},{"kind":"number","nodeType":"YulLiteral","src":"6879:2:29","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6852:6:29"},"nodeType":"YulFunctionCall","src":"6852:30:29"},"nodeType":"YulExpressionStatement","src":"6852:30:29"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6902:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"6913:2:29","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6898:3:29"},"nodeType":"YulFunctionCall","src":"6898:18:29"},{"hexValue":"4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572","kind":"string","nodeType":"YulLiteral","src":"6918:34:29","type":"","value":"Ownable: caller is not the owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6891:6:29"},"nodeType":"YulFunctionCall","src":"6891:62:29"},"nodeType":"YulExpressionStatement","src":"6891:62:29"},{"nodeType":"YulAssignment","src":"6962:26:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6974:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"6985:2:29","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6970:3:29"},"nodeType":"YulFunctionCall","src":"6970:18:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"6962:4:29"}]}]},"name":"abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6789:9:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"6803:4:29","type":""}],"src":"6638:356:29"},{"body":{"nodeType":"YulBlock","src":"7173:233:29","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7190:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"7201:2:29","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7183:6:29"},"nodeType":"YulFunctionCall","src":"7183:21:29"},"nodeType":"YulExpressionStatement","src":"7183:21:29"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7224:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"7235:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7220:3:29"},"nodeType":"YulFunctionCall","src":"7220:18:29"},{"kind":"number","nodeType":"YulLiteral","src":"7240:2:29","type":"","value":"43"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7213:6:29"},"nodeType":"YulFunctionCall","src":"7213:30:29"},"nodeType":"YulExpressionStatement","src":"7213:30:29"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7263:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"7274:2:29","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7259:3:29"},"nodeType":"YulFunctionCall","src":"7259:18:29"},{"hexValue":"496e697469616c697a61626c653a20636f6e7472616374206973206e6f742069","kind":"string","nodeType":"YulLiteral","src":"7279:34:29","type":"","value":"Initializable: contract is not i"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7252:6:29"},"nodeType":"YulFunctionCall","src":"7252:62:29"},"nodeType":"YulExpressionStatement","src":"7252:62:29"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7334:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"7345:2:29","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7330:3:29"},"nodeType":"YulFunctionCall","src":"7330:18:29"},{"hexValue":"6e697469616c697a696e67","kind":"string","nodeType":"YulLiteral","src":"7350:13:29","type":"","value":"nitializing"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7323:6:29"},"nodeType":"YulFunctionCall","src":"7323:41:29"},"nodeType":"YulExpressionStatement","src":"7323:41:29"},{"nodeType":"YulAssignment","src":"7373:27:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7385:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"7396:3:29","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7381:3:29"},"nodeType":"YulFunctionCall","src":"7381:19:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"7373:4:29"}]}]},"name":"abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7150:9:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"7164:4:29","type":""}],"src":"6999:407:29"}]},"contents":"{\n    { }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, 0xffffffffffffffffffffffffffffffffffffffff))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_bytes32t_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n    }\n    function copy_memory_to_memory_with_cleanup(src, dst, length)\n    {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        let length := mload(value0)\n        mstore(add(headStart, 32), length)\n        copy_memory_to_memory_with_cleanup(add(value0, 32), add(headStart, 64), length)\n        tail := add(add(headStart, and(add(length, 31), not(31))), 64)\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_decode_array_struct_Attestation_calldata_dyn_calldata(offset, end) -> arrayPos, length\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        length := calldataload(offset)\n        if gt(length, 0xffffffffffffffff) { revert(0, 0) }\n        arrayPos := add(offset, 0x20)\n        if gt(add(add(offset, shl(5, length)), 0x20), end) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_array$_t_struct$_Attestation_$45_calldata_ptr_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let value0_1, value1_1 := abi_decode_array_struct_Attestation_calldata_dyn_calldata(add(headStart, offset), dataEnd)\n        value0 := value0_1\n        value1 := value1_1\n        let offset_1 := calldataload(add(headStart, 32))\n        if gt(offset_1, _1) { revert(0, 0) }\n        let value2_1, value3_1 := abi_decode_array_struct_Attestation_calldata_dyn_calldata(add(headStart, offset_1), dataEnd)\n        value2 := value2_1\n        value3 := value3_1\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_decode_tuple_t_struct$_Attestation_$45_calldata_ptr(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        let _1 := add(headStart, offset)\n        if slt(sub(dataEnd, _1), 320) { revert(0, 0) }\n        value0 := _1\n    }\n    function abi_encode_tuple_t_stringliteral_c266efca4f4ed37612271196433531dcbb4fca89a694d568d1e290e32feb1682__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 9)\n        mstore(add(headStart, 64), \"Not owner\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_packed_t_string_memory_ptr_t_stringliteral_6f010af653ebe3cb07d297a4ef13366103d392ceffa68dd48232e6e9ff2187bf_t_string_memory_ptr_t_stringliteral_6f010af653ebe3cb07d297a4ef13366103d392ceffa68dd48232e6e9ff2187bf_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value2, value1, value0) -> end\n    {\n        let length := mload(value0)\n        copy_memory_to_memory_with_cleanup(add(value0, 0x20), pos, length)\n        let end_1 := add(pos, length)\n        let _1 := \".\"\n        mstore(end_1, _1)\n        let length_1 := mload(value1)\n        copy_memory_to_memory_with_cleanup(add(value1, 0x20), add(end_1, 1), length_1)\n        let _2 := add(end_1, length_1)\n        mstore(add(_2, 1), _1)\n        let length_2 := mload(value2)\n        copy_memory_to_memory_with_cleanup(add(value2, 0x20), add(_2, 2), length_2)\n        end := add(add(_2, length_2), 2)\n    }\n    function abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 46)\n        mstore(add(headStart, 64), \"Initializable: contract is alrea\")\n        mstore(add(headStart, 96), \"dy initialized\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xff))\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n    function access_calldata_tail_t_struct$_Attestation_$45_calldata_ptr(base_ref, ptr_to_tail) -> addr\n    {\n        let rel_offset_of_tail := calldataload(ptr_to_tail)\n        if iszero(slt(rel_offset_of_tail, add(sub(calldatasize(), base_ref), not(318)))) { revert(0, 0) }\n        addr := add(base_ref, rel_offset_of_tail)\n    }\n    function abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"Ownable: new owner is the zero a\")\n        mstore(add(headStart, 96), \"ddress\")\n        tail := add(headStart, 128)\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function panic_error_0x12()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x12)\n        revert(0, 0x24)\n    }\n    function abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 32)\n        mstore(add(headStart, 64), \"Ownable: caller is not the owner\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 43)\n        mstore(add(headStart, 64), \"Initializable: contract is not i\")\n        mstore(add(headStart, 96), \"nitializing\")\n        tail := add(headStart, 128)\n    }\n}","id":29,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{"398":[{"length":32,"start":822}],"400":[{"length":32,"start":863}],"402":[{"length":32,"start":904}],"536":[{"length":32,"start":2490}]},"linkReferences":{},"object":"6080604052600436106100e15760003560e01c806391db0b7e1161007f578063d5cbe2bc11610059578063d5cbe2bc14610255578063e49617e114610275578063e60c350514610288578063f2fde38b1461029b57600080fd5b806391db0b7e1461020e578063b75dbb8e14610221578063ce46e0461461024157600080fd5b8063715018a6116100bb578063715018a6146101a95780638129fc1c146101be57806388e5b2d9146101d35780638da5cb5b146101e657600080fd5b80631b4947021461011f57806354fd4d501461013f57806357692ad21461016a57600080fd5b3661011a576040517f1574f9f300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b005b600080fd5b34801561012b57600080fd5b5061011861013a366004610b95565b6102bb565b34801561014b57600080fd5b5061015461032f565b6040516101619190610be5565b60405180910390f35b34801561017657600080fd5b50610199610185366004610c18565b6066546001600160a01b0391821691161490565b6040519015158152602001610161565b3480156101b557600080fd5b506101186103d2565b3480156101ca57600080fd5b506101186103e6565b6101996101e1366004610c7f565b610525565b3480156101f257600080fd5b506033546040516001600160a01b039091168152602001610161565b61019961021c366004610c7f565b6105d4565b34801561022d57600080fd5b5061019961023c366004610b95565b610673565b34801561024d57600080fd5b506000610199565b34801561026157600080fd5b50610118610270366004610b95565b6106bb565b610199610283366004610ceb565b61072d565b610199610296366004610ceb565b610742565b3480156102a757600080fd5b506101186102b6366004610c18565b610756565b6102c58233610673565b6103025760405162461bcd60e51b81526020600482015260096024820152682737ba1037bbb732b960b91b60448201526064015b60405180910390fd5b60009182526065602090815260408084206001600160a01b0390931684529190529020805460ff19169055565b606061035a7f00000000000000000000000000000000000000000000000000000000000000006107e3565b6103837f00000000000000000000000000000000000000000000000000000000000000006107e3565b6103ac7f00000000000000000000000000000000000000000000000000000000000000006107e3565b6040516020016103be93929190610d27565b604051602081830303815290604052905090565b6103da610883565b6103e460006108dd565b565b600054610100900460ff16158080156104065750600054600160ff909116105b806104205750303b158015610420575060005460ff166001145b6104925760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084016102f9565b6000805460ff1916600117905580156104b5576000805461ff0019166101001790555b6066805473ffffffffffffffffffffffffffffffffffffffff1916331790556104dc61093c565b8015610522576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50565b600061052f6109af565b833460005b828110156105c457600086868381811061055057610550610d9d565b9050602002013590508281111561057a5760405163044044a560e21b815260040160405180910390fd5b6105a789898481811061058f5761058f610d9d565b90506020028101906105a19190610db3565b50600190565b6105b85760009450505050506105cc565b90910390600101610534565b506001925050505b949350505050565b60006105de6109af565b833460005b828110156105c45760008686838181106105ff576105ff610d9d565b905060200201359050828111156106295760405163044044a560e21b815260040160405180910390fd5b61065689898481811061063e5761063e610d9d565b90506020028101906106509190610db3565b82610a11565b6106675760009450505050506105cc565b909103906001016105e3565b6066546000906001600160a01b03163314806106b4575060008381526065602090815260408083206001600160a01b038616845290915290205460ff166001145b9392505050565b6106c58233610673565b6106fd5760405162461bcd60e51b81526020600482015260096024820152682737ba1037bbb732b960b91b60448201526064016102f9565b60009182526065602090815260408084206001600160a01b0390931684529190529020805460ff19166001179055565b60006107376109af565b60015b90505b919050565b600061074c6109af565b61073a8234610a11565b61075e610883565b6001600160a01b0381166107da5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016102f9565b610522816108dd565b606060006107f083610a27565b600101905060008167ffffffffffffffff81111561081057610810610dd4565b6040519080825280601f01601f19166020018201604052801561083a576020820181803683370190505b5090508181016020015b600019017f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a850494508461084457509392505050565b6033546001600160a01b031633146103e45760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016102f9565b603380546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff166109a75760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016102f9565b6103e4610b0a565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146103e4576040517f4ca8886700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006106b4610185610100850160e08601610c18565b6000807a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310610a70577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000830492506040015b6d04ee2d6d415b85acef81000000008310610a9c576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc100008310610aba57662386f26fc10000830492506010015b6305f5e1008310610ad2576305f5e100830492506008015b6127108310610ae657612710830492506004015b60648310610af8576064830492506002015b600a8310610b04576001015b92915050565b600054610100900460ff16610b755760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016102f9565b6103e4336108dd565b80356001600160a01b038116811461073d57600080fd5b60008060408385031215610ba857600080fd5b82359150610bb860208401610b7e565b90509250929050565b60005b83811015610bdc578181015183820152602001610bc4565b50506000910152565b6020815260008251806020840152610c04816040850160208701610bc1565b601f01601f19169190910160400192915050565b600060208284031215610c2a57600080fd5b6106b482610b7e565b60008083601f840112610c4557600080fd5b50813567ffffffffffffffff811115610c5d57600080fd5b6020830191508360208260051b8501011115610c7857600080fd5b9250929050565b60008060008060408587031215610c9557600080fd5b843567ffffffffffffffff80821115610cad57600080fd5b610cb988838901610c33565b90965094506020870135915080821115610cd257600080fd5b50610cdf87828801610c33565b95989497509550505050565b600060208284031215610cfd57600080fd5b813567ffffffffffffffff811115610d1457600080fd5b820161014081850312156106b457600080fd5b60008451610d39818460208901610bc1565b80830190507f2e000000000000000000000000000000000000000000000000000000000000008082528551610d75816001850160208a01610bc1565b60019201918201528351610d90816002840160208801610bc1565b0160020195945050505050565b634e487b7160e01b600052603260045260246000fd5b6000823561013e19833603018112610dca57600080fd5b9190910192915050565b634e487b7160e01b600052604160045260246000fdfea2646970667358221220049ba29c5d59bb9185ff49039f4788d1a6c5e508cc20284196d5abecc0e5191364736f6c63430008130033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0xE1 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x91DB0B7E GT PUSH2 0x7F JUMPI DUP1 PUSH4 0xD5CBE2BC GT PUSH2 0x59 JUMPI DUP1 PUSH4 0xD5CBE2BC EQ PUSH2 0x255 JUMPI DUP1 PUSH4 0xE49617E1 EQ PUSH2 0x275 JUMPI DUP1 PUSH4 0xE60C3505 EQ PUSH2 0x288 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x29B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x91DB0B7E EQ PUSH2 0x20E JUMPI DUP1 PUSH4 0xB75DBB8E EQ PUSH2 0x221 JUMPI DUP1 PUSH4 0xCE46E046 EQ PUSH2 0x241 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x715018A6 GT PUSH2 0xBB JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x1A9 JUMPI DUP1 PUSH4 0x8129FC1C EQ PUSH2 0x1BE JUMPI DUP1 PUSH4 0x88E5B2D9 EQ PUSH2 0x1D3 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x1E6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1B494702 EQ PUSH2 0x11F JUMPI DUP1 PUSH4 0x54FD4D50 EQ PUSH2 0x13F JUMPI DUP1 PUSH4 0x57692AD2 EQ PUSH2 0x16A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLDATASIZE PUSH2 0x11A JUMPI PUSH1 0x40 MLOAD PUSH32 0x1574F9F300000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST STOP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x12B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x118 PUSH2 0x13A CALLDATASIZE PUSH1 0x4 PUSH2 0xB95 JUMP JUMPDEST PUSH2 0x2BB JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x14B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x154 PUSH2 0x32F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x161 SWAP2 SWAP1 PUSH2 0xBE5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x176 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x199 PUSH2 0x185 CALLDATASIZE PUSH1 0x4 PUSH2 0xC18 JUMP JUMPDEST PUSH1 0x66 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND SWAP2 AND EQ SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x161 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1B5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x118 PUSH2 0x3D2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1CA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x118 PUSH2 0x3E6 JUMP JUMPDEST PUSH2 0x199 PUSH2 0x1E1 CALLDATASIZE PUSH1 0x4 PUSH2 0xC7F JUMP JUMPDEST PUSH2 0x525 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1F2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x33 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x161 JUMP JUMPDEST PUSH2 0x199 PUSH2 0x21C CALLDATASIZE PUSH1 0x4 PUSH2 0xC7F JUMP JUMPDEST PUSH2 0x5D4 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x22D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x199 PUSH2 0x23C CALLDATASIZE PUSH1 0x4 PUSH2 0xB95 JUMP JUMPDEST PUSH2 0x673 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x24D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x0 PUSH2 0x199 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x261 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x118 PUSH2 0x270 CALLDATASIZE PUSH1 0x4 PUSH2 0xB95 JUMP JUMPDEST PUSH2 0x6BB JUMP JUMPDEST PUSH2 0x199 PUSH2 0x283 CALLDATASIZE PUSH1 0x4 PUSH2 0xCEB JUMP JUMPDEST PUSH2 0x72D JUMP JUMPDEST PUSH2 0x199 PUSH2 0x296 CALLDATASIZE PUSH1 0x4 PUSH2 0xCEB JUMP JUMPDEST PUSH2 0x742 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2A7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x118 PUSH2 0x2B6 CALLDATASIZE PUSH1 0x4 PUSH2 0xC18 JUMP JUMPDEST PUSH2 0x756 JUMP JUMPDEST PUSH2 0x2C5 DUP3 CALLER PUSH2 0x673 JUMP JUMPDEST PUSH2 0x302 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x9 PUSH1 0x24 DUP3 ADD MSTORE PUSH9 0x2737BA1037BBB732B9 PUSH1 0xB9 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x65 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP4 AND DUP5 MSTORE SWAP2 SWAP1 MSTORE SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x60 PUSH2 0x35A PUSH32 0x0 PUSH2 0x7E3 JUMP JUMPDEST PUSH2 0x383 PUSH32 0x0 PUSH2 0x7E3 JUMP JUMPDEST PUSH2 0x3AC PUSH32 0x0 PUSH2 0x7E3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x3BE SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xD27 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x3DA PUSH2 0x883 JUMP JUMPDEST PUSH2 0x3E4 PUSH1 0x0 PUSH2 0x8DD JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND ISZERO DUP1 DUP1 ISZERO PUSH2 0x406 JUMPI POP PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0xFF SWAP1 SWAP2 AND LT JUMPDEST DUP1 PUSH2 0x420 JUMPI POP ADDRESS EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x420 JUMPI POP PUSH1 0x0 SLOAD PUSH1 0xFF AND PUSH1 0x1 EQ JUMPDEST PUSH2 0x492 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E747261637420697320616C726561 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x647920696E697469616C697A6564000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x2F9 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE DUP1 ISZERO PUSH2 0x4B5 JUMPI PUSH1 0x0 DUP1 SLOAD PUSH2 0xFF00 NOT AND PUSH2 0x100 OR SWAP1 SSTORE JUMPDEST PUSH1 0x66 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND CALLER OR SWAP1 SSTORE PUSH2 0x4DC PUSH2 0x93C JUMP JUMPDEST DUP1 ISZERO PUSH2 0x522 JUMPI PUSH1 0x0 DUP1 SLOAD PUSH2 0xFF00 NOT AND SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH1 0x1 DUP2 MSTORE PUSH32 0x7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x52F PUSH2 0x9AF JUMP JUMPDEST DUP4 CALLVALUE PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x5C4 JUMPI PUSH1 0x0 DUP7 DUP7 DUP4 DUP2 DUP2 LT PUSH2 0x550 JUMPI PUSH2 0x550 PUSH2 0xD9D JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD SWAP1 POP DUP3 DUP2 GT ISZERO PUSH2 0x57A JUMPI PUSH1 0x40 MLOAD PUSH4 0x44044A5 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x5A7 DUP10 DUP10 DUP5 DUP2 DUP2 LT PUSH2 0x58F JUMPI PUSH2 0x58F PUSH2 0xD9D JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0x5A1 SWAP2 SWAP1 PUSH2 0xDB3 JUMP JUMPDEST POP PUSH1 0x1 SWAP1 JUMP JUMPDEST PUSH2 0x5B8 JUMPI PUSH1 0x0 SWAP5 POP POP POP POP POP PUSH2 0x5CC JUMP JUMPDEST SWAP1 SWAP2 SUB SWAP1 PUSH1 0x1 ADD PUSH2 0x534 JUMP JUMPDEST POP PUSH1 0x1 SWAP3 POP POP POP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5DE PUSH2 0x9AF JUMP JUMPDEST DUP4 CALLVALUE PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x5C4 JUMPI PUSH1 0x0 DUP7 DUP7 DUP4 DUP2 DUP2 LT PUSH2 0x5FF JUMPI PUSH2 0x5FF PUSH2 0xD9D JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD SWAP1 POP DUP3 DUP2 GT ISZERO PUSH2 0x629 JUMPI PUSH1 0x40 MLOAD PUSH4 0x44044A5 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x656 DUP10 DUP10 DUP5 DUP2 DUP2 LT PUSH2 0x63E JUMPI PUSH2 0x63E PUSH2 0xD9D JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0x650 SWAP2 SWAP1 PUSH2 0xDB3 JUMP JUMPDEST DUP3 PUSH2 0xA11 JUMP JUMPDEST PUSH2 0x667 JUMPI PUSH1 0x0 SWAP5 POP POP POP POP POP PUSH2 0x5CC JUMP JUMPDEST SWAP1 SWAP2 SUB SWAP1 PUSH1 0x1 ADD PUSH2 0x5E3 JUMP JUMPDEST PUSH1 0x66 SLOAD PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ DUP1 PUSH2 0x6B4 JUMPI POP PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x65 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH1 0x1 EQ JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x6C5 DUP3 CALLER PUSH2 0x673 JUMP JUMPDEST PUSH2 0x6FD JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x9 PUSH1 0x24 DUP3 ADD MSTORE PUSH9 0x2737BA1037BBB732B9 PUSH1 0xB9 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x2F9 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x65 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP4 AND DUP5 MSTORE SWAP2 SWAP1 MSTORE SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 PUSH2 0x737 PUSH2 0x9AF JUMP JUMPDEST PUSH1 0x1 JUMPDEST SWAP1 POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x74C PUSH2 0x9AF JUMP JUMPDEST PUSH2 0x73A DUP3 CALLVALUE PUSH2 0xA11 JUMP JUMPDEST PUSH2 0x75E PUSH2 0x883 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x7DA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6464726573730000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x2F9 JUMP JUMPDEST PUSH2 0x522 DUP2 PUSH2 0x8DD JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x7F0 DUP4 PUSH2 0xA27 JUMP JUMPDEST PUSH1 0x1 ADD SWAP1 POP PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x810 JUMPI PUSH2 0x810 PUSH2 0xDD4 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x83A JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP DUP2 DUP2 ADD PUSH1 0x20 ADD JUMPDEST PUSH1 0x0 NOT ADD PUSH32 0x3031323334353637383961626364656600000000000000000000000000000000 PUSH1 0xA DUP7 MOD BYTE DUP2 MSTORE8 PUSH1 0xA DUP6 DIV SWAP5 POP DUP5 PUSH2 0x844 JUMPI POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x33 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x3E4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x2F9 JUMP JUMPDEST PUSH1 0x33 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 MLOAD SWAP2 AND SWAP2 SWAP1 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x9A7 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E7472616374206973206E6F742069 PUSH1 0x44 DUP3 ADD MSTORE PUSH11 0x6E697469616C697A696E67 PUSH1 0xA8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x2F9 JUMP JUMPDEST PUSH2 0x3E4 PUSH2 0xB0A JUMP JUMPDEST CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND EQ PUSH2 0x3E4 JUMPI PUSH1 0x40 MLOAD PUSH32 0x4CA8886700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x6B4 PUSH2 0x185 PUSH2 0x100 DUP6 ADD PUSH1 0xE0 DUP7 ADD PUSH2 0xC18 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP4 LT PUSH2 0xA70 JUMPI PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP4 DIV SWAP3 POP PUSH1 0x40 ADD JUMPDEST PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 LT PUSH2 0xA9C JUMPI PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 DIV SWAP3 POP PUSH1 0x20 ADD JUMPDEST PUSH7 0x2386F26FC10000 DUP4 LT PUSH2 0xABA JUMPI PUSH7 0x2386F26FC10000 DUP4 DIV SWAP3 POP PUSH1 0x10 ADD JUMPDEST PUSH4 0x5F5E100 DUP4 LT PUSH2 0xAD2 JUMPI PUSH4 0x5F5E100 DUP4 DIV SWAP3 POP PUSH1 0x8 ADD JUMPDEST PUSH2 0x2710 DUP4 LT PUSH2 0xAE6 JUMPI PUSH2 0x2710 DUP4 DIV SWAP3 POP PUSH1 0x4 ADD JUMPDEST PUSH1 0x64 DUP4 LT PUSH2 0xAF8 JUMPI PUSH1 0x64 DUP4 DIV SWAP3 POP PUSH1 0x2 ADD JUMPDEST PUSH1 0xA DUP4 LT PUSH2 0xB04 JUMPI PUSH1 0x1 ADD JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0xB75 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E7472616374206973206E6F742069 PUSH1 0x44 DUP3 ADD MSTORE PUSH11 0x6E697469616C697A696E67 PUSH1 0xA8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x2F9 JUMP JUMPDEST PUSH2 0x3E4 CALLER PUSH2 0x8DD JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x73D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xBA8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH2 0xBB8 PUSH1 0x20 DUP5 ADD PUSH2 0xB7E JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xBDC JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0xBC4 JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0xC04 DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0xBC1 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xC2A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x6B4 DUP3 PUSH2 0xB7E JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0xC45 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xC5D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP6 ADD ADD GT ISZERO PUSH2 0xC78 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x40 DUP6 DUP8 SUB SLT ISZERO PUSH2 0xC95 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0xCAD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xCB9 DUP9 DUP4 DUP10 ADD PUSH2 0xC33 JUMP JUMPDEST SWAP1 SWAP7 POP SWAP5 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0xCD2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xCDF DUP8 DUP3 DUP9 ADD PUSH2 0xC33 JUMP JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP SWAP6 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xCFD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xD14 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD PUSH2 0x140 DUP2 DUP6 SUB SLT ISZERO PUSH2 0x6B4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP5 MLOAD PUSH2 0xD39 DUP2 DUP5 PUSH1 0x20 DUP10 ADD PUSH2 0xBC1 JUMP JUMPDEST DUP1 DUP4 ADD SWAP1 POP PUSH32 0x2E00000000000000000000000000000000000000000000000000000000000000 DUP1 DUP3 MSTORE DUP6 MLOAD PUSH2 0xD75 DUP2 PUSH1 0x1 DUP6 ADD PUSH1 0x20 DUP11 ADD PUSH2 0xBC1 JUMP JUMPDEST PUSH1 0x1 SWAP3 ADD SWAP2 DUP3 ADD MSTORE DUP4 MLOAD PUSH2 0xD90 DUP2 PUSH1 0x2 DUP5 ADD PUSH1 0x20 DUP9 ADD PUSH2 0xBC1 JUMP JUMPDEST ADD PUSH1 0x2 ADD SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 CALLDATALOAD PUSH2 0x13E NOT DUP4 CALLDATASIZE SUB ADD DUP2 SLT PUSH2 0xDCA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DIV SWAP12 LOG2 SWAP13 0x5D MSIZE 0xBB SWAP2 DUP6 SELFDESTRUCT 0x49 SUB SWAP16 SELFBALANCE DUP9 0xD1 0xA6 0xC5 0xE5 ADDMOD 0xCC KECCAK256 0x28 COINBASE SWAP7 0xD5 0xAB 0xEC 0xC0 0xE5 NOT SGT PUSH5 0x736F6C6343 STOP ADDMOD SGT STOP CALLER ","sourceMap":"504:1639:24:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1211:12:5;;;;;;;;;;;;;;1172:62;504:1639:24;;;;;1443:171;;;;;;;;;;-1:-1:-1;1443:171:24;;;;;:::i;:::-;;:::i;867:234:3:-;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1146:106:24;;;;;;;;;;-1:-1:-1;1146:106:24;;;;;:::i;:::-;1239:6;;-1:-1:-1;;;;;1227:18:24;;;1239:6;;1227:18;;1146:106;;;;1486:14:29;;1479:22;1461:41;;1449:2;1434:18;1146:106:24;1321:187:29;2064:101:6;;;;;;;;;;;;;:::i;847:103:24:-;;;;;;;;;;;;;:::i;3130:1369:5:-;;;;;;:::i;:::-;;:::i;1441:85:6:-;;;;;;;;;;-1:-1:-1;1513:6:6;;1441:85;;-1:-1:-1;;;;;1513:6:6;;;2898:74:29;;2886:2;2871:18;1441:85:6;2752:226:29;1500:1370:5;;;;;;:::i;:::-;;:::i;956:184:24:-;;;;;;;;;;-1:-1:-1;956:184:24;;;;;:::i;:::-;;:::i;994:85:5:-;;;;;;;;;;-1:-1:-1;1044:4:5;994:85;;1258:179:24;;;;;;;;;;-1:-1:-1;1258:179:24;;;;;:::i;:::-;;:::i;2927:146:5:-;;;;;;:::i;:::-;;:::i;1297:::-;;;;;;:::i;:::-;;:::i;2314:198:6:-;;;;;;;;;;-1:-1:-1;2314:198:6;;;;;:::i;:::-;;:::i;1443:171:24:-;1517:30;1525:9;1536:10;1517:7;:30::i;:::-;1509:52;;;;-1:-1:-1;;;1509:52:24;;3579:2:29;1509:52:24;;;3561:21:29;3618:1;3598:18;;;3591:29;-1:-1:-1;;;3636:18:29;;;3629:39;3685:18;;1509:52:24;;;;;;;;;1606:1;1571:26;;;:15;:26;;;;;;;;-1:-1:-1;;;;;1571:32:24;;;;;;;;;;:36;;-1:-1:-1;;1571:36:24;;;1443:171::o;867:234:3:-;909:13;994:24;1011:6;994:16;:24::i;:::-;1025;1042:6;1025:16;:24::i;:::-;1056:23;1073:5;1056:16;:23::i;:::-;977:103;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;934:160;;867:234;:::o;2064:101:6:-;1334:13;:11;:13::i;:::-;2128:30:::1;2155:1;2128:18;:30::i;:::-;2064:101::o:0;847:103:24:-;3279:19:8;3302:13;;;;;;3301:14;;3347:34;;;;-1:-1:-1;3365:12:8;;3380:1;3365:12;;;;:16;3347:34;3346:108;;;-1:-1:-1;3426:4:8;1713:19:9;:23;;;3387:66:8;;-1:-1:-1;3436:12:8;;;;;:17;3387:66;3325:201;;;;-1:-1:-1;;;3325:201:8;;4920:2:29;3325:201:8;;;4902:21:29;4959:2;4939:18;;;4932:30;4998:34;4978:18;;;4971:62;5069:16;5049:18;;;5042:44;5103:19;;3325:201:8;4718:410:29;3325:201:8;3536:12;:16;;-1:-1:-1;;3536:16:8;3551:1;3536:16;;;3562:65;;;;3596:13;:20;;-1:-1:-1;;3596:20:8;;;;;3562:65;898:6:24::1;:19:::0;;-1:-1:-1;;898:19:24::1;907:10;898:19;::::0;;927:16:::1;:14;:16::i;:::-;3651:14:8::0;3647:99;;;3697:5;3681:21;;-1:-1:-1;;3681:21:8;;;3721:14;;-1:-1:-1;5285:36:29;;3721:14:8;;5273:2:29;5258:18;3721:14:8;;;;;;;3647:99;3269:483;847:103:24:o;3130:1369:5:-;3271:4;908:10;:8;:10::i;:::-;3304:12;3756:9:::1;3287:14;3776:695;3800:6;3796:1;:10;3776:695;;;3933:13;3949:6;;3956:1;3949:9;;;;;;;:::i;:::-;;;;;;;3933:25;;3984:14;3976:5;:22;3972:87;;;4025:19;;-1:-1:-1::0;;;4025:19:5::1;;;;;;;;;;;3972:87;4181:32;4190:12;;4203:1;4190:15;;;;;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;-1:-1:-1::0;2130:4:24;;1978:163;4181:32:5::1;4176:84;;4240:5;4233:12;;;;;;;;4176:84;4423:23:::0;;::::1;::::0;1483:1:0;1479:5;3776:695:5::1;;;;4488:4;4481:11;;;;929:1;3130:1369:::0;;;;;;:::o;1500:1370::-;1641:4;908:10;:8;:10::i;:::-;1674:12;2126:9:::1;1657:14;2146:696;2170:6;2166:1;:10;2146:696;;;2303:13;2319:6;;2326:1;2319:9;;;;;;;:::i;:::-;;;;;;;2303:25;;2354:14;2346:5;:22;2342:87;;;2395:19;;-1:-1:-1::0;;;2395:19:5::1;;;;;;;;;;;2342:87;2552:32;2561:12;;2574:1;2561:15;;;;;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;2578:5;2552:8;:32::i;:::-;2547:84;;2611:5;2604:12;;;;;;;;2547:84;2794:23:::0;;::::1;::::0;1483:1:0;1479:5;2146:696:5::1;;956:184:24::0;1086:6;;1049:4;;-1:-1:-1;;;;;1086:6:24;1072:10;:20;;:61;;-1:-1:-1;1096:26:24;;;;:15;:26;;;;;;;;-1:-1:-1;;;;;1096:32:24;;;;;;;;;;;;;:37;1072:61;1065:68;956:184;-1:-1:-1;;;956:184:24:o;1258:179::-;1340:30;1348:9;1359:10;1340:7;:30::i;:::-;1332:52;;;;-1:-1:-1;;;1332:52:24;;3579:2:29;1332:52:24;;;3561:21:29;3618:1;3598:18;;;3591:29;-1:-1:-1;;;3636:18:29;;;3629:39;3685:18;;1332:52:24;3377:332:29;1332:52:24;1394:26;;;;:15;:26;;;;;;;;-1:-1:-1;;;;;1394:32:24;;;;;;;;;;:36;;-1:-1:-1;;1394:36:24;1429:1;1394:36;;;1258:179::o;2927:146:5:-;3011:4;908:10;:8;:10::i;:::-;2130:4:24;3034:32:5::1;3027:39;;929:1;2927:146:::0;;;:::o;1297:::-;1381:4;908:10;:8;:10::i;:::-;1404:32:::1;1413:11;1426:9;1404:8;:32::i;2314:198:6:-:0;1334:13;:11;:13::i;:::-;-1:-1:-1;;;;;2402:22:6;::::1;2394:73;;;::::0;-1:-1:-1;;;2394:73:6;;6055:2:29;2394:73:6::1;::::0;::::1;6037:21:29::0;6094:2;6074:18;;;6067:30;6133:34;6113:18;;;6106:62;6204:8;6184:18;;;6177:36;6230:19;;2394:73:6::1;5853:402:29::0;2394:73:6::1;2477:28;2496:8;2477:18;:28::i;447:696:19:-:0;503:13;552:14;569:17;580:5;569:10;:17::i;:::-;589:1;569:21;552:38;;604:20;638:6;627:18;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;627:18:19;-1:-1:-1;604:41:19;-1:-1:-1;765:28:19;;;781:2;765:28;820:280;-1:-1:-1;;851:5:19;990:8;985:2;974:14;;969:30;851:5;956:44;1044:2;1035:11;;;-1:-1:-1;1064:21:19;820:280;1064:21;-1:-1:-1;1120:6:19;447:696;-1:-1:-1;;;447:696:19:o;1599:130:6:-;1513:6;;-1:-1:-1;;;;;1513:6:6;929:10:10;1662:23:6;1654:68;;;;-1:-1:-1;;;1654:68:6;;6840:2:29;1654:68:6;;;6822:21:29;;;6859:18;;;6852:30;6918:34;6898:18;;;6891:62;6970:18;;1654:68:6;6638:356:29;2666:187:6;2758:6;;;-1:-1:-1;;;;;2774:17:6;;;-1:-1:-1;;2774:17:6;;;;;;;2806:40;;2758:6;;;2774:17;2758:6;;2806:40;;2739:16;;2806:40;2729:124;2666:187;:::o;1003:95::-;5374:13:8;;;;;;;5366:69;;;;-1:-1:-1;;;5366:69:8;;7201:2:29;5366:69:8;;;7183:21:29;7240:2;7220:18;;;7213:30;7279:34;7259:18;;;7252:62;-1:-1:-1;;;7330:18:29;;;7323:41;7381:19;;5366:69:8;6999:407:29;5366:69:8;1065:26:6::1;:24;:26::i;5977:128:5:-:0;6024:10;-1:-1:-1;;;;;6046:4:5;6024:27;;6020:79;;6074:14;;;;;;;;;;;;;;1703:186:24;1828:4;1851:31;1861:20;;;;;;;;:::i;10139:916:22:-;10192:7;;10276:8;10267:17;;10263:103;;10313:8;10304:17;;;-1:-1:-1;10349:2:22;10339:12;10263:103;10392:8;10383:5;:17;10379:103;;10429:8;10420:17;;;-1:-1:-1;10465:2:22;10455:12;10379:103;10508:8;10499:5;:17;10495:103;;10545:8;10536:17;;;-1:-1:-1;10581:2:22;10571:12;10495:103;10624:7;10615:5;:16;10611:100;;10660:7;10651:16;;;-1:-1:-1;10695:1:22;10685:11;10611:100;10737:7;10728:5;:16;10724:100;;10773:7;10764:16;;;-1:-1:-1;10808:1:22;10798:11;10724:100;10850:7;10841:5;:16;10837:100;;10886:7;10877:16;;;-1:-1:-1;10921:1:22;10911:11;10837:100;10963:7;10954:5;:16;10950:66;;11000:1;10990:11;10950:66;11042:6;10139:916;-1:-1:-1;;10139:916:22:o;1104:111:6:-;5374:13:8;;;;;;;5366:69;;;;-1:-1:-1;;;5366:69:8;;7201:2:29;5366:69:8;;;7183:21:29;7240:2;7220:18;;;7213:30;7279:34;7259:18;;;7252:62;-1:-1:-1;;;7330:18:29;;;7323:41;7381:19;;5366:69:8;6999:407:29;5366:69:8;1176:32:6::1;929:10:10::0;1176:18:6::1;:32::i;14:196:29:-:0;82:20;;-1:-1:-1;;;;;131:54:29;;121:65;;111:93;;200:1;197;190:12;215:254;283:6;291;344:2;332:9;323:7;319:23;315:32;312:52;;;360:1;357;350:12;312:52;396:9;383:23;373:33;;425:38;459:2;448:9;444:18;425:38;:::i;:::-;415:48;;215:254;;;;;:::o;474:250::-;559:1;569:113;583:6;580:1;577:13;569:113;;;659:11;;;653:18;640:11;;;633:39;605:2;598:10;569:113;;;-1:-1:-1;;716:1:29;698:16;;691:27;474:250::o;729:396::-;878:2;867:9;860:21;841:4;910:6;904:13;953:6;948:2;937:9;933:18;926:34;969:79;1041:6;1036:2;1025:9;1021:18;1016:2;1008:6;1004:15;969:79;:::i;:::-;1109:2;1088:15;-1:-1:-1;;1084:29:29;1069:45;;;;1116:2;1065:54;;729:396;-1:-1:-1;;729:396:29:o;1130:186::-;1189:6;1242:2;1230:9;1221:7;1217:23;1213:32;1210:52;;;1258:1;1255;1248:12;1210:52;1281:29;1300:9;1281:29;:::i;1513:387::-;1596:8;1606:6;1660:3;1653:4;1645:6;1641:17;1637:27;1627:55;;1678:1;1675;1668:12;1627:55;-1:-1:-1;1701:20:29;;1744:18;1733:30;;1730:50;;;1776:1;1773;1766:12;1730:50;1813:4;1805:6;1801:17;1789:29;;1873:3;1866:4;1856:6;1853:1;1849:14;1841:6;1837:27;1833:38;1830:47;1827:67;;;1890:1;1887;1880:12;1827:67;1513:387;;;;;:::o;1905:842::-;2056:6;2064;2072;2080;2133:2;2121:9;2112:7;2108:23;2104:32;2101:52;;;2149:1;2146;2139:12;2101:52;2189:9;2176:23;2218:18;2259:2;2251:6;2248:14;2245:34;;;2275:1;2272;2265:12;2245:34;2314:90;2396:7;2387:6;2376:9;2372:22;2314:90;:::i;:::-;2423:8;;-1:-1:-1;2288:116:29;-1:-1:-1;2511:2:29;2496:18;;2483:32;;-1:-1:-1;2527:16:29;;;2524:36;;;2556:1;2553;2546:12;2524:36;;2595:92;2679:7;2668:8;2657:9;2653:24;2595:92;:::i;:::-;1905:842;;;;-1:-1:-1;2706:8:29;-1:-1:-1;;;;1905:842:29:o;2983:389::-;3071:6;3124:2;3112:9;3103:7;3099:23;3095:32;3092:52;;;3140:1;3137;3130:12;3092:52;3180:9;3167:23;3213:18;3205:6;3202:30;3199:50;;;3245:1;3242;3235:12;3199:50;3268:22;;3324:3;3306:16;;;3302:26;3299:46;;;3341:1;3338;3331:12;3714:999;4143:3;4181:6;4175:13;4197:66;4256:6;4251:3;4244:4;4236:6;4232:17;4197:66;:::i;:::-;4294:6;4289:3;4285:16;4272:29;;4320:3;4346:2;4339:5;4332:17;4380:6;4374:13;4396:78;4465:8;4461:1;4454:5;4450:13;4443:4;4435:6;4431:17;4396:78;:::i;:::-;4537:1;4493:20;;4529:10;;;4522:22;4569:13;;4591:75;4569:13;4653:1;4645:10;;4638:4;4626:17;;4591:75;:::i;:::-;4686:17;4705:1;4682:25;;3714:999;-1:-1:-1;;;;;3714:999:29:o;5332:184::-;-1:-1:-1;;;5381:1:29;5374:88;5481:4;5478:1;5471:15;5505:4;5502:1;5495:15;5521:327;5616:4;5674:11;5661:25;5768:3;5764:8;5753;5737:14;5733:29;5729:44;5709:18;5705:69;5695:97;;5788:1;5785;5778:12;5695:97;5809:33;;;;;5521:327;-1:-1:-1;;5521:327:29:o;6260:184::-;-1:-1:-1;;;6309:1:29;6302:88;6409:4;6406:1;6399:15;6433:4;6430:1;6423:15"},"gasEstimates":{"creation":{"codeDepositCost":"723200","executionCost":"infinite","totalCost":"infinite"},"external":{"attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))":"infinite","canAttest(address)":"2560","delist(bytes32,address)":"29206","enlist(bytes32,address)":"29210","initialize()":"infinite","isAdmin(bytes32,address)":"4870","isPayable()":"265","multiAttest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])":"infinite","multiRevoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])":"infinite","owner()":"2390","renounceOwnership()":"infinite","revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))":"infinite","transferOwnership(address)":"28412","version()":"infinite"},"internal":{"onAttest(struct Attestation calldata,uint256)":"infinite","onRevoke(struct Attestation calldata,uint256)":"infinite"}},"methodIdentifiers":{"attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))":"e60c3505","canAttest(address)":"57692ad2","delist(bytes32,address)":"1b494702","enlist(bytes32,address)":"d5cbe2bc","initialize()":"8129fc1c","isAdmin(bytes32,address)":"b75dbb8e","isPayable()":"ce46e046","multiAttest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])":"91db0b7e","multiRevoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])":"88e5b2d9","owner()":"8da5cb5b","renounceOwnership()":"715018a6","revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))":"e49617e1","transferOwnership(address)":"f2fde38b","version()":"54fd4d50"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IEAS\",\"name\":\"eas\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AccessDenied\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientValue\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidEAS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotPayable\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"uid\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"schema\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"time\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"expirationTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"revocationTime\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"refUID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"attester\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"revocable\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct Attestation\",\"name\":\"attestation\",\"type\":\"tuple\"}],\"name\":\"attest\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"attester\",\"type\":\"address\"}],\"name\":\"canAttest\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"community\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"delist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"community\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"enlist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"community\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPayable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"uid\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"schema\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"time\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"expirationTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"revocationTime\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"refUID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"attester\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"revocable\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct Attestation[]\",\"name\":\"attestations\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"multiAttest\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"uid\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"schema\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"time\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"expirationTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"revocationTime\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"refUID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"attester\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"revocable\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct Attestation[]\",\"name\":\"attestations\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"multiRevoke\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"uid\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"schema\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"time\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"expirationTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"revocationTime\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"refUID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"attester\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"revocable\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct Attestation\",\"name\":\"attestation\",\"type\":\"tuple\"}],\"name\":\"revoke\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{\"attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))\":{\"details\":\"Processes an attestation and verifies whether it's valid.\",\"params\":{\"attestation\":\"The new attestation.\"},\"returns\":{\"_0\":\"Whether the attestation is valid.\"}},\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"isPayable()\":{\"details\":\"Returns whether the resolver supports ETH transfers.\"},\"multiAttest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])\":{\"details\":\"Processes multiple attestations and verifies whether they are valid.\",\"params\":{\"attestations\":\"The new attestations.\",\"values\":\"Explicit ETH amounts which were sent with each attestation.\"},\"returns\":{\"_0\":\"Whether all the attestations are valid.\"}},\"multiRevoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])\":{\"details\":\"Processes revocation of multiple attestation and verifies they can be revoked.\",\"params\":{\"attestations\":\"The existing attestations to be revoked.\",\"values\":\"Explicit ETH amounts which were sent with each revocation.\"},\"returns\":{\"_0\":\"Whether the attestations can be revoked.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))\":{\"details\":\"Processes an attestation revocation and verifies if it can be revoked.\",\"params\":{\"attestation\":\"The existing attestation to be revoked.\"},\"returns\":{\"_0\":\"Whether the attestation can be revoked.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"version()\":{\"returns\":{\"_0\":\"Semver contract version as a string.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"version()\":{\"notice\":\"Returns the full semver contract version.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/CommunityResolver.sol\":\"CommunityResolver\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@ethereum-attestation-service/eas-contracts/contracts/Common.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// A representation of an empty/uninitialized UID.\\nbytes32 constant EMPTY_UID = 0;\\n\\n// A zero expiration represents an non-expiring attestation.\\nuint64 constant NO_EXPIRATION_TIME = 0;\\n\\nerror AccessDenied();\\nerror InvalidEAS();\\nerror InvalidLength();\\nerror InvalidSignature();\\nerror NotFound();\\n\\n/**\\n * @dev A struct representing EIP712 signature data.\\n */\\nstruct EIP712Signature {\\n    uint8 v; // The recovery ID.\\n    bytes32 r; // The x-coordinate of the nonce R.\\n    bytes32 s; // The signature data.\\n}\\n\\n/**\\n * @dev A struct representing a single attestation.\\n */\\nstruct Attestation {\\n    bytes32 uid; // A unique identifier of the attestation.\\n    bytes32 schema; // The unique identifier of the schema.\\n    uint64 time; // The time when the attestation was created (Unix timestamp).\\n    uint64 expirationTime; // The time when the attestation expires (Unix timestamp).\\n    uint64 revocationTime; // The time when the attestation was revoked (Unix timestamp).\\n    bytes32 refUID; // The UID of the related attestation.\\n    address recipient; // The recipient of the attestation.\\n    address attester; // The attester/sender of the attestation.\\n    bool revocable; // Whether the attestation is revocable.\\n    bytes data; // Custom attestation data.\\n}\\n\\n/**\\n * @dev A helper function to work with unchecked iterators in loops.\\n */\\nfunction uncheckedInc(uint256 i) pure returns (uint256 j) {\\n    unchecked {\\n        j = i + 1;\\n    }\\n}\\n\",\"keccak256\":\"0x4bab9ec76bdb009e9fb505c45a679d39c9e80771eb13ed901029a1068025752a\",\"license\":\"MIT\"},\"@ethereum-attestation-service/eas-contracts/contracts/IEAS.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { ISchemaRegistry } from \\\"./ISchemaRegistry.sol\\\";\\nimport { Attestation, EIP712Signature } from \\\"./Common.sol\\\";\\n\\n/**\\n * @dev A struct representing the arguments of the attestation request.\\n */\\nstruct AttestationRequestData {\\n    address recipient; // The recipient of the attestation.\\n    uint64 expirationTime; // The time when the attestation expires (Unix timestamp).\\n    bool revocable; // Whether the attestation is revocable.\\n    bytes32 refUID; // The UID of the related attestation.\\n    bytes data; // Custom attestation data.\\n    uint256 value; // An explicit ETH amount to send to the resolver. This is important to prevent accidental user errors.\\n}\\n\\n/**\\n * @dev A struct representing the full arguments of the attestation request.\\n */\\nstruct AttestationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    AttestationRequestData data; // The arguments of the attestation request.\\n}\\n\\n/**\\n * @dev A struct representing the full arguments of the full delegated attestation request.\\n */\\nstruct DelegatedAttestationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    AttestationRequestData data; // The arguments of the attestation request.\\n    EIP712Signature signature; // The EIP712 signature data.\\n    address attester; // The attesting account.\\n}\\n\\n/**\\n * @dev A struct representing the full arguments of the multi attestation request.\\n */\\nstruct MultiAttestationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    AttestationRequestData[] data; // The arguments of the attestation request.\\n}\\n\\n/**\\n * @dev A struct representing the full arguments of the delegated multi attestation request.\\n */\\nstruct MultiDelegatedAttestationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    AttestationRequestData[] data; // The arguments of the attestation requests.\\n    EIP712Signature[] signatures; // The EIP712 signatures data. Please note that the signatures are assumed to be signed with increasing nonces.\\n    address attester; // The attesting account.\\n}\\n\\n/**\\n * @dev A struct representing the arguments of the revocation request.\\n */\\nstruct RevocationRequestData {\\n    bytes32 uid; // The UID of the attestation to revoke.\\n    uint256 value; // An explicit ETH amount to send to the resolver. This is important to prevent accidental user errors.\\n}\\n\\n/**\\n * @dev A struct representing the full arguments of the revocation request.\\n */\\nstruct RevocationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    RevocationRequestData data; // The arguments of the revocation request.\\n}\\n\\n/**\\n * @dev A struct representing the arguments of the full delegated revocation request.\\n */\\nstruct DelegatedRevocationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    RevocationRequestData data; // The arguments of the revocation request.\\n    EIP712Signature signature; // The EIP712 signature data.\\n    address revoker; // The revoking account.\\n}\\n\\n/**\\n * @dev A struct representing the full arguments of the multi revocation request.\\n */\\nstruct MultiRevocationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    RevocationRequestData[] data; // The arguments of the revocation request.\\n}\\n\\n/**\\n * @dev A struct representing the full arguments of the delegated multi revocation request.\\n */\\nstruct MultiDelegatedRevocationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    RevocationRequestData[] data; // The arguments of the revocation requests.\\n    EIP712Signature[] signatures; // The EIP712 signatures data. Please note that the signatures are assumed to be signed with increasing nonces.\\n    address revoker; // The revoking account.\\n}\\n\\n/**\\n * @title EAS - Ethereum Attestation Service interface.\\n */\\ninterface IEAS {\\n    /**\\n     * @dev Emitted when an attestation has been made.\\n     *\\n     * @param recipient The recipient of the attestation.\\n     * @param attester The attesting account.\\n     * @param uid The UID the revoked attestation.\\n     * @param schema The UID of the schema.\\n     */\\n    event Attested(address indexed recipient, address indexed attester, bytes32 uid, bytes32 indexed schema);\\n\\n    /**\\n     * @dev Emitted when an attestation has been revoked.\\n     *\\n     * @param recipient The recipient of the attestation.\\n     * @param attester The attesting account.\\n     * @param schema The UID of the schema.\\n     * @param uid The UID the revoked attestation.\\n     */\\n    event Revoked(address indexed recipient, address indexed attester, bytes32 uid, bytes32 indexed schema);\\n\\n    /**\\n     * @dev Emitted when a data has been timestamped.\\n     *\\n     * @param data The data.\\n     * @param timestamp The timestamp.\\n     */\\n    event Timestamped(bytes32 indexed data, uint64 indexed timestamp);\\n\\n    /**\\n     * @dev Emitted when a data has been revoked.\\n     *\\n     * @param revoker The address of the revoker.\\n     * @param data The data.\\n     * @param timestamp The timestamp.\\n     */\\n    event RevokedOffchain(address indexed revoker, bytes32 indexed data, uint64 indexed timestamp);\\n\\n    /**\\n     * @dev Returns the address of the global schema registry.\\n     *\\n     * @return The address of the global schema registry.\\n     */\\n    function getSchemaRegistry() external view returns (ISchemaRegistry);\\n\\n    /**\\n     * @dev Attests to a specific schema.\\n     *\\n     * @param request The arguments of the attestation request.\\n     *\\n     * Example:\\n     *\\n     * attest({\\n     *     schema: \\\"0facc36681cbe2456019c1b0d1e7bedd6d1d40f6f324bf3dd3a4cef2999200a0\\\",\\n     *     data: {\\n     *         recipient: \\\"0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf\\\",\\n     *         expirationTime: 0,\\n     *         revocable: true,\\n     *         refUID: \\\"0x0000000000000000000000000000000000000000000000000000000000000000\\\",\\n     *         data: \\\"0xF00D\\\",\\n     *         value: 0\\n     *     }\\n     * })\\n     *\\n     * @return The UID of the new attestation.\\n     */\\n    function attest(AttestationRequest calldata request) external payable returns (bytes32);\\n\\n    /**\\n     * @dev Attests to a specific schema via the provided EIP712 signature.\\n     *\\n     * @param delegatedRequest The arguments of the delegated attestation request.\\n     *\\n     * Example:\\n     *\\n     * attestByDelegation({\\n     *     schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n     *     data: {\\n     *         recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',\\n     *         expirationTime: 1673891048,\\n     *         revocable: true,\\n     *         refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\\n     *         data: '0x1234',\\n     *         value: 0\\n     *     },\\n     *     signature: {\\n     *         v: 28,\\n     *         r: '0x148c...b25b',\\n     *         s: '0x5a72...be22'\\n     *     },\\n     *     attester: '0xc5E8740aD971409492b1A63Db8d83025e0Fc427e'\\n     * })\\n     *\\n     * @return The UID of the new attestation.\\n     */\\n    function attestByDelegation(\\n        DelegatedAttestationRequest calldata delegatedRequest\\n    ) external payable returns (bytes32);\\n\\n    /**\\n     * @dev Attests to multiple schemas.\\n     *\\n     * @param multiRequests The arguments of the multi attestation requests. The requests should be grouped by distinct\\n     * schema ids to benefit from the best batching optimization.\\n     *\\n     * Example:\\n     *\\n     * multiAttest([{\\n     *     schema: '0x33e9094830a5cba5554d1954310e4fbed2ef5f859ec1404619adea4207f391fd',\\n     *     data: [{\\n     *         recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',\\n     *         expirationTime: 1673891048,\\n     *         revocable: true,\\n     *         refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\\n     *         data: '0x1234',\\n     *         value: 1000\\n     *     },\\n     *     {\\n     *         recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',\\n     *         expirationTime: 0,\\n     *         revocable: false,\\n     *         refUID: '0x480df4a039efc31b11bfdf491b383ca138b6bde160988222a2a3509c02cee174',\\n     *         data: '0x00',\\n     *         value: 0\\n     *     }],\\n     * },\\n     * {\\n     *     schema: '0x5ac273ce41e3c8bfa383efe7c03e54c5f0bff29c9f11ef6ffa930fc84ca32425',\\n     *     data: [{\\n     *         recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',\\n     *         expirationTime: 0,\\n     *         revocable: true,\\n     *         refUID: '0x75bf2ed8dca25a8190c50c52db136664de25b2449535839008ccfdab469b214f',\\n     *         data: '0x12345678',\\n     *         value: 0\\n     *     },\\n     * }])\\n     *\\n     * @return The UIDs of the new attestations.\\n     */\\n    function multiAttest(MultiAttestationRequest[] calldata multiRequests) external payable returns (bytes32[] memory);\\n\\n    /**\\n     * @dev Attests to multiple schemas using via provided EIP712 signatures.\\n     *\\n     * @param multiDelegatedRequests The arguments of the delegated multi attestation requests. The requests should be\\n     * grouped by distinct schema ids to benefit from the best batching optimization.\\n     *\\n     * Example:\\n     *\\n     * multiAttestByDelegation([{\\n     *     schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n     *     data: [{\\n     *         recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',\\n     *         expirationTime: 1673891048,\\n     *         revocable: true,\\n     *         refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\\n     *         data: '0x1234',\\n     *         value: 0\\n     *     },\\n     *     {\\n     *         recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',\\n     *         expirationTime: 0,\\n     *         revocable: false,\\n     *         refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\\n     *         data: '0x00',\\n     *         value: 0\\n     *     }],\\n     *     signatures: [{\\n     *         v: 28,\\n     *         r: '0x148c...b25b',\\n     *         s: '0x5a72...be22'\\n     *     },\\n     *     {\\n     *         v: 28,\\n     *         r: '0x487s...67bb',\\n     *         s: '0x12ad...2366'\\n     *     }],\\n     *     attester: '0x1D86495b2A7B524D747d2839b3C645Bed32e8CF4'\\n     * }])\\n     *\\n     * @return The UIDs of the new attestations.\\n     */\\n    function multiAttestByDelegation(\\n        MultiDelegatedAttestationRequest[] calldata multiDelegatedRequests\\n    ) external payable returns (bytes32[] memory);\\n\\n    /**\\n     * @dev Revokes an existing attestation to a specific schema.\\n     *\\n     * Example:\\n     *\\n     * revoke({\\n     *     schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n     *     data: {\\n     *         uid: '0x101032e487642ee04ee17049f99a70590c735b8614079fc9275f9dd57c00966d',\\n     *         value: 0\\n     *     }\\n     * })\\n     *\\n     * @param request The arguments of the revocation request.\\n     */\\n    function revoke(RevocationRequest calldata request) external payable;\\n\\n    /**\\n     * @dev Revokes an existing attestation to a specific schema via the provided EIP712 signature.\\n     *\\n     * Example:\\n     *\\n     * revokeByDelegation({\\n     *     schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n     *     data: {\\n     *         uid: '0xcbbc12102578c642a0f7b34fe7111e41afa25683b6cd7b5a14caf90fa14d24ba',\\n     *         value: 0\\n     *     },\\n     *     signature: {\\n     *         v: 27,\\n     *         r: '0xb593...7142',\\n     *         s: '0x0f5b...2cce'\\n     *     },\\n     *     revoker: '0x244934dd3e31bE2c81f84ECf0b3E6329F5381992'\\n     * })\\n     *\\n     * @param delegatedRequest The arguments of the delegated revocation request.\\n     */\\n    function revokeByDelegation(DelegatedRevocationRequest calldata delegatedRequest) external payable;\\n\\n    /**\\n     * @dev Revokes existing attestations to multiple schemas.\\n     *\\n     * @param multiRequests The arguments of the multi revocation requests. The requests should be grouped by distinct\\n     * schema ids to benefit from the best batching optimization.\\n     *\\n     * Example:\\n     *\\n     * multiRevoke([{\\n     *     schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n     *     data: [{\\n     *         uid: '0x211296a1ca0d7f9f2cfebf0daaa575bea9b20e968d81aef4e743d699c6ac4b25',\\n     *         value: 1000\\n     *     },\\n     *     {\\n     *         uid: '0xe160ac1bd3606a287b4d53d5d1d6da5895f65b4b4bab6d93aaf5046e48167ade',\\n     *         value: 0\\n     *     }],\\n     * },\\n     * {\\n     *     schema: '0x5ac273ce41e3c8bfa383efe7c03e54c5f0bff29c9f11ef6ffa930fc84ca32425',\\n     *     data: [{\\n     *         uid: '0x053d42abce1fd7c8fcddfae21845ad34dae287b2c326220b03ba241bc5a8f019',\\n     *         value: 0\\n     *     },\\n     * }])\\n     */\\n    function multiRevoke(MultiRevocationRequest[] calldata multiRequests) external payable;\\n\\n    /**\\n     * @dev Revokes existing attestations to multiple schemas via provided EIP712 signatures.\\n     *\\n     * @param multiDelegatedRequests The arguments of the delegated multi revocation attestation requests. The requests should be\\n     * grouped by distinct schema ids to benefit from the best batching optimization.\\n     *\\n     * Example:\\n     *\\n     * multiRevokeByDelegation([{\\n     *     schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n     *     data: [{\\n     *         uid: '0x211296a1ca0d7f9f2cfebf0daaa575bea9b20e968d81aef4e743d699c6ac4b25',\\n     *         value: 1000\\n     *     },\\n     *     {\\n     *         uid: '0xe160ac1bd3606a287b4d53d5d1d6da5895f65b4b4bab6d93aaf5046e48167ade',\\n     *         value: 0\\n     *     }],\\n     *     signatures: [{\\n     *         v: 28,\\n     *         r: '0x148c...b25b',\\n     *         s: '0x5a72...be22'\\n     *     },\\n     *     {\\n     *         v: 28,\\n     *         r: '0x487s...67bb',\\n     *         s: '0x12ad...2366'\\n     *     }],\\n     *     revoker: '0x244934dd3e31bE2c81f84ECf0b3E6329F5381992'\\n     * }])\\n     *\\n     */\\n    function multiRevokeByDelegation(\\n        MultiDelegatedRevocationRequest[] calldata multiDelegatedRequests\\n    ) external payable;\\n\\n    /**\\n     * @dev Timestamps the specified bytes32 data.\\n     *\\n     * @param data The data to timestamp.\\n     *\\n     * @return The timestamp the data was timestamped with.\\n     */\\n    function timestamp(bytes32 data) external returns (uint64);\\n\\n    /**\\n     * @dev Timestamps the specified multiple bytes32 data.\\n     *\\n     * @param data The data to timestamp.\\n     *\\n     * @return The timestamp the data was timestamped with.\\n     */\\n    function multiTimestamp(bytes32[] calldata data) external returns (uint64);\\n\\n    /**\\n     * @dev Revokes the specified bytes32 data.\\n     *\\n     * @param data The data to timestamp.\\n     *\\n     * @return The timestamp the data was revoked with.\\n     */\\n    function revokeOffchain(bytes32 data) external returns (uint64);\\n\\n    /**\\n     * @dev Revokes the specified multiple bytes32 data.\\n     *\\n     * @param data The data to timestamp.\\n     *\\n     * @return The timestamp the data was revoked with.\\n     */\\n    function multiRevokeOffchain(bytes32[] calldata data) external returns (uint64);\\n\\n    /**\\n     * @dev Returns an existing attestation by UID.\\n     *\\n     * @param uid The UID of the attestation to retrieve.\\n     *\\n     * @return The attestation data members.\\n     */\\n    function getAttestation(bytes32 uid) external view returns (Attestation memory);\\n\\n    /**\\n     * @dev Checks whether an attestation exists.\\n     *\\n     * @param uid The UID of the attestation to retrieve.\\n     *\\n     * @return Whether an attestation exists.\\n     */\\n    function isAttestationValid(bytes32 uid) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the timestamp that the specified data was timestamped with.\\n     *\\n     * @param data The data to query.\\n     *\\n     * @return The timestamp the data was timestamped with.\\n     */\\n    function getTimestamp(bytes32 data) external view returns (uint64);\\n\\n    /**\\n     * @dev Returns the timestamp that the specified data was timestamped with.\\n     *\\n     * @param data The data to query.\\n     *\\n     * @return The timestamp the data was timestamped with.\\n     */\\n    function getRevokeOffchain(address revoker, bytes32 data) external view returns (uint64);\\n}\\n\",\"keccak256\":\"0xd530be686226f3c8d7b02bb59797901620f64749a02228539afc8b082a1ee036\",\"license\":\"MIT\"},\"@ethereum-attestation-service/eas-contracts/contracts/ISchemaRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { ISchemaResolver } from \\\"./resolver/ISchemaResolver.sol\\\";\\n\\n/**\\n * @title A struct representing a record for a submitted schema.\\n */\\nstruct SchemaRecord {\\n    bytes32 uid; // The unique identifier of the schema.\\n    ISchemaResolver resolver; // Optional schema resolver.\\n    bool revocable; // Whether the schema allows revocations explicitly.\\n    string schema; // Custom specification of the schema (e.g., an ABI).\\n}\\n\\n/**\\n * @title The global schema registry interface.\\n */\\ninterface ISchemaRegistry {\\n    /**\\n     * @dev Emitted when a new schema has been registered\\n     *\\n     * @param uid The schema UID.\\n     * @param registerer The address of the account used to register the schema.\\n     */\\n    event Registered(bytes32 indexed uid, address registerer);\\n\\n    /**\\n     * @dev Submits and reserves a new schema\\n     *\\n     * @param schema The schema data schema.\\n     * @param resolver An optional schema resolver.\\n     * @param revocable Whether the schema allows revocations explicitly.\\n     *\\n     * @return The UID of the new schema.\\n     */\\n    function register(string calldata schema, ISchemaResolver resolver, bool revocable) external returns (bytes32);\\n\\n    /**\\n     * @dev Returns an existing schema by UID\\n     *\\n     * @param uid The UID of the schema to retrieve.\\n     *\\n     * @return The schema data members.\\n     */\\n    function getSchema(bytes32 uid) external view returns (SchemaRecord memory);\\n}\\n\",\"keccak256\":\"0xef47e449dd02bd034e26b1dea505ce533906f8462fc674c938ed0e872a68d640\",\"license\":\"MIT\"},\"@ethereum-attestation-service/eas-contracts/contracts/Semver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\nimport { Strings } from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\n/**\\n * @dev A simple contract for managing contract versions.\\n */\\ncontract Semver {\\n    // Contract's major version number.\\n    uint256 private immutable _major;\\n\\n    // Contract's minor version number.\\n    uint256 private immutable _minor;\\n\\n    // Contract's patch version number.\\n    uint256 private immutable _path;\\n\\n    /**\\n     * @param major Major version number.\\n     * @param minor Minor version number.\\n     * @param patch Patch version number.\\n     */\\n    constructor(uint256 major, uint256 minor, uint256 patch) {\\n        _major = major;\\n        _minor = minor;\\n        _path = patch;\\n    }\\n\\n    /**\\n     * @notice Returns the full semver contract version.\\n     *\\n     * @return Semver contract version as a string.\\n     */\\n    function version() external view returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(Strings.toString(_major), \\\".\\\", Strings.toString(_minor), \\\".\\\", Strings.toString(_path))\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0xdd3bfff2af5b5cea194f5a771080d13ad458040825b148e0d7eb65f6e3a2a7c7\",\"license\":\"MIT\"},\"@ethereum-attestation-service/eas-contracts/contracts/resolver/ISchemaResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { Attestation } from \\\"../Common.sol\\\";\\n\\n/**\\n * @title The interface of an optional schema resolver.\\n */\\ninterface ISchemaResolver {\\n    /**\\n     * @dev Returns whether the resolver supports ETH transfers.\\n     */\\n    function isPayable() external pure returns (bool);\\n\\n    /**\\n     * @dev Processes an attestation and verifies whether it's valid.\\n     *\\n     * @param attestation The new attestation.\\n     *\\n     * @return Whether the attestation is valid.\\n     */\\n    function attest(Attestation calldata attestation) external payable returns (bool);\\n\\n    /**\\n     * @dev Processes multiple attestations and verifies whether they are valid.\\n     *\\n     * @param attestations The new attestations.\\n     * @param values Explicit ETH amounts which were sent with each attestation.\\n     *\\n     * @return Whether all the attestations are valid.\\n     */\\n    function multiAttest(\\n        Attestation[] calldata attestations,\\n        uint256[] calldata values\\n    ) external payable returns (bool);\\n\\n    /**\\n     * @dev Processes an attestation revocation and verifies if it can be revoked.\\n     *\\n     * @param attestation The existing attestation to be revoked.\\n     *\\n     * @return Whether the attestation can be revoked.\\n     */\\n    function revoke(Attestation calldata attestation) external payable returns (bool);\\n\\n    /**\\n     * @dev Processes revocation of multiple attestation and verifies they can be revoked.\\n     *\\n     * @param attestations The existing attestations to be revoked.\\n     * @param values Explicit ETH amounts which were sent with each revocation.\\n     *\\n     * @return Whether the attestations can be revoked.\\n     */\\n    function multiRevoke(\\n        Attestation[] calldata attestations,\\n        uint256[] calldata values\\n    ) external payable returns (bool);\\n}\\n\",\"keccak256\":\"0xc628c6540da258f76192eaa34c21699c9cbcc4a4029d7ee04e88dc9c18c981fd\",\"license\":\"MIT\"},\"@ethereum-attestation-service/eas-contracts/contracts/resolver/SchemaResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\nimport { IEAS, Attestation } from \\\"../IEAS.sol\\\";\\nimport { InvalidEAS, uncheckedInc } from \\\"../Common.sol\\\";\\nimport { Semver } from \\\"../Semver.sol\\\";\\n\\nimport { ISchemaResolver } from \\\"./ISchemaResolver.sol\\\";\\n\\n/**\\n * @title A base resolver contract\\n */\\nabstract contract SchemaResolver is ISchemaResolver, Semver {\\n    error AccessDenied();\\n    error InsufficientValue();\\n    error NotPayable();\\n\\n    // The global EAS contract.\\n    IEAS internal immutable _eas;\\n\\n    /**\\n     * @dev Creates a new resolver.\\n     *\\n     * @param eas The address of the global EAS contract.\\n     */\\n    constructor(IEAS eas) Semver(1, 0, 0) {\\n        if (address(eas) == address(0)) {\\n            revert InvalidEAS();\\n        }\\n\\n        _eas = eas;\\n    }\\n\\n    /**\\n     * @dev Ensures that only the EAS contract can make this call.\\n     */\\n    modifier onlyEAS() {\\n        _onlyEAS();\\n\\n        _;\\n    }\\n\\n    /**\\n     * @inheritdoc ISchemaResolver\\n     */\\n    function isPayable() public pure virtual returns (bool) {\\n        return false;\\n    }\\n\\n    /**\\n     * @dev ETH callback.\\n     */\\n    receive() external payable virtual {\\n        if (!isPayable()) {\\n            revert NotPayable();\\n        }\\n    }\\n\\n    /**\\n     * @inheritdoc ISchemaResolver\\n     */\\n    function attest(Attestation calldata attestation) external payable onlyEAS returns (bool) {\\n        return onAttest(attestation, msg.value);\\n    }\\n\\n    /**\\n     * @inheritdoc ISchemaResolver\\n     */\\n    function multiAttest(\\n        Attestation[] calldata attestations,\\n        uint256[] calldata values\\n    ) external payable onlyEAS returns (bool) {\\n        uint256 length = attestations.length;\\n\\n        // We are keeping track of the remaining ETH amount that can be sent to resolvers and will keep deducting\\n        // from it to verify that there isn't any attempt to send too much ETH to resolvers. Please note that unless\\n        // some ETH was stuck in the contract by accident (which shouldn't happen in normal conditions), it won't be\\n        // possible to send too much ETH anyway.\\n        uint256 remainingValue = msg.value;\\n\\n        for (uint256 i = 0; i < length; i = uncheckedInc(i)) {\\n            // Ensure that the attester/revoker doesn't try to spend more than available.\\n            uint256 value = values[i];\\n            if (value > remainingValue) {\\n                revert InsufficientValue();\\n            }\\n\\n            // Forward the attestation to the underlying resolver and revert in case it isn't approved.\\n            if (!onAttest(attestations[i], value)) {\\n                return false;\\n            }\\n\\n            unchecked {\\n                // Subtract the ETH amount, that was provided to this attestation, from the global remaining ETH amount.\\n                remainingValue -= value;\\n            }\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @inheritdoc ISchemaResolver\\n     */\\n    function revoke(Attestation calldata attestation) external payable onlyEAS returns (bool) {\\n        return onRevoke(attestation, msg.value);\\n    }\\n\\n    /**\\n     * @inheritdoc ISchemaResolver\\n     */\\n    function multiRevoke(\\n        Attestation[] calldata attestations,\\n        uint256[] calldata values\\n    ) external payable onlyEAS returns (bool) {\\n        uint256 length = attestations.length;\\n\\n        // We are keeping track of the remaining ETH amount that can be sent to resolvers and will keep deducting\\n        // from it to verify that there isn't any attempt to send too much ETH to resolvers. Please note that unless\\n        // some ETH was stuck in the contract by accident (which shouldn't happen in normal conditions), it won't be\\n        // possible to send too much ETH anyway.\\n        uint256 remainingValue = msg.value;\\n\\n        for (uint256 i = 0; i < length; i = uncheckedInc(i)) {\\n            // Ensure that the attester/revoker doesn't try to spend more than available.\\n            uint256 value = values[i];\\n            if (value > remainingValue) {\\n                revert InsufficientValue();\\n            }\\n\\n            // Forward the revocation to the underlying resolver and revert in case it isn't approved.\\n            if (!onRevoke(attestations[i], value)) {\\n                return false;\\n            }\\n\\n            unchecked {\\n                // Subtract the ETH amount, that was provided to this attestation, from the global remaining ETH amount.\\n                remainingValue -= value;\\n            }\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev A resolver callback that should be implemented by child contracts.\\n     *\\n     * @param attestation The new attestation.\\n     * @param value An explicit ETH amount that was sent to the resolver. Please note that this value is verified in\\n     * both attest() and multiAttest() callbacks EAS-only callbacks and that in case of multi attestations, it'll\\n     * usually hold that msg.value != value, since msg.value aggregated the sent ETH amounts for all the attestations\\n     * in the batch.\\n     *\\n     * @return Whether the attestation is valid.\\n     */\\n    function onAttest(Attestation calldata attestation, uint256 value) internal virtual returns (bool);\\n\\n    /**\\n     * @dev Processes an attestation revocation and verifies if it can be revoked.\\n     *\\n     * @param attestation The existing attestation to be revoked.\\n     * @param value An explicit ETH amount that was sent to the resolver. Please note that this value is verified in\\n     * both revoke() and multiRevoke() callbacks EAS-only callbacks and that in case of multi attestations, it'll\\n     * usually hold that msg.value != value, since msg.value aggregated the sent ETH amounts for all the attestations\\n     * in the batch.\\n     *\\n     * @return Whether the attestation can be revoked.\\n     */\\n    function onRevoke(Attestation calldata attestation, uint256 value) internal virtual returns (bool);\\n\\n    /**\\n     * @dev Ensures that only the EAS contract can make this call.\\n     */\\n    function _onlyEAS() private view {\\n        if (msg.sender != address(_eas)) {\\n            revert AccessDenied();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8bac9997f3c6b2e9a165342e35c1263d1942ce55a98ecbe0aa6ec84fcb6538d7\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x4075622496acc77fd6d4de4cc30a8577a744d5c75afad33fdeacf1704d6eda98\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/CommunityResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nimport {SchemaResolver} from \\\"@ethereum-attestation-service/eas-contracts/contracts/resolver/SchemaResolver.sol\\\";\\nimport {IEAS} from \\\"@ethereum-attestation-service/eas-contracts/contracts/IEAS.sol\\\";\\nimport {Attestation} from \\\"@ethereum-attestation-service/eas-contracts/contracts/Common.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\ncontract CommunityResolver is\\n    SchemaResolver,\\n    Initializable,\\n    OwnableUpgradeable\\n{\\n    mapping(bytes32 => mapping(address => uint8)) private communityAdmins;\\n\\n    address private _owner;\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor(IEAS eas) SchemaResolver(eas) {\\n        _disableInitializers();\\n    }\\n\\n    function initialize() public initializer {\\n        _owner = msg.sender;\\n        __Ownable_init();\\n    }\\n\\n    function isAdmin(\\n        bytes32 community,\\n        address addr\\n    ) public view returns (bool) {\\n        return msg.sender == _owner || communityAdmins[community][addr] == 1;\\n    }\\n\\n    function canAttest(address attester) public view returns (bool) {\\n        return attester == _owner;\\n    }\\n\\n    function enlist(bytes32 community, address addr) public virtual {\\n        require(isAdmin(community, msg.sender), \\\"Not owner\\\");\\n        communityAdmins[community][addr] = 1;\\n    }\\n\\n    function delist(bytes32 community, address addr) public {\\n        require(isAdmin(community, msg.sender), \\\"Not owner\\\");\\n        communityAdmins[community][addr] = 0;\\n    }\\n\\n    /**\\n     * This is an bottom up event, called from the attest contract\\n     */\\n    function onAttest(\\n        Attestation calldata attestation,\\n        uint256 /*value*/\\n    ) internal view override returns (bool) {\\n        return canAttest(attestation.attester);\\n    }\\n\\n    /**\\n     * This is an bottom up event, called from the attest contract\\n     */\\n    function onRevoke(\\n        Attestation calldata /*attestation*/,\\n        uint256 /*value*/\\n    ) internal pure override returns (bool) {\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0xf377fdb125d3e2b098eb63ef9418b83887ad7e508182898cbb33dbad7c5021cf\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":983,"contract":"contracts/CommunityResolver.sol:CommunityResolver","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":986,"contract":"contracts/CommunityResolver.sol:CommunityResolver","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":1516,"contract":"contracts/CommunityResolver.sol:CommunityResolver","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"},{"astId":830,"contract":"contracts/CommunityResolver.sol:CommunityResolver","label":"_owner","offset":0,"slot":"51","type":"t_address"},{"astId":950,"contract":"contracts/CommunityResolver.sol:CommunityResolver","label":"__gap","offset":0,"slot":"52","type":"t_array(t_uint256)49_storage"},{"astId":5036,"contract":"contracts/CommunityResolver.sol:CommunityResolver","label":"communityAdmins","offset":0,"slot":"101","type":"t_mapping(t_bytes32,t_mapping(t_address,t_uint8))"},{"astId":5038,"contract":"contracts/CommunityResolver.sol:CommunityResolver","label":"_owner","offset":0,"slot":"102","type":"t_address"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_uint256)49_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[49]","numberOfBytes":"1568"},"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_mapping(t_address,t_uint8)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint8)","numberOfBytes":"32","value":"t_uint8"},"t_mapping(t_bytes32,t_mapping(t_address,t_uint8))":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => mapping(address => uint8))","numberOfBytes":"32","value":"t_mapping(t_address,t_uint8)"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{"version()":{"notice":"Returns the full semver contract version."}},"version":1}}},"contracts/Gap.sol":{"Gap":{"abi":[{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[],"name":"EIP712DomainChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"ATTEST_TYPEHASH","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"string","name":"payloadHash","type":"string"},{"internalType":"uint256","name":"nonce","type":"uint256"},{"internalType":"uint256","name":"expiry","type":"uint256"},{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"name":"_recoverSignerAddress","outputs":[{"internalType":"address","name":"signer","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"schema","type":"bytes32"},{"components":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"uint256","name":"value","type":"uint256"}],"internalType":"struct AttestationRequestData","name":"data","type":"tuple"}],"internalType":"struct AttestationRequest","name":"request","type":"tuple"}],"name":"attest","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"payable","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"schema","type":"bytes32"},{"components":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"uint256","name":"value","type":"uint256"}],"internalType":"struct AttestationRequestData","name":"data","type":"tuple"}],"internalType":"struct AttestationRequest","name":"request","type":"tuple"},{"internalType":"string","name":"payloadHash","type":"string"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"uint256","name":"nonce","type":"uint256"},{"internalType":"uint256","name":"expiry","type":"uint256"},{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"name":"attestBySig","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"eas","outputs":[{"internalType":"contract IEAS","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"eip712Domain","outputs":[{"internalType":"bytes1","name":"fields","type":"bytes1"},{"internalType":"string","name":"name","type":"string"},{"internalType":"string","name":"version","type":"string"},{"internalType":"uint256","name":"chainId","type":"uint256"},{"internalType":"address","name":"verifyingContract","type":"address"},{"internalType":"bytes32","name":"salt","type":"bytes32"},{"internalType":"uint256[]","name":"extensions","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"easAddr","type":"address"}],"name":"initialize","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"components":[{"internalType":"bytes32","name":"schema","type":"bytes32"},{"components":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"uint256","name":"value","type":"uint256"}],"internalType":"struct AttestationRequestData[]","name":"data","type":"tuple[]"}],"internalType":"struct MultiAttestationRequest","name":"multiRequest","type":"tuple"},{"internalType":"uint256","name":"refIdx","type":"uint256"}],"internalType":"struct Gap.AttestationRequestNode[]","name":"requestNodes","type":"tuple[]"},{"internalType":"string","name":"payloadHash","type":"string"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"uint256","name":"nonce","type":"uint256"},{"internalType":"uint256","name":"expiry","type":"uint256"},{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"name":"multiAttestBySig","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"schema","type":"bytes32"},{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"uint256","name":"value","type":"uint256"}],"internalType":"struct RevocationRequestData[]","name":"data","type":"tuple[]"}],"internalType":"struct MultiRevocationRequest[]","name":"multiRequests","type":"tuple[]"}],"name":"multiRevoke","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"schema","type":"bytes32"},{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"uint256","name":"value","type":"uint256"}],"internalType":"struct RevocationRequestData[]","name":"data","type":"tuple[]"}],"internalType":"struct MultiRevocationRequest[]","name":"multiRequests","type":"tuple[]"},{"internalType":"string","name":"payloadHash","type":"string"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"uint256","name":"nonce","type":"uint256"},{"internalType":"uint256","name":"expiry","type":"uint256"},{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"name":"multiRevokeBySig","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"components":[{"internalType":"bytes32","name":"schema","type":"bytes32"},{"components":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"uint256","name":"value","type":"uint256"}],"internalType":"struct AttestationRequestData[]","name":"data","type":"tuple[]"}],"internalType":"struct MultiAttestationRequest","name":"multiRequest","type":"tuple"},{"internalType":"uint256","name":"refIdx","type":"uint256"}],"internalType":"struct Gap.AttestationRequestNode[]","name":"requestNodes","type":"tuple[]"}],"name":"multiSequentialAttest","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"nonces","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"events":{"EIP712DomainChanged()":{"details":"MAY be emitted to signal that the domain could have changed."},"Initialized(uint8)":{"details":"Triggered when the contract has been initialized or reinitialized."}},"kind":"dev","methods":{"constructor":{"custom:oz-upgrades-unsafe-allow":"constructor"},"eip712Domain()":{"details":"See {EIP-5267}. _Available since v4.9._"},"owner()":{"details":"Returns the address of the current owner."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"version":1},"evm":{"bytecode":{"functionDebugData":{"@_5224":{"entryPoint":null,"id":5224,"parameterSlots":0,"returnSlots":0},"@_disableInitializers_1126":{"entryPoint":34,"id":1126,"parameterSlots":0,"returnSlots":0},"abi_encode_tuple_t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:608:29","statements":[{"nodeType":"YulBlock","src":"6:3:29","statements":[]},{"body":{"nodeType":"YulBlock","src":"188:229:29","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"205:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"216:2:29","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"198:6:29"},"nodeType":"YulFunctionCall","src":"198:21:29"},"nodeType":"YulExpressionStatement","src":"198:21:29"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"239:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"250:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"235:3:29"},"nodeType":"YulFunctionCall","src":"235:18:29"},{"kind":"number","nodeType":"YulLiteral","src":"255:2:29","type":"","value":"39"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"228:6:29"},"nodeType":"YulFunctionCall","src":"228:30:29"},"nodeType":"YulExpressionStatement","src":"228:30:29"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"278:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"289:2:29","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"274:3:29"},"nodeType":"YulFunctionCall","src":"274:18:29"},{"hexValue":"496e697469616c697a61626c653a20636f6e747261637420697320696e697469","kind":"string","nodeType":"YulLiteral","src":"294:34:29","type":"","value":"Initializable: contract is initi"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"267:6:29"},"nodeType":"YulFunctionCall","src":"267:62:29"},"nodeType":"YulExpressionStatement","src":"267:62:29"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"349:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"360:2:29","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"345:3:29"},"nodeType":"YulFunctionCall","src":"345:18:29"},{"hexValue":"616c697a696e67","kind":"string","nodeType":"YulLiteral","src":"365:9:29","type":"","value":"alizing"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"338:6:29"},"nodeType":"YulFunctionCall","src":"338:37:29"},"nodeType":"YulExpressionStatement","src":"338:37:29"},{"nodeType":"YulAssignment","src":"384:27:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"396:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"407:3:29","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"392:3:29"},"nodeType":"YulFunctionCall","src":"392:19:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"384:4:29"}]}]},"name":"abi_encode_tuple_t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"165:9:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"179:4:29","type":""}],"src":"14:403:29"},{"body":{"nodeType":"YulBlock","src":"519:87:29","statements":[{"nodeType":"YulAssignment","src":"529:26:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"541:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"552:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"537:3:29"},"nodeType":"YulFunctionCall","src":"537:18:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"529:4:29"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"571:9:29"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"586:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"594:4:29","type":"","value":"0xff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"582:3:29"},"nodeType":"YulFunctionCall","src":"582:17:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"564:6:29"},"nodeType":"YulFunctionCall","src":"564:36:29"},"nodeType":"YulExpressionStatement","src":"564:36:29"}]},"name":"abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"488:9:29","type":""},{"name":"value0","nodeType":"YulTypedName","src":"499:6:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"510:4:29","type":""}],"src":"422:184:29"}]},"contents":"{\n    { }\n    function abi_encode_tuple_t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 39)\n        mstore(add(headStart, 64), \"Initializable: contract is initi\")\n        mstore(add(headStart, 96), \"alizing\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xff))\n    }\n}","id":29,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"60806040523480156200001157600080fd5b506200001c62000022565b620000e3565b600054610100900460ff16156200008f5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff90811614620000e1576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b61280280620000f36000396000f3fe6080604052600436106100e85760003560e01c80637ecebe001161008a578063c4d66de811610059578063c4d66de814610289578063d68a5ab6146102a9578063f17325e7146102c9578063f2fde38b146102dc57600080fd5b80637ecebe00146101f65780638150864d1461022357806384b0196e146102435780638da5cb5b1461026b57600080fd5b80635ea677e9116100c65780635ea677e9146101425780635ffed2f014610162578063715018a61461019f5780637e4a7d8f146101b457600080fd5b80634cb7e9e5146100ed5780635913a31c146101025780635cad755514610122575b600080fd5b6101006100fb36600461196b565b6102fc565b005b34801561010e57600080fd5b5061010061011d36600461196b565b6104dd565b34801561012e57600080fd5b5061010061013d366004611aea565b61078f565b34801561014e57600080fd5b5061010061015d366004611aea565b610922565b34801561016e57600080fd5b5061018261017d366004611b9d565b610a68565b6040516001600160a01b0390911681526020015b60405180910390f35b3480156101ab57600080fd5b50610100610af7565b3480156101c057600080fd5b506101e87f17132900f74aadb4a80e6e5d88759b509b5a55861f3e0542632865ccc1180c4981565b604051908152602001610196565b34801561020257600080fd5b506101e8610211366004611c10565b609a6020526000908152604090205481565b34801561022f57600080fd5b50609954610182906001600160a01b031681565b34801561024f57600080fd5b50610258610b0b565b6040516101969796959493929190611c7d565b34801561027757600080fd5b506033546001600160a01b0316610182565b34801561029557600080fd5b506101006102a4366004611c10565b610bcd565b3480156102b557600080fd5b506101e86102c4366004611d47565b610d87565b6101e86102d7366004611df5565b610f2d565b3480156102e857600080fd5b506101006102f7366004611c10565b611041565b60005b8181101561047457600083838381811061031b5761031b611e32565b905060200281019061032d9190611e48565b61033690611e8c565b905060005b81602001515181101561045f57609954602083015180516000926001600160a01b03169163a3112a64918590811061037557610375611e32565b6020026020010151600001516040518263ffffffff1660e01b815260040161039f91815260200190565b600060405180830381865afa1580156103bc573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526103e49190810190611fe0565b60e08101519091506001600160a01b031633148061040e575060c08101516001600160a01b031633145b61044c5760405162461bcd60e51b815260206004820152600a6024820152692737ba1037bbb732b91760b11b60448201526064015b60405180910390fd5b5080610457816120d7565b91505061033b565b5050808061046c906120d7565b9150506102ff565b50609954604051634cb7e9e560e01b81526001600160a01b0390911690634cb7e9e5906104a790859085906004016120fe565b600060405180830381600087803b1580156104c157600080fd5b505af11580156104d5573d6000803e3d6000fd5b505050505050565b60008167ffffffffffffffff8111156104f8576104f86119ad565b60405190808252806020026020018201604052801561052b57816020015b60608152602001906001900390816105165790505b50905060005b8281101561078957600084848381811061054d5761054d611e32565b905060200281019061055f91906121ee565b61056d906020810190611e48565b610576906122be565b905061058581602001516110d1565b81156106675760005b816020015151811015610665576000826020015182815181106105b3576105b3611e32565b602002602001015190506000801b81606001510361065257848787868181106105de576105de611e32565b90506020028101906105f091906121ee565b604001358151811061060457610604611e32565b602002602001015160008151811061061e5761061e611e32565b6020026020010151816060018181525050808360200151838151811061064657610646611e32565b60200260200101819052505b508061065d816120d7565b91505061058e565b505b604080516001808252818301909252600091816020015b60408051808201909152600081526060602082015281526020019060019003908161067e57905050905081816000815181106106bc576106bc611e32565b60209081029190910101526099546040517f44adc90e0000000000000000000000000000000000000000000000000000000081526001600160a01b03909116906344adc90e90610710908490600401612383565b6000604051808303816000875af115801561072f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610757919081019061247f565b84848151811061076957610769611e32565b602002602001018190525050508080610781906120d7565b915050610531565b50505050565b834211156107d35760405162461bcd60e51b815260206004820152601160248201527014da59db985d1d5c9948195e1c1a5c9959607a1b6044820152606401610443565b60006107e3888787878787610a68565b9050866001600160a01b0316816001600160a01b0316146108595760405162461bcd60e51b815260206004820152602a60248201527f5369676e657220616e642061747465737465722061646472657373657320646f6044820152693713ba1036b0ba31b41760b11b6064820152608401610443565b6001600160a01b0381166000908152609a6020526040812080549161087d836120d7565b9190505586146108bf5760405162461bcd60e51b815260206004820152600d60248201526c496e76616c6964206e6f6e636560981b6044820152606401610443565b604051634cb7e9e560e01b81523090634cb7e9e5906108e4908d908d906004016120fe565b600060405180830381600087803b1580156108fe57600080fd5b505af1158015610912573d6000803e3d6000fd5b5050505050505050505050505050565b834211156109665760405162461bcd60e51b815260206004820152601160248201527014da59db985d1d5c9948195e1c1a5c9959607a1b6044820152606401610443565b6000610976888787878787610a68565b9050866001600160a01b0316816001600160a01b0316146109ec5760405162461bcd60e51b815260206004820152602a60248201527f5369676e657220616e642061747465737465722061646472657373657320646f6044820152693713ba1036b0ba31b41760b11b6064820152608401610443565b6001600160a01b0381166000908152609a60205260408120805491610a10836120d7565b919050558614610a525760405162461bcd60e51b815260206004820152600d60248201526c496e76616c6964206e6f6e636560981b6044820152606401610443565b610a5c8a8a6104dd565b50505050505050505050565b600080610add7f17132900f74aadb4a80e6e5d88759b509b5a55861f3e0542632865ccc1180c4989805190602001208989604051602001610ac2949392919093845260208401929092526040830152606082015260800190565b6040516020818303038152906040528051906020012061113c565b9050610aeb8186868661118a565b98975050505050505050565b610aff6111b2565b610b09600061120c565b565b6000606080600080600060606065546000801b148015610b2b5750606654155b610b775760405162461bcd60e51b815260206004820152601560248201527f4549503731323a20556e696e697469616c697a656400000000000000000000006044820152606401610443565b610b7f61126b565b610b876112fd565b604080516000808252602082019092527f0f000000000000000000000000000000000000000000000000000000000000009b939a50919850469750309650945092509050565b600054610100900460ff1615808015610bed5750600054600160ff909116105b80610c075750303b158015610c07575060005460ff166001145b610c795760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610443565b6000805460ff191660011790558015610c9c576000805461ff0019166101001790555b6099805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b038416179055604080518082018252600f81527f6761702d6174746573746174696f6e00000000000000000000000000000000006020808301919091528251808401909352600383527f312e30000000000000000000000000000000000000000000000000000000000090830152610d359161130c565b610d3d611381565b8015610d83576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050565b600084421115610dcd5760405162461bcd60e51b815260206004820152601160248201527014da59db985d1d5c9948195e1c1a5c9959607a1b6044820152606401610443565b6000610ddd898888888888610a68565b9050876001600160a01b0316816001600160a01b031614610e535760405162461bcd60e51b815260206004820152602a60248201527f5369676e657220616e642061747465737465722061646472657373657320646f6044820152693713ba1036b0ba31b41760b11b6064820152608401610443565b6001600160a01b0381166000908152609a60205260408120805491610e77836120d7565b919050558714610eb95760405162461bcd60e51b815260206004820152600d60248201526c496e76616c6964206e6f6e636560981b6044820152606401610443565b60405163f17325e760e01b8152309063f17325e790610edc908d9060040161257f565b6020604051808303816000875af1158015610efb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f1f919061263c565b9a9950505050505050505050565b604080516001808252818301909252600091829190816020015b6040805160c081018252600080825260208083018290529282018190526060808301829052608083015260a08201528252600019909201910181610f47579050509050610f976020840184612655565b610fa09061266b565b81600081518110610fb357610fb3611e32565b6020026020010181905250610fc7816110d1565b60995460405163f17325e760e01b81526001600160a01b039091169063f17325e790610ff790869060040161257f565b6020604051808303816000875af1158015611016573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061103a919061263c565b9392505050565b6110496111b2565b6001600160a01b0381166110c55760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610443565b6110ce8161120c565b50565b60005b8151811015610d83576000801b8282815181106110f3576110f3611e32565b6020026020010151606001511461112a5761112a82828151811061111957611119611e32565b6020026020010151606001516113f4565b80611134816120d7565b9150506110d4565b60006111846111496114e2565b836040517f19010000000000000000000000000000000000000000000000000000000000008152600281019290925260228201526042902090565b92915050565b600080600061119b878787876114f1565b915091506111a8816115b5565b5095945050505050565b6033546001600160a01b03163314610b095760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610443565b603380546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60606067805461127a90612677565b80601f01602080910402602001604051908101604052809291908181526020018280546112a690612677565b80156112f35780601f106112c8576101008083540402835291602001916112f3565b820191906000526020600020905b8154815290600101906020018083116112d657829003601f168201915b5050505050905090565b60606068805461127a90612677565b600054610100900460ff166113775760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610443565b610d83828261171a565b600054610100900460ff166113ec5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610443565b610b096117ad565b6099546040517fa3112a64000000000000000000000000000000000000000000000000000000008152600481018390526000916001600160a01b03169063a3112a6490602401600060405180830381865afa158015611457573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261147f9190810190611fe0565b60e08101519091506001600160a01b03163314806114a9575060c08101516001600160a01b031633145b610d835760405162461bcd60e51b815260206004820152600a6024820152692737ba1037bbb732b91760b11b6044820152606401610443565b60006114ec611821565b905090565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a083111561152857506000905060036115ac565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa15801561157c573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166115a5576000600192509250506115ac565b9150600090505b94509492505050565b60008160048111156115c9576115c96126ab565b036115d15750565b60018160048111156115e5576115e56126ab565b036116325760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610443565b6002816004811115611646576116466126ab565b036116935760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610443565b60038160048111156116a7576116a76126ab565b036110ce5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c60448201527f75650000000000000000000000000000000000000000000000000000000000006064820152608401610443565b600054610100900460ff166117855760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610443565b6067611791838261270c565b50606861179e828261270c565b50506000606581905560665550565b600054610100900460ff166118185760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610443565b610b093361120c565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f61184c611895565b6118546118ee565b60408051602081019490945283019190915260608201524660808201523060a082015260c00160405160208183030381529060405280519060200120905090565b6000806118a061126b565b8051909150156118b7578051602090910120919050565b60655480156118c65792915050565b7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a4709250505090565b6000806118f96112fd565b805190915015611910578051602090910120919050565b60665480156118c65792915050565b60008083601f84011261193157600080fd5b50813567ffffffffffffffff81111561194957600080fd5b6020830191508360208260051b850101111561196457600080fd5b9250929050565b6000806020838503121561197e57600080fd5b823567ffffffffffffffff81111561199557600080fd5b6119a18582860161191f565b90969095509350505050565b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff811182821017156119e6576119e66119ad565b60405290565b604051610140810167ffffffffffffffff811182821017156119e6576119e66119ad565b604051601f8201601f1916810167ffffffffffffffff81118282101715611a3957611a396119ad565b604052919050565b600067ffffffffffffffff821115611a5b57611a5b6119ad565b50601f01601f191660200190565b600082601f830112611a7a57600080fd5b8135611a8d611a8882611a41565b611a10565b818152846020838601011115611aa257600080fd5b816020850160208301376000918101602001919091529392505050565b6001600160a01b03811681146110ce57600080fd5b803560ff81168114611ae557600080fd5b919050565b60008060008060008060008060006101008a8c031215611b0957600080fd5b893567ffffffffffffffff80821115611b2157600080fd5b611b2d8d838e0161191f565b909b50995060208c0135915080821115611b4657600080fd5b50611b538c828d01611a69565b97505060408a0135611b6481611abf565b955060608a0135945060808a01359350611b8060a08b01611ad4565b925060c08a0135915060e08a013590509295985092959850929598565b60008060008060008060c08789031215611bb657600080fd5b863567ffffffffffffffff811115611bcd57600080fd5b611bd989828a01611a69565b9650506020870135945060408701359350611bf660608801611ad4565b92506080870135915060a087013590509295509295509295565b600060208284031215611c2257600080fd5b813561103a81611abf565b60005b83811015611c48578181015183820152602001611c30565b50506000910152565b60008151808452611c69816020860160208601611c2d565b601f01601f19169290920160200192915050565b7fff00000000000000000000000000000000000000000000000000000000000000881681526000602060e081840152611cb960e084018a611c51565b8381036040850152611ccb818a611c51565b606085018990526001600160a01b038816608086015260a0850187905284810360c0860152855180825283870192509083019060005b81811015611d1d57835183529284019291840191600101611d01565b50909c9b505050505050505050505050565b600060408284031215611d4157600080fd5b50919050565b600080600080600080600080610100898b031215611d6457600080fd5b883567ffffffffffffffff80821115611d7c57600080fd5b611d888c838d01611d2f565b995060208b0135915080821115611d9e57600080fd5b50611dab8b828c01611a69565b9750506040890135611dbc81611abf565b95506060890135945060808901359350611dd860a08a01611ad4565b925060c0890135915060e089013590509295985092959890939650565b600060208284031215611e0757600080fd5b813567ffffffffffffffff811115611e1e57600080fd5b611e2a84828501611d2f565b949350505050565b634e487b7160e01b600052603260045260246000fd5b60008235603e19833603018112611e5e57600080fd5b9190910192915050565b600067ffffffffffffffff821115611e8257611e826119ad565b5060051b60200190565b60006040808336031215611e9f57600080fd5b611ea76119c3565b8335815260208085013567ffffffffffffffff811115611ec657600080fd5b850136601f820112611ed757600080fd5b8035611ee5611a8882611e68565b81815260069190911b82018301908381019036831115611f0457600080fd5b928401925b82841015611f4457868436031215611f215760008081fd5b611f296119c3565b84358152858501358682015282529286019290840190611f09565b93850193909352509195945050505050565b67ffffffffffffffff811681146110ce57600080fd5b8051611ae581611f56565b8051611ae581611abf565b80151581146110ce57600080fd5b8051611ae581611f82565b600082601f830112611fac57600080fd5b8151611fba611a8882611a41565b818152846020838601011115611fcf57600080fd5b611e2a826020830160208701611c2d565b600060208284031215611ff257600080fd5b815167ffffffffffffffff8082111561200a57600080fd5b90830190610140828603121561201f57600080fd5b6120276119ec565b825181526020830151602082015261204160408401611f6c565b604082015261205260608401611f6c565b606082015261206360808401611f6c565b608082015260a083015160a082015261207e60c08401611f77565b60c082015261208f60e08401611f77565b60e08201526101006120a2818501611f90565b9082015261012083810151838111156120ba57600080fd5b6120c688828701611f9b565b918301919091525095945050505050565b6000600182016120f757634e487b7160e01b600052601160045260246000fd5b5060010190565b60208082528181018390526000906040808401600586901b8501820187855b888110156121e057878303603f190184528135368b9003603e1901811261214357600080fd5b8a01803584528386018782013536839003601e1901811261216357600080fd5b90910187810191903567ffffffffffffffff81111561218157600080fd5b8060061b360383131561219357600080fd5b85890188905290819052600090606086015b818310156121cb5783358152898401358a820152928801926001929092019188016121a5565b9689019695505050918601915060010161211d565b509098975050505050505050565b60008235605e19833603018112611e5e57600080fd5b600060c0828403121561221657600080fd5b60405160c0810167ffffffffffffffff828210818311171561223a5761223a6119ad565b816040528293508435915061224e82611abf565b90825260208401359061226082611f56565b8160208401526040850135915061227682611f82565b81604084015260608501356060840152608085013591508082111561229a57600080fd5b506122a785828601611a69565b60808301525060a083013560a08201525092915050565b6000604082360312156122d057600080fd5b6122d86119c3565b8235815260208084013567ffffffffffffffff808211156122f857600080fd5b9085019036601f83011261230b57600080fd5b8135612319611a8882611e68565b81815260059190911b8301840190848101903683111561233857600080fd5b8585015b83811015612370578035858111156123545760008081fd5b6123623689838a0101612204565b84525091860191860161233c565b5094860194909452509295945050505050565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b838110156121e057888303603f1901855281518051845287015187840187905280518785018190529088019060609081860190600581901b8701830160005b8281101561246857605f19898303018452855160c06001600160a01b03825116845267ffffffffffffffff8f830151168f8501528d82015115158e8501528682015187850152608080830151828287015261244683870182611c51565b60a09485015196909401959095525050958d0195938d019391506001016123e9565b50988b0198965050509288019250506001016123aa565b6000602080838503121561249257600080fd5b825167ffffffffffffffff8111156124a957600080fd5b8301601f810185136124ba57600080fd5b80516124c8611a8882611e68565b81815260059190911b820183019083810190878311156124e757600080fd5b928401925b82841015612505578351825292840192908401906124ec565b979650505050505050565b6000808335601e1984360301811261252757600080fd5b830160208101925035905067ffffffffffffffff81111561254757600080fd5b80360382131561196457600080fd5b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60208152813560208201526000602083013560be198436030181126125a357600080fd5b604083810152830180356125b681611abf565b6001600160a01b0316606084015260208101356125d281611f56565b67ffffffffffffffff16608084015260408101356125ef81611f82565b151560a0840152606081013560c084015261260d6080820182612510565b60c060e086015261262361012086018284612556565b91505060a0820135610100850152809250505092915050565b60006020828403121561264e57600080fd5b5051919050565b6000823560be19833603018112611e5e57600080fd5b60006111843683612204565b600181811c9082168061268b57607f821691505b602082108103611d4157634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052602160045260246000fd5b601f82111561270757600081815260208120601f850160051c810160208610156126e85750805b601f850160051c820191505b818110156104d5578281556001016126f4565b505050565b815167ffffffffffffffff811115612726576127266119ad565b61273a816127348454612677565b846126c1565b602080601f83116001811461276f57600084156127575750858301515b600019600386901b1c1916600185901b1785556104d5565b600085815260208120601f198616915b8281101561279e5788860151825594840194600190910190840161277f565b50858210156127bc5787850151600019600388901b60f8161c191681555b5050505050600190811b0190555056fea26469706673582212209d295fc07ad69dc0e81e72abc01012614638b062bf313c22b8963e0db80fb9bb64736f6c63430008130033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH3 0x1C PUSH3 0x22 JUMP JUMPDEST PUSH3 0xE3 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH3 0x8F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x27 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E747261637420697320696E697469 PUSH1 0x44 DUP3 ADD MSTORE PUSH7 0x616C697A696E67 PUSH1 0xC8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 SLOAD PUSH1 0xFF SWAP1 DUP2 AND EQ PUSH3 0xE1 JUMPI PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0xFF SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH32 0x7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST JUMP JUMPDEST PUSH2 0x2802 DUP1 PUSH3 0xF3 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0xE8 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x7ECEBE00 GT PUSH2 0x8A JUMPI DUP1 PUSH4 0xC4D66DE8 GT PUSH2 0x59 JUMPI DUP1 PUSH4 0xC4D66DE8 EQ PUSH2 0x289 JUMPI DUP1 PUSH4 0xD68A5AB6 EQ PUSH2 0x2A9 JUMPI DUP1 PUSH4 0xF17325E7 EQ PUSH2 0x2C9 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x2DC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x7ECEBE00 EQ PUSH2 0x1F6 JUMPI DUP1 PUSH4 0x8150864D EQ PUSH2 0x223 JUMPI DUP1 PUSH4 0x84B0196E EQ PUSH2 0x243 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x26B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x5EA677E9 GT PUSH2 0xC6 JUMPI DUP1 PUSH4 0x5EA677E9 EQ PUSH2 0x142 JUMPI DUP1 PUSH4 0x5FFED2F0 EQ PUSH2 0x162 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x19F JUMPI DUP1 PUSH4 0x7E4A7D8F EQ PUSH2 0x1B4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x4CB7E9E5 EQ PUSH2 0xED JUMPI DUP1 PUSH4 0x5913A31C EQ PUSH2 0x102 JUMPI DUP1 PUSH4 0x5CAD7555 EQ PUSH2 0x122 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x100 PUSH2 0xFB CALLDATASIZE PUSH1 0x4 PUSH2 0x196B JUMP JUMPDEST PUSH2 0x2FC JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x10E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x100 PUSH2 0x11D CALLDATASIZE PUSH1 0x4 PUSH2 0x196B JUMP JUMPDEST PUSH2 0x4DD JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x12E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x100 PUSH2 0x13D CALLDATASIZE PUSH1 0x4 PUSH2 0x1AEA JUMP JUMPDEST PUSH2 0x78F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x14E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x100 PUSH2 0x15D CALLDATASIZE PUSH1 0x4 PUSH2 0x1AEA JUMP JUMPDEST PUSH2 0x922 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x16E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x182 PUSH2 0x17D CALLDATASIZE PUSH1 0x4 PUSH2 0x1B9D JUMP JUMPDEST PUSH2 0xA68 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1AB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x100 PUSH2 0xAF7 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1C0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1E8 PUSH32 0x17132900F74AADB4A80E6E5D88759B509B5A55861F3E0542632865CCC1180C49 DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x196 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x202 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1E8 PUSH2 0x211 CALLDATASIZE PUSH1 0x4 PUSH2 0x1C10 JUMP JUMPDEST PUSH1 0x9A PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x22F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x99 SLOAD PUSH2 0x182 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x24F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x258 PUSH2 0xB0B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x196 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1C7D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x277 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x33 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x182 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x295 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x100 PUSH2 0x2A4 CALLDATASIZE PUSH1 0x4 PUSH2 0x1C10 JUMP JUMPDEST PUSH2 0xBCD JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2B5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1E8 PUSH2 0x2C4 CALLDATASIZE PUSH1 0x4 PUSH2 0x1D47 JUMP JUMPDEST PUSH2 0xD87 JUMP JUMPDEST PUSH2 0x1E8 PUSH2 0x2D7 CALLDATASIZE PUSH1 0x4 PUSH2 0x1DF5 JUMP JUMPDEST PUSH2 0xF2D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2E8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x100 PUSH2 0x2F7 CALLDATASIZE PUSH1 0x4 PUSH2 0x1C10 JUMP JUMPDEST PUSH2 0x1041 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x474 JUMPI PUSH1 0x0 DUP4 DUP4 DUP4 DUP2 DUP2 LT PUSH2 0x31B JUMPI PUSH2 0x31B PUSH2 0x1E32 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0x32D SWAP2 SWAP1 PUSH2 0x1E48 JUMP JUMPDEST PUSH2 0x336 SWAP1 PUSH2 0x1E8C JUMP JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST DUP2 PUSH1 0x20 ADD MLOAD MLOAD DUP2 LT ISZERO PUSH2 0x45F JUMPI PUSH1 0x99 SLOAD PUSH1 0x20 DUP4 ADD MLOAD DUP1 MLOAD PUSH1 0x0 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 PUSH4 0xA3112A64 SWAP2 DUP6 SWAP1 DUP2 LT PUSH2 0x375 JUMPI PUSH2 0x375 PUSH2 0x1E32 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 ADD MLOAD PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x39F SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x3BC JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x3E4 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x1FE0 JUMP JUMPDEST PUSH1 0xE0 DUP2 ADD MLOAD SWAP1 SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ DUP1 PUSH2 0x40E JUMPI POP PUSH1 0xC0 DUP2 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ JUMPDEST PUSH2 0x44C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xA PUSH1 0x24 DUP3 ADD MSTORE PUSH10 0x2737BA1037BBB732B917 PUSH1 0xB1 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP DUP1 PUSH2 0x457 DUP2 PUSH2 0x20D7 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x33B JUMP JUMPDEST POP POP DUP1 DUP1 PUSH2 0x46C SWAP1 PUSH2 0x20D7 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x2FF JUMP JUMPDEST POP PUSH1 0x99 SLOAD PUSH1 0x40 MLOAD PUSH4 0x4CB7E9E5 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x4CB7E9E5 SWAP1 PUSH2 0x4A7 SWAP1 DUP6 SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0x20FE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4C1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x4D5 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x4F8 JUMPI PUSH2 0x4F8 PUSH2 0x19AD JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x52B JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x516 JUMPI SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x789 JUMPI PUSH1 0x0 DUP5 DUP5 DUP4 DUP2 DUP2 LT PUSH2 0x54D JUMPI PUSH2 0x54D PUSH2 0x1E32 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0x55F SWAP2 SWAP1 PUSH2 0x21EE JUMP JUMPDEST PUSH2 0x56D SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x1E48 JUMP JUMPDEST PUSH2 0x576 SWAP1 PUSH2 0x22BE JUMP JUMPDEST SWAP1 POP PUSH2 0x585 DUP2 PUSH1 0x20 ADD MLOAD PUSH2 0x10D1 JUMP JUMPDEST DUP2 ISZERO PUSH2 0x667 JUMPI PUSH1 0x0 JUMPDEST DUP2 PUSH1 0x20 ADD MLOAD MLOAD DUP2 LT ISZERO PUSH2 0x665 JUMPI PUSH1 0x0 DUP3 PUSH1 0x20 ADD MLOAD DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x5B3 JUMPI PUSH2 0x5B3 PUSH2 0x1E32 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH1 0x0 DUP1 SHL DUP2 PUSH1 0x60 ADD MLOAD SUB PUSH2 0x652 JUMPI DUP5 DUP8 DUP8 DUP7 DUP2 DUP2 LT PUSH2 0x5DE JUMPI PUSH2 0x5DE PUSH2 0x1E32 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0x5F0 SWAP2 SWAP1 PUSH2 0x21EE JUMP JUMPDEST PUSH1 0x40 ADD CALLDATALOAD DUP2 MLOAD DUP2 LT PUSH2 0x604 JUMPI PUSH2 0x604 PUSH2 0x1E32 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x61E JUMPI PUSH2 0x61E PUSH2 0x1E32 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP2 PUSH1 0x60 ADD DUP2 DUP2 MSTORE POP POP DUP1 DUP4 PUSH1 0x20 ADD MLOAD DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x646 JUMPI PUSH2 0x646 PUSH2 0x1E32 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP JUMPDEST POP DUP1 PUSH2 0x65D DUP2 PUSH2 0x20D7 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x58E JUMP JUMPDEST POP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE PUSH1 0x0 SWAP2 DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP2 MSTORE PUSH1 0x60 PUSH1 0x20 DUP3 ADD MSTORE DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x67E JUMPI SWAP1 POP POP SWAP1 POP DUP2 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x6BC JUMPI PUSH2 0x6BC PUSH2 0x1E32 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x99 SLOAD PUSH1 0x40 MLOAD PUSH32 0x44ADC90E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x44ADC90E SWAP1 PUSH2 0x710 SWAP1 DUP5 SWAP1 PUSH1 0x4 ADD PUSH2 0x2383 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x72F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x757 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x247F JUMP JUMPDEST DUP5 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x769 JUMPI PUSH2 0x769 PUSH2 0x1E32 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP POP POP DUP1 DUP1 PUSH2 0x781 SWAP1 PUSH2 0x20D7 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x531 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST DUP4 TIMESTAMP GT ISZERO PUSH2 0x7D3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x11 PUSH1 0x24 DUP3 ADD MSTORE PUSH17 0x14DA59DB985D1D5C9948195E1C1A5C9959 PUSH1 0x7A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x443 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x7E3 DUP9 DUP8 DUP8 DUP8 DUP8 DUP8 PUSH2 0xA68 JUMP JUMPDEST SWAP1 POP DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x859 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5369676E657220616E642061747465737465722061646472657373657320646F PUSH1 0x44 DUP3 ADD MSTORE PUSH10 0x3713BA1036B0BA31B417 PUSH1 0xB1 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x443 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9A PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD SWAP2 PUSH2 0x87D DUP4 PUSH2 0x20D7 JUMP JUMPDEST SWAP2 SWAP1 POP SSTORE DUP7 EQ PUSH2 0x8BF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xD PUSH1 0x24 DUP3 ADD MSTORE PUSH13 0x496E76616C6964206E6F6E6365 PUSH1 0x98 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x443 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x4CB7E9E5 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS SWAP1 PUSH4 0x4CB7E9E5 SWAP1 PUSH2 0x8E4 SWAP1 DUP14 SWAP1 DUP14 SWAP1 PUSH1 0x4 ADD PUSH2 0x20FE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x8FE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x912 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST DUP4 TIMESTAMP GT ISZERO PUSH2 0x966 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x11 PUSH1 0x24 DUP3 ADD MSTORE PUSH17 0x14DA59DB985D1D5C9948195E1C1A5C9959 PUSH1 0x7A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x443 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x976 DUP9 DUP8 DUP8 DUP8 DUP8 DUP8 PUSH2 0xA68 JUMP JUMPDEST SWAP1 POP DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x9EC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5369676E657220616E642061747465737465722061646472657373657320646F PUSH1 0x44 DUP3 ADD MSTORE PUSH10 0x3713BA1036B0BA31B417 PUSH1 0xB1 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x443 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9A PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD SWAP2 PUSH2 0xA10 DUP4 PUSH2 0x20D7 JUMP JUMPDEST SWAP2 SWAP1 POP SSTORE DUP7 EQ PUSH2 0xA52 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xD PUSH1 0x24 DUP3 ADD MSTORE PUSH13 0x496E76616C6964206E6F6E6365 PUSH1 0x98 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x443 JUMP JUMPDEST PUSH2 0xA5C DUP11 DUP11 PUSH2 0x4DD JUMP JUMPDEST POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xADD PUSH32 0x17132900F74AADB4A80E6E5D88759B509B5A55861F3E0542632865CCC1180C49 DUP10 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 DUP10 DUP10 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xAC2 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 SWAP4 DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH2 0x113C JUMP JUMPDEST SWAP1 POP PUSH2 0xAEB DUP2 DUP7 DUP7 DUP7 PUSH2 0x118A JUMP JUMPDEST SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0xAFF PUSH2 0x11B2 JUMP JUMPDEST PUSH2 0xB09 PUSH1 0x0 PUSH2 0x120C JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 PUSH1 0x65 SLOAD PUSH1 0x0 DUP1 SHL EQ DUP1 ISZERO PUSH2 0xB2B JUMPI POP PUSH1 0x66 SLOAD ISZERO JUMPDEST PUSH2 0xB77 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4549503731323A20556E696E697469616C697A65640000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x443 JUMP JUMPDEST PUSH2 0xB7F PUSH2 0x126B JUMP JUMPDEST PUSH2 0xB87 PUSH2 0x12FD JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 SWAP3 MSTORE PUSH32 0xF00000000000000000000000000000000000000000000000000000000000000 SWAP12 SWAP4 SWAP11 POP SWAP2 SWAP9 POP CHAINID SWAP8 POP ADDRESS SWAP7 POP SWAP5 POP SWAP3 POP SWAP1 POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND ISZERO DUP1 DUP1 ISZERO PUSH2 0xBED JUMPI POP PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0xFF SWAP1 SWAP2 AND LT JUMPDEST DUP1 PUSH2 0xC07 JUMPI POP ADDRESS EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xC07 JUMPI POP PUSH1 0x0 SLOAD PUSH1 0xFF AND PUSH1 0x1 EQ JUMPDEST PUSH2 0xC79 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E747261637420697320616C726561 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x647920696E697469616C697A6564000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x443 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE DUP1 ISZERO PUSH2 0xC9C JUMPI PUSH1 0x0 DUP1 SLOAD PUSH2 0xFF00 NOT AND PUSH2 0x100 OR SWAP1 SSTORE JUMPDEST PUSH1 0x99 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND OR SWAP1 SSTORE PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD DUP3 MSTORE PUSH1 0xF DUP2 MSTORE PUSH32 0x6761702D6174746573746174696F6E0000000000000000000000000000000000 PUSH1 0x20 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP3 MLOAD DUP1 DUP5 ADD SWAP1 SWAP4 MSTORE PUSH1 0x3 DUP4 MSTORE PUSH32 0x312E300000000000000000000000000000000000000000000000000000000000 SWAP1 DUP4 ADD MSTORE PUSH2 0xD35 SWAP2 PUSH2 0x130C JUMP JUMPDEST PUSH2 0xD3D PUSH2 0x1381 JUMP JUMPDEST DUP1 ISZERO PUSH2 0xD83 JUMPI PUSH1 0x0 DUP1 SLOAD PUSH2 0xFF00 NOT AND SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH1 0x1 DUP2 MSTORE PUSH32 0x7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 DUP5 TIMESTAMP GT ISZERO PUSH2 0xDCD JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x11 PUSH1 0x24 DUP3 ADD MSTORE PUSH17 0x14DA59DB985D1D5C9948195E1C1A5C9959 PUSH1 0x7A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x443 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xDDD DUP10 DUP9 DUP9 DUP9 DUP9 DUP9 PUSH2 0xA68 JUMP JUMPDEST SWAP1 POP DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0xE53 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5369676E657220616E642061747465737465722061646472657373657320646F PUSH1 0x44 DUP3 ADD MSTORE PUSH10 0x3713BA1036B0BA31B417 PUSH1 0xB1 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x443 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9A PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD SWAP2 PUSH2 0xE77 DUP4 PUSH2 0x20D7 JUMP JUMPDEST SWAP2 SWAP1 POP SSTORE DUP8 EQ PUSH2 0xEB9 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xD PUSH1 0x24 DUP3 ADD MSTORE PUSH13 0x496E76616C6964206E6F6E6365 PUSH1 0x98 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x443 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xF17325E7 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS SWAP1 PUSH4 0xF17325E7 SWAP1 PUSH2 0xEDC SWAP1 DUP14 SWAP1 PUSH1 0x4 ADD PUSH2 0x257F JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0xEFB JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xF1F SWAP2 SWAP1 PUSH2 0x263C JUMP JUMPDEST SWAP11 SWAP10 POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE PUSH1 0x0 SWAP2 DUP3 SWAP2 SWAP1 DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0xC0 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 ADD DUP3 SWAP1 MSTORE SWAP3 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x60 DUP1 DUP4 ADD DUP3 SWAP1 MSTORE PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0xA0 DUP3 ADD MSTORE DUP3 MSTORE PUSH1 0x0 NOT SWAP1 SWAP3 ADD SWAP2 ADD DUP2 PUSH2 0xF47 JUMPI SWAP1 POP POP SWAP1 POP PUSH2 0xF97 PUSH1 0x20 DUP5 ADD DUP5 PUSH2 0x2655 JUMP JUMPDEST PUSH2 0xFA0 SWAP1 PUSH2 0x266B JUMP JUMPDEST DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0xFB3 JUMPI PUSH2 0xFB3 PUSH2 0x1E32 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP PUSH2 0xFC7 DUP2 PUSH2 0x10D1 JUMP JUMPDEST PUSH1 0x99 SLOAD PUSH1 0x40 MLOAD PUSH4 0xF17325E7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0xF17325E7 SWAP1 PUSH2 0xFF7 SWAP1 DUP7 SWAP1 PUSH1 0x4 ADD PUSH2 0x257F JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1016 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x103A SWAP2 SWAP1 PUSH2 0x263C JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x1049 PUSH2 0x11B2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x10C5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6464726573730000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x443 JUMP JUMPDEST PUSH2 0x10CE DUP2 PUSH2 0x120C JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 MLOAD DUP2 LT ISZERO PUSH2 0xD83 JUMPI PUSH1 0x0 DUP1 SHL DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x10F3 JUMPI PUSH2 0x10F3 PUSH2 0x1E32 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x60 ADD MLOAD EQ PUSH2 0x112A JUMPI PUSH2 0x112A DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x1119 JUMPI PUSH2 0x1119 PUSH2 0x1E32 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x60 ADD MLOAD PUSH2 0x13F4 JUMP JUMPDEST DUP1 PUSH2 0x1134 DUP2 PUSH2 0x20D7 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x10D4 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1184 PUSH2 0x1149 PUSH2 0x14E2 JUMP JUMPDEST DUP4 PUSH1 0x40 MLOAD PUSH32 0x1901000000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x2 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x22 DUP3 ADD MSTORE PUSH1 0x42 SWAP1 KECCAK256 SWAP1 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x119B DUP8 DUP8 DUP8 DUP8 PUSH2 0x14F1 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH2 0x11A8 DUP2 PUSH2 0x15B5 JUMP JUMPDEST POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x33 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xB09 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x443 JUMP JUMPDEST PUSH1 0x33 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 MLOAD SWAP2 AND SWAP2 SWAP1 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x67 DUP1 SLOAD PUSH2 0x127A SWAP1 PUSH2 0x2677 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x12A6 SWAP1 PUSH2 0x2677 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x12F3 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x12C8 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x12F3 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x12D6 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x68 DUP1 SLOAD PUSH2 0x127A SWAP1 PUSH2 0x2677 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1377 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E7472616374206973206E6F742069 PUSH1 0x44 DUP3 ADD MSTORE PUSH11 0x6E697469616C697A696E67 PUSH1 0xA8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x443 JUMP JUMPDEST PUSH2 0xD83 DUP3 DUP3 PUSH2 0x171A JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x13EC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E7472616374206973206E6F742069 PUSH1 0x44 DUP3 ADD MSTORE PUSH11 0x6E697469616C697A696E67 PUSH1 0xA8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x443 JUMP JUMPDEST PUSH2 0xB09 PUSH2 0x17AD JUMP JUMPDEST PUSH1 0x99 SLOAD PUSH1 0x40 MLOAD PUSH32 0xA3112A6400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x0 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0xA3112A64 SWAP1 PUSH1 0x24 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1457 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x147F SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x1FE0 JUMP JUMPDEST PUSH1 0xE0 DUP2 ADD MLOAD SWAP1 SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ DUP1 PUSH2 0x14A9 JUMPI POP PUSH1 0xC0 DUP2 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ JUMPDEST PUSH2 0xD83 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xA PUSH1 0x24 DUP3 ADD MSTORE PUSH10 0x2737BA1037BBB732B917 PUSH1 0xB1 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x443 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x14EC PUSH2 0x1821 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH32 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0 DUP4 GT ISZERO PUSH2 0x1528 JUMPI POP PUSH1 0x0 SWAP1 POP PUSH1 0x3 PUSH2 0x15AC JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP1 DUP5 MSTORE DUP10 SWAP1 MSTORE PUSH1 0xFF DUP9 AND SWAP3 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x60 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x1 SWAP1 PUSH1 0xA0 ADD PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 SUB SWAP1 DUP1 DUP5 SUB SWAP1 DUP6 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x157C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH1 0x1F NOT ADD MLOAD SWAP2 POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x15A5 JUMPI PUSH1 0x0 PUSH1 0x1 SWAP3 POP SWAP3 POP POP PUSH2 0x15AC JUMP JUMPDEST SWAP2 POP PUSH1 0x0 SWAP1 POP JUMPDEST SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x15C9 JUMPI PUSH2 0x15C9 PUSH2 0x26AB JUMP JUMPDEST SUB PUSH2 0x15D1 JUMPI POP JUMP JUMPDEST PUSH1 0x1 DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x15E5 JUMPI PUSH2 0x15E5 PUSH2 0x26AB JUMP JUMPDEST SUB PUSH2 0x1632 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45434453413A20696E76616C6964207369676E61747572650000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x443 JUMP JUMPDEST PUSH1 0x2 DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x1646 JUMPI PUSH2 0x1646 PUSH2 0x26AB JUMP JUMPDEST SUB PUSH2 0x1693 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45434453413A20696E76616C6964207369676E6174757265206C656E67746800 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x443 JUMP JUMPDEST PUSH1 0x3 DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x16A7 JUMPI PUSH2 0x16A7 PUSH2 0x26AB JUMP JUMPDEST SUB PUSH2 0x10CE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45434453413A20696E76616C6964207369676E6174757265202773272076616C PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x7565000000000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x443 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1785 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E7472616374206973206E6F742069 PUSH1 0x44 DUP3 ADD MSTORE PUSH11 0x6E697469616C697A696E67 PUSH1 0xA8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x443 JUMP JUMPDEST PUSH1 0x67 PUSH2 0x1791 DUP4 DUP3 PUSH2 0x270C JUMP JUMPDEST POP PUSH1 0x68 PUSH2 0x179E DUP3 DUP3 PUSH2 0x270C JUMP JUMPDEST POP POP PUSH1 0x0 PUSH1 0x65 DUP2 SWAP1 SSTORE PUSH1 0x66 SSTORE POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1818 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E7472616374206973206E6F742069 PUSH1 0x44 DUP3 ADD MSTORE PUSH11 0x6E697469616C697A696E67 PUSH1 0xA8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x443 JUMP JUMPDEST PUSH2 0xB09 CALLER PUSH2 0x120C JUMP JUMPDEST PUSH1 0x0 PUSH32 0x8B73C3C69BB8FE3D512ECC4CF759CC79239F7B179B0FFACAA9A75D522B39400F PUSH2 0x184C PUSH2 0x1895 JUMP JUMPDEST PUSH2 0x1854 PUSH2 0x18EE JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD SWAP5 SWAP1 SWAP5 MSTORE DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 DUP3 ADD MSTORE CHAINID PUSH1 0x80 DUP3 ADD MSTORE ADDRESS PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xC0 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x18A0 PUSH2 0x126B JUMP JUMPDEST DUP1 MLOAD SWAP1 SWAP2 POP ISZERO PUSH2 0x18B7 JUMPI DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD KECCAK256 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x65 SLOAD DUP1 ISZERO PUSH2 0x18C6 JUMPI SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0xC5D2460186F7233C927E7DB2DCC703C0E500B653CA82273B7BFAD8045D85A470 SWAP3 POP POP POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x18F9 PUSH2 0x12FD JUMP JUMPDEST DUP1 MLOAD SWAP1 SWAP2 POP ISZERO PUSH2 0x1910 JUMPI DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD KECCAK256 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x66 SLOAD DUP1 ISZERO PUSH2 0x18C6 JUMPI SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x1931 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1949 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP6 ADD ADD GT ISZERO PUSH2 0x1964 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x20 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x197E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1995 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x19A1 DUP6 DUP3 DUP7 ADD PUSH2 0x191F JUMP JUMPDEST SWAP1 SWAP7 SWAP1 SWAP6 POP SWAP4 POP POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP1 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x19E6 JUMPI PUSH2 0x19E6 PUSH2 0x19AD JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x140 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x19E6 JUMPI PUSH2 0x19E6 PUSH2 0x19AD JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x1A39 JUMPI PUSH2 0x1A39 PUSH2 0x19AD JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x1A5B JUMPI PUSH2 0x1A5B PUSH2 0x19AD JUMP JUMPDEST POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1A7A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1A8D PUSH2 0x1A88 DUP3 PUSH2 0x1A41 JUMP JUMPDEST PUSH2 0x1A10 JUMP JUMPDEST DUP2 DUP2 MSTORE DUP5 PUSH1 0x20 DUP4 DUP7 ADD ADD GT ISZERO PUSH2 0x1AA2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 PUSH1 0x20 DUP6 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 SWAP2 DUP2 ADD PUSH1 0x20 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x10CE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH1 0xFF DUP2 AND DUP2 EQ PUSH2 0x1AE5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x100 DUP11 DUP13 SUB SLT ISZERO PUSH2 0x1B09 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP10 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x1B21 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1B2D DUP14 DUP4 DUP15 ADD PUSH2 0x191F JUMP JUMPDEST SWAP1 SWAP12 POP SWAP10 POP PUSH1 0x20 DUP13 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x1B46 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1B53 DUP13 DUP3 DUP14 ADD PUSH2 0x1A69 JUMP JUMPDEST SWAP8 POP POP PUSH1 0x40 DUP11 ADD CALLDATALOAD PUSH2 0x1B64 DUP2 PUSH2 0x1ABF JUMP JUMPDEST SWAP6 POP PUSH1 0x60 DUP11 ADD CALLDATALOAD SWAP5 POP PUSH1 0x80 DUP11 ADD CALLDATALOAD SWAP4 POP PUSH2 0x1B80 PUSH1 0xA0 DUP12 ADD PUSH2 0x1AD4 JUMP JUMPDEST SWAP3 POP PUSH1 0xC0 DUP11 ADD CALLDATALOAD SWAP2 POP PUSH1 0xE0 DUP11 ADD CALLDATALOAD SWAP1 POP SWAP3 SWAP6 SWAP9 POP SWAP3 SWAP6 SWAP9 POP SWAP3 SWAP6 SWAP9 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xC0 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x1BB6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1BCD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1BD9 DUP10 DUP3 DUP11 ADD PUSH2 0x1A69 JUMP JUMPDEST SWAP7 POP POP PUSH1 0x20 DUP8 ADD CALLDATALOAD SWAP5 POP PUSH1 0x40 DUP8 ADD CALLDATALOAD SWAP4 POP PUSH2 0x1BF6 PUSH1 0x60 DUP9 ADD PUSH2 0x1AD4 JUMP JUMPDEST SWAP3 POP PUSH1 0x80 DUP8 ADD CALLDATALOAD SWAP2 POP PUSH1 0xA0 DUP8 ADD CALLDATALOAD SWAP1 POP SWAP3 SWAP6 POP SWAP3 SWAP6 POP SWAP3 SWAP6 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1C22 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x103A DUP2 PUSH2 0x1ABF JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1C48 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x1C30 JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x1C69 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x1C2D JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0xFF00000000000000000000000000000000000000000000000000000000000000 DUP9 AND DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 PUSH1 0xE0 DUP2 DUP5 ADD MSTORE PUSH2 0x1CB9 PUSH1 0xE0 DUP5 ADD DUP11 PUSH2 0x1C51 JUMP JUMPDEST DUP4 DUP2 SUB PUSH1 0x40 DUP6 ADD MSTORE PUSH2 0x1CCB DUP2 DUP11 PUSH2 0x1C51 JUMP JUMPDEST PUSH1 0x60 DUP6 ADD DUP10 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND PUSH1 0x80 DUP7 ADD MSTORE PUSH1 0xA0 DUP6 ADD DUP8 SWAP1 MSTORE DUP5 DUP2 SUB PUSH1 0xC0 DUP7 ADD MSTORE DUP6 MLOAD DUP1 DUP3 MSTORE DUP4 DUP8 ADD SWAP3 POP SWAP1 DUP4 ADD SWAP1 PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1D1D JUMPI DUP4 MLOAD DUP4 MSTORE SWAP3 DUP5 ADD SWAP3 SWAP2 DUP5 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x1D01 JUMP JUMPDEST POP SWAP1 SWAP13 SWAP12 POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1D41 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH2 0x100 DUP10 DUP12 SUB SLT ISZERO PUSH2 0x1D64 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP9 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x1D7C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1D88 DUP13 DUP4 DUP14 ADD PUSH2 0x1D2F JUMP JUMPDEST SWAP10 POP PUSH1 0x20 DUP12 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x1D9E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1DAB DUP12 DUP3 DUP13 ADD PUSH2 0x1A69 JUMP JUMPDEST SWAP8 POP POP PUSH1 0x40 DUP10 ADD CALLDATALOAD PUSH2 0x1DBC DUP2 PUSH2 0x1ABF JUMP JUMPDEST SWAP6 POP PUSH1 0x60 DUP10 ADD CALLDATALOAD SWAP5 POP PUSH1 0x80 DUP10 ADD CALLDATALOAD SWAP4 POP PUSH2 0x1DD8 PUSH1 0xA0 DUP11 ADD PUSH2 0x1AD4 JUMP JUMPDEST SWAP3 POP PUSH1 0xC0 DUP10 ADD CALLDATALOAD SWAP2 POP PUSH1 0xE0 DUP10 ADD CALLDATALOAD SWAP1 POP SWAP3 SWAP6 SWAP9 POP SWAP3 SWAP6 SWAP9 SWAP1 SWAP4 SWAP7 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1E07 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1E1E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1E2A DUP5 DUP3 DUP6 ADD PUSH2 0x1D2F JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 CALLDATALOAD PUSH1 0x3E NOT DUP4 CALLDATASIZE SUB ADD DUP2 SLT PUSH2 0x1E5E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x1E82 JUMPI PUSH2 0x1E82 PUSH2 0x19AD JUMP JUMPDEST POP PUSH1 0x5 SHL PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP1 DUP4 CALLDATASIZE SUB SLT ISZERO PUSH2 0x1E9F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1EA7 PUSH2 0x19C3 JUMP JUMPDEST DUP4 CALLDATALOAD DUP2 MSTORE PUSH1 0x20 DUP1 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1EC6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 ADD CALLDATASIZE PUSH1 0x1F DUP3 ADD SLT PUSH2 0x1ED7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH2 0x1EE5 PUSH2 0x1A88 DUP3 PUSH2 0x1E68 JUMP JUMPDEST DUP2 DUP2 MSTORE PUSH1 0x6 SWAP2 SWAP1 SWAP2 SHL DUP3 ADD DUP4 ADD SWAP1 DUP4 DUP2 ADD SWAP1 CALLDATASIZE DUP4 GT ISZERO PUSH2 0x1F04 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 DUP5 ADD SWAP3 JUMPDEST DUP3 DUP5 LT ISZERO PUSH2 0x1F44 JUMPI DUP7 DUP5 CALLDATASIZE SUB SLT ISZERO PUSH2 0x1F21 JUMPI PUSH1 0x0 DUP1 DUP2 REVERT JUMPDEST PUSH2 0x1F29 PUSH2 0x19C3 JUMP JUMPDEST DUP5 CALLDATALOAD DUP2 MSTORE DUP6 DUP6 ADD CALLDATALOAD DUP7 DUP3 ADD MSTORE DUP3 MSTORE SWAP3 DUP7 ADD SWAP3 SWAP1 DUP5 ADD SWAP1 PUSH2 0x1F09 JUMP JUMPDEST SWAP4 DUP6 ADD SWAP4 SWAP1 SWAP4 MSTORE POP SWAP2 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x10CE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 MLOAD PUSH2 0x1AE5 DUP2 PUSH2 0x1F56 JUMP JUMPDEST DUP1 MLOAD PUSH2 0x1AE5 DUP2 PUSH2 0x1ABF JUMP JUMPDEST DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x10CE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 MLOAD PUSH2 0x1AE5 DUP2 PUSH2 0x1F82 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1FAC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x1FBA PUSH2 0x1A88 DUP3 PUSH2 0x1A41 JUMP JUMPDEST DUP2 DUP2 MSTORE DUP5 PUSH1 0x20 DUP4 DUP7 ADD ADD GT ISZERO PUSH2 0x1FCF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1E2A DUP3 PUSH1 0x20 DUP4 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x1C2D JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1FF2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x200A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 DUP4 ADD SWAP1 PUSH2 0x140 DUP3 DUP7 SUB SLT ISZERO PUSH2 0x201F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2027 PUSH2 0x19EC JUMP JUMPDEST DUP3 MLOAD DUP2 MSTORE PUSH1 0x20 DUP4 ADD MLOAD PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x2041 PUSH1 0x40 DUP5 ADD PUSH2 0x1F6C JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE PUSH2 0x2052 PUSH1 0x60 DUP5 ADD PUSH2 0x1F6C JUMP JUMPDEST PUSH1 0x60 DUP3 ADD MSTORE PUSH2 0x2063 PUSH1 0x80 DUP5 ADD PUSH2 0x1F6C JUMP JUMPDEST PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xA0 DUP4 ADD MLOAD PUSH1 0xA0 DUP3 ADD MSTORE PUSH2 0x207E PUSH1 0xC0 DUP5 ADD PUSH2 0x1F77 JUMP JUMPDEST PUSH1 0xC0 DUP3 ADD MSTORE PUSH2 0x208F PUSH1 0xE0 DUP5 ADD PUSH2 0x1F77 JUMP JUMPDEST PUSH1 0xE0 DUP3 ADD MSTORE PUSH2 0x100 PUSH2 0x20A2 DUP2 DUP6 ADD PUSH2 0x1F90 JUMP JUMPDEST SWAP1 DUP3 ADD MSTORE PUSH2 0x120 DUP4 DUP2 ADD MLOAD DUP4 DUP2 GT ISZERO PUSH2 0x20BA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x20C6 DUP9 DUP3 DUP8 ADD PUSH2 0x1F9B JUMP JUMPDEST SWAP2 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 ADD PUSH2 0x20F7 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH1 0x40 DUP1 DUP5 ADD PUSH1 0x5 DUP7 SWAP1 SHL DUP6 ADD DUP3 ADD DUP8 DUP6 JUMPDEST DUP9 DUP2 LT ISZERO PUSH2 0x21E0 JUMPI DUP8 DUP4 SUB PUSH1 0x3F NOT ADD DUP5 MSTORE DUP2 CALLDATALOAD CALLDATASIZE DUP12 SWAP1 SUB PUSH1 0x3E NOT ADD DUP2 SLT PUSH2 0x2143 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP11 ADD DUP1 CALLDATALOAD DUP5 MSTORE DUP4 DUP7 ADD DUP8 DUP3 ADD CALLDATALOAD CALLDATASIZE DUP4 SWAP1 SUB PUSH1 0x1E NOT ADD DUP2 SLT PUSH2 0x2163 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 SWAP2 ADD DUP8 DUP2 ADD SWAP2 SWAP1 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2181 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH1 0x6 SHL CALLDATASIZE SUB DUP4 SGT ISZERO PUSH2 0x2193 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 DUP10 ADD DUP9 SWAP1 MSTORE SWAP1 DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH1 0x60 DUP7 ADD JUMPDEST DUP2 DUP4 LT ISZERO PUSH2 0x21CB JUMPI DUP4 CALLDATALOAD DUP2 MSTORE DUP10 DUP5 ADD CALLDATALOAD DUP11 DUP3 ADD MSTORE SWAP3 DUP9 ADD SWAP3 PUSH1 0x1 SWAP3 SWAP1 SWAP3 ADD SWAP2 DUP9 ADD PUSH2 0x21A5 JUMP JUMPDEST SWAP7 DUP10 ADD SWAP7 SWAP6 POP POP POP SWAP2 DUP7 ADD SWAP2 POP PUSH1 0x1 ADD PUSH2 0x211D JUMP JUMPDEST POP SWAP1 SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 CALLDATALOAD PUSH1 0x5E NOT DUP4 CALLDATASIZE SUB ADD DUP2 SLT PUSH2 0x1E5E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0xC0 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2216 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH1 0xC0 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP3 DUP3 LT DUP2 DUP4 GT OR ISZERO PUSH2 0x223A JUMPI PUSH2 0x223A PUSH2 0x19AD JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP3 SWAP4 POP DUP5 CALLDATALOAD SWAP2 POP PUSH2 0x224E DUP3 PUSH2 0x1ABF JUMP JUMPDEST SWAP1 DUP3 MSTORE PUSH1 0x20 DUP5 ADD CALLDATALOAD SWAP1 PUSH2 0x2260 DUP3 PUSH2 0x1F56 JUMP JUMPDEST DUP2 PUSH1 0x20 DUP5 ADD MSTORE PUSH1 0x40 DUP6 ADD CALLDATALOAD SWAP2 POP PUSH2 0x2276 DUP3 PUSH2 0x1F82 JUMP JUMPDEST DUP2 PUSH1 0x40 DUP5 ADD MSTORE PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x80 DUP6 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x229A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x22A7 DUP6 DUP3 DUP7 ADD PUSH2 0x1A69 JUMP JUMPDEST PUSH1 0x80 DUP4 ADD MSTORE POP PUSH1 0xA0 DUP4 ADD CALLDATALOAD PUSH1 0xA0 DUP3 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 CALLDATASIZE SUB SLT ISZERO PUSH2 0x22D0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x22D8 PUSH2 0x19C3 JUMP JUMPDEST DUP3 CALLDATALOAD DUP2 MSTORE PUSH1 0x20 DUP1 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x22F8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 DUP6 ADD SWAP1 CALLDATASIZE PUSH1 0x1F DUP4 ADD SLT PUSH2 0x230B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x2319 PUSH2 0x1A88 DUP3 PUSH2 0x1E68 JUMP JUMPDEST DUP2 DUP2 MSTORE PUSH1 0x5 SWAP2 SWAP1 SWAP2 SHL DUP4 ADD DUP5 ADD SWAP1 DUP5 DUP2 ADD SWAP1 CALLDATASIZE DUP4 GT ISZERO PUSH2 0x2338 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 DUP6 ADD JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x2370 JUMPI DUP1 CALLDATALOAD DUP6 DUP2 GT ISZERO PUSH2 0x2354 JUMPI PUSH1 0x0 DUP1 DUP2 REVERT JUMPDEST PUSH2 0x2362 CALLDATASIZE DUP10 DUP4 DUP11 ADD ADD PUSH2 0x2204 JUMP JUMPDEST DUP5 MSTORE POP SWAP2 DUP7 ADD SWAP2 DUP7 ADD PUSH2 0x233C JUMP JUMPDEST POP SWAP5 DUP7 ADD SWAP5 SWAP1 SWAP5 MSTORE POP SWAP3 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 ADD DUP2 DUP5 MSTORE DUP1 DUP6 MLOAD DUP1 DUP4 MSTORE PUSH1 0x40 SWAP3 POP DUP3 DUP7 ADD SWAP2 POP DUP3 DUP2 PUSH1 0x5 SHL DUP8 ADD ADD DUP5 DUP9 ADD PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x21E0 JUMPI DUP9 DUP4 SUB PUSH1 0x3F NOT ADD DUP6 MSTORE DUP2 MLOAD DUP1 MLOAD DUP5 MSTORE DUP8 ADD MLOAD DUP8 DUP5 ADD DUP8 SWAP1 MSTORE DUP1 MLOAD DUP8 DUP6 ADD DUP2 SWAP1 MSTORE SWAP1 DUP9 ADD SWAP1 PUSH1 0x60 SWAP1 DUP2 DUP7 ADD SWAP1 PUSH1 0x5 DUP2 SWAP1 SHL DUP8 ADD DUP4 ADD PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x2468 JUMPI PUSH1 0x5F NOT DUP10 DUP4 SUB ADD DUP5 MSTORE DUP6 MLOAD PUSH1 0xC0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 MLOAD AND DUP5 MSTORE PUSH8 0xFFFFFFFFFFFFFFFF DUP16 DUP4 ADD MLOAD AND DUP16 DUP6 ADD MSTORE DUP14 DUP3 ADD MLOAD ISZERO ISZERO DUP15 DUP6 ADD MSTORE DUP7 DUP3 ADD MLOAD DUP8 DUP6 ADD MSTORE PUSH1 0x80 DUP1 DUP4 ADD MLOAD DUP3 DUP3 DUP8 ADD MSTORE PUSH2 0x2446 DUP4 DUP8 ADD DUP3 PUSH2 0x1C51 JUMP JUMPDEST PUSH1 0xA0 SWAP5 DUP6 ADD MLOAD SWAP7 SWAP1 SWAP5 ADD SWAP6 SWAP1 SWAP6 MSTORE POP POP SWAP6 DUP14 ADD SWAP6 SWAP4 DUP14 ADD SWAP4 SWAP2 POP PUSH1 0x1 ADD PUSH2 0x23E9 JUMP JUMPDEST POP SWAP9 DUP12 ADD SWAP9 SWAP7 POP POP POP SWAP3 DUP9 ADD SWAP3 POP POP PUSH1 0x1 ADD PUSH2 0x23AA JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2492 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x24A9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 ADD PUSH1 0x1F DUP2 ADD DUP6 SGT PUSH2 0x24BA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 MLOAD PUSH2 0x24C8 PUSH2 0x1A88 DUP3 PUSH2 0x1E68 JUMP JUMPDEST DUP2 DUP2 MSTORE PUSH1 0x5 SWAP2 SWAP1 SWAP2 SHL DUP3 ADD DUP4 ADD SWAP1 DUP4 DUP2 ADD SWAP1 DUP8 DUP4 GT ISZERO PUSH2 0x24E7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 DUP5 ADD SWAP3 JUMPDEST DUP3 DUP5 LT ISZERO PUSH2 0x2505 JUMPI DUP4 MLOAD DUP3 MSTORE SWAP3 DUP5 ADD SWAP3 SWAP1 DUP5 ADD SWAP1 PUSH2 0x24EC JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 CALLDATALOAD PUSH1 0x1E NOT DUP5 CALLDATASIZE SUB ADD DUP2 SLT PUSH2 0x2527 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 ADD PUSH1 0x20 DUP2 ADD SWAP3 POP CALLDATALOAD SWAP1 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2547 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATASIZE SUB DUP3 SGT ISZERO PUSH2 0x1964 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP4 MSTORE DUP2 DUP2 PUSH1 0x20 DUP6 ADD CALLDATACOPY POP PUSH1 0x0 DUP3 DUP3 ADD PUSH1 0x20 SWAP1 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x1F SWAP1 SWAP2 ADD PUSH1 0x1F NOT AND SWAP1 SWAP2 ADD ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE DUP2 CALLDATALOAD PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH1 0xBE NOT DUP5 CALLDATASIZE SUB ADD DUP2 SLT PUSH2 0x25A3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 DUP4 DUP2 ADD MSTORE DUP4 ADD DUP1 CALLDATALOAD PUSH2 0x25B6 DUP2 PUSH2 0x1ABF JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD CALLDATALOAD PUSH2 0x25D2 DUP2 PUSH2 0x1F56 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH1 0x80 DUP5 ADD MSTORE PUSH1 0x40 DUP2 ADD CALLDATALOAD PUSH2 0x25EF DUP2 PUSH2 0x1F82 JUMP JUMPDEST ISZERO ISZERO PUSH1 0xA0 DUP5 ADD MSTORE PUSH1 0x60 DUP2 ADD CALLDATALOAD PUSH1 0xC0 DUP5 ADD MSTORE PUSH2 0x260D PUSH1 0x80 DUP3 ADD DUP3 PUSH2 0x2510 JUMP JUMPDEST PUSH1 0xC0 PUSH1 0xE0 DUP7 ADD MSTORE PUSH2 0x2623 PUSH2 0x120 DUP7 ADD DUP3 DUP5 PUSH2 0x2556 JUMP JUMPDEST SWAP2 POP POP PUSH1 0xA0 DUP3 ADD CALLDATALOAD PUSH2 0x100 DUP6 ADD MSTORE DUP1 SWAP3 POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x264E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 CALLDATALOAD PUSH1 0xBE NOT DUP4 CALLDATASIZE SUB ADD DUP2 SLT PUSH2 0x1E5E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1184 CALLDATASIZE DUP4 PUSH2 0x2204 JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x268B JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x1D41 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH2 0x2707 JUMPI PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP2 ADD PUSH1 0x20 DUP7 LT ISZERO PUSH2 0x26E8 JUMPI POP DUP1 JUMPDEST PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP3 ADD SWAP2 POP JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x4D5 JUMPI DUP3 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x26F4 JUMP JUMPDEST POP POP POP JUMP JUMPDEST DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2726 JUMPI PUSH2 0x2726 PUSH2 0x19AD JUMP JUMPDEST PUSH2 0x273A DUP2 PUSH2 0x2734 DUP5 SLOAD PUSH2 0x2677 JUMP JUMPDEST DUP5 PUSH2 0x26C1 JUMP JUMPDEST PUSH1 0x20 DUP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH2 0x276F JUMPI PUSH1 0x0 DUP5 ISZERO PUSH2 0x2757 JUMPI POP DUP6 DUP4 ADD MLOAD JUMPDEST PUSH1 0x0 NOT PUSH1 0x3 DUP7 SWAP1 SHL SHR NOT AND PUSH1 0x1 DUP6 SWAP1 SHL OR DUP6 SSTORE PUSH2 0x4D5 JUMP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F NOT DUP7 AND SWAP2 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x279E JUMPI DUP9 DUP7 ADD MLOAD DUP3 SSTORE SWAP5 DUP5 ADD SWAP5 PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 DUP5 ADD PUSH2 0x277F JUMP JUMPDEST POP DUP6 DUP3 LT ISZERO PUSH2 0x27BC JUMPI DUP8 DUP6 ADD MLOAD PUSH1 0x0 NOT PUSH1 0x3 DUP9 SWAP1 SHL PUSH1 0xF8 AND SHR NOT AND DUP2 SSTORE JUMPDEST POP POP POP POP POP PUSH1 0x1 SWAP1 DUP2 SHL ADD SWAP1 SSTORE POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP14 0x29 0x5F 0xC0 PUSH27 0xD69DC0E81E72ABC01012614638B062BF313C22B8963E0DB80FB9BB PUSH5 0x736F6C6343 STOP ADDMOD SGT STOP CALLER ","sourceMap":"549:7119:25:-:0;;;871:53;;;;;;;;;-1:-1:-1;895:22:25;:20;:22::i;:::-;549:7119;;5939:280:8;6007:13;;;;;;;6006:14;5998:66;;;;-1:-1:-1;;;5998:66:8;;216:2:29;5998:66:8;;;198:21:29;255:2;235:18;;;228:30;294:34;274:18;;;267:62;-1:-1:-1;;;345:18:29;;;338:37;392:19;;5998:66:8;;;;;;;;6078:12;;6094:15;6078:12;;;:31;6074:139;;6125:12;:30;;-1:-1:-1;;6125:30:8;6140:15;6125:30;;;;;;6174:28;;564:36:29;;;6174:28:8;;552:2:29;537:18;6174:28:8;;;;;;;6074:139;5939:280::o;422:184:29:-;549:7119:25;;;;;;"},"deployedBytecode":{"functionDebugData":{"@ATTEST_TYPEHASH_5216":{"entryPoint":null,"id":5216,"parameterSlots":0,"returnSlots":0},"@_EIP712NameHash_2345":{"entryPoint":6293,"id":2345,"parameterSlots":0,"returnSlots":1},"@_EIP712Name_2291":{"entryPoint":4715,"id":2291,"parameterSlots":0,"returnSlots":1},"@_EIP712VersionHash_2390":{"entryPoint":6382,"id":2390,"parameterSlots":0,"returnSlots":1},"@_EIP712Version_2300":{"entryPoint":4861,"id":2300,"parameterSlots":0,"returnSlots":1},"@__EIP712_init_2153":{"entryPoint":4876,"id":2153,"parameterSlots":2,"returnSlots":0},"@__EIP712_init_unchained_2179":{"entryPoint":5914,"id":2179,"parameterSlots":2,"returnSlots":0},"@__Ownable_init_846":{"entryPoint":4993,"id":846,"parameterSlots":0,"returnSlots":0},"@__Ownable_init_unchained_857":{"entryPoint":6061,"id":857,"parameterSlots":0,"returnSlots":0},"@_buildDomainSeparator_2212":{"entryPoint":6177,"id":2212,"parameterSlots":0,"returnSlots":1},"@_checkOwner_888":{"entryPoint":4530,"id":888,"parameterSlots":0,"returnSlots":0},"@_domainSeparatorV4_2189":{"entryPoint":5346,"id":2189,"parameterSlots":0,"returnSlots":1},"@_hashTypedDataV4_2228":{"entryPoint":4412,"id":2228,"parameterSlots":1,"returnSlots":1},"@_msgSender_1502":{"entryPoint":null,"id":1502,"parameterSlots":0,"returnSlots":1},"@_recoverSignerAddress_5374":{"entryPoint":2664,"id":5374,"parameterSlots":6,"returnSlots":1},"@_throwError_1800":{"entryPoint":5557,"id":1800,"parameterSlots":1,"returnSlots":0},"@_transferOwnership_945":{"entryPoint":4620,"id":945,"parameterSlots":1,"returnSlots":0},"@attestBySig_5580":{"entryPoint":3463,"id":5580,"parameterSlots":8,"returnSlots":1},"@attest_5618":{"entryPoint":3885,"id":5618,"parameterSlots":1,"returnSlots":1},"@eas_5207":{"entryPoint":null,"id":5207,"parameterSlots":0,"returnSlots":0},"@eip712Domain_2282":{"entryPoint":2827,"id":2282,"parameterSlots":0,"returnSlots":7},"@initialize_5254":{"entryPoint":3021,"id":5254,"parameterSlots":1,"returnSlots":0},"@isContract_1163":{"entryPoint":null,"id":1163,"parameterSlots":1,"returnSlots":1},"@multiAttestBySig_5681":{"entryPoint":2338,"id":5681,"parameterSlots":9,"returnSlots":0},"@multiRevokeBySig_5439":{"entryPoint":1935,"id":5439,"parameterSlots":9,"returnSlots":0},"@multiRevoke_5515":{"entryPoint":764,"id":5515,"parameterSlots":2,"returnSlots":0},"@multiSequentialAttest_5814":{"entryPoint":1245,"id":5814,"parameterSlots":2,"returnSlots":0},"@nonces_5211":{"entryPoint":null,"id":5211,"parameterSlots":0,"returnSlots":0},"@owner_874":{"entryPoint":null,"id":874,"parameterSlots":0,"returnSlots":1},"@recover_2047":{"entryPoint":4490,"id":2047,"parameterSlots":4,"returnSlots":1},"@renounceOwnership_902":{"entryPoint":2807,"id":902,"parameterSlots":0,"returnSlots":0},"@toTypedDataHash_2091":{"entryPoint":null,"id":2091,"parameterSlots":2,"returnSlots":1},"@transferOwnership_925":{"entryPoint":4161,"id":925,"parameterSlots":1,"returnSlots":0},"@tryRecover_2014":{"entryPoint":5361,"id":2014,"parameterSlots":4,"returnSlots":2},"@validateCanAttestToRef_5284":{"entryPoint":5108,"id":5284,"parameterSlots":1,"returnSlots":0},"@validateCanAttestToRefs_5324":{"entryPoint":4305,"id":5324,"parameterSlots":1,"returnSlots":0},"abi_decode_address_fromMemory":{"entryPoint":8055,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_array_struct_MultiRevocationRequest_calldata_dyn_calldata":{"entryPoint":6431,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_bool_fromMemory":{"entryPoint":8080,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_bytes_fromMemory":{"entryPoint":8091,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_string":{"entryPoint":6761,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_struct_AttestationRequestData":{"entryPoint":8708,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_struct_AttestationRequest_calldata":{"entryPoint":7471,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":7184,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_array$_t_bytes32_$dyn_memory_ptr_fromMemory":{"entryPoint":9343,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_array$_t_struct$_AttestationRequestNode_$5232_calldata_ptr_$dyn_calldata_ptr":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_array$_t_struct$_AttestationRequestNode_$5232_calldata_ptr_$dyn_calldata_ptrt_string_memory_ptrt_addresst_uint256t_uint256t_uint8t_bytes32t_bytes32":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":9},"abi_decode_tuple_t_array$_t_struct$_MultiRevocationRequest_$147_calldata_ptr_$dyn_calldata_ptr":{"entryPoint":6507,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_array$_t_struct$_MultiRevocationRequest_$147_calldata_ptr_$dyn_calldata_ptrt_string_memory_ptrt_addresst_uint256t_uint256t_uint8t_bytes32t_bytes32":{"entryPoint":6890,"id":null,"parameterSlots":2,"returnSlots":9},"abi_decode_tuple_t_bytes32_fromMemory":{"entryPoint":9788,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_string_memory_ptrt_uint256t_uint256t_uint8t_bytes32t_bytes32":{"entryPoint":7069,"id":null,"parameterSlots":2,"returnSlots":6},"abi_decode_tuple_t_struct$_AttestationRequest_$87_calldata_ptr":{"entryPoint":7669,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_struct$_AttestationRequest_$87_calldata_ptrt_string_memory_ptrt_addresst_uint256t_uint256t_uint8t_bytes32t_bytes32":{"entryPoint":7495,"id":null,"parameterSlots":2,"returnSlots":8},"abi_decode_tuple_t_struct$_Attestation_$45_memory_ptr_fromMemory":{"entryPoint":8160,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_uint64_fromMemory":{"entryPoint":8044,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_uint8":{"entryPoint":6868,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_bytes_calldata":{"entryPoint":9558,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_string":{"entryPoint":7249,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_array$_t_struct$_MultiAttestationRequest_$105_memory_ptr_$dyn_memory_ptr__to_t_array$_t_struct$_MultiAttestationRequest_$105_memory_ptr_$dyn_memory_ptr__fromStack_reversed":{"entryPoint":9091,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_array$_t_struct$_MultiRevocationRequest_$147_calldata_ptr_$dyn_calldata_ptr__to_t_array$_t_struct$_MultiRevocationRequest_$147_memory_ptr_$dyn_memory_ptr__fromStack_reversed":{"entryPoint":8446,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_bytes1_t_string_memory_ptr_t_string_memory_ptr_t_uint256_t_address_t_bytes32_t_array$_t_uint256_$dyn_memory_ptr__to_t_bytes1_t_string_memory_ptr_t_string_memory_ptr_t_uint256_t_address_t_bytes32_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed":{"entryPoint":7293,"id":null,"parameterSlots":8,"returnSlots":1},"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__to_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":6,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_bytes32_t_uint256_t_uint256__to_t_bytes32_t_bytes32_t_uint256_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":5,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_uint8_t_bytes32_t_bytes32__to_t_bytes32_t_uint8_t_bytes32_t_bytes32__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":5,"returnSlots":1},"abi_encode_tuple_t_contract$_IEAS_$346__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_19a9c5fdfc984667e300523283171e2aca8bb9e593f19eef41052fcdbfdb1568__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_2e5045ff73280aa8e8acd8c82710f23812497f87f7f576e2220a2ddd0d45eade__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_4273fbad0f59c6a7ae7dbee11f68ce4ebedcf6c034c1140f12b6e6f0444ffa6c__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_99132f8bb903a5d9600420e3899938d8bfd8aa30795f8fee460656e87dd9c517__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_bf2878a0327c5efcb59586051281508822c0d430e7858d25ba3f27d805f4146d__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_struct$_AttestationRequest_$87_calldata_ptr__to_t_struct$_AttestationRequest_$87_memory_ptr__fromStack_reversed":{"entryPoint":9599,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"access_calldata_tail_t_struct$_AttestationRequestData_$81_calldata_ptr":{"entryPoint":9813,"id":null,"parameterSlots":2,"returnSlots":1},"access_calldata_tail_t_struct$_AttestationRequestNode_$5232_calldata_ptr":{"entryPoint":8686,"id":null,"parameterSlots":2,"returnSlots":1},"access_calldata_tail_t_struct$_MultiAttestationRequest_$105_calldata_ptr":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"access_calldata_tail_t_struct$_MultiRevocationRequest_$147_calldata_ptr":{"entryPoint":7752,"id":null,"parameterSlots":2,"returnSlots":1},"allocate_memory":{"entryPoint":6672,"id":null,"parameterSlots":1,"returnSlots":1},"allocate_memory_6725":{"entryPoint":6595,"id":null,"parameterSlots":0,"returnSlots":1},"allocate_memory_6728":{"entryPoint":6636,"id":null,"parameterSlots":0,"returnSlots":1},"array_allocation_size_array_struct_RevocationRequestData_dyn":{"entryPoint":7784,"id":null,"parameterSlots":1,"returnSlots":1},"array_allocation_size_string":{"entryPoint":6721,"id":null,"parameterSlots":1,"returnSlots":1},"array_dataslot_string_storage":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"calldata_access_bytes_calldata":{"entryPoint":9488,"id":null,"parameterSlots":2,"returnSlots":2},"clean_up_bytearray_end_slots_string_storage":{"entryPoint":9921,"id":null,"parameterSlots":3,"returnSlots":0},"convert_t_struct$_AttestationRequestData_$81_calldata_ptr_to_t_struct$_AttestationRequestData_$81_memory_ptr":{"entryPoint":9835,"id":null,"parameterSlots":1,"returnSlots":1},"convert_t_struct$_MultiAttestationRequest_$105_calldata_ptr_to_t_struct$_MultiAttestationRequest_$105_memory_ptr":{"entryPoint":8894,"id":null,"parameterSlots":1,"returnSlots":1},"convert_t_struct$_MultiRevocationRequest_$147_calldata_ptr_to_t_struct$_MultiRevocationRequest_$147_memory_ptr":{"entryPoint":7820,"id":null,"parameterSlots":1,"returnSlots":1},"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage":{"entryPoint":9996,"id":null,"parameterSlots":2,"returnSlots":0},"copy_memory_to_memory_with_cleanup":{"entryPoint":7213,"id":null,"parameterSlots":3,"returnSlots":0},"extract_byte_array_length":{"entryPoint":9847,"id":null,"parameterSlots":1,"returnSlots":1},"extract_used_part_and_set_length_of_short_byte_array":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"increment_t_uint256":{"entryPoint":8407,"id":null,"parameterSlots":1,"returnSlots":1},"panic_error_0x21":{"entryPoint":9899,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x32":{"entryPoint":7730,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":6573,"id":null,"parameterSlots":0,"returnSlots":0},"validator_revert_address":{"entryPoint":6847,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_bool":{"entryPoint":8066,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_uint64":{"entryPoint":8022,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:36344:29","statements":[{"nodeType":"YulBlock","src":"6:3:29","statements":[]},{"body":{"nodeType":"YulBlock","src":"129:283:29","statements":[{"body":{"nodeType":"YulBlock","src":"178:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"187:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"190:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"180:6:29"},"nodeType":"YulFunctionCall","src":"180:12:29"},"nodeType":"YulExpressionStatement","src":"180:12:29"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"157:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"165:4:29","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"153:3:29"},"nodeType":"YulFunctionCall","src":"153:17:29"},{"name":"end","nodeType":"YulIdentifier","src":"172:3:29"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"149:3:29"},"nodeType":"YulFunctionCall","src":"149:27:29"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"142:6:29"},"nodeType":"YulFunctionCall","src":"142:35:29"},"nodeType":"YulIf","src":"139:55:29"},{"nodeType":"YulAssignment","src":"203:30:29","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"226:6:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"213:12:29"},"nodeType":"YulFunctionCall","src":"213:20:29"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"203:6:29"}]},{"body":{"nodeType":"YulBlock","src":"276:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"285:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"288:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"278:6:29"},"nodeType":"YulFunctionCall","src":"278:12:29"},"nodeType":"YulExpressionStatement","src":"278:12:29"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"248:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"256:18:29","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"245:2:29"},"nodeType":"YulFunctionCall","src":"245:30:29"},"nodeType":"YulIf","src":"242:50:29"},{"nodeType":"YulAssignment","src":"301:29:29","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"317:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"325:4:29","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"313:3:29"},"nodeType":"YulFunctionCall","src":"313:17:29"},"variableNames":[{"name":"arrayPos","nodeType":"YulIdentifier","src":"301:8:29"}]},{"body":{"nodeType":"YulBlock","src":"390:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"399:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"402:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"392:6:29"},"nodeType":"YulFunctionCall","src":"392:12:29"},"nodeType":"YulExpressionStatement","src":"392:12:29"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"353:6:29"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"365:1:29","type":"","value":"5"},{"name":"length","nodeType":"YulIdentifier","src":"368:6:29"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"361:3:29"},"nodeType":"YulFunctionCall","src":"361:14:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"349:3:29"},"nodeType":"YulFunctionCall","src":"349:27:29"},{"kind":"number","nodeType":"YulLiteral","src":"378:4:29","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"345:3:29"},"nodeType":"YulFunctionCall","src":"345:38:29"},{"name":"end","nodeType":"YulIdentifier","src":"385:3:29"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"342:2:29"},"nodeType":"YulFunctionCall","src":"342:47:29"},"nodeType":"YulIf","src":"339:67:29"}]},"name":"abi_decode_array_struct_MultiRevocationRequest_calldata_dyn_calldata","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"92:6:29","type":""},{"name":"end","nodeType":"YulTypedName","src":"100:3:29","type":""}],"returnVariables":[{"name":"arrayPos","nodeType":"YulTypedName","src":"108:8:29","type":""},{"name":"length","nodeType":"YulTypedName","src":"118:6:29","type":""}],"src":"14:398:29"},{"body":{"nodeType":"YulBlock","src":"563:363:29","statements":[{"body":{"nodeType":"YulBlock","src":"609:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"618:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"621:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"611:6:29"},"nodeType":"YulFunctionCall","src":"611:12:29"},"nodeType":"YulExpressionStatement","src":"611:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"584:7:29"},{"name":"headStart","nodeType":"YulIdentifier","src":"593:9:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"580:3:29"},"nodeType":"YulFunctionCall","src":"580:23:29"},{"kind":"number","nodeType":"YulLiteral","src":"605:2:29","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"576:3:29"},"nodeType":"YulFunctionCall","src":"576:32:29"},"nodeType":"YulIf","src":"573:52:29"},{"nodeType":"YulVariableDeclaration","src":"634:37:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"661:9:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"648:12:29"},"nodeType":"YulFunctionCall","src":"648:23:29"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"638:6:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"714:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"723:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"726:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"716:6:29"},"nodeType":"YulFunctionCall","src":"716:12:29"},"nodeType":"YulExpressionStatement","src":"716:12:29"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"686:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"694:18:29","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"683:2:29"},"nodeType":"YulFunctionCall","src":"683:30:29"},"nodeType":"YulIf","src":"680:50:29"},{"nodeType":"YulVariableDeclaration","src":"739:127:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"838:9:29"},{"name":"offset","nodeType":"YulIdentifier","src":"849:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"834:3:29"},"nodeType":"YulFunctionCall","src":"834:22:29"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"858:7:29"}],"functionName":{"name":"abi_decode_array_struct_MultiRevocationRequest_calldata_dyn_calldata","nodeType":"YulIdentifier","src":"765:68:29"},"nodeType":"YulFunctionCall","src":"765:101:29"},"variables":[{"name":"value0_1","nodeType":"YulTypedName","src":"743:8:29","type":""},{"name":"value1_1","nodeType":"YulTypedName","src":"753:8:29","type":""}]},{"nodeType":"YulAssignment","src":"875:18:29","value":{"name":"value0_1","nodeType":"YulIdentifier","src":"885:8:29"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"875:6:29"}]},{"nodeType":"YulAssignment","src":"902:18:29","value":{"name":"value1_1","nodeType":"YulIdentifier","src":"912:8:29"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"902:6:29"}]}]},"name":"abi_decode_tuple_t_array$_t_struct$_MultiRevocationRequest_$147_calldata_ptr_$dyn_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"521:9:29","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"532:7:29","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"544:6:29","type":""},{"name":"value1","nodeType":"YulTypedName","src":"552:6:29","type":""}],"src":"417:509:29"},{"body":{"nodeType":"YulBlock","src":"1078:363:29","statements":[{"body":{"nodeType":"YulBlock","src":"1124:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1133:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1136:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1126:6:29"},"nodeType":"YulFunctionCall","src":"1126:12:29"},"nodeType":"YulExpressionStatement","src":"1126:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1099:7:29"},{"name":"headStart","nodeType":"YulIdentifier","src":"1108:9:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1095:3:29"},"nodeType":"YulFunctionCall","src":"1095:23:29"},{"kind":"number","nodeType":"YulLiteral","src":"1120:2:29","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1091:3:29"},"nodeType":"YulFunctionCall","src":"1091:32:29"},"nodeType":"YulIf","src":"1088:52:29"},{"nodeType":"YulVariableDeclaration","src":"1149:37:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1176:9:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1163:12:29"},"nodeType":"YulFunctionCall","src":"1163:23:29"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"1153:6:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"1229:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1238:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1241:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1231:6:29"},"nodeType":"YulFunctionCall","src":"1231:12:29"},"nodeType":"YulExpressionStatement","src":"1231:12:29"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1201:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"1209:18:29","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1198:2:29"},"nodeType":"YulFunctionCall","src":"1198:30:29"},"nodeType":"YulIf","src":"1195:50:29"},{"nodeType":"YulVariableDeclaration","src":"1254:127:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1353:9:29"},{"name":"offset","nodeType":"YulIdentifier","src":"1364:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1349:3:29"},"nodeType":"YulFunctionCall","src":"1349:22:29"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1373:7:29"}],"functionName":{"name":"abi_decode_array_struct_MultiRevocationRequest_calldata_dyn_calldata","nodeType":"YulIdentifier","src":"1280:68:29"},"nodeType":"YulFunctionCall","src":"1280:101:29"},"variables":[{"name":"value0_1","nodeType":"YulTypedName","src":"1258:8:29","type":""},{"name":"value1_1","nodeType":"YulTypedName","src":"1268:8:29","type":""}]},{"nodeType":"YulAssignment","src":"1390:18:29","value":{"name":"value0_1","nodeType":"YulIdentifier","src":"1400:8:29"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1390:6:29"}]},{"nodeType":"YulAssignment","src":"1417:18:29","value":{"name":"value1_1","nodeType":"YulIdentifier","src":"1427:8:29"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"1417:6:29"}]}]},"name":"abi_decode_tuple_t_array$_t_struct$_AttestationRequestNode_$5232_calldata_ptr_$dyn_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1036:9:29","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1047:7:29","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1059:6:29","type":""},{"name":"value1","nodeType":"YulTypedName","src":"1067:6:29","type":""}],"src":"931:510:29"},{"body":{"nodeType":"YulBlock","src":"1478:152:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1495:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1498:77:29","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1488:6:29"},"nodeType":"YulFunctionCall","src":"1488:88:29"},"nodeType":"YulExpressionStatement","src":"1488:88:29"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1592:1:29","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"1595:4:29","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1585:6:29"},"nodeType":"YulFunctionCall","src":"1585:15:29"},"nodeType":"YulExpressionStatement","src":"1585:15:29"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1616:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1619:4:29","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1609:6:29"},"nodeType":"YulFunctionCall","src":"1609:15:29"},"nodeType":"YulExpressionStatement","src":"1609:15:29"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"1446:184:29"},{"body":{"nodeType":"YulBlock","src":"1681:211:29","statements":[{"nodeType":"YulAssignment","src":"1691:21:29","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1707:4:29","type":"","value":"0x40"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1701:5:29"},"nodeType":"YulFunctionCall","src":"1701:11:29"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"1691:6:29"}]},{"nodeType":"YulVariableDeclaration","src":"1721:35:29","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"1743:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"1751:4:29","type":"","value":"0x40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1739:3:29"},"nodeType":"YulFunctionCall","src":"1739:17:29"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"1725:10:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"1831:22:29","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"1833:16:29"},"nodeType":"YulFunctionCall","src":"1833:18:29"},"nodeType":"YulExpressionStatement","src":"1833:18:29"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"1774:10:29"},{"kind":"number","nodeType":"YulLiteral","src":"1786:18:29","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1771:2:29"},"nodeType":"YulFunctionCall","src":"1771:34:29"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"1810:10:29"},{"name":"memPtr","nodeType":"YulIdentifier","src":"1822:6:29"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"1807:2:29"},"nodeType":"YulFunctionCall","src":"1807:22:29"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"1768:2:29"},"nodeType":"YulFunctionCall","src":"1768:62:29"},"nodeType":"YulIf","src":"1765:88:29"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1869:4:29","type":"","value":"0x40"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"1875:10:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1862:6:29"},"nodeType":"YulFunctionCall","src":"1862:24:29"},"nodeType":"YulExpressionStatement","src":"1862:24:29"}]},"name":"allocate_memory_6725","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"1670:6:29","type":""}],"src":"1635:257:29"},{"body":{"nodeType":"YulBlock","src":"1943:209:29","statements":[{"nodeType":"YulAssignment","src":"1953:19:29","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1969:2:29","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1963:5:29"},"nodeType":"YulFunctionCall","src":"1963:9:29"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"1953:6:29"}]},{"nodeType":"YulVariableDeclaration","src":"1981:37:29","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"2003:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"2011:6:29","type":"","value":"0x0140"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1999:3:29"},"nodeType":"YulFunctionCall","src":"1999:19:29"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"1985:10:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"2093:22:29","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"2095:16:29"},"nodeType":"YulFunctionCall","src":"2095:18:29"},"nodeType":"YulExpressionStatement","src":"2095:18:29"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"2036:10:29"},{"kind":"number","nodeType":"YulLiteral","src":"2048:18:29","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2033:2:29"},"nodeType":"YulFunctionCall","src":"2033:34:29"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"2072:10:29"},{"name":"memPtr","nodeType":"YulIdentifier","src":"2084:6:29"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2069:2:29"},"nodeType":"YulFunctionCall","src":"2069:22:29"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"2030:2:29"},"nodeType":"YulFunctionCall","src":"2030:62:29"},"nodeType":"YulIf","src":"2027:88:29"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2131:2:29","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"2135:10:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2124:6:29"},"nodeType":"YulFunctionCall","src":"2124:22:29"},"nodeType":"YulExpressionStatement","src":"2124:22:29"}]},"name":"allocate_memory_6728","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"1932:6:29","type":""}],"src":"1897:255:29"},{"body":{"nodeType":"YulBlock","src":"2202:230:29","statements":[{"nodeType":"YulAssignment","src":"2212:19:29","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2228:2:29","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2222:5:29"},"nodeType":"YulFunctionCall","src":"2222:9:29"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"2212:6:29"}]},{"nodeType":"YulVariableDeclaration","src":"2240:58:29","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"2262:6:29"},{"arguments":[{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"2278:4:29"},{"kind":"number","nodeType":"YulLiteral","src":"2284:2:29","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2274:3:29"},"nodeType":"YulFunctionCall","src":"2274:13:29"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2293:2:29","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"2289:3:29"},"nodeType":"YulFunctionCall","src":"2289:7:29"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2270:3:29"},"nodeType":"YulFunctionCall","src":"2270:27:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2258:3:29"},"nodeType":"YulFunctionCall","src":"2258:40:29"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"2244:10:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"2373:22:29","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"2375:16:29"},"nodeType":"YulFunctionCall","src":"2375:18:29"},"nodeType":"YulExpressionStatement","src":"2375:18:29"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"2316:10:29"},{"kind":"number","nodeType":"YulLiteral","src":"2328:18:29","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2313:2:29"},"nodeType":"YulFunctionCall","src":"2313:34:29"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"2352:10:29"},{"name":"memPtr","nodeType":"YulIdentifier","src":"2364:6:29"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2349:2:29"},"nodeType":"YulFunctionCall","src":"2349:22:29"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"2310:2:29"},"nodeType":"YulFunctionCall","src":"2310:62:29"},"nodeType":"YulIf","src":"2307:88:29"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2411:2:29","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"2415:10:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2404:6:29"},"nodeType":"YulFunctionCall","src":"2404:22:29"},"nodeType":"YulExpressionStatement","src":"2404:22:29"}]},"name":"allocate_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"size","nodeType":"YulTypedName","src":"2182:4:29","type":""}],"returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"2191:6:29","type":""}],"src":"2157:275:29"},{"body":{"nodeType":"YulBlock","src":"2495:129:29","statements":[{"body":{"nodeType":"YulBlock","src":"2539:22:29","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"2541:16:29"},"nodeType":"YulFunctionCall","src":"2541:18:29"},"nodeType":"YulExpressionStatement","src":"2541:18:29"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"2511:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"2519:18:29","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2508:2:29"},"nodeType":"YulFunctionCall","src":"2508:30:29"},"nodeType":"YulIf","src":"2505:56:29"},{"nodeType":"YulAssignment","src":"2570:48:29","value":{"arguments":[{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"2590:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"2598:2:29","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2586:3:29"},"nodeType":"YulFunctionCall","src":"2586:15:29"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2607:2:29","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"2603:3:29"},"nodeType":"YulFunctionCall","src":"2603:7:29"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2582:3:29"},"nodeType":"YulFunctionCall","src":"2582:29:29"},{"kind":"number","nodeType":"YulLiteral","src":"2613:4:29","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2578:3:29"},"nodeType":"YulFunctionCall","src":"2578:40:29"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"2570:4:29"}]}]},"name":"array_allocation_size_string","nodeType":"YulFunctionDefinition","parameters":[{"name":"length","nodeType":"YulTypedName","src":"2475:6:29","type":""}],"returnVariables":[{"name":"size","nodeType":"YulTypedName","src":"2486:4:29","type":""}],"src":"2437:187:29"},{"body":{"nodeType":"YulBlock","src":"2682:411:29","statements":[{"body":{"nodeType":"YulBlock","src":"2731:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2740:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2743:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2733:6:29"},"nodeType":"YulFunctionCall","src":"2733:12:29"},"nodeType":"YulExpressionStatement","src":"2733:12:29"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2710:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"2718:4:29","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2706:3:29"},"nodeType":"YulFunctionCall","src":"2706:17:29"},{"name":"end","nodeType":"YulIdentifier","src":"2725:3:29"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2702:3:29"},"nodeType":"YulFunctionCall","src":"2702:27:29"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2695:6:29"},"nodeType":"YulFunctionCall","src":"2695:35:29"},"nodeType":"YulIf","src":"2692:55:29"},{"nodeType":"YulVariableDeclaration","src":"2756:30:29","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2779:6:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2766:12:29"},"nodeType":"YulFunctionCall","src":"2766:20:29"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"2760:2:29","type":""}]},{"nodeType":"YulVariableDeclaration","src":"2795:64:29","value":{"arguments":[{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"2855:2:29"}],"functionName":{"name":"array_allocation_size_string","nodeType":"YulIdentifier","src":"2826:28:29"},"nodeType":"YulFunctionCall","src":"2826:32:29"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"2810:15:29"},"nodeType":"YulFunctionCall","src":"2810:49:29"},"variables":[{"name":"array_1","nodeType":"YulTypedName","src":"2799:7:29","type":""}]},{"expression":{"arguments":[{"name":"array_1","nodeType":"YulIdentifier","src":"2875:7:29"},{"name":"_1","nodeType":"YulIdentifier","src":"2884:2:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2868:6:29"},"nodeType":"YulFunctionCall","src":"2868:19:29"},"nodeType":"YulExpressionStatement","src":"2868:19:29"},{"body":{"nodeType":"YulBlock","src":"2935:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2944:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2947:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2937:6:29"},"nodeType":"YulFunctionCall","src":"2937:12:29"},"nodeType":"YulExpressionStatement","src":"2937:12:29"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2910:6:29"},{"name":"_1","nodeType":"YulIdentifier","src":"2918:2:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2906:3:29"},"nodeType":"YulFunctionCall","src":"2906:15:29"},{"kind":"number","nodeType":"YulLiteral","src":"2923:4:29","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2902:3:29"},"nodeType":"YulFunctionCall","src":"2902:26:29"},{"name":"end","nodeType":"YulIdentifier","src":"2930:3:29"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2899:2:29"},"nodeType":"YulFunctionCall","src":"2899:35:29"},"nodeType":"YulIf","src":"2896:55:29"},{"expression":{"arguments":[{"arguments":[{"name":"array_1","nodeType":"YulIdentifier","src":"2977:7:29"},{"kind":"number","nodeType":"YulLiteral","src":"2986:4:29","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2973:3:29"},"nodeType":"YulFunctionCall","src":"2973:18:29"},{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2997:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"3005:4:29","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2993:3:29"},"nodeType":"YulFunctionCall","src":"2993:17:29"},{"name":"_1","nodeType":"YulIdentifier","src":"3012:2:29"}],"functionName":{"name":"calldatacopy","nodeType":"YulIdentifier","src":"2960:12:29"},"nodeType":"YulFunctionCall","src":"2960:55:29"},"nodeType":"YulExpressionStatement","src":"2960:55:29"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"array_1","nodeType":"YulIdentifier","src":"3039:7:29"},{"name":"_1","nodeType":"YulIdentifier","src":"3048:2:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3035:3:29"},"nodeType":"YulFunctionCall","src":"3035:16:29"},{"kind":"number","nodeType":"YulLiteral","src":"3053:4:29","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3031:3:29"},"nodeType":"YulFunctionCall","src":"3031:27:29"},{"kind":"number","nodeType":"YulLiteral","src":"3060:1:29","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3024:6:29"},"nodeType":"YulFunctionCall","src":"3024:38:29"},"nodeType":"YulExpressionStatement","src":"3024:38:29"},{"nodeType":"YulAssignment","src":"3071:16:29","value":{"name":"array_1","nodeType":"YulIdentifier","src":"3080:7:29"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"3071:5:29"}]}]},"name":"abi_decode_string","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"2656:6:29","type":""},{"name":"end","nodeType":"YulTypedName","src":"2664:3:29","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"2672:5:29","type":""}],"src":"2629:464:29"},{"body":{"nodeType":"YulBlock","src":"3143:109:29","statements":[{"body":{"nodeType":"YulBlock","src":"3230:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3239:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3242:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3232:6:29"},"nodeType":"YulFunctionCall","src":"3232:12:29"},"nodeType":"YulExpressionStatement","src":"3232:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3166:5:29"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3177:5:29"},{"kind":"number","nodeType":"YulLiteral","src":"3184:42:29","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3173:3:29"},"nodeType":"YulFunctionCall","src":"3173:54:29"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"3163:2:29"},"nodeType":"YulFunctionCall","src":"3163:65:29"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3156:6:29"},"nodeType":"YulFunctionCall","src":"3156:73:29"},"nodeType":"YulIf","src":"3153:93:29"}]},"name":"validator_revert_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3132:5:29","type":""}],"src":"3098:154:29"},{"body":{"nodeType":"YulBlock","src":"3304:109:29","statements":[{"nodeType":"YulAssignment","src":"3314:29:29","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3336:6:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3323:12:29"},"nodeType":"YulFunctionCall","src":"3323:20:29"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"3314:5:29"}]},{"body":{"nodeType":"YulBlock","src":"3391:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3400:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3403:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3393:6:29"},"nodeType":"YulFunctionCall","src":"3393:12:29"},"nodeType":"YulExpressionStatement","src":"3393:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3365:5:29"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3376:5:29"},{"kind":"number","nodeType":"YulLiteral","src":"3383:4:29","type":"","value":"0xff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3372:3:29"},"nodeType":"YulFunctionCall","src":"3372:16:29"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"3362:2:29"},"nodeType":"YulFunctionCall","src":"3362:27:29"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3355:6:29"},"nodeType":"YulFunctionCall","src":"3355:35:29"},"nodeType":"YulIf","src":"3352:55:29"}]},"name":"abi_decode_uint8","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"3283:6:29","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"3294:5:29","type":""}],"src":"3257:156:29"},{"body":{"nodeType":"YulBlock","src":"3691:939:29","statements":[{"body":{"nodeType":"YulBlock","src":"3738:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3747:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3750:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3740:6:29"},"nodeType":"YulFunctionCall","src":"3740:12:29"},"nodeType":"YulExpressionStatement","src":"3740:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3712:7:29"},{"name":"headStart","nodeType":"YulIdentifier","src":"3721:9:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3708:3:29"},"nodeType":"YulFunctionCall","src":"3708:23:29"},{"kind":"number","nodeType":"YulLiteral","src":"3733:3:29","type":"","value":"256"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3704:3:29"},"nodeType":"YulFunctionCall","src":"3704:33:29"},"nodeType":"YulIf","src":"3701:53:29"},{"nodeType":"YulVariableDeclaration","src":"3763:37:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3790:9:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3777:12:29"},"nodeType":"YulFunctionCall","src":"3777:23:29"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3767:6:29","type":""}]},{"nodeType":"YulVariableDeclaration","src":"3809:28:29","value":{"kind":"number","nodeType":"YulLiteral","src":"3819:18:29","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"3813:2:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"3864:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3873:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3876:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3866:6:29"},"nodeType":"YulFunctionCall","src":"3866:12:29"},"nodeType":"YulExpressionStatement","src":"3866:12:29"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3852:6:29"},{"name":"_1","nodeType":"YulIdentifier","src":"3860:2:29"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3849:2:29"},"nodeType":"YulFunctionCall","src":"3849:14:29"},"nodeType":"YulIf","src":"3846:34:29"},{"nodeType":"YulVariableDeclaration","src":"3889:127:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3988:9:29"},{"name":"offset","nodeType":"YulIdentifier","src":"3999:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3984:3:29"},"nodeType":"YulFunctionCall","src":"3984:22:29"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4008:7:29"}],"functionName":{"name":"abi_decode_array_struct_MultiRevocationRequest_calldata_dyn_calldata","nodeType":"YulIdentifier","src":"3915:68:29"},"nodeType":"YulFunctionCall","src":"3915:101:29"},"variables":[{"name":"value0_1","nodeType":"YulTypedName","src":"3893:8:29","type":""},{"name":"value1_1","nodeType":"YulTypedName","src":"3903:8:29","type":""}]},{"nodeType":"YulAssignment","src":"4025:18:29","value":{"name":"value0_1","nodeType":"YulIdentifier","src":"4035:8:29"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"4025:6:29"}]},{"nodeType":"YulAssignment","src":"4052:18:29","value":{"name":"value1_1","nodeType":"YulIdentifier","src":"4062:8:29"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"4052:6:29"}]},{"nodeType":"YulVariableDeclaration","src":"4079:48:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4112:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"4123:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4108:3:29"},"nodeType":"YulFunctionCall","src":"4108:18:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4095:12:29"},"nodeType":"YulFunctionCall","src":"4095:32:29"},"variables":[{"name":"offset_1","nodeType":"YulTypedName","src":"4083:8:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"4156:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4165:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4168:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4158:6:29"},"nodeType":"YulFunctionCall","src":"4158:12:29"},"nodeType":"YulExpressionStatement","src":"4158:12:29"}]},"condition":{"arguments":[{"name":"offset_1","nodeType":"YulIdentifier","src":"4142:8:29"},{"name":"_1","nodeType":"YulIdentifier","src":"4152:2:29"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4139:2:29"},"nodeType":"YulFunctionCall","src":"4139:16:29"},"nodeType":"YulIf","src":"4136:36:29"},{"nodeType":"YulAssignment","src":"4181:62:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4213:9:29"},{"name":"offset_1","nodeType":"YulIdentifier","src":"4224:8:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4209:3:29"},"nodeType":"YulFunctionCall","src":"4209:24:29"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4235:7:29"}],"functionName":{"name":"abi_decode_string","nodeType":"YulIdentifier","src":"4191:17:29"},"nodeType":"YulFunctionCall","src":"4191:52:29"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"4181:6:29"}]},{"nodeType":"YulVariableDeclaration","src":"4252:45:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4282:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"4293:2:29","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4278:3:29"},"nodeType":"YulFunctionCall","src":"4278:18:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4265:12:29"},"nodeType":"YulFunctionCall","src":"4265:32:29"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"4256:5:29","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4331:5:29"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"4306:24:29"},"nodeType":"YulFunctionCall","src":"4306:31:29"},"nodeType":"YulExpressionStatement","src":"4306:31:29"},{"nodeType":"YulAssignment","src":"4346:15:29","value":{"name":"value","nodeType":"YulIdentifier","src":"4356:5:29"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"4346:6:29"}]},{"nodeType":"YulAssignment","src":"4370:42:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4397:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"4408:2:29","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4393:3:29"},"nodeType":"YulFunctionCall","src":"4393:18:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4380:12:29"},"nodeType":"YulFunctionCall","src":"4380:32:29"},"variableNames":[{"name":"value4","nodeType":"YulIdentifier","src":"4370:6:29"}]},{"nodeType":"YulAssignment","src":"4421:43:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4448:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"4459:3:29","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4444:3:29"},"nodeType":"YulFunctionCall","src":"4444:19:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4431:12:29"},"nodeType":"YulFunctionCall","src":"4431:33:29"},"variableNames":[{"name":"value5","nodeType":"YulIdentifier","src":"4421:6:29"}]},{"nodeType":"YulAssignment","src":"4473:47:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4504:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"4515:3:29","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4500:3:29"},"nodeType":"YulFunctionCall","src":"4500:19:29"}],"functionName":{"name":"abi_decode_uint8","nodeType":"YulIdentifier","src":"4483:16:29"},"nodeType":"YulFunctionCall","src":"4483:37:29"},"variableNames":[{"name":"value6","nodeType":"YulIdentifier","src":"4473:6:29"}]},{"nodeType":"YulAssignment","src":"4529:43:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4556:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"4567:3:29","type":"","value":"192"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4552:3:29"},"nodeType":"YulFunctionCall","src":"4552:19:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4539:12:29"},"nodeType":"YulFunctionCall","src":"4539:33:29"},"variableNames":[{"name":"value7","nodeType":"YulIdentifier","src":"4529:6:29"}]},{"nodeType":"YulAssignment","src":"4581:43:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4608:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"4619:3:29","type":"","value":"224"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4604:3:29"},"nodeType":"YulFunctionCall","src":"4604:19:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4591:12:29"},"nodeType":"YulFunctionCall","src":"4591:33:29"},"variableNames":[{"name":"value8","nodeType":"YulIdentifier","src":"4581:6:29"}]}]},"name":"abi_decode_tuple_t_array$_t_struct$_MultiRevocationRequest_$147_calldata_ptr_$dyn_calldata_ptrt_string_memory_ptrt_addresst_uint256t_uint256t_uint8t_bytes32t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3593:9:29","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3604:7:29","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3616:6:29","type":""},{"name":"value1","nodeType":"YulTypedName","src":"3624:6:29","type":""},{"name":"value2","nodeType":"YulTypedName","src":"3632:6:29","type":""},{"name":"value3","nodeType":"YulTypedName","src":"3640:6:29","type":""},{"name":"value4","nodeType":"YulTypedName","src":"3648:6:29","type":""},{"name":"value5","nodeType":"YulTypedName","src":"3656:6:29","type":""},{"name":"value6","nodeType":"YulTypedName","src":"3664:6:29","type":""},{"name":"value7","nodeType":"YulTypedName","src":"3672:6:29","type":""},{"name":"value8","nodeType":"YulTypedName","src":"3680:6:29","type":""}],"src":"3418:1212:29"},{"body":{"nodeType":"YulBlock","src":"4909:939:29","statements":[{"body":{"nodeType":"YulBlock","src":"4956:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4965:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4968:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4958:6:29"},"nodeType":"YulFunctionCall","src":"4958:12:29"},"nodeType":"YulExpressionStatement","src":"4958:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"4930:7:29"},{"name":"headStart","nodeType":"YulIdentifier","src":"4939:9:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4926:3:29"},"nodeType":"YulFunctionCall","src":"4926:23:29"},{"kind":"number","nodeType":"YulLiteral","src":"4951:3:29","type":"","value":"256"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4922:3:29"},"nodeType":"YulFunctionCall","src":"4922:33:29"},"nodeType":"YulIf","src":"4919:53:29"},{"nodeType":"YulVariableDeclaration","src":"4981:37:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5008:9:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4995:12:29"},"nodeType":"YulFunctionCall","src":"4995:23:29"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"4985:6:29","type":""}]},{"nodeType":"YulVariableDeclaration","src":"5027:28:29","value":{"kind":"number","nodeType":"YulLiteral","src":"5037:18:29","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"5031:2:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"5082:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5091:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5094:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5084:6:29"},"nodeType":"YulFunctionCall","src":"5084:12:29"},"nodeType":"YulExpressionStatement","src":"5084:12:29"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"5070:6:29"},{"name":"_1","nodeType":"YulIdentifier","src":"5078:2:29"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5067:2:29"},"nodeType":"YulFunctionCall","src":"5067:14:29"},"nodeType":"YulIf","src":"5064:34:29"},{"nodeType":"YulVariableDeclaration","src":"5107:127:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5206:9:29"},{"name":"offset","nodeType":"YulIdentifier","src":"5217:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5202:3:29"},"nodeType":"YulFunctionCall","src":"5202:22:29"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5226:7:29"}],"functionName":{"name":"abi_decode_array_struct_MultiRevocationRequest_calldata_dyn_calldata","nodeType":"YulIdentifier","src":"5133:68:29"},"nodeType":"YulFunctionCall","src":"5133:101:29"},"variables":[{"name":"value0_1","nodeType":"YulTypedName","src":"5111:8:29","type":""},{"name":"value1_1","nodeType":"YulTypedName","src":"5121:8:29","type":""}]},{"nodeType":"YulAssignment","src":"5243:18:29","value":{"name":"value0_1","nodeType":"YulIdentifier","src":"5253:8:29"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"5243:6:29"}]},{"nodeType":"YulAssignment","src":"5270:18:29","value":{"name":"value1_1","nodeType":"YulIdentifier","src":"5280:8:29"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"5270:6:29"}]},{"nodeType":"YulVariableDeclaration","src":"5297:48:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5330:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"5341:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5326:3:29"},"nodeType":"YulFunctionCall","src":"5326:18:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5313:12:29"},"nodeType":"YulFunctionCall","src":"5313:32:29"},"variables":[{"name":"offset_1","nodeType":"YulTypedName","src":"5301:8:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"5374:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5383:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5386:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5376:6:29"},"nodeType":"YulFunctionCall","src":"5376:12:29"},"nodeType":"YulExpressionStatement","src":"5376:12:29"}]},"condition":{"arguments":[{"name":"offset_1","nodeType":"YulIdentifier","src":"5360:8:29"},{"name":"_1","nodeType":"YulIdentifier","src":"5370:2:29"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5357:2:29"},"nodeType":"YulFunctionCall","src":"5357:16:29"},"nodeType":"YulIf","src":"5354:36:29"},{"nodeType":"YulAssignment","src":"5399:62:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5431:9:29"},{"name":"offset_1","nodeType":"YulIdentifier","src":"5442:8:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5427:3:29"},"nodeType":"YulFunctionCall","src":"5427:24:29"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5453:7:29"}],"functionName":{"name":"abi_decode_string","nodeType":"YulIdentifier","src":"5409:17:29"},"nodeType":"YulFunctionCall","src":"5409:52:29"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"5399:6:29"}]},{"nodeType":"YulVariableDeclaration","src":"5470:45:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5500:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"5511:2:29","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5496:3:29"},"nodeType":"YulFunctionCall","src":"5496:18:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5483:12:29"},"nodeType":"YulFunctionCall","src":"5483:32:29"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"5474:5:29","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5549:5:29"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"5524:24:29"},"nodeType":"YulFunctionCall","src":"5524:31:29"},"nodeType":"YulExpressionStatement","src":"5524:31:29"},{"nodeType":"YulAssignment","src":"5564:15:29","value":{"name":"value","nodeType":"YulIdentifier","src":"5574:5:29"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"5564:6:29"}]},{"nodeType":"YulAssignment","src":"5588:42:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5615:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"5626:2:29","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5611:3:29"},"nodeType":"YulFunctionCall","src":"5611:18:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5598:12:29"},"nodeType":"YulFunctionCall","src":"5598:32:29"},"variableNames":[{"name":"value4","nodeType":"YulIdentifier","src":"5588:6:29"}]},{"nodeType":"YulAssignment","src":"5639:43:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5666:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"5677:3:29","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5662:3:29"},"nodeType":"YulFunctionCall","src":"5662:19:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5649:12:29"},"nodeType":"YulFunctionCall","src":"5649:33:29"},"variableNames":[{"name":"value5","nodeType":"YulIdentifier","src":"5639:6:29"}]},{"nodeType":"YulAssignment","src":"5691:47:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5722:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"5733:3:29","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5718:3:29"},"nodeType":"YulFunctionCall","src":"5718:19:29"}],"functionName":{"name":"abi_decode_uint8","nodeType":"YulIdentifier","src":"5701:16:29"},"nodeType":"YulFunctionCall","src":"5701:37:29"},"variableNames":[{"name":"value6","nodeType":"YulIdentifier","src":"5691:6:29"}]},{"nodeType":"YulAssignment","src":"5747:43:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5774:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"5785:3:29","type":"","value":"192"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5770:3:29"},"nodeType":"YulFunctionCall","src":"5770:19:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5757:12:29"},"nodeType":"YulFunctionCall","src":"5757:33:29"},"variableNames":[{"name":"value7","nodeType":"YulIdentifier","src":"5747:6:29"}]},{"nodeType":"YulAssignment","src":"5799:43:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5826:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"5837:3:29","type":"","value":"224"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5822:3:29"},"nodeType":"YulFunctionCall","src":"5822:19:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5809:12:29"},"nodeType":"YulFunctionCall","src":"5809:33:29"},"variableNames":[{"name":"value8","nodeType":"YulIdentifier","src":"5799:6:29"}]}]},"name":"abi_decode_tuple_t_array$_t_struct$_AttestationRequestNode_$5232_calldata_ptr_$dyn_calldata_ptrt_string_memory_ptrt_addresst_uint256t_uint256t_uint8t_bytes32t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4811:9:29","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"4822:7:29","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"4834:6:29","type":""},{"name":"value1","nodeType":"YulTypedName","src":"4842:6:29","type":""},{"name":"value2","nodeType":"YulTypedName","src":"4850:6:29","type":""},{"name":"value3","nodeType":"YulTypedName","src":"4858:6:29","type":""},{"name":"value4","nodeType":"YulTypedName","src":"4866:6:29","type":""},{"name":"value5","nodeType":"YulTypedName","src":"4874:6:29","type":""},{"name":"value6","nodeType":"YulTypedName","src":"4882:6:29","type":""},{"name":"value7","nodeType":"YulTypedName","src":"4890:6:29","type":""},{"name":"value8","nodeType":"YulTypedName","src":"4898:6:29","type":""}],"src":"4635:1213:29"},{"body":{"nodeType":"YulBlock","src":"6016:504:29","statements":[{"body":{"nodeType":"YulBlock","src":"6063:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6072:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6075:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6065:6:29"},"nodeType":"YulFunctionCall","src":"6065:12:29"},"nodeType":"YulExpressionStatement","src":"6065:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"6037:7:29"},{"name":"headStart","nodeType":"YulIdentifier","src":"6046:9:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6033:3:29"},"nodeType":"YulFunctionCall","src":"6033:23:29"},{"kind":"number","nodeType":"YulLiteral","src":"6058:3:29","type":"","value":"192"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"6029:3:29"},"nodeType":"YulFunctionCall","src":"6029:33:29"},"nodeType":"YulIf","src":"6026:53:29"},{"nodeType":"YulVariableDeclaration","src":"6088:37:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6115:9:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"6102:12:29"},"nodeType":"YulFunctionCall","src":"6102:23:29"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"6092:6:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"6168:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6177:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6180:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6170:6:29"},"nodeType":"YulFunctionCall","src":"6170:12:29"},"nodeType":"YulExpressionStatement","src":"6170:12:29"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"6140:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"6148:18:29","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"6137:2:29"},"nodeType":"YulFunctionCall","src":"6137:30:29"},"nodeType":"YulIf","src":"6134:50:29"},{"nodeType":"YulAssignment","src":"6193:60:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6225:9:29"},{"name":"offset","nodeType":"YulIdentifier","src":"6236:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6221:3:29"},"nodeType":"YulFunctionCall","src":"6221:22:29"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"6245:7:29"}],"functionName":{"name":"abi_decode_string","nodeType":"YulIdentifier","src":"6203:17:29"},"nodeType":"YulFunctionCall","src":"6203:50:29"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"6193:6:29"}]},{"nodeType":"YulAssignment","src":"6262:42:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6289:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"6300:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6285:3:29"},"nodeType":"YulFunctionCall","src":"6285:18:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"6272:12:29"},"nodeType":"YulFunctionCall","src":"6272:32:29"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"6262:6:29"}]},{"nodeType":"YulAssignment","src":"6313:42:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6340:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"6351:2:29","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6336:3:29"},"nodeType":"YulFunctionCall","src":"6336:18:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"6323:12:29"},"nodeType":"YulFunctionCall","src":"6323:32:29"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"6313:6:29"}]},{"nodeType":"YulAssignment","src":"6364:46:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6395:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"6406:2:29","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6391:3:29"},"nodeType":"YulFunctionCall","src":"6391:18:29"}],"functionName":{"name":"abi_decode_uint8","nodeType":"YulIdentifier","src":"6374:16:29"},"nodeType":"YulFunctionCall","src":"6374:36:29"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"6364:6:29"}]},{"nodeType":"YulAssignment","src":"6419:43:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6446:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"6457:3:29","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6442:3:29"},"nodeType":"YulFunctionCall","src":"6442:19:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"6429:12:29"},"nodeType":"YulFunctionCall","src":"6429:33:29"},"variableNames":[{"name":"value4","nodeType":"YulIdentifier","src":"6419:6:29"}]},{"nodeType":"YulAssignment","src":"6471:43:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6498:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"6509:3:29","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6494:3:29"},"nodeType":"YulFunctionCall","src":"6494:19:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"6481:12:29"},"nodeType":"YulFunctionCall","src":"6481:33:29"},"variableNames":[{"name":"value5","nodeType":"YulIdentifier","src":"6471:6:29"}]}]},"name":"abi_decode_tuple_t_string_memory_ptrt_uint256t_uint256t_uint8t_bytes32t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5942:9:29","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"5953:7:29","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"5965:6:29","type":""},{"name":"value1","nodeType":"YulTypedName","src":"5973:6:29","type":""},{"name":"value2","nodeType":"YulTypedName","src":"5981:6:29","type":""},{"name":"value3","nodeType":"YulTypedName","src":"5989:6:29","type":""},{"name":"value4","nodeType":"YulTypedName","src":"5997:6:29","type":""},{"name":"value5","nodeType":"YulTypedName","src":"6005:6:29","type":""}],"src":"5853:667:29"},{"body":{"nodeType":"YulBlock","src":"6626:125:29","statements":[{"nodeType":"YulAssignment","src":"6636:26:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6648:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"6659:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6644:3:29"},"nodeType":"YulFunctionCall","src":"6644:18:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"6636:4:29"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6678:9:29"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"6693:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"6701:42:29","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"6689:3:29"},"nodeType":"YulFunctionCall","src":"6689:55:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6671:6:29"},"nodeType":"YulFunctionCall","src":"6671:74:29"},"nodeType":"YulExpressionStatement","src":"6671:74:29"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6595:9:29","type":""},{"name":"value0","nodeType":"YulTypedName","src":"6606:6:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"6617:4:29","type":""}],"src":"6525:226:29"},{"body":{"nodeType":"YulBlock","src":"6857:76:29","statements":[{"nodeType":"YulAssignment","src":"6867:26:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6879:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"6890:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6875:3:29"},"nodeType":"YulFunctionCall","src":"6875:18:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"6867:4:29"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6909:9:29"},{"name":"value0","nodeType":"YulIdentifier","src":"6920:6:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6902:6:29"},"nodeType":"YulFunctionCall","src":"6902:25:29"},"nodeType":"YulExpressionStatement","src":"6902:25:29"}]},"name":"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6826:9:29","type":""},{"name":"value0","nodeType":"YulTypedName","src":"6837:6:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"6848:4:29","type":""}],"src":"6756:177:29"},{"body":{"nodeType":"YulBlock","src":"7008:177:29","statements":[{"body":{"nodeType":"YulBlock","src":"7054:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7063:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7066:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7056:6:29"},"nodeType":"YulFunctionCall","src":"7056:12:29"},"nodeType":"YulExpressionStatement","src":"7056:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"7029:7:29"},{"name":"headStart","nodeType":"YulIdentifier","src":"7038:9:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"7025:3:29"},"nodeType":"YulFunctionCall","src":"7025:23:29"},{"kind":"number","nodeType":"YulLiteral","src":"7050:2:29","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"7021:3:29"},"nodeType":"YulFunctionCall","src":"7021:32:29"},"nodeType":"YulIf","src":"7018:52:29"},{"nodeType":"YulVariableDeclaration","src":"7079:36:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7105:9:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"7092:12:29"},"nodeType":"YulFunctionCall","src":"7092:23:29"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"7083:5:29","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7149:5:29"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"7124:24:29"},"nodeType":"YulFunctionCall","src":"7124:31:29"},"nodeType":"YulExpressionStatement","src":"7124:31:29"},{"nodeType":"YulAssignment","src":"7164:15:29","value":{"name":"value","nodeType":"YulIdentifier","src":"7174:5:29"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"7164:6:29"}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6974:9:29","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"6985:7:29","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"6997:6:29","type":""}],"src":"6938:247:29"},{"body":{"nodeType":"YulBlock","src":"7291:76:29","statements":[{"nodeType":"YulAssignment","src":"7301:26:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7313:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"7324:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7309:3:29"},"nodeType":"YulFunctionCall","src":"7309:18:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"7301:4:29"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7343:9:29"},{"name":"value0","nodeType":"YulIdentifier","src":"7354:6:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7336:6:29"},"nodeType":"YulFunctionCall","src":"7336:25:29"},"nodeType":"YulExpressionStatement","src":"7336:25:29"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7260:9:29","type":""},{"name":"value0","nodeType":"YulTypedName","src":"7271:6:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"7282:4:29","type":""}],"src":"7190:177:29"},{"body":{"nodeType":"YulBlock","src":"7485:125:29","statements":[{"nodeType":"YulAssignment","src":"7495:26:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7507:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"7518:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7503:3:29"},"nodeType":"YulFunctionCall","src":"7503:18:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"7495:4:29"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7537:9:29"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"7552:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"7560:42:29","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"7548:3:29"},"nodeType":"YulFunctionCall","src":"7548:55:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7530:6:29"},"nodeType":"YulFunctionCall","src":"7530:74:29"},"nodeType":"YulExpressionStatement","src":"7530:74:29"}]},"name":"abi_encode_tuple_t_contract$_IEAS_$346__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7454:9:29","type":""},{"name":"value0","nodeType":"YulTypedName","src":"7465:6:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"7476:4:29","type":""}],"src":"7372:238:29"},{"body":{"nodeType":"YulBlock","src":"7681:184:29","statements":[{"nodeType":"YulVariableDeclaration","src":"7691:10:29","value":{"kind":"number","nodeType":"YulLiteral","src":"7700:1:29","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"7695:1:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"7760:63:29","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"7785:3:29"},{"name":"i","nodeType":"YulIdentifier","src":"7790:1:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7781:3:29"},"nodeType":"YulFunctionCall","src":"7781:11:29"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"7804:3:29"},{"name":"i","nodeType":"YulIdentifier","src":"7809:1:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7800:3:29"},"nodeType":"YulFunctionCall","src":"7800:11:29"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"7794:5:29"},"nodeType":"YulFunctionCall","src":"7794:18:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7774:6:29"},"nodeType":"YulFunctionCall","src":"7774:39:29"},"nodeType":"YulExpressionStatement","src":"7774:39:29"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"7721:1:29"},{"name":"length","nodeType":"YulIdentifier","src":"7724:6:29"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"7718:2:29"},"nodeType":"YulFunctionCall","src":"7718:13:29"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"7732:19:29","statements":[{"nodeType":"YulAssignment","src":"7734:15:29","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"7743:1:29"},{"kind":"number","nodeType":"YulLiteral","src":"7746:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7739:3:29"},"nodeType":"YulFunctionCall","src":"7739:10:29"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"7734:1:29"}]}]},"pre":{"nodeType":"YulBlock","src":"7714:3:29","statements":[]},"src":"7710:113:29"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"7843:3:29"},{"name":"length","nodeType":"YulIdentifier","src":"7848:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7839:3:29"},"nodeType":"YulFunctionCall","src":"7839:16:29"},{"kind":"number","nodeType":"YulLiteral","src":"7857:1:29","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7832:6:29"},"nodeType":"YulFunctionCall","src":"7832:27:29"},"nodeType":"YulExpressionStatement","src":"7832:27:29"}]},"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"7659:3:29","type":""},{"name":"dst","nodeType":"YulTypedName","src":"7664:3:29","type":""},{"name":"length","nodeType":"YulTypedName","src":"7669:6:29","type":""}],"src":"7615:250:29"},{"body":{"nodeType":"YulBlock","src":"7920:221:29","statements":[{"nodeType":"YulVariableDeclaration","src":"7930:26:29","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7950:5:29"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"7944:5:29"},"nodeType":"YulFunctionCall","src":"7944:12:29"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"7934:6:29","type":""}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7972:3:29"},{"name":"length","nodeType":"YulIdentifier","src":"7977:6:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7965:6:29"},"nodeType":"YulFunctionCall","src":"7965:19:29"},"nodeType":"YulExpressionStatement","src":"7965:19:29"},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"8032:5:29"},{"kind":"number","nodeType":"YulLiteral","src":"8039:4:29","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8028:3:29"},"nodeType":"YulFunctionCall","src":"8028:16:29"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"8050:3:29"},{"kind":"number","nodeType":"YulLiteral","src":"8055:4:29","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8046:3:29"},"nodeType":"YulFunctionCall","src":"8046:14:29"},{"name":"length","nodeType":"YulIdentifier","src":"8062:6:29"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"7993:34:29"},"nodeType":"YulFunctionCall","src":"7993:76:29"},"nodeType":"YulExpressionStatement","src":"7993:76:29"},{"nodeType":"YulAssignment","src":"8078:57:29","value":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"8093:3:29"},{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"8106:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"8114:2:29","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8102:3:29"},"nodeType":"YulFunctionCall","src":"8102:15:29"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8123:2:29","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"8119:3:29"},"nodeType":"YulFunctionCall","src":"8119:7:29"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"8098:3:29"},"nodeType":"YulFunctionCall","src":"8098:29:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8089:3:29"},"nodeType":"YulFunctionCall","src":"8089:39:29"},{"kind":"number","nodeType":"YulLiteral","src":"8130:4:29","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8085:3:29"},"nodeType":"YulFunctionCall","src":"8085:50:29"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"8078:3:29"}]}]},"name":"abi_encode_string","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"7897:5:29","type":""},{"name":"pos","nodeType":"YulTypedName","src":"7904:3:29","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"7912:3:29","type":""}],"src":"7870:271:29"},{"body":{"nodeType":"YulBlock","src":"8503:978:29","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8520:9:29"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"8535:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"8543:66:29","type":"","value":"0xff00000000000000000000000000000000000000000000000000000000000000"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"8531:3:29"},"nodeType":"YulFunctionCall","src":"8531:79:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8513:6:29"},"nodeType":"YulFunctionCall","src":"8513:98:29"},"nodeType":"YulExpressionStatement","src":"8513:98:29"},{"nodeType":"YulVariableDeclaration","src":"8620:12:29","value":{"kind":"number","nodeType":"YulLiteral","src":"8630:2:29","type":"","value":"32"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"8624:2:29","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8652:9:29"},{"name":"_1","nodeType":"YulIdentifier","src":"8663:2:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8648:3:29"},"nodeType":"YulFunctionCall","src":"8648:18:29"},{"kind":"number","nodeType":"YulLiteral","src":"8668:3:29","type":"","value":"224"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8641:6:29"},"nodeType":"YulFunctionCall","src":"8641:31:29"},"nodeType":"YulExpressionStatement","src":"8641:31:29"},{"nodeType":"YulVariableDeclaration","src":"8681:60:29","value":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"8713:6:29"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8725:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"8736:3:29","type":"","value":"224"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8721:3:29"},"nodeType":"YulFunctionCall","src":"8721:19:29"}],"functionName":{"name":"abi_encode_string","nodeType":"YulIdentifier","src":"8695:17:29"},"nodeType":"YulFunctionCall","src":"8695:46:29"},"variables":[{"name":"tail_1","nodeType":"YulTypedName","src":"8685:6:29","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8761:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"8772:2:29","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8757:3:29"},"nodeType":"YulFunctionCall","src":"8757:18:29"},{"arguments":[{"name":"tail_1","nodeType":"YulIdentifier","src":"8781:6:29"},{"name":"headStart","nodeType":"YulIdentifier","src":"8789:9:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"8777:3:29"},"nodeType":"YulFunctionCall","src":"8777:22:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8750:6:29"},"nodeType":"YulFunctionCall","src":"8750:50:29"},"nodeType":"YulExpressionStatement","src":"8750:50:29"},{"nodeType":"YulVariableDeclaration","src":"8809:47:29","value":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"8841:6:29"},{"name":"tail_1","nodeType":"YulIdentifier","src":"8849:6:29"}],"functionName":{"name":"abi_encode_string","nodeType":"YulIdentifier","src":"8823:17:29"},"nodeType":"YulFunctionCall","src":"8823:33:29"},"variables":[{"name":"tail_2","nodeType":"YulTypedName","src":"8813:6:29","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8876:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"8887:2:29","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8872:3:29"},"nodeType":"YulFunctionCall","src":"8872:18:29"},{"name":"value3","nodeType":"YulIdentifier","src":"8892:6:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8865:6:29"},"nodeType":"YulFunctionCall","src":"8865:34:29"},"nodeType":"YulExpressionStatement","src":"8865:34:29"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8919:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"8930:3:29","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8915:3:29"},"nodeType":"YulFunctionCall","src":"8915:19:29"},{"arguments":[{"name":"value4","nodeType":"YulIdentifier","src":"8940:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"8948:42:29","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"8936:3:29"},"nodeType":"YulFunctionCall","src":"8936:55:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8908:6:29"},"nodeType":"YulFunctionCall","src":"8908:84:29"},"nodeType":"YulExpressionStatement","src":"8908:84:29"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9012:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"9023:3:29","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9008:3:29"},"nodeType":"YulFunctionCall","src":"9008:19:29"},{"name":"value5","nodeType":"YulIdentifier","src":"9029:6:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9001:6:29"},"nodeType":"YulFunctionCall","src":"9001:35:29"},"nodeType":"YulExpressionStatement","src":"9001:35:29"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9056:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"9067:3:29","type":"","value":"192"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9052:3:29"},"nodeType":"YulFunctionCall","src":"9052:19:29"},{"arguments":[{"name":"tail_2","nodeType":"YulIdentifier","src":"9077:6:29"},{"name":"headStart","nodeType":"YulIdentifier","src":"9085:9:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"9073:3:29"},"nodeType":"YulFunctionCall","src":"9073:22:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9045:6:29"},"nodeType":"YulFunctionCall","src":"9045:51:29"},"nodeType":"YulExpressionStatement","src":"9045:51:29"},{"nodeType":"YulVariableDeclaration","src":"9105:17:29","value":{"name":"tail_2","nodeType":"YulIdentifier","src":"9116:6:29"},"variables":[{"name":"pos","nodeType":"YulTypedName","src":"9109:3:29","type":""}]},{"nodeType":"YulVariableDeclaration","src":"9131:27:29","value":{"arguments":[{"name":"value6","nodeType":"YulIdentifier","src":"9151:6:29"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"9145:5:29"},"nodeType":"YulFunctionCall","src":"9145:13:29"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"9135:6:29","type":""}]},{"expression":{"arguments":[{"name":"tail_2","nodeType":"YulIdentifier","src":"9174:6:29"},{"name":"length","nodeType":"YulIdentifier","src":"9182:6:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9167:6:29"},"nodeType":"YulFunctionCall","src":"9167:22:29"},"nodeType":"YulExpressionStatement","src":"9167:22:29"},{"nodeType":"YulAssignment","src":"9198:22:29","value":{"arguments":[{"name":"tail_2","nodeType":"YulIdentifier","src":"9209:6:29"},{"name":"_1","nodeType":"YulIdentifier","src":"9217:2:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9205:3:29"},"nodeType":"YulFunctionCall","src":"9205:15:29"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"9198:3:29"}]},{"nodeType":"YulVariableDeclaration","src":"9229:29:29","value":{"arguments":[{"name":"value6","nodeType":"YulIdentifier","src":"9247:6:29"},{"name":"_1","nodeType":"YulIdentifier","src":"9255:2:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9243:3:29"},"nodeType":"YulFunctionCall","src":"9243:15:29"},"variables":[{"name":"srcPtr","nodeType":"YulTypedName","src":"9233:6:29","type":""}]},{"nodeType":"YulVariableDeclaration","src":"9267:10:29","value":{"kind":"number","nodeType":"YulLiteral","src":"9276:1:29","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"9271:1:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"9335:120:29","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9356:3:29"},{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"9367:6:29"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"9361:5:29"},"nodeType":"YulFunctionCall","src":"9361:13:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9349:6:29"},"nodeType":"YulFunctionCall","src":"9349:26:29"},"nodeType":"YulExpressionStatement","src":"9349:26:29"},{"nodeType":"YulAssignment","src":"9388:19:29","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9399:3:29"},{"name":"_1","nodeType":"YulIdentifier","src":"9404:2:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9395:3:29"},"nodeType":"YulFunctionCall","src":"9395:12:29"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"9388:3:29"}]},{"nodeType":"YulAssignment","src":"9420:25:29","value":{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"9434:6:29"},{"name":"_1","nodeType":"YulIdentifier","src":"9442:2:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9430:3:29"},"nodeType":"YulFunctionCall","src":"9430:15:29"},"variableNames":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"9420:6:29"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"9297:1:29"},{"name":"length","nodeType":"YulIdentifier","src":"9300:6:29"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"9294:2:29"},"nodeType":"YulFunctionCall","src":"9294:13:29"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"9308:18:29","statements":[{"nodeType":"YulAssignment","src":"9310:14:29","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"9319:1:29"},{"kind":"number","nodeType":"YulLiteral","src":"9322:1:29","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9315:3:29"},"nodeType":"YulFunctionCall","src":"9315:9:29"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"9310:1:29"}]}]},"pre":{"nodeType":"YulBlock","src":"9290:3:29","statements":[]},"src":"9286:169:29"},{"nodeType":"YulAssignment","src":"9464:11:29","value":{"name":"pos","nodeType":"YulIdentifier","src":"9472:3:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"9464:4:29"}]}]},"name":"abi_encode_tuple_t_bytes1_t_string_memory_ptr_t_string_memory_ptr_t_uint256_t_address_t_bytes32_t_array$_t_uint256_$dyn_memory_ptr__to_t_bytes1_t_string_memory_ptr_t_string_memory_ptr_t_uint256_t_address_t_bytes32_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8424:9:29","type":""},{"name":"value6","nodeType":"YulTypedName","src":"8435:6:29","type":""},{"name":"value5","nodeType":"YulTypedName","src":"8443:6:29","type":""},{"name":"value4","nodeType":"YulTypedName","src":"8451:6:29","type":""},{"name":"value3","nodeType":"YulTypedName","src":"8459:6:29","type":""},{"name":"value2","nodeType":"YulTypedName","src":"8467:6:29","type":""},{"name":"value1","nodeType":"YulTypedName","src":"8475:6:29","type":""},{"name":"value0","nodeType":"YulTypedName","src":"8483:6:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"8494:4:29","type":""}],"src":"8146:1335:29"},{"body":{"nodeType":"YulBlock","src":"9567:85:29","statements":[{"body":{"nodeType":"YulBlock","src":"9606:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9615:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9618:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9608:6:29"},"nodeType":"YulFunctionCall","src":"9608:12:29"},"nodeType":"YulExpressionStatement","src":"9608:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"end","nodeType":"YulIdentifier","src":"9588:3:29"},{"name":"offset","nodeType":"YulIdentifier","src":"9593:6:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"9584:3:29"},"nodeType":"YulFunctionCall","src":"9584:16:29"},{"kind":"number","nodeType":"YulLiteral","src":"9602:2:29","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"9580:3:29"},"nodeType":"YulFunctionCall","src":"9580:25:29"},"nodeType":"YulIf","src":"9577:45:29"},{"nodeType":"YulAssignment","src":"9631:15:29","value":{"name":"offset","nodeType":"YulIdentifier","src":"9640:6:29"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"9631:5:29"}]}]},"name":"abi_decode_struct_AttestationRequest_calldata","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"9541:6:29","type":""},{"name":"end","nodeType":"YulTypedName","src":"9549:3:29","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"9557:5:29","type":""}],"src":"9486:166:29"},{"body":{"nodeType":"YulBlock","src":"9890:846:29","statements":[{"body":{"nodeType":"YulBlock","src":"9937:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9946:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9949:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9939:6:29"},"nodeType":"YulFunctionCall","src":"9939:12:29"},"nodeType":"YulExpressionStatement","src":"9939:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"9911:7:29"},{"name":"headStart","nodeType":"YulIdentifier","src":"9920:9:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"9907:3:29"},"nodeType":"YulFunctionCall","src":"9907:23:29"},{"kind":"number","nodeType":"YulLiteral","src":"9932:3:29","type":"","value":"256"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"9903:3:29"},"nodeType":"YulFunctionCall","src":"9903:33:29"},"nodeType":"YulIf","src":"9900:53:29"},{"nodeType":"YulVariableDeclaration","src":"9962:37:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9989:9:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"9976:12:29"},"nodeType":"YulFunctionCall","src":"9976:23:29"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"9966:6:29","type":""}]},{"nodeType":"YulVariableDeclaration","src":"10008:28:29","value":{"kind":"number","nodeType":"YulLiteral","src":"10018:18:29","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"10012:2:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"10063:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10072:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"10075:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"10065:6:29"},"nodeType":"YulFunctionCall","src":"10065:12:29"},"nodeType":"YulExpressionStatement","src":"10065:12:29"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"10051:6:29"},{"name":"_1","nodeType":"YulIdentifier","src":"10059:2:29"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"10048:2:29"},"nodeType":"YulFunctionCall","src":"10048:14:29"},"nodeType":"YulIf","src":"10045:34:29"},{"nodeType":"YulAssignment","src":"10088:88:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10148:9:29"},{"name":"offset","nodeType":"YulIdentifier","src":"10159:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10144:3:29"},"nodeType":"YulFunctionCall","src":"10144:22:29"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"10168:7:29"}],"functionName":{"name":"abi_decode_struct_AttestationRequest_calldata","nodeType":"YulIdentifier","src":"10098:45:29"},"nodeType":"YulFunctionCall","src":"10098:78:29"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"10088:6:29"}]},{"nodeType":"YulVariableDeclaration","src":"10185:48:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10218:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"10229:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10214:3:29"},"nodeType":"YulFunctionCall","src":"10214:18:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"10201:12:29"},"nodeType":"YulFunctionCall","src":"10201:32:29"},"variables":[{"name":"offset_1","nodeType":"YulTypedName","src":"10189:8:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"10262:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10271:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"10274:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"10264:6:29"},"nodeType":"YulFunctionCall","src":"10264:12:29"},"nodeType":"YulExpressionStatement","src":"10264:12:29"}]},"condition":{"arguments":[{"name":"offset_1","nodeType":"YulIdentifier","src":"10248:8:29"},{"name":"_1","nodeType":"YulIdentifier","src":"10258:2:29"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"10245:2:29"},"nodeType":"YulFunctionCall","src":"10245:16:29"},"nodeType":"YulIf","src":"10242:36:29"},{"nodeType":"YulAssignment","src":"10287:62:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10319:9:29"},{"name":"offset_1","nodeType":"YulIdentifier","src":"10330:8:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10315:3:29"},"nodeType":"YulFunctionCall","src":"10315:24:29"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"10341:7:29"}],"functionName":{"name":"abi_decode_string","nodeType":"YulIdentifier","src":"10297:17:29"},"nodeType":"YulFunctionCall","src":"10297:52:29"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"10287:6:29"}]},{"nodeType":"YulVariableDeclaration","src":"10358:45:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10388:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"10399:2:29","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10384:3:29"},"nodeType":"YulFunctionCall","src":"10384:18:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"10371:12:29"},"nodeType":"YulFunctionCall","src":"10371:32:29"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"10362:5:29","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"10437:5:29"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"10412:24:29"},"nodeType":"YulFunctionCall","src":"10412:31:29"},"nodeType":"YulExpressionStatement","src":"10412:31:29"},{"nodeType":"YulAssignment","src":"10452:15:29","value":{"name":"value","nodeType":"YulIdentifier","src":"10462:5:29"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"10452:6:29"}]},{"nodeType":"YulAssignment","src":"10476:42:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10503:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"10514:2:29","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10499:3:29"},"nodeType":"YulFunctionCall","src":"10499:18:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"10486:12:29"},"nodeType":"YulFunctionCall","src":"10486:32:29"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"10476:6:29"}]},{"nodeType":"YulAssignment","src":"10527:43:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10554:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"10565:3:29","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10550:3:29"},"nodeType":"YulFunctionCall","src":"10550:19:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"10537:12:29"},"nodeType":"YulFunctionCall","src":"10537:33:29"},"variableNames":[{"name":"value4","nodeType":"YulIdentifier","src":"10527:6:29"}]},{"nodeType":"YulAssignment","src":"10579:47:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10610:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"10621:3:29","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10606:3:29"},"nodeType":"YulFunctionCall","src":"10606:19:29"}],"functionName":{"name":"abi_decode_uint8","nodeType":"YulIdentifier","src":"10589:16:29"},"nodeType":"YulFunctionCall","src":"10589:37:29"},"variableNames":[{"name":"value5","nodeType":"YulIdentifier","src":"10579:6:29"}]},{"nodeType":"YulAssignment","src":"10635:43:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10662:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"10673:3:29","type":"","value":"192"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10658:3:29"},"nodeType":"YulFunctionCall","src":"10658:19:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"10645:12:29"},"nodeType":"YulFunctionCall","src":"10645:33:29"},"variableNames":[{"name":"value6","nodeType":"YulIdentifier","src":"10635:6:29"}]},{"nodeType":"YulAssignment","src":"10687:43:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10714:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"10725:3:29","type":"","value":"224"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10710:3:29"},"nodeType":"YulFunctionCall","src":"10710:19:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"10697:12:29"},"nodeType":"YulFunctionCall","src":"10697:33:29"},"variableNames":[{"name":"value7","nodeType":"YulIdentifier","src":"10687:6:29"}]}]},"name":"abi_decode_tuple_t_struct$_AttestationRequest_$87_calldata_ptrt_string_memory_ptrt_addresst_uint256t_uint256t_uint8t_bytes32t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9800:9:29","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"9811:7:29","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"9823:6:29","type":""},{"name":"value1","nodeType":"YulTypedName","src":"9831:6:29","type":""},{"name":"value2","nodeType":"YulTypedName","src":"9839:6:29","type":""},{"name":"value3","nodeType":"YulTypedName","src":"9847:6:29","type":""},{"name":"value4","nodeType":"YulTypedName","src":"9855:6:29","type":""},{"name":"value5","nodeType":"YulTypedName","src":"9863:6:29","type":""},{"name":"value6","nodeType":"YulTypedName","src":"9871:6:29","type":""},{"name":"value7","nodeType":"YulTypedName","src":"9879:6:29","type":""}],"src":"9657:1079:29"},{"body":{"nodeType":"YulBlock","src":"10847:270:29","statements":[{"body":{"nodeType":"YulBlock","src":"10893:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10902:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"10905:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"10895:6:29"},"nodeType":"YulFunctionCall","src":"10895:12:29"},"nodeType":"YulExpressionStatement","src":"10895:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"10868:7:29"},{"name":"headStart","nodeType":"YulIdentifier","src":"10877:9:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"10864:3:29"},"nodeType":"YulFunctionCall","src":"10864:23:29"},{"kind":"number","nodeType":"YulLiteral","src":"10889:2:29","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"10860:3:29"},"nodeType":"YulFunctionCall","src":"10860:32:29"},"nodeType":"YulIf","src":"10857:52:29"},{"nodeType":"YulVariableDeclaration","src":"10918:37:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10945:9:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"10932:12:29"},"nodeType":"YulFunctionCall","src":"10932:23:29"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"10922:6:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"10998:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11007:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"11010:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"11000:6:29"},"nodeType":"YulFunctionCall","src":"11000:12:29"},"nodeType":"YulExpressionStatement","src":"11000:12:29"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"10970:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"10978:18:29","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"10967:2:29"},"nodeType":"YulFunctionCall","src":"10967:30:29"},"nodeType":"YulIf","src":"10964:50:29"},{"nodeType":"YulAssignment","src":"11023:88:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11083:9:29"},{"name":"offset","nodeType":"YulIdentifier","src":"11094:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11079:3:29"},"nodeType":"YulFunctionCall","src":"11079:22:29"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"11103:7:29"}],"functionName":{"name":"abi_decode_struct_AttestationRequest_calldata","nodeType":"YulIdentifier","src":"11033:45:29"},"nodeType":"YulFunctionCall","src":"11033:78:29"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"11023:6:29"}]}]},"name":"abi_decode_tuple_t_struct$_AttestationRequest_$87_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"10813:9:29","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"10824:7:29","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"10836:6:29","type":""}],"src":"10741:376:29"},{"body":{"nodeType":"YulBlock","src":"11154:152:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11171:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"11174:77:29","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11164:6:29"},"nodeType":"YulFunctionCall","src":"11164:88:29"},"nodeType":"YulExpressionStatement","src":"11164:88:29"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11268:1:29","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"11271:4:29","type":"","value":"0x32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11261:6:29"},"nodeType":"YulFunctionCall","src":"11261:15:29"},"nodeType":"YulExpressionStatement","src":"11261:15:29"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11292:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"11295:4:29","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"11285:6:29"},"nodeType":"YulFunctionCall","src":"11285:15:29"},"nodeType":"YulExpressionStatement","src":"11285:15:29"}]},"name":"panic_error_0x32","nodeType":"YulFunctionDefinition","src":"11122:184:29"},{"body":{"nodeType":"YulBlock","src":"11427:222:29","statements":[{"nodeType":"YulVariableDeclaration","src":"11437:51:29","value":{"arguments":[{"name":"ptr_to_tail","nodeType":"YulIdentifier","src":"11476:11:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"11463:12:29"},"nodeType":"YulFunctionCall","src":"11463:25:29"},"variables":[{"name":"rel_offset_of_tail","nodeType":"YulTypedName","src":"11441:18:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"11577:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11586:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"11589:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"11579:6:29"},"nodeType":"YulFunctionCall","src":"11579:12:29"},"nodeType":"YulExpressionStatement","src":"11579:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"rel_offset_of_tail","nodeType":"YulIdentifier","src":"11511:18:29"},{"arguments":[{"arguments":[{"arguments":[],"functionName":{"name":"calldatasize","nodeType":"YulIdentifier","src":"11539:12:29"},"nodeType":"YulFunctionCall","src":"11539:14:29"},{"name":"base_ref","nodeType":"YulIdentifier","src":"11555:8:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"11535:3:29"},"nodeType":"YulFunctionCall","src":"11535:29:29"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11570:2:29","type":"","value":"62"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"11566:3:29"},"nodeType":"YulFunctionCall","src":"11566:7:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11531:3:29"},"nodeType":"YulFunctionCall","src":"11531:43:29"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"11507:3:29"},"nodeType":"YulFunctionCall","src":"11507:68:29"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"11500:6:29"},"nodeType":"YulFunctionCall","src":"11500:76:29"},"nodeType":"YulIf","src":"11497:96:29"},{"nodeType":"YulAssignment","src":"11602:41:29","value":{"arguments":[{"name":"base_ref","nodeType":"YulIdentifier","src":"11614:8:29"},{"name":"rel_offset_of_tail","nodeType":"YulIdentifier","src":"11624:18:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11610:3:29"},"nodeType":"YulFunctionCall","src":"11610:33:29"},"variableNames":[{"name":"addr","nodeType":"YulIdentifier","src":"11602:4:29"}]}]},"name":"access_calldata_tail_t_struct$_MultiRevocationRequest_$147_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"base_ref","nodeType":"YulTypedName","src":"11392:8:29","type":""},{"name":"ptr_to_tail","nodeType":"YulTypedName","src":"11402:11:29","type":""}],"returnVariables":[{"name":"addr","nodeType":"YulTypedName","src":"11418:4:29","type":""}],"src":"11311:338:29"},{"body":{"nodeType":"YulBlock","src":"11744:114:29","statements":[{"body":{"nodeType":"YulBlock","src":"11788:22:29","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"11790:16:29"},"nodeType":"YulFunctionCall","src":"11790:18:29"},"nodeType":"YulExpressionStatement","src":"11790:18:29"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"11760:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"11768:18:29","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"11757:2:29"},"nodeType":"YulFunctionCall","src":"11757:30:29"},"nodeType":"YulIf","src":"11754:56:29"},{"nodeType":"YulAssignment","src":"11819:33:29","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11835:1:29","type":"","value":"5"},{"name":"length","nodeType":"YulIdentifier","src":"11838:6:29"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"11831:3:29"},"nodeType":"YulFunctionCall","src":"11831:14:29"},{"kind":"number","nodeType":"YulLiteral","src":"11847:4:29","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11827:3:29"},"nodeType":"YulFunctionCall","src":"11827:25:29"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"11819:4:29"}]}]},"name":"array_allocation_size_array_struct_RevocationRequestData_dyn","nodeType":"YulFunctionDefinition","parameters":[{"name":"length","nodeType":"YulTypedName","src":"11724:6:29","type":""}],"returnVariables":[{"name":"size","nodeType":"YulTypedName","src":"11735:4:29","type":""}],"src":"11654:204:29"},{"body":{"nodeType":"YulBlock","src":"12007:1282:29","statements":[{"nodeType":"YulVariableDeclaration","src":"12017:14:29","value":{"kind":"number","nodeType":"YulLiteral","src":"12027:4:29","type":"","value":"0x40"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"12021:2:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"12079:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12088:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"12091:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"12081:6:29"},"nodeType":"YulFunctionCall","src":"12081:12:29"},"nodeType":"YulExpressionStatement","src":"12081:12:29"}]},"condition":{"arguments":[{"arguments":[{"arguments":[],"functionName":{"name":"calldatasize","nodeType":"YulIdentifier","src":"12051:12:29"},"nodeType":"YulFunctionCall","src":"12051:14:29"},{"name":"value","nodeType":"YulIdentifier","src":"12067:5:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"12047:3:29"},"nodeType":"YulFunctionCall","src":"12047:26:29"},{"name":"_1","nodeType":"YulIdentifier","src":"12075:2:29"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"12043:3:29"},"nodeType":"YulFunctionCall","src":"12043:35:29"},"nodeType":"YulIf","src":"12040:55:29"},{"nodeType":"YulVariableDeclaration","src":"12104:37:29","value":{"arguments":[],"functionName":{"name":"allocate_memory_6725","nodeType":"YulIdentifier","src":"12119:20:29"},"nodeType":"YulFunctionCall","src":"12119:22:29"},"variables":[{"name":"value_1","nodeType":"YulTypedName","src":"12108:7:29","type":""}]},{"expression":{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"12157:7:29"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"12179:5:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"12166:12:29"},"nodeType":"YulFunctionCall","src":"12166:19:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12150:6:29"},"nodeType":"YulFunctionCall","src":"12150:36:29"},"nodeType":"YulExpressionStatement","src":"12150:36:29"},{"nodeType":"YulVariableDeclaration","src":"12195:12:29","value":{"kind":"number","nodeType":"YulLiteral","src":"12205:2:29","type":"","value":"32"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"12199:2:29","type":""}]},{"nodeType":"YulVariableDeclaration","src":"12216:42:29","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"12247:5:29"},{"name":"_2","nodeType":"YulIdentifier","src":"12254:2:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12243:3:29"},"nodeType":"YulFunctionCall","src":"12243:14:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"12230:12:29"},"nodeType":"YulFunctionCall","src":"12230:28:29"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"12220:6:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"12301:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12310:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"12313:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"12303:6:29"},"nodeType":"YulFunctionCall","src":"12303:12:29"},"nodeType":"YulExpressionStatement","src":"12303:12:29"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"12273:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"12281:18:29","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"12270:2:29"},"nodeType":"YulFunctionCall","src":"12270:30:29"},"nodeType":"YulIf","src":"12267:50:29"},{"nodeType":"YulVariableDeclaration","src":"12326:28:29","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"12340:5:29"},{"name":"offset","nodeType":"YulIdentifier","src":"12347:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12336:3:29"},"nodeType":"YulFunctionCall","src":"12336:18:29"},"variables":[{"name":"_3","nodeType":"YulTypedName","src":"12330:2:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"12409:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12418:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"12421:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"12411:6:29"},"nodeType":"YulFunctionCall","src":"12411:12:29"},"nodeType":"YulExpressionStatement","src":"12411:12:29"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"12381:2:29"},{"kind":"number","nodeType":"YulLiteral","src":"12385:4:29","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12377:3:29"},"nodeType":"YulFunctionCall","src":"12377:13:29"},{"arguments":[],"functionName":{"name":"calldatasize","nodeType":"YulIdentifier","src":"12392:12:29"},"nodeType":"YulFunctionCall","src":"12392:14:29"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"12373:3:29"},"nodeType":"YulFunctionCall","src":"12373:34:29"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"12366:6:29"},"nodeType":"YulFunctionCall","src":"12366:42:29"},"nodeType":"YulIf","src":"12363:62:29"},{"nodeType":"YulVariableDeclaration","src":"12434:26:29","value":{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"12457:2:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"12444:12:29"},"nodeType":"YulFunctionCall","src":"12444:16:29"},"variables":[{"name":"_4","nodeType":"YulTypedName","src":"12438:2:29","type":""}]},{"nodeType":"YulVariableDeclaration","src":"12469:92:29","value":{"arguments":[{"arguments":[{"name":"_4","nodeType":"YulIdentifier","src":"12557:2:29"}],"functionName":{"name":"array_allocation_size_array_struct_RevocationRequestData_dyn","nodeType":"YulIdentifier","src":"12496:60:29"},"nodeType":"YulFunctionCall","src":"12496:64:29"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"12480:15:29"},"nodeType":"YulFunctionCall","src":"12480:81:29"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"12473:3:29","type":""}]},{"nodeType":"YulVariableDeclaration","src":"12570:16:29","value":{"name":"dst","nodeType":"YulIdentifier","src":"12583:3:29"},"variables":[{"name":"dst_1","nodeType":"YulTypedName","src":"12574:5:29","type":""}]},{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"12602:3:29"},{"name":"_4","nodeType":"YulIdentifier","src":"12607:2:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12595:6:29"},"nodeType":"YulFunctionCall","src":"12595:15:29"},"nodeType":"YulExpressionStatement","src":"12595:15:29"},{"nodeType":"YulAssignment","src":"12619:19:29","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"12630:3:29"},{"name":"_2","nodeType":"YulIdentifier","src":"12635:2:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12626:3:29"},"nodeType":"YulFunctionCall","src":"12626:12:29"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"12619:3:29"}]},{"nodeType":"YulVariableDeclaration","src":"12647:42:29","value":{"arguments":[{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"12669:2:29"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12677:1:29","type":"","value":"6"},{"name":"_4","nodeType":"YulIdentifier","src":"12680:2:29"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"12673:3:29"},"nodeType":"YulFunctionCall","src":"12673:10:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12665:3:29"},"nodeType":"YulFunctionCall","src":"12665:19:29"},{"name":"_2","nodeType":"YulIdentifier","src":"12686:2:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12661:3:29"},"nodeType":"YulFunctionCall","src":"12661:28:29"},"variables":[{"name":"srcEnd","nodeType":"YulTypedName","src":"12651:6:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"12728:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12737:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"12740:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"12730:6:29"},"nodeType":"YulFunctionCall","src":"12730:12:29"},"nodeType":"YulExpressionStatement","src":"12730:12:29"}]},"condition":{"arguments":[{"name":"srcEnd","nodeType":"YulIdentifier","src":"12704:6:29"},{"arguments":[],"functionName":{"name":"calldatasize","nodeType":"YulIdentifier","src":"12712:12:29"},"nodeType":"YulFunctionCall","src":"12712:14:29"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"12701:2:29"},"nodeType":"YulFunctionCall","src":"12701:26:29"},"nodeType":"YulIf","src":"12698:46:29"},{"nodeType":"YulVariableDeclaration","src":"12753:22:29","value":{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"12768:2:29"},{"name":"_2","nodeType":"YulIdentifier","src":"12772:2:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12764:3:29"},"nodeType":"YulFunctionCall","src":"12764:11:29"},"variables":[{"name":"src","nodeType":"YulTypedName","src":"12757:3:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"12840:374:29","statements":[{"body":{"nodeType":"YulBlock","src":"12903:74:29","statements":[{"nodeType":"YulVariableDeclaration","src":"12921:11:29","value":{"kind":"number","nodeType":"YulLiteral","src":"12931:1:29","type":"","value":"0"},"variables":[{"name":"_5","nodeType":"YulTypedName","src":"12925:2:29","type":""}]},{"expression":{"arguments":[{"name":"_5","nodeType":"YulIdentifier","src":"12956:2:29"},{"name":"_5","nodeType":"YulIdentifier","src":"12960:2:29"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"12949:6:29"},"nodeType":"YulFunctionCall","src":"12949:14:29"},"nodeType":"YulExpressionStatement","src":"12949:14:29"}]},"condition":{"arguments":[{"arguments":[{"arguments":[],"functionName":{"name":"calldatasize","nodeType":"YulIdentifier","src":"12865:12:29"},"nodeType":"YulFunctionCall","src":"12865:14:29"},{"name":"src","nodeType":"YulIdentifier","src":"12881:3:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"12861:3:29"},"nodeType":"YulFunctionCall","src":"12861:24:29"},{"name":"_1","nodeType":"YulIdentifier","src":"12887:2:29"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"12857:3:29"},"nodeType":"YulFunctionCall","src":"12857:33:29"},"nodeType":"YulIf","src":"12854:123:29"},{"nodeType":"YulVariableDeclaration","src":"12990:37:29","value":{"arguments":[],"functionName":{"name":"allocate_memory_6725","nodeType":"YulIdentifier","src":"13005:20:29"},"nodeType":"YulFunctionCall","src":"13005:22:29"},"variables":[{"name":"value_2","nodeType":"YulTypedName","src":"12994:7:29","type":""}]},{"expression":{"arguments":[{"name":"value_2","nodeType":"YulIdentifier","src":"13047:7:29"},{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"13069:3:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"13056:12:29"},"nodeType":"YulFunctionCall","src":"13056:17:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13040:6:29"},"nodeType":"YulFunctionCall","src":"13040:34:29"},"nodeType":"YulExpressionStatement","src":"13040:34:29"},{"expression":{"arguments":[{"arguments":[{"name":"value_2","nodeType":"YulIdentifier","src":"13098:7:29"},{"name":"_2","nodeType":"YulIdentifier","src":"13107:2:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13094:3:29"},"nodeType":"YulFunctionCall","src":"13094:16:29"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"13129:3:29"},{"name":"_2","nodeType":"YulIdentifier","src":"13134:2:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13125:3:29"},"nodeType":"YulFunctionCall","src":"13125:12:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"13112:12:29"},"nodeType":"YulFunctionCall","src":"13112:26:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13087:6:29"},"nodeType":"YulFunctionCall","src":"13087:52:29"},"nodeType":"YulExpressionStatement","src":"13087:52:29"},{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"13159:3:29"},{"name":"value_2","nodeType":"YulIdentifier","src":"13164:7:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13152:6:29"},"nodeType":"YulFunctionCall","src":"13152:20:29"},"nodeType":"YulExpressionStatement","src":"13152:20:29"},{"nodeType":"YulAssignment","src":"13185:19:29","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"13196:3:29"},{"name":"_2","nodeType":"YulIdentifier","src":"13201:2:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13192:3:29"},"nodeType":"YulFunctionCall","src":"13192:12:29"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"13185:3:29"}]}]},"condition":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"12795:3:29"},{"name":"srcEnd","nodeType":"YulIdentifier","src":"12800:6:29"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"12792:2:29"},"nodeType":"YulFunctionCall","src":"12792:15:29"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"12808:23:29","statements":[{"nodeType":"YulAssignment","src":"12810:19:29","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"12821:3:29"},{"name":"_1","nodeType":"YulIdentifier","src":"12826:2:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12817:3:29"},"nodeType":"YulFunctionCall","src":"12817:12:29"},"variableNames":[{"name":"src","nodeType":"YulIdentifier","src":"12810:3:29"}]}]},"pre":{"nodeType":"YulBlock","src":"12788:3:29","statements":[]},"src":"12784:430:29"},{"expression":{"arguments":[{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"13234:7:29"},{"name":"_2","nodeType":"YulIdentifier","src":"13243:2:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13230:3:29"},"nodeType":"YulFunctionCall","src":"13230:16:29"},{"name":"dst_1","nodeType":"YulIdentifier","src":"13248:5:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13223:6:29"},"nodeType":"YulFunctionCall","src":"13223:31:29"},"nodeType":"YulExpressionStatement","src":"13223:31:29"},{"nodeType":"YulAssignment","src":"13263:20:29","value":{"name":"value_1","nodeType":"YulIdentifier","src":"13276:7:29"},"variableNames":[{"name":"converted","nodeType":"YulIdentifier","src":"13263:9:29"}]}]},"name":"convert_t_struct$_MultiRevocationRequest_$147_calldata_ptr_to_t_struct$_MultiRevocationRequest_$147_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"11983:5:29","type":""}],"returnVariables":[{"name":"converted","nodeType":"YulTypedName","src":"11993:9:29","type":""}],"src":"11863:1426:29"},{"body":{"nodeType":"YulBlock","src":"13338:85:29","statements":[{"body":{"nodeType":"YulBlock","src":"13401:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13410:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"13413:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"13403:6:29"},"nodeType":"YulFunctionCall","src":"13403:12:29"},"nodeType":"YulExpressionStatement","src":"13403:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"13361:5:29"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"13372:5:29"},{"kind":"number","nodeType":"YulLiteral","src":"13379:18:29","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"13368:3:29"},"nodeType":"YulFunctionCall","src":"13368:30:29"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"13358:2:29"},"nodeType":"YulFunctionCall","src":"13358:41:29"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"13351:6:29"},"nodeType":"YulFunctionCall","src":"13351:49:29"},"nodeType":"YulIf","src":"13348:69:29"}]},"name":"validator_revert_uint64","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"13327:5:29","type":""}],"src":"13294:129:29"},{"body":{"nodeType":"YulBlock","src":"13487:77:29","statements":[{"nodeType":"YulAssignment","src":"13497:22:29","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"13512:6:29"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"13506:5:29"},"nodeType":"YulFunctionCall","src":"13506:13:29"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"13497:5:29"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"13552:5:29"}],"functionName":{"name":"validator_revert_uint64","nodeType":"YulIdentifier","src":"13528:23:29"},"nodeType":"YulFunctionCall","src":"13528:30:29"},"nodeType":"YulExpressionStatement","src":"13528:30:29"}]},"name":"abi_decode_uint64_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"13466:6:29","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"13477:5:29","type":""}],"src":"13428:136:29"},{"body":{"nodeType":"YulBlock","src":"13629:78:29","statements":[{"nodeType":"YulAssignment","src":"13639:22:29","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"13654:6:29"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"13648:5:29"},"nodeType":"YulFunctionCall","src":"13648:13:29"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"13639:5:29"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"13695:5:29"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"13670:24:29"},"nodeType":"YulFunctionCall","src":"13670:31:29"},"nodeType":"YulExpressionStatement","src":"13670:31:29"}]},"name":"abi_decode_address_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"13608:6:29","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"13619:5:29","type":""}],"src":"13569:138:29"},{"body":{"nodeType":"YulBlock","src":"13754:76:29","statements":[{"body":{"nodeType":"YulBlock","src":"13808:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13817:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"13820:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"13810:6:29"},"nodeType":"YulFunctionCall","src":"13810:12:29"},"nodeType":"YulExpressionStatement","src":"13810:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"13777:5:29"},{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"13798:5:29"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"13791:6:29"},"nodeType":"YulFunctionCall","src":"13791:13:29"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"13784:6:29"},"nodeType":"YulFunctionCall","src":"13784:21:29"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"13774:2:29"},"nodeType":"YulFunctionCall","src":"13774:32:29"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"13767:6:29"},"nodeType":"YulFunctionCall","src":"13767:40:29"},"nodeType":"YulIf","src":"13764:60:29"}]},"name":"validator_revert_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"13743:5:29","type":""}],"src":"13712:118:29"},{"body":{"nodeType":"YulBlock","src":"13892:75:29","statements":[{"nodeType":"YulAssignment","src":"13902:22:29","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"13917:6:29"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"13911:5:29"},"nodeType":"YulFunctionCall","src":"13911:13:29"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"13902:5:29"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"13955:5:29"}],"functionName":{"name":"validator_revert_bool","nodeType":"YulIdentifier","src":"13933:21:29"},"nodeType":"YulFunctionCall","src":"13933:28:29"},"nodeType":"YulExpressionStatement","src":"13933:28:29"}]},"name":"abi_decode_bool_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"13871:6:29","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"13882:5:29","type":""}],"src":"13835:132:29"},{"body":{"nodeType":"YulBlock","src":"14035:379:29","statements":[{"body":{"nodeType":"YulBlock","src":"14084:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"14093:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"14096:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"14086:6:29"},"nodeType":"YulFunctionCall","src":"14086:12:29"},"nodeType":"YulExpressionStatement","src":"14086:12:29"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"14063:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"14071:4:29","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14059:3:29"},"nodeType":"YulFunctionCall","src":"14059:17:29"},{"name":"end","nodeType":"YulIdentifier","src":"14078:3:29"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"14055:3:29"},"nodeType":"YulFunctionCall","src":"14055:27:29"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"14048:6:29"},"nodeType":"YulFunctionCall","src":"14048:35:29"},"nodeType":"YulIf","src":"14045:55:29"},{"nodeType":"YulVariableDeclaration","src":"14109:23:29","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"14125:6:29"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"14119:5:29"},"nodeType":"YulFunctionCall","src":"14119:13:29"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"14113:2:29","type":""}]},{"nodeType":"YulVariableDeclaration","src":"14141:64:29","value":{"arguments":[{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"14201:2:29"}],"functionName":{"name":"array_allocation_size_string","nodeType":"YulIdentifier","src":"14172:28:29"},"nodeType":"YulFunctionCall","src":"14172:32:29"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"14156:15:29"},"nodeType":"YulFunctionCall","src":"14156:49:29"},"variables":[{"name":"array_1","nodeType":"YulTypedName","src":"14145:7:29","type":""}]},{"expression":{"arguments":[{"name":"array_1","nodeType":"YulIdentifier","src":"14221:7:29"},{"name":"_1","nodeType":"YulIdentifier","src":"14230:2:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14214:6:29"},"nodeType":"YulFunctionCall","src":"14214:19:29"},"nodeType":"YulExpressionStatement","src":"14214:19:29"},{"body":{"nodeType":"YulBlock","src":"14281:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"14290:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"14293:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"14283:6:29"},"nodeType":"YulFunctionCall","src":"14283:12:29"},"nodeType":"YulExpressionStatement","src":"14283:12:29"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"14256:6:29"},{"name":"_1","nodeType":"YulIdentifier","src":"14264:2:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14252:3:29"},"nodeType":"YulFunctionCall","src":"14252:15:29"},{"kind":"number","nodeType":"YulLiteral","src":"14269:4:29","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14248:3:29"},"nodeType":"YulFunctionCall","src":"14248:26:29"},{"name":"end","nodeType":"YulIdentifier","src":"14276:3:29"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"14245:2:29"},"nodeType":"YulFunctionCall","src":"14245:35:29"},"nodeType":"YulIf","src":"14242:55:29"},{"expression":{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"14345:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"14353:4:29","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14341:3:29"},"nodeType":"YulFunctionCall","src":"14341:17:29"},{"arguments":[{"name":"array_1","nodeType":"YulIdentifier","src":"14364:7:29"},{"kind":"number","nodeType":"YulLiteral","src":"14373:4:29","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14360:3:29"},"nodeType":"YulFunctionCall","src":"14360:18:29"},{"name":"_1","nodeType":"YulIdentifier","src":"14380:2:29"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"14306:34:29"},"nodeType":"YulFunctionCall","src":"14306:77:29"},"nodeType":"YulExpressionStatement","src":"14306:77:29"},{"nodeType":"YulAssignment","src":"14392:16:29","value":{"name":"array_1","nodeType":"YulIdentifier","src":"14401:7:29"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"14392:5:29"}]}]},"name":"abi_decode_bytes_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"14009:6:29","type":""},{"name":"end","nodeType":"YulTypedName","src":"14017:3:29","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"14025:5:29","type":""}],"src":"13972:442:29"},{"body":{"nodeType":"YulBlock","src":"14527:1161:29","statements":[{"body":{"nodeType":"YulBlock","src":"14573:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"14582:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"14585:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"14575:6:29"},"nodeType":"YulFunctionCall","src":"14575:12:29"},"nodeType":"YulExpressionStatement","src":"14575:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"14548:7:29"},{"name":"headStart","nodeType":"YulIdentifier","src":"14557:9:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"14544:3:29"},"nodeType":"YulFunctionCall","src":"14544:23:29"},{"kind":"number","nodeType":"YulLiteral","src":"14569:2:29","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"14540:3:29"},"nodeType":"YulFunctionCall","src":"14540:32:29"},"nodeType":"YulIf","src":"14537:52:29"},{"nodeType":"YulVariableDeclaration","src":"14598:30:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14618:9:29"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"14612:5:29"},"nodeType":"YulFunctionCall","src":"14612:16:29"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"14602:6:29","type":""}]},{"nodeType":"YulVariableDeclaration","src":"14637:28:29","value":{"kind":"number","nodeType":"YulLiteral","src":"14647:18:29","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"14641:2:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"14692:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"14701:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"14704:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"14694:6:29"},"nodeType":"YulFunctionCall","src":"14694:12:29"},"nodeType":"YulExpressionStatement","src":"14694:12:29"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"14680:6:29"},{"name":"_1","nodeType":"YulIdentifier","src":"14688:2:29"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"14677:2:29"},"nodeType":"YulFunctionCall","src":"14677:14:29"},"nodeType":"YulIf","src":"14674:34:29"},{"nodeType":"YulVariableDeclaration","src":"14717:32:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14731:9:29"},{"name":"offset","nodeType":"YulIdentifier","src":"14742:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14727:3:29"},"nodeType":"YulFunctionCall","src":"14727:22:29"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"14721:2:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"14791:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"14800:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"14803:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"14793:6:29"},"nodeType":"YulFunctionCall","src":"14793:12:29"},"nodeType":"YulExpressionStatement","src":"14793:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"14769:7:29"},{"name":"_2","nodeType":"YulIdentifier","src":"14778:2:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"14765:3:29"},"nodeType":"YulFunctionCall","src":"14765:16:29"},{"kind":"number","nodeType":"YulLiteral","src":"14783:6:29","type":"","value":"0x0140"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"14761:3:29"},"nodeType":"YulFunctionCall","src":"14761:29:29"},"nodeType":"YulIf","src":"14758:49:29"},{"nodeType":"YulVariableDeclaration","src":"14816:35:29","value":{"arguments":[],"functionName":{"name":"allocate_memory_6728","nodeType":"YulIdentifier","src":"14829:20:29"},"nodeType":"YulFunctionCall","src":"14829:22:29"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"14820:5:29","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"14867:5:29"},{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"14880:2:29"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"14874:5:29"},"nodeType":"YulFunctionCall","src":"14874:9:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14860:6:29"},"nodeType":"YulFunctionCall","src":"14860:24:29"},"nodeType":"YulExpressionStatement","src":"14860:24:29"},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"14904:5:29"},{"kind":"number","nodeType":"YulLiteral","src":"14911:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14900:3:29"},"nodeType":"YulFunctionCall","src":"14900:14:29"},{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"14926:2:29"},{"kind":"number","nodeType":"YulLiteral","src":"14930:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14922:3:29"},"nodeType":"YulFunctionCall","src":"14922:11:29"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"14916:5:29"},"nodeType":"YulFunctionCall","src":"14916:18:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14893:6:29"},"nodeType":"YulFunctionCall","src":"14893:42:29"},"nodeType":"YulExpressionStatement","src":"14893:42:29"},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"14955:5:29"},{"kind":"number","nodeType":"YulLiteral","src":"14962:2:29","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14951:3:29"},"nodeType":"YulFunctionCall","src":"14951:14:29"},{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"15000:2:29"},{"kind":"number","nodeType":"YulLiteral","src":"15004:2:29","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14996:3:29"},"nodeType":"YulFunctionCall","src":"14996:11:29"}],"functionName":{"name":"abi_decode_uint64_fromMemory","nodeType":"YulIdentifier","src":"14967:28:29"},"nodeType":"YulFunctionCall","src":"14967:41:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14944:6:29"},"nodeType":"YulFunctionCall","src":"14944:65:29"},"nodeType":"YulExpressionStatement","src":"14944:65:29"},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"15029:5:29"},{"kind":"number","nodeType":"YulLiteral","src":"15036:2:29","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15025:3:29"},"nodeType":"YulFunctionCall","src":"15025:14:29"},{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"15074:2:29"},{"kind":"number","nodeType":"YulLiteral","src":"15078:2:29","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15070:3:29"},"nodeType":"YulFunctionCall","src":"15070:11:29"}],"functionName":{"name":"abi_decode_uint64_fromMemory","nodeType":"YulIdentifier","src":"15041:28:29"},"nodeType":"YulFunctionCall","src":"15041:41:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15018:6:29"},"nodeType":"YulFunctionCall","src":"15018:65:29"},"nodeType":"YulExpressionStatement","src":"15018:65:29"},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"15103:5:29"},{"kind":"number","nodeType":"YulLiteral","src":"15110:3:29","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15099:3:29"},"nodeType":"YulFunctionCall","src":"15099:15:29"},{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"15149:2:29"},{"kind":"number","nodeType":"YulLiteral","src":"15153:3:29","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15145:3:29"},"nodeType":"YulFunctionCall","src":"15145:12:29"}],"functionName":{"name":"abi_decode_uint64_fromMemory","nodeType":"YulIdentifier","src":"15116:28:29"},"nodeType":"YulFunctionCall","src":"15116:42:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15092:6:29"},"nodeType":"YulFunctionCall","src":"15092:67:29"},"nodeType":"YulExpressionStatement","src":"15092:67:29"},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"15179:5:29"},{"kind":"number","nodeType":"YulLiteral","src":"15186:3:29","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15175:3:29"},"nodeType":"YulFunctionCall","src":"15175:15:29"},{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"15202:2:29"},{"kind":"number","nodeType":"YulLiteral","src":"15206:3:29","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15198:3:29"},"nodeType":"YulFunctionCall","src":"15198:12:29"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"15192:5:29"},"nodeType":"YulFunctionCall","src":"15192:19:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15168:6:29"},"nodeType":"YulFunctionCall","src":"15168:44:29"},"nodeType":"YulExpressionStatement","src":"15168:44:29"},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"15232:5:29"},{"kind":"number","nodeType":"YulLiteral","src":"15239:3:29","type":"","value":"192"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15228:3:29"},"nodeType":"YulFunctionCall","src":"15228:15:29"},{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"15279:2:29"},{"kind":"number","nodeType":"YulLiteral","src":"15283:3:29","type":"","value":"192"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15275:3:29"},"nodeType":"YulFunctionCall","src":"15275:12:29"}],"functionName":{"name":"abi_decode_address_fromMemory","nodeType":"YulIdentifier","src":"15245:29:29"},"nodeType":"YulFunctionCall","src":"15245:43:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15221:6:29"},"nodeType":"YulFunctionCall","src":"15221:68:29"},"nodeType":"YulExpressionStatement","src":"15221:68:29"},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"15309:5:29"},{"kind":"number","nodeType":"YulLiteral","src":"15316:3:29","type":"","value":"224"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15305:3:29"},"nodeType":"YulFunctionCall","src":"15305:15:29"},{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"15356:2:29"},{"kind":"number","nodeType":"YulLiteral","src":"15360:3:29","type":"","value":"224"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15352:3:29"},"nodeType":"YulFunctionCall","src":"15352:12:29"}],"functionName":{"name":"abi_decode_address_fromMemory","nodeType":"YulIdentifier","src":"15322:29:29"},"nodeType":"YulFunctionCall","src":"15322:43:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15298:6:29"},"nodeType":"YulFunctionCall","src":"15298:68:29"},"nodeType":"YulExpressionStatement","src":"15298:68:29"},{"nodeType":"YulVariableDeclaration","src":"15375:13:29","value":{"kind":"number","nodeType":"YulLiteral","src":"15385:3:29","type":"","value":"256"},"variables":[{"name":"_3","nodeType":"YulTypedName","src":"15379:2:29","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"15408:5:29"},{"name":"_3","nodeType":"YulIdentifier","src":"15415:2:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15404:3:29"},"nodeType":"YulFunctionCall","src":"15404:14:29"},{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"15451:2:29"},{"name":"_3","nodeType":"YulIdentifier","src":"15455:2:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15447:3:29"},"nodeType":"YulFunctionCall","src":"15447:11:29"}],"functionName":{"name":"abi_decode_bool_fromMemory","nodeType":"YulIdentifier","src":"15420:26:29"},"nodeType":"YulFunctionCall","src":"15420:39:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15397:6:29"},"nodeType":"YulFunctionCall","src":"15397:63:29"},"nodeType":"YulExpressionStatement","src":"15397:63:29"},{"nodeType":"YulVariableDeclaration","src":"15469:13:29","value":{"kind":"number","nodeType":"YulLiteral","src":"15479:3:29","type":"","value":"288"},"variables":[{"name":"_4","nodeType":"YulTypedName","src":"15473:2:29","type":""}]},{"nodeType":"YulVariableDeclaration","src":"15491:34:29","value":{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"15517:2:29"},{"name":"_4","nodeType":"YulIdentifier","src":"15521:2:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15513:3:29"},"nodeType":"YulFunctionCall","src":"15513:11:29"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"15507:5:29"},"nodeType":"YulFunctionCall","src":"15507:18:29"},"variables":[{"name":"offset_1","nodeType":"YulTypedName","src":"15495:8:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"15554:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"15563:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"15566:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"15556:6:29"},"nodeType":"YulFunctionCall","src":"15556:12:29"},"nodeType":"YulExpressionStatement","src":"15556:12:29"}]},"condition":{"arguments":[{"name":"offset_1","nodeType":"YulIdentifier","src":"15540:8:29"},{"name":"_1","nodeType":"YulIdentifier","src":"15550:2:29"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"15537:2:29"},"nodeType":"YulFunctionCall","src":"15537:16:29"},"nodeType":"YulIf","src":"15534:36:29"},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"15590:5:29"},{"name":"_4","nodeType":"YulIdentifier","src":"15597:2:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15586:3:29"},"nodeType":"YulFunctionCall","src":"15586:14:29"},{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"15634:2:29"},{"name":"offset_1","nodeType":"YulIdentifier","src":"15638:8:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15630:3:29"},"nodeType":"YulFunctionCall","src":"15630:17:29"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"15649:7:29"}],"functionName":{"name":"abi_decode_bytes_fromMemory","nodeType":"YulIdentifier","src":"15602:27:29"},"nodeType":"YulFunctionCall","src":"15602:55:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15579:6:29"},"nodeType":"YulFunctionCall","src":"15579:79:29"},"nodeType":"YulExpressionStatement","src":"15579:79:29"},{"nodeType":"YulAssignment","src":"15667:15:29","value":{"name":"value","nodeType":"YulIdentifier","src":"15677:5:29"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"15667:6:29"}]}]},"name":"abi_decode_tuple_t_struct$_Attestation_$45_memory_ptr_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"14493:9:29","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"14504:7:29","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"14516:6:29","type":""}],"src":"14419:1269:29"},{"body":{"nodeType":"YulBlock","src":"15867:160:29","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15884:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"15895:2:29","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15877:6:29"},"nodeType":"YulFunctionCall","src":"15877:21:29"},"nodeType":"YulExpressionStatement","src":"15877:21:29"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15918:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"15929:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15914:3:29"},"nodeType":"YulFunctionCall","src":"15914:18:29"},{"kind":"number","nodeType":"YulLiteral","src":"15934:2:29","type":"","value":"10"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15907:6:29"},"nodeType":"YulFunctionCall","src":"15907:30:29"},"nodeType":"YulExpressionStatement","src":"15907:30:29"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15957:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"15968:2:29","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15953:3:29"},"nodeType":"YulFunctionCall","src":"15953:18:29"},{"hexValue":"4e6f74206f776e65722e","kind":"string","nodeType":"YulLiteral","src":"15973:12:29","type":"","value":"Not owner."}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15946:6:29"},"nodeType":"YulFunctionCall","src":"15946:40:29"},"nodeType":"YulExpressionStatement","src":"15946:40:29"},{"nodeType":"YulAssignment","src":"15995:26:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16007:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"16018:2:29","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16003:3:29"},"nodeType":"YulFunctionCall","src":"16003:18:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"15995:4:29"}]}]},"name":"abi_encode_tuple_t_stringliteral_bf2878a0327c5efcb59586051281508822c0d430e7858d25ba3f27d805f4146d__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"15844:9:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"15858:4:29","type":""}],"src":"15693:334:29"},{"body":{"nodeType":"YulBlock","src":"16079:242:29","statements":[{"body":{"nodeType":"YulBlock","src":"16118:168:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"16139:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"16142:77:29","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16132:6:29"},"nodeType":"YulFunctionCall","src":"16132:88:29"},"nodeType":"YulExpressionStatement","src":"16132:88:29"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"16240:1:29","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"16243:4:29","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16233:6:29"},"nodeType":"YulFunctionCall","src":"16233:15:29"},"nodeType":"YulExpressionStatement","src":"16233:15:29"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"16268:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"16271:4:29","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"16261:6:29"},"nodeType":"YulFunctionCall","src":"16261:15:29"},"nodeType":"YulExpressionStatement","src":"16261:15:29"}]},"condition":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"16095:5:29"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"16106:1:29","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"16102:3:29"},"nodeType":"YulFunctionCall","src":"16102:6:29"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"16092:2:29"},"nodeType":"YulFunctionCall","src":"16092:17:29"},"nodeType":"YulIf","src":"16089:197:29"},{"nodeType":"YulAssignment","src":"16295:20:29","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"16306:5:29"},{"kind":"number","nodeType":"YulLiteral","src":"16313:1:29","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16302:3:29"},"nodeType":"YulFunctionCall","src":"16302:13:29"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"16295:3:29"}]}]},"name":"increment_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"16061:5:29","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"16071:3:29","type":""}],"src":"16032:289:29"},{"body":{"nodeType":"YulBlock","src":"16567:1864:29","statements":[{"nodeType":"YulVariableDeclaration","src":"16577:12:29","value":{"kind":"number","nodeType":"YulLiteral","src":"16587:2:29","type":"","value":"32"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"16581:2:29","type":""}]},{"nodeType":"YulVariableDeclaration","src":"16598:32:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16616:9:29"},{"name":"_1","nodeType":"YulIdentifier","src":"16627:2:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16612:3:29"},"nodeType":"YulFunctionCall","src":"16612:18:29"},"variables":[{"name":"tail_1","nodeType":"YulTypedName","src":"16602:6:29","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16646:9:29"},{"name":"_1","nodeType":"YulIdentifier","src":"16657:2:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16639:6:29"},"nodeType":"YulFunctionCall","src":"16639:21:29"},"nodeType":"YulExpressionStatement","src":"16639:21:29"},{"nodeType":"YulVariableDeclaration","src":"16669:17:29","value":{"name":"tail_1","nodeType":"YulIdentifier","src":"16680:6:29"},"variables":[{"name":"pos","nodeType":"YulTypedName","src":"16673:3:29","type":""}]},{"expression":{"arguments":[{"name":"tail_1","nodeType":"YulIdentifier","src":"16702:6:29"},{"name":"value1","nodeType":"YulIdentifier","src":"16710:6:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16695:6:29"},"nodeType":"YulFunctionCall","src":"16695:22:29"},"nodeType":"YulExpressionStatement","src":"16695:22:29"},{"nodeType":"YulVariableDeclaration","src":"16726:12:29","value":{"kind":"number","nodeType":"YulLiteral","src":"16736:2:29","type":"","value":"64"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"16730:2:29","type":""}]},{"nodeType":"YulAssignment","src":"16747:25:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16758:9:29"},{"name":"_2","nodeType":"YulIdentifier","src":"16769:2:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16754:3:29"},"nodeType":"YulFunctionCall","src":"16754:18:29"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"16747:3:29"}]},{"nodeType":"YulVariableDeclaration","src":"16781:53:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16803:9:29"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"16818:1:29","type":"","value":"5"},{"name":"value1","nodeType":"YulIdentifier","src":"16821:6:29"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"16814:3:29"},"nodeType":"YulFunctionCall","src":"16814:14:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16799:3:29"},"nodeType":"YulFunctionCall","src":"16799:30:29"},{"name":"_2","nodeType":"YulIdentifier","src":"16831:2:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16795:3:29"},"nodeType":"YulFunctionCall","src":"16795:39:29"},"variables":[{"name":"tail_2","nodeType":"YulTypedName","src":"16785:6:29","type":""}]},{"nodeType":"YulVariableDeclaration","src":"16843:20:29","value":{"name":"value0","nodeType":"YulIdentifier","src":"16857:6:29"},"variables":[{"name":"srcPtr","nodeType":"YulTypedName","src":"16847:6:29","type":""}]},{"nodeType":"YulVariableDeclaration","src":"16872:10:29","value":{"kind":"number","nodeType":"YulLiteral","src":"16881:1:29","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"16876:1:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"16940:1462:29","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"16961:3:29"},{"arguments":[{"arguments":[{"name":"tail_2","nodeType":"YulIdentifier","src":"16974:6:29"},{"name":"headStart","nodeType":"YulIdentifier","src":"16982:9:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"16970:3:29"},"nodeType":"YulFunctionCall","src":"16970:22:29"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"16998:2:29","type":"","value":"63"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"16994:3:29"},"nodeType":"YulFunctionCall","src":"16994:7:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16966:3:29"},"nodeType":"YulFunctionCall","src":"16966:36:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16954:6:29"},"nodeType":"YulFunctionCall","src":"16954:49:29"},"nodeType":"YulExpressionStatement","src":"16954:49:29"},{"nodeType":"YulVariableDeclaration","src":"17016:46:29","value":{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"17055:6:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"17042:12:29"},"nodeType":"YulFunctionCall","src":"17042:20:29"},"variables":[{"name":"rel_offset_of_tail","nodeType":"YulTypedName","src":"17020:18:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"17153:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"17162:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"17165:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"17155:6:29"},"nodeType":"YulFunctionCall","src":"17155:12:29"},"nodeType":"YulExpressionStatement","src":"17155:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"rel_offset_of_tail","nodeType":"YulIdentifier","src":"17089:18:29"},{"arguments":[{"arguments":[{"arguments":[],"functionName":{"name":"calldatasize","nodeType":"YulIdentifier","src":"17117:12:29"},"nodeType":"YulFunctionCall","src":"17117:14:29"},{"name":"value0","nodeType":"YulIdentifier","src":"17133:6:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"17113:3:29"},"nodeType":"YulFunctionCall","src":"17113:27:29"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"17146:2:29","type":"","value":"62"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"17142:3:29"},"nodeType":"YulFunctionCall","src":"17142:7:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17109:3:29"},"nodeType":"YulFunctionCall","src":"17109:41:29"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"17085:3:29"},"nodeType":"YulFunctionCall","src":"17085:66:29"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"17078:6:29"},"nodeType":"YulFunctionCall","src":"17078:74:29"},"nodeType":"YulIf","src":"17075:94:29"},{"nodeType":"YulVariableDeclaration","src":"17182:44:29","value":{"arguments":[{"name":"rel_offset_of_tail","nodeType":"YulIdentifier","src":"17199:18:29"},{"name":"value0","nodeType":"YulIdentifier","src":"17219:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17195:3:29"},"nodeType":"YulFunctionCall","src":"17195:31:29"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"17186:5:29","type":""}]},{"nodeType":"YulVariableDeclaration","src":"17239:29:29","value":{"arguments":[{"name":"tail_2","nodeType":"YulIdentifier","src":"17257:6:29"},{"name":"_2","nodeType":"YulIdentifier","src":"17265:2:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17253:3:29"},"nodeType":"YulFunctionCall","src":"17253:15:29"},"variables":[{"name":"tail_3","nodeType":"YulTypedName","src":"17243:6:29","type":""}]},{"expression":{"arguments":[{"name":"tail_2","nodeType":"YulIdentifier","src":"17288:6:29"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"17309:5:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"17296:12:29"},"nodeType":"YulFunctionCall","src":"17296:19:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17281:6:29"},"nodeType":"YulFunctionCall","src":"17281:35:29"},"nodeType":"YulExpressionStatement","src":"17281:35:29"},{"nodeType":"YulVariableDeclaration","src":"17329:56:29","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"17374:5:29"},{"name":"_1","nodeType":"YulIdentifier","src":"17381:2:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17370:3:29"},"nodeType":"YulFunctionCall","src":"17370:14:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"17357:12:29"},"nodeType":"YulFunctionCall","src":"17357:28:29"},"variables":[{"name":"rel_offset_of_tail_1","nodeType":"YulTypedName","src":"17333:20:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"17477:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"17486:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"17489:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"17479:6:29"},"nodeType":"YulFunctionCall","src":"17479:12:29"},"nodeType":"YulExpressionStatement","src":"17479:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"rel_offset_of_tail_1","nodeType":"YulIdentifier","src":"17412:20:29"},{"arguments":[{"arguments":[{"arguments":[],"functionName":{"name":"calldatasize","nodeType":"YulIdentifier","src":"17442:12:29"},"nodeType":"YulFunctionCall","src":"17442:14:29"},{"name":"value","nodeType":"YulIdentifier","src":"17458:5:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"17438:3:29"},"nodeType":"YulFunctionCall","src":"17438:26:29"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"17470:2:29","type":"","value":"30"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"17466:3:29"},"nodeType":"YulFunctionCall","src":"17466:7:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17434:3:29"},"nodeType":"YulFunctionCall","src":"17434:40:29"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"17408:3:29"},"nodeType":"YulFunctionCall","src":"17408:67:29"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"17401:6:29"},"nodeType":"YulFunctionCall","src":"17401:75:29"},"nodeType":"YulIf","src":"17398:95:29"},{"nodeType":"YulVariableDeclaration","src":"17506:47:29","value":{"arguments":[{"name":"rel_offset_of_tail_1","nodeType":"YulIdentifier","src":"17525:20:29"},{"name":"value","nodeType":"YulIdentifier","src":"17547:5:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17521:3:29"},"nodeType":"YulFunctionCall","src":"17521:32:29"},"variables":[{"name":"value_1","nodeType":"YulTypedName","src":"17510:7:29","type":""}]},{"nodeType":"YulVariableDeclaration","src":"17566:35:29","value":{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"17593:7:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"17580:12:29"},"nodeType":"YulFunctionCall","src":"17580:21:29"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"17570:6:29","type":""}]},{"nodeType":"YulVariableDeclaration","src":"17614:31:29","value":{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"17633:7:29"},{"name":"_1","nodeType":"YulIdentifier","src":"17642:2:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17629:3:29"},"nodeType":"YulFunctionCall","src":"17629:16:29"},"variables":[{"name":"value_2","nodeType":"YulTypedName","src":"17618:7:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"17692:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"17701:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"17704:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"17694:6:29"},"nodeType":"YulFunctionCall","src":"17694:12:29"},"nodeType":"YulExpressionStatement","src":"17694:12:29"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"17664:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"17672:18:29","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"17661:2:29"},"nodeType":"YulFunctionCall","src":"17661:30:29"},"nodeType":"YulIf","src":"17658:50:29"},{"body":{"nodeType":"YulBlock","src":"17774:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"17783:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"17786:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"17776:6:29"},"nodeType":"YulFunctionCall","src":"17776:12:29"},"nodeType":"YulExpressionStatement","src":"17776:12:29"}]},"condition":{"arguments":[{"name":"value_2","nodeType":"YulIdentifier","src":"17728:7:29"},{"arguments":[{"arguments":[],"functionName":{"name":"calldatasize","nodeType":"YulIdentifier","src":"17741:12:29"},"nodeType":"YulFunctionCall","src":"17741:14:29"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"17761:1:29","type":"","value":"6"},{"name":"length","nodeType":"YulIdentifier","src":"17764:6:29"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"17757:3:29"},"nodeType":"YulFunctionCall","src":"17757:14:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"17737:3:29"},"nodeType":"YulFunctionCall","src":"17737:35:29"}],"functionName":{"name":"sgt","nodeType":"YulIdentifier","src":"17724:3:29"},"nodeType":"YulFunctionCall","src":"17724:49:29"},"nodeType":"YulIf","src":"17721:69:29"},{"expression":{"arguments":[{"arguments":[{"name":"tail_2","nodeType":"YulIdentifier","src":"17814:6:29"},{"name":"_1","nodeType":"YulIdentifier","src":"17822:2:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17810:3:29"},"nodeType":"YulFunctionCall","src":"17810:15:29"},{"name":"_2","nodeType":"YulIdentifier","src":"17827:2:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17803:6:29"},"nodeType":"YulFunctionCall","src":"17803:27:29"},"nodeType":"YulExpressionStatement","src":"17803:27:29"},{"nodeType":"YulVariableDeclaration","src":"17843:19:29","value":{"name":"tail_3","nodeType":"YulIdentifier","src":"17856:6:29"},"variables":[{"name":"pos_1","nodeType":"YulTypedName","src":"17847:5:29","type":""}]},{"expression":{"arguments":[{"name":"tail_3","nodeType":"YulIdentifier","src":"17882:6:29"},{"name":"length","nodeType":"YulIdentifier","src":"17890:6:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17875:6:29"},"nodeType":"YulFunctionCall","src":"17875:22:29"},"nodeType":"YulExpressionStatement","src":"17875:22:29"},{"nodeType":"YulAssignment","src":"17910:24:29","value":{"arguments":[{"name":"tail_2","nodeType":"YulIdentifier","src":"17923:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"17931:2:29","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17919:3:29"},"nodeType":"YulFunctionCall","src":"17919:15:29"},"variableNames":[{"name":"pos_1","nodeType":"YulIdentifier","src":"17910:5:29"}]},{"nodeType":"YulVariableDeclaration","src":"17947:23:29","value":{"name":"value_2","nodeType":"YulIdentifier","src":"17963:7:29"},"variables":[{"name":"srcPtr_1","nodeType":"YulTypedName","src":"17951:8:29","type":""}]},{"nodeType":"YulVariableDeclaration","src":"17983:12:29","value":{"kind":"number","nodeType":"YulLiteral","src":"17994:1:29","type":"","value":"0"},"variables":[{"name":"i_1","nodeType":"YulTypedName","src":"17987:3:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"18067:227:29","statements":[{"expression":{"arguments":[{"name":"pos_1","nodeType":"YulIdentifier","src":"18092:5:29"},{"arguments":[{"name":"srcPtr_1","nodeType":"YulIdentifier","src":"18112:8:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"18099:12:29"},"nodeType":"YulFunctionCall","src":"18099:22:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18085:6:29"},"nodeType":"YulFunctionCall","src":"18085:37:29"},"nodeType":"YulExpressionStatement","src":"18085:37:29"},{"expression":{"arguments":[{"arguments":[{"name":"pos_1","nodeType":"YulIdentifier","src":"18150:5:29"},{"name":"_1","nodeType":"YulIdentifier","src":"18157:2:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18146:3:29"},"nodeType":"YulFunctionCall","src":"18146:14:29"},{"arguments":[{"arguments":[{"name":"srcPtr_1","nodeType":"YulIdentifier","src":"18179:8:29"},{"name":"_1","nodeType":"YulIdentifier","src":"18189:2:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18175:3:29"},"nodeType":"YulFunctionCall","src":"18175:17:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"18162:12:29"},"nodeType":"YulFunctionCall","src":"18162:31:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18139:6:29"},"nodeType":"YulFunctionCall","src":"18139:55:29"},"nodeType":"YulExpressionStatement","src":"18139:55:29"},{"nodeType":"YulAssignment","src":"18211:23:29","value":{"arguments":[{"name":"pos_1","nodeType":"YulIdentifier","src":"18224:5:29"},{"name":"_2","nodeType":"YulIdentifier","src":"18231:2:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18220:3:29"},"nodeType":"YulFunctionCall","src":"18220:14:29"},"variableNames":[{"name":"pos_1","nodeType":"YulIdentifier","src":"18211:5:29"}]},{"nodeType":"YulAssignment","src":"18251:29:29","value":{"arguments":[{"name":"srcPtr_1","nodeType":"YulIdentifier","src":"18267:8:29"},{"name":"_2","nodeType":"YulIdentifier","src":"18277:2:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18263:3:29"},"nodeType":"YulFunctionCall","src":"18263:17:29"},"variableNames":[{"name":"srcPtr_1","nodeType":"YulIdentifier","src":"18251:8:29"}]}]},"condition":{"arguments":[{"name":"i_1","nodeType":"YulIdentifier","src":"18019:3:29"},{"name":"length","nodeType":"YulIdentifier","src":"18024:6:29"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"18016:2:29"},"nodeType":"YulFunctionCall","src":"18016:15:29"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"18032:22:29","statements":[{"nodeType":"YulAssignment","src":"18034:18:29","value":{"arguments":[{"name":"i_1","nodeType":"YulIdentifier","src":"18045:3:29"},{"kind":"number","nodeType":"YulLiteral","src":"18050:1:29","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18041:3:29"},"nodeType":"YulFunctionCall","src":"18041:11:29"},"variableNames":[{"name":"i_1","nodeType":"YulIdentifier","src":"18034:3:29"}]}]},"pre":{"nodeType":"YulBlock","src":"18012:3:29","statements":[]},"src":"18008:286:29"},{"nodeType":"YulAssignment","src":"18307:15:29","value":{"name":"pos_1","nodeType":"YulIdentifier","src":"18317:5:29"},"variableNames":[{"name":"tail_2","nodeType":"YulIdentifier","src":"18307:6:29"}]},{"nodeType":"YulAssignment","src":"18335:25:29","value":{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"18349:6:29"},{"name":"_1","nodeType":"YulIdentifier","src":"18357:2:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18345:3:29"},"nodeType":"YulFunctionCall","src":"18345:15:29"},"variableNames":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"18335:6:29"}]},{"nodeType":"YulAssignment","src":"18373:19:29","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"18384:3:29"},{"name":"_1","nodeType":"YulIdentifier","src":"18389:2:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18380:3:29"},"nodeType":"YulFunctionCall","src":"18380:12:29"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"18373:3:29"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"16902:1:29"},{"name":"value1","nodeType":"YulIdentifier","src":"16905:6:29"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"16899:2:29"},"nodeType":"YulFunctionCall","src":"16899:13:29"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"16913:18:29","statements":[{"nodeType":"YulAssignment","src":"16915:14:29","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"16924:1:29"},{"kind":"number","nodeType":"YulLiteral","src":"16927:1:29","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16920:3:29"},"nodeType":"YulFunctionCall","src":"16920:9:29"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"16915:1:29"}]}]},"pre":{"nodeType":"YulBlock","src":"16895:3:29","statements":[]},"src":"16891:1511:29"},{"nodeType":"YulAssignment","src":"18411:14:29","value":{"name":"tail_2","nodeType":"YulIdentifier","src":"18419:6:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"18411:4:29"}]}]},"name":"abi_encode_tuple_t_array$_t_struct$_MultiRevocationRequest_$147_calldata_ptr_$dyn_calldata_ptr__to_t_array$_t_struct$_MultiRevocationRequest_$147_memory_ptr_$dyn_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"16528:9:29","type":""},{"name":"value1","nodeType":"YulTypedName","src":"16539:6:29","type":""},{"name":"value0","nodeType":"YulTypedName","src":"16547:6:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"16558:4:29","type":""}],"src":"16326:2105:29"},{"body":{"nodeType":"YulBlock","src":"18553:222:29","statements":[{"nodeType":"YulVariableDeclaration","src":"18563:51:29","value":{"arguments":[{"name":"ptr_to_tail","nodeType":"YulIdentifier","src":"18602:11:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"18589:12:29"},"nodeType":"YulFunctionCall","src":"18589:25:29"},"variables":[{"name":"rel_offset_of_tail","nodeType":"YulTypedName","src":"18567:18:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"18703:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"18712:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"18715:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"18705:6:29"},"nodeType":"YulFunctionCall","src":"18705:12:29"},"nodeType":"YulExpressionStatement","src":"18705:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"rel_offset_of_tail","nodeType":"YulIdentifier","src":"18637:18:29"},{"arguments":[{"arguments":[{"arguments":[],"functionName":{"name":"calldatasize","nodeType":"YulIdentifier","src":"18665:12:29"},"nodeType":"YulFunctionCall","src":"18665:14:29"},{"name":"base_ref","nodeType":"YulIdentifier","src":"18681:8:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"18661:3:29"},"nodeType":"YulFunctionCall","src":"18661:29:29"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"18696:2:29","type":"","value":"94"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"18692:3:29"},"nodeType":"YulFunctionCall","src":"18692:7:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18657:3:29"},"nodeType":"YulFunctionCall","src":"18657:43:29"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"18633:3:29"},"nodeType":"YulFunctionCall","src":"18633:68:29"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"18626:6:29"},"nodeType":"YulFunctionCall","src":"18626:76:29"},"nodeType":"YulIf","src":"18623:96:29"},{"nodeType":"YulAssignment","src":"18728:41:29","value":{"arguments":[{"name":"base_ref","nodeType":"YulIdentifier","src":"18740:8:29"},{"name":"rel_offset_of_tail","nodeType":"YulIdentifier","src":"18750:18:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18736:3:29"},"nodeType":"YulFunctionCall","src":"18736:33:29"},"variableNames":[{"name":"addr","nodeType":"YulIdentifier","src":"18728:4:29"}]}]},"name":"access_calldata_tail_t_struct$_AttestationRequestNode_$5232_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"base_ref","nodeType":"YulTypedName","src":"18518:8:29","type":""},{"name":"ptr_to_tail","nodeType":"YulTypedName","src":"18528:11:29","type":""}],"returnVariables":[{"name":"addr","nodeType":"YulTypedName","src":"18544:4:29","type":""}],"src":"18436:339:29"},{"body":{"nodeType":"YulBlock","src":"18897:222:29","statements":[{"nodeType":"YulVariableDeclaration","src":"18907:51:29","value":{"arguments":[{"name":"ptr_to_tail","nodeType":"YulIdentifier","src":"18946:11:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"18933:12:29"},"nodeType":"YulFunctionCall","src":"18933:25:29"},"variables":[{"name":"rel_offset_of_tail","nodeType":"YulTypedName","src":"18911:18:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"19047:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"19056:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"19059:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"19049:6:29"},"nodeType":"YulFunctionCall","src":"19049:12:29"},"nodeType":"YulExpressionStatement","src":"19049:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"rel_offset_of_tail","nodeType":"YulIdentifier","src":"18981:18:29"},{"arguments":[{"arguments":[{"arguments":[],"functionName":{"name":"calldatasize","nodeType":"YulIdentifier","src":"19009:12:29"},"nodeType":"YulFunctionCall","src":"19009:14:29"},{"name":"base_ref","nodeType":"YulIdentifier","src":"19025:8:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"19005:3:29"},"nodeType":"YulFunctionCall","src":"19005:29:29"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"19040:2:29","type":"","value":"62"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"19036:3:29"},"nodeType":"YulFunctionCall","src":"19036:7:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19001:3:29"},"nodeType":"YulFunctionCall","src":"19001:43:29"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"18977:3:29"},"nodeType":"YulFunctionCall","src":"18977:68:29"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"18970:6:29"},"nodeType":"YulFunctionCall","src":"18970:76:29"},"nodeType":"YulIf","src":"18967:96:29"},{"nodeType":"YulAssignment","src":"19072:41:29","value":{"arguments":[{"name":"base_ref","nodeType":"YulIdentifier","src":"19084:8:29"},{"name":"rel_offset_of_tail","nodeType":"YulIdentifier","src":"19094:18:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19080:3:29"},"nodeType":"YulFunctionCall","src":"19080:33:29"},"variableNames":[{"name":"addr","nodeType":"YulIdentifier","src":"19072:4:29"}]}]},"name":"access_calldata_tail_t_struct$_MultiAttestationRequest_$105_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"base_ref","nodeType":"YulTypedName","src":"18862:8:29","type":""},{"name":"ptr_to_tail","nodeType":"YulTypedName","src":"18872:11:29","type":""}],"returnVariables":[{"name":"addr","nodeType":"YulTypedName","src":"18888:4:29","type":""}],"src":"18780:339:29"},{"body":{"nodeType":"YulBlock","src":"19203:1024:29","statements":[{"body":{"nodeType":"YulBlock","src":"19247:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"19256:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"19259:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"19249:6:29"},"nodeType":"YulFunctionCall","src":"19249:12:29"},"nodeType":"YulExpressionStatement","src":"19249:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"end","nodeType":"YulIdentifier","src":"19224:3:29"},{"name":"headStart","nodeType":"YulIdentifier","src":"19229:9:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"19220:3:29"},"nodeType":"YulFunctionCall","src":"19220:19:29"},{"kind":"number","nodeType":"YulLiteral","src":"19241:4:29","type":"","value":"0xc0"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"19216:3:29"},"nodeType":"YulFunctionCall","src":"19216:30:29"},"nodeType":"YulIf","src":"19213:50:29"},{"nodeType":"YulVariableDeclaration","src":"19272:23:29","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"19292:2:29","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"19286:5:29"},"nodeType":"YulFunctionCall","src":"19286:9:29"},"variables":[{"name":"memPtr","nodeType":"YulTypedName","src":"19276:6:29","type":""}]},{"nodeType":"YulVariableDeclaration","src":"19304:35:29","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"19326:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"19334:4:29","type":"","value":"0xc0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19322:3:29"},"nodeType":"YulFunctionCall","src":"19322:17:29"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"19308:10:29","type":""}]},{"nodeType":"YulVariableDeclaration","src":"19348:28:29","value":{"kind":"number","nodeType":"YulLiteral","src":"19358:18:29","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"19352:2:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"19435:22:29","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"19437:16:29"},"nodeType":"YulFunctionCall","src":"19437:18:29"},"nodeType":"YulExpressionStatement","src":"19437:18:29"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"19394:10:29"},{"name":"_1","nodeType":"YulIdentifier","src":"19406:2:29"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"19391:2:29"},"nodeType":"YulFunctionCall","src":"19391:18:29"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"19414:10:29"},{"name":"memPtr","nodeType":"YulIdentifier","src":"19426:6:29"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"19411:2:29"},"nodeType":"YulFunctionCall","src":"19411:22:29"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"19388:2:29"},"nodeType":"YulFunctionCall","src":"19388:46:29"},"nodeType":"YulIf","src":"19385:72:29"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"19473:2:29","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"19477:10:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19466:6:29"},"nodeType":"YulFunctionCall","src":"19466:22:29"},"nodeType":"YulExpressionStatement","src":"19466:22:29"},{"nodeType":"YulAssignment","src":"19497:15:29","value":{"name":"memPtr","nodeType":"YulIdentifier","src":"19506:6:29"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"19497:5:29"}]},{"nodeType":"YulVariableDeclaration","src":"19521:38:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19549:9:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"19536:12:29"},"nodeType":"YulFunctionCall","src":"19536:23:29"},"variables":[{"name":"value_1","nodeType":"YulTypedName","src":"19525:7:29","type":""}]},{"expression":{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"19593:7:29"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"19568:24:29"},"nodeType":"YulFunctionCall","src":"19568:33:29"},"nodeType":"YulExpressionStatement","src":"19568:33:29"},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"19617:6:29"},{"name":"value_1","nodeType":"YulIdentifier","src":"19625:7:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19610:6:29"},"nodeType":"YulFunctionCall","src":"19610:23:29"},"nodeType":"YulExpressionStatement","src":"19610:23:29"},{"nodeType":"YulVariableDeclaration","src":"19642:47:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19674:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"19685:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19670:3:29"},"nodeType":"YulFunctionCall","src":"19670:18:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"19657:12:29"},"nodeType":"YulFunctionCall","src":"19657:32:29"},"variables":[{"name":"value_2","nodeType":"YulTypedName","src":"19646:7:29","type":""}]},{"expression":{"arguments":[{"name":"value_2","nodeType":"YulIdentifier","src":"19722:7:29"}],"functionName":{"name":"validator_revert_uint64","nodeType":"YulIdentifier","src":"19698:23:29"},"nodeType":"YulFunctionCall","src":"19698:32:29"},"nodeType":"YulExpressionStatement","src":"19698:32:29"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"19750:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"19758:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19746:3:29"},"nodeType":"YulFunctionCall","src":"19746:15:29"},{"name":"value_2","nodeType":"YulIdentifier","src":"19763:7:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19739:6:29"},"nodeType":"YulFunctionCall","src":"19739:32:29"},"nodeType":"YulExpressionStatement","src":"19739:32:29"},{"nodeType":"YulVariableDeclaration","src":"19780:47:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19812:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"19823:2:29","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19808:3:29"},"nodeType":"YulFunctionCall","src":"19808:18:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"19795:12:29"},"nodeType":"YulFunctionCall","src":"19795:32:29"},"variables":[{"name":"value_3","nodeType":"YulTypedName","src":"19784:7:29","type":""}]},{"expression":{"arguments":[{"name":"value_3","nodeType":"YulIdentifier","src":"19858:7:29"}],"functionName":{"name":"validator_revert_bool","nodeType":"YulIdentifier","src":"19836:21:29"},"nodeType":"YulFunctionCall","src":"19836:30:29"},"nodeType":"YulExpressionStatement","src":"19836:30:29"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"19886:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"19894:2:29","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19882:3:29"},"nodeType":"YulFunctionCall","src":"19882:15:29"},{"name":"value_3","nodeType":"YulIdentifier","src":"19899:7:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19875:6:29"},"nodeType":"YulFunctionCall","src":"19875:32:29"},"nodeType":"YulExpressionStatement","src":"19875:32:29"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"19927:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"19935:2:29","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19923:3:29"},"nodeType":"YulFunctionCall","src":"19923:15:29"},{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19957:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"19968:2:29","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19953:3:29"},"nodeType":"YulFunctionCall","src":"19953:18:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"19940:12:29"},"nodeType":"YulFunctionCall","src":"19940:32:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19916:6:29"},"nodeType":"YulFunctionCall","src":"19916:57:29"},"nodeType":"YulExpressionStatement","src":"19916:57:29"},{"nodeType":"YulVariableDeclaration","src":"19982:47:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20013:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"20024:3:29","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20009:3:29"},"nodeType":"YulFunctionCall","src":"20009:19:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"19996:12:29"},"nodeType":"YulFunctionCall","src":"19996:33:29"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"19986:6:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"20056:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"20065:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"20068:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"20058:6:29"},"nodeType":"YulFunctionCall","src":"20058:12:29"},"nodeType":"YulExpressionStatement","src":"20058:12:29"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"20044:6:29"},{"name":"_1","nodeType":"YulIdentifier","src":"20052:2:29"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"20041:2:29"},"nodeType":"YulFunctionCall","src":"20041:14:29"},"nodeType":"YulIf","src":"20038:34:29"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"20092:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"20100:3:29","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20088:3:29"},"nodeType":"YulFunctionCall","src":"20088:16:29"},{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20128:9:29"},{"name":"offset","nodeType":"YulIdentifier","src":"20139:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20124:3:29"},"nodeType":"YulFunctionCall","src":"20124:22:29"},{"name":"end","nodeType":"YulIdentifier","src":"20148:3:29"}],"functionName":{"name":"abi_decode_string","nodeType":"YulIdentifier","src":"20106:17:29"},"nodeType":"YulFunctionCall","src":"20106:46:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20081:6:29"},"nodeType":"YulFunctionCall","src":"20081:72:29"},"nodeType":"YulExpressionStatement","src":"20081:72:29"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"20173:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"20181:3:29","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20169:3:29"},"nodeType":"YulFunctionCall","src":"20169:16:29"},{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20204:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"20215:3:29","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20200:3:29"},"nodeType":"YulFunctionCall","src":"20200:19:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"20187:12:29"},"nodeType":"YulFunctionCall","src":"20187:33:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20162:6:29"},"nodeType":"YulFunctionCall","src":"20162:59:29"},"nodeType":"YulExpressionStatement","src":"20162:59:29"}]},"name":"abi_decode_struct_AttestationRequestData","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"19174:9:29","type":""},{"name":"end","nodeType":"YulTypedName","src":"19185:3:29","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"19193:5:29","type":""}],"src":"19124:1103:29"},{"body":{"nodeType":"YulBlock","src":"20378:1235:29","statements":[{"body":{"nodeType":"YulBlock","src":"20429:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"20438:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"20441:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"20431:6:29"},"nodeType":"YulFunctionCall","src":"20431:12:29"},"nodeType":"YulExpressionStatement","src":"20431:12:29"}]},"condition":{"arguments":[{"arguments":[{"arguments":[],"functionName":{"name":"calldatasize","nodeType":"YulIdentifier","src":"20399:12:29"},"nodeType":"YulFunctionCall","src":"20399:14:29"},{"name":"value","nodeType":"YulIdentifier","src":"20415:5:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"20395:3:29"},"nodeType":"YulFunctionCall","src":"20395:26:29"},{"kind":"number","nodeType":"YulLiteral","src":"20423:4:29","type":"","value":"0x40"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"20391:3:29"},"nodeType":"YulFunctionCall","src":"20391:37:29"},"nodeType":"YulIf","src":"20388:57:29"},{"nodeType":"YulVariableDeclaration","src":"20454:37:29","value":{"arguments":[],"functionName":{"name":"allocate_memory_6725","nodeType":"YulIdentifier","src":"20469:20:29"},"nodeType":"YulFunctionCall","src":"20469:22:29"},"variables":[{"name":"value_1","nodeType":"YulTypedName","src":"20458:7:29","type":""}]},{"expression":{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"20507:7:29"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"20529:5:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"20516:12:29"},"nodeType":"YulFunctionCall","src":"20516:19:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20500:6:29"},"nodeType":"YulFunctionCall","src":"20500:36:29"},"nodeType":"YulExpressionStatement","src":"20500:36:29"},{"nodeType":"YulVariableDeclaration","src":"20545:12:29","value":{"kind":"number","nodeType":"YulLiteral","src":"20555:2:29","type":"","value":"32"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"20549:2:29","type":""}]},{"nodeType":"YulVariableDeclaration","src":"20566:42:29","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"20597:5:29"},{"name":"_1","nodeType":"YulIdentifier","src":"20604:2:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20593:3:29"},"nodeType":"YulFunctionCall","src":"20593:14:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"20580:12:29"},"nodeType":"YulFunctionCall","src":"20580:28:29"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"20570:6:29","type":""}]},{"nodeType":"YulVariableDeclaration","src":"20617:28:29","value":{"kind":"number","nodeType":"YulLiteral","src":"20627:18:29","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"20621:2:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"20672:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"20681:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"20684:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"20674:6:29"},"nodeType":"YulFunctionCall","src":"20674:12:29"},"nodeType":"YulExpressionStatement","src":"20674:12:29"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"20660:6:29"},{"name":"_2","nodeType":"YulIdentifier","src":"20668:2:29"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"20657:2:29"},"nodeType":"YulFunctionCall","src":"20657:14:29"},"nodeType":"YulIf","src":"20654:34:29"},{"nodeType":"YulVariableDeclaration","src":"20697:28:29","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"20711:5:29"},{"name":"offset","nodeType":"YulIdentifier","src":"20718:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20707:3:29"},"nodeType":"YulFunctionCall","src":"20707:18:29"},"variables":[{"name":"_3","nodeType":"YulTypedName","src":"20701:2:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"20780:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"20789:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"20792:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"20782:6:29"},"nodeType":"YulFunctionCall","src":"20782:12:29"},"nodeType":"YulExpressionStatement","src":"20782:12:29"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"20752:2:29"},{"kind":"number","nodeType":"YulLiteral","src":"20756:4:29","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20748:3:29"},"nodeType":"YulFunctionCall","src":"20748:13:29"},{"arguments":[],"functionName":{"name":"calldatasize","nodeType":"YulIdentifier","src":"20763:12:29"},"nodeType":"YulFunctionCall","src":"20763:14:29"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"20744:3:29"},"nodeType":"YulFunctionCall","src":"20744:34:29"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"20737:6:29"},"nodeType":"YulFunctionCall","src":"20737:42:29"},"nodeType":"YulIf","src":"20734:62:29"},{"nodeType":"YulVariableDeclaration","src":"20805:26:29","value":{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"20828:2:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"20815:12:29"},"nodeType":"YulFunctionCall","src":"20815:16:29"},"variables":[{"name":"_4","nodeType":"YulTypedName","src":"20809:2:29","type":""}]},{"nodeType":"YulVariableDeclaration","src":"20840:92:29","value":{"arguments":[{"arguments":[{"name":"_4","nodeType":"YulIdentifier","src":"20928:2:29"}],"functionName":{"name":"array_allocation_size_array_struct_RevocationRequestData_dyn","nodeType":"YulIdentifier","src":"20867:60:29"},"nodeType":"YulFunctionCall","src":"20867:64:29"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"20851:15:29"},"nodeType":"YulFunctionCall","src":"20851:81:29"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"20844:3:29","type":""}]},{"nodeType":"YulVariableDeclaration","src":"20941:16:29","value":{"name":"dst","nodeType":"YulIdentifier","src":"20954:3:29"},"variables":[{"name":"dst_1","nodeType":"YulTypedName","src":"20945:5:29","type":""}]},{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"20973:3:29"},{"name":"_4","nodeType":"YulIdentifier","src":"20978:2:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20966:6:29"},"nodeType":"YulFunctionCall","src":"20966:15:29"},"nodeType":"YulExpressionStatement","src":"20966:15:29"},{"nodeType":"YulAssignment","src":"20990:19:29","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"21001:3:29"},{"name":"_1","nodeType":"YulIdentifier","src":"21006:2:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20997:3:29"},"nodeType":"YulFunctionCall","src":"20997:12:29"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"20990:3:29"}]},{"nodeType":"YulVariableDeclaration","src":"21018:42:29","value":{"arguments":[{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"21040:2:29"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"21048:1:29","type":"","value":"5"},{"name":"_4","nodeType":"YulIdentifier","src":"21051:2:29"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"21044:3:29"},"nodeType":"YulFunctionCall","src":"21044:10:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21036:3:29"},"nodeType":"YulFunctionCall","src":"21036:19:29"},{"name":"_1","nodeType":"YulIdentifier","src":"21057:2:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21032:3:29"},"nodeType":"YulFunctionCall","src":"21032:28:29"},"variables":[{"name":"srcEnd","nodeType":"YulTypedName","src":"21022:6:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"21099:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"21108:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"21111:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"21101:6:29"},"nodeType":"YulFunctionCall","src":"21101:12:29"},"nodeType":"YulExpressionStatement","src":"21101:12:29"}]},"condition":{"arguments":[{"name":"srcEnd","nodeType":"YulIdentifier","src":"21075:6:29"},{"arguments":[],"functionName":{"name":"calldatasize","nodeType":"YulIdentifier","src":"21083:12:29"},"nodeType":"YulFunctionCall","src":"21083:14:29"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"21072:2:29"},"nodeType":"YulFunctionCall","src":"21072:26:29"},"nodeType":"YulIf","src":"21069:46:29"},{"nodeType":"YulVariableDeclaration","src":"21124:22:29","value":{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"21139:2:29"},{"name":"_1","nodeType":"YulIdentifier","src":"21143:2:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21135:3:29"},"nodeType":"YulFunctionCall","src":"21135:11:29"},"variables":[{"name":"src","nodeType":"YulTypedName","src":"21128:3:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"21211:327:29","statements":[{"nodeType":"YulVariableDeclaration","src":"21225:36:29","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"21257:3:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"21244:12:29"},"nodeType":"YulFunctionCall","src":"21244:17:29"},"variables":[{"name":"innerOffset","nodeType":"YulTypedName","src":"21229:11:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"21309:74:29","statements":[{"nodeType":"YulVariableDeclaration","src":"21327:11:29","value":{"kind":"number","nodeType":"YulLiteral","src":"21337:1:29","type":"","value":"0"},"variables":[{"name":"_5","nodeType":"YulTypedName","src":"21331:2:29","type":""}]},{"expression":{"arguments":[{"name":"_5","nodeType":"YulIdentifier","src":"21362:2:29"},{"name":"_5","nodeType":"YulIdentifier","src":"21366:2:29"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"21355:6:29"},"nodeType":"YulFunctionCall","src":"21355:14:29"},"nodeType":"YulExpressionStatement","src":"21355:14:29"}]},"condition":{"arguments":[{"name":"innerOffset","nodeType":"YulIdentifier","src":"21280:11:29"},{"name":"_2","nodeType":"YulIdentifier","src":"21293:2:29"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"21277:2:29"},"nodeType":"YulFunctionCall","src":"21277:19:29"},"nodeType":"YulIf","src":"21274:109:29"},{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"21403:3:29"},{"arguments":[{"arguments":[{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"21457:2:29"},{"name":"innerOffset","nodeType":"YulIdentifier","src":"21461:11:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21453:3:29"},"nodeType":"YulFunctionCall","src":"21453:20:29"},{"name":"_1","nodeType":"YulIdentifier","src":"21475:2:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21449:3:29"},"nodeType":"YulFunctionCall","src":"21449:29:29"},{"arguments":[],"functionName":{"name":"calldatasize","nodeType":"YulIdentifier","src":"21480:12:29"},"nodeType":"YulFunctionCall","src":"21480:14:29"}],"functionName":{"name":"abi_decode_struct_AttestationRequestData","nodeType":"YulIdentifier","src":"21408:40:29"},"nodeType":"YulFunctionCall","src":"21408:87:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21396:6:29"},"nodeType":"YulFunctionCall","src":"21396:100:29"},"nodeType":"YulExpressionStatement","src":"21396:100:29"},{"nodeType":"YulAssignment","src":"21509:19:29","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"21520:3:29"},{"name":"_1","nodeType":"YulIdentifier","src":"21525:2:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21516:3:29"},"nodeType":"YulFunctionCall","src":"21516:12:29"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"21509:3:29"}]}]},"condition":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"21166:3:29"},{"name":"srcEnd","nodeType":"YulIdentifier","src":"21171:6:29"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"21163:2:29"},"nodeType":"YulFunctionCall","src":"21163:15:29"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"21179:23:29","statements":[{"nodeType":"YulAssignment","src":"21181:19:29","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"21192:3:29"},{"name":"_1","nodeType":"YulIdentifier","src":"21197:2:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21188:3:29"},"nodeType":"YulFunctionCall","src":"21188:12:29"},"variableNames":[{"name":"src","nodeType":"YulIdentifier","src":"21181:3:29"}]}]},"pre":{"nodeType":"YulBlock","src":"21159:3:29","statements":[]},"src":"21155:383:29"},{"expression":{"arguments":[{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"21558:7:29"},{"name":"_1","nodeType":"YulIdentifier","src":"21567:2:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21554:3:29"},"nodeType":"YulFunctionCall","src":"21554:16:29"},{"name":"dst_1","nodeType":"YulIdentifier","src":"21572:5:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21547:6:29"},"nodeType":"YulFunctionCall","src":"21547:31:29"},"nodeType":"YulExpressionStatement","src":"21547:31:29"},{"nodeType":"YulAssignment","src":"21587:20:29","value":{"name":"value_1","nodeType":"YulIdentifier","src":"21600:7:29"},"variableNames":[{"name":"converted","nodeType":"YulIdentifier","src":"21587:9:29"}]}]},"name":"convert_t_struct$_MultiAttestationRequest_$105_calldata_ptr_to_t_struct$_MultiAttestationRequest_$105_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"20354:5:29","type":""}],"returnVariables":[{"name":"converted","nodeType":"YulTypedName","src":"20364:9:29","type":""}],"src":"20232:1381:29"},{"body":{"nodeType":"YulBlock","src":"21849:2107:29","statements":[{"nodeType":"YulVariableDeclaration","src":"21859:12:29","value":{"kind":"number","nodeType":"YulLiteral","src":"21869:2:29","type":"","value":"32"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"21863:2:29","type":""}]},{"nodeType":"YulVariableDeclaration","src":"21880:32:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21898:9:29"},{"name":"_1","nodeType":"YulIdentifier","src":"21909:2:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21894:3:29"},"nodeType":"YulFunctionCall","src":"21894:18:29"},"variables":[{"name":"tail_1","nodeType":"YulTypedName","src":"21884:6:29","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21928:9:29"},{"name":"_1","nodeType":"YulIdentifier","src":"21939:2:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21921:6:29"},"nodeType":"YulFunctionCall","src":"21921:21:29"},"nodeType":"YulExpressionStatement","src":"21921:21:29"},{"nodeType":"YulVariableDeclaration","src":"21951:17:29","value":{"name":"tail_1","nodeType":"YulIdentifier","src":"21962:6:29"},"variables":[{"name":"pos","nodeType":"YulTypedName","src":"21955:3:29","type":""}]},{"nodeType":"YulVariableDeclaration","src":"21977:27:29","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"21997:6:29"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"21991:5:29"},"nodeType":"YulFunctionCall","src":"21991:13:29"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"21981:6:29","type":""}]},{"expression":{"arguments":[{"name":"tail_1","nodeType":"YulIdentifier","src":"22020:6:29"},{"name":"length","nodeType":"YulIdentifier","src":"22028:6:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22013:6:29"},"nodeType":"YulFunctionCall","src":"22013:22:29"},"nodeType":"YulExpressionStatement","src":"22013:22:29"},{"nodeType":"YulVariableDeclaration","src":"22044:12:29","value":{"kind":"number","nodeType":"YulLiteral","src":"22054:2:29","type":"","value":"64"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"22048:2:29","type":""}]},{"nodeType":"YulAssignment","src":"22065:25:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22076:9:29"},{"name":"_2","nodeType":"YulIdentifier","src":"22087:2:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22072:3:29"},"nodeType":"YulFunctionCall","src":"22072:18:29"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"22065:3:29"}]},{"nodeType":"YulVariableDeclaration","src":"22099:53:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22121:9:29"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"22136:1:29","type":"","value":"5"},{"name":"length","nodeType":"YulIdentifier","src":"22139:6:29"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"22132:3:29"},"nodeType":"YulFunctionCall","src":"22132:14:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22117:3:29"},"nodeType":"YulFunctionCall","src":"22117:30:29"},{"name":"_2","nodeType":"YulIdentifier","src":"22149:2:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22113:3:29"},"nodeType":"YulFunctionCall","src":"22113:39:29"},"variables":[{"name":"tail_2","nodeType":"YulTypedName","src":"22103:6:29","type":""}]},{"nodeType":"YulVariableDeclaration","src":"22161:29:29","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"22179:6:29"},{"name":"_1","nodeType":"YulIdentifier","src":"22187:2:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22175:3:29"},"nodeType":"YulFunctionCall","src":"22175:15:29"},"variables":[{"name":"srcPtr","nodeType":"YulTypedName","src":"22165:6:29","type":""}]},{"nodeType":"YulVariableDeclaration","src":"22199:10:29","value":{"kind":"number","nodeType":"YulLiteral","src":"22208:1:29","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"22203:1:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"22267:1660:29","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"22288:3:29"},{"arguments":[{"arguments":[{"name":"tail_2","nodeType":"YulIdentifier","src":"22301:6:29"},{"name":"headStart","nodeType":"YulIdentifier","src":"22309:9:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"22297:3:29"},"nodeType":"YulFunctionCall","src":"22297:22:29"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"22325:2:29","type":"","value":"63"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"22321:3:29"},"nodeType":"YulFunctionCall","src":"22321:7:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22293:3:29"},"nodeType":"YulFunctionCall","src":"22293:36:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22281:6:29"},"nodeType":"YulFunctionCall","src":"22281:49:29"},"nodeType":"YulExpressionStatement","src":"22281:49:29"},{"nodeType":"YulVariableDeclaration","src":"22343:23:29","value":{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"22359:6:29"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"22353:5:29"},"nodeType":"YulFunctionCall","src":"22353:13:29"},"variables":[{"name":"_3","nodeType":"YulTypedName","src":"22347:2:29","type":""}]},{"nodeType":"YulVariableDeclaration","src":"22379:29:29","value":{"arguments":[{"name":"tail_2","nodeType":"YulIdentifier","src":"22397:6:29"},{"name":"_2","nodeType":"YulIdentifier","src":"22405:2:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22393:3:29"},"nodeType":"YulFunctionCall","src":"22393:15:29"},"variables":[{"name":"tail_3","nodeType":"YulTypedName","src":"22383:6:29","type":""}]},{"expression":{"arguments":[{"name":"tail_2","nodeType":"YulIdentifier","src":"22428:6:29"},{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"22442:2:29"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"22436:5:29"},"nodeType":"YulFunctionCall","src":"22436:9:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22421:6:29"},"nodeType":"YulFunctionCall","src":"22421:25:29"},"nodeType":"YulExpressionStatement","src":"22421:25:29"},{"nodeType":"YulVariableDeclaration","src":"22459:38:29","value":{"arguments":[{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"22489:2:29"},{"name":"_1","nodeType":"YulIdentifier","src":"22493:2:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22485:3:29"},"nodeType":"YulFunctionCall","src":"22485:11:29"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"22479:5:29"},"nodeType":"YulFunctionCall","src":"22479:18:29"},"variables":[{"name":"memberValue0","nodeType":"YulTypedName","src":"22463:12:29","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"tail_2","nodeType":"YulIdentifier","src":"22521:6:29"},{"name":"_1","nodeType":"YulIdentifier","src":"22529:2:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22517:3:29"},"nodeType":"YulFunctionCall","src":"22517:15:29"},{"name":"_2","nodeType":"YulIdentifier","src":"22534:2:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22510:6:29"},"nodeType":"YulFunctionCall","src":"22510:27:29"},"nodeType":"YulExpressionStatement","src":"22510:27:29"},{"nodeType":"YulVariableDeclaration","src":"22550:19:29","value":{"name":"tail_3","nodeType":"YulIdentifier","src":"22563:6:29"},"variables":[{"name":"pos_1","nodeType":"YulTypedName","src":"22554:5:29","type":""}]},{"nodeType":"YulVariableDeclaration","src":"22582:35:29","value":{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"22604:12:29"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"22598:5:29"},"nodeType":"YulFunctionCall","src":"22598:19:29"},"variables":[{"name":"length_1","nodeType":"YulTypedName","src":"22586:8:29","type":""}]},{"expression":{"arguments":[{"name":"tail_3","nodeType":"YulIdentifier","src":"22637:6:29"},{"name":"length_1","nodeType":"YulIdentifier","src":"22645:8:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22630:6:29"},"nodeType":"YulFunctionCall","src":"22630:24:29"},"nodeType":"YulExpressionStatement","src":"22630:24:29"},{"nodeType":"YulVariableDeclaration","src":"22667:12:29","value":{"kind":"number","nodeType":"YulLiteral","src":"22677:2:29","type":"","value":"96"},"variables":[{"name":"_4","nodeType":"YulTypedName","src":"22671:2:29","type":""}]},{"nodeType":"YulAssignment","src":"22692:24:29","value":{"arguments":[{"name":"tail_2","nodeType":"YulIdentifier","src":"22705:6:29"},{"name":"_4","nodeType":"YulIdentifier","src":"22713:2:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22701:3:29"},"nodeType":"YulFunctionCall","src":"22701:15:29"},"variableNames":[{"name":"pos_1","nodeType":"YulIdentifier","src":"22692:5:29"}]},{"nodeType":"YulVariableDeclaration","src":"22729:52:29","value":{"arguments":[{"arguments":[{"name":"tail_2","nodeType":"YulIdentifier","src":"22751:6:29"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"22763:1:29","type":"","value":"5"},{"name":"length_1","nodeType":"YulIdentifier","src":"22766:8:29"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"22759:3:29"},"nodeType":"YulFunctionCall","src":"22759:16:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22747:3:29"},"nodeType":"YulFunctionCall","src":"22747:29:29"},{"name":"_4","nodeType":"YulIdentifier","src":"22778:2:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22743:3:29"},"nodeType":"YulFunctionCall","src":"22743:38:29"},"variables":[{"name":"tail_4","nodeType":"YulTypedName","src":"22733:6:29","type":""}]},{"nodeType":"YulVariableDeclaration","src":"22794:37:29","value":{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"22814:12:29"},{"name":"_1","nodeType":"YulIdentifier","src":"22828:2:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22810:3:29"},"nodeType":"YulFunctionCall","src":"22810:21:29"},"variables":[{"name":"srcPtr_1","nodeType":"YulTypedName","src":"22798:8:29","type":""}]},{"nodeType":"YulVariableDeclaration","src":"22844:12:29","value":{"kind":"number","nodeType":"YulLiteral","src":"22855:1:29","type":"","value":"0"},"variables":[{"name":"i_1","nodeType":"YulTypedName","src":"22848:3:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"22930:888:29","statements":[{"expression":{"arguments":[{"name":"pos_1","nodeType":"YulIdentifier","src":"22955:5:29"},{"arguments":[{"arguments":[{"name":"tail_4","nodeType":"YulIdentifier","src":"22970:6:29"},{"name":"tail_2","nodeType":"YulIdentifier","src":"22978:6:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"22966:3:29"},"nodeType":"YulFunctionCall","src":"22966:19:29"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"22991:2:29","type":"","value":"95"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"22987:3:29"},"nodeType":"YulFunctionCall","src":"22987:7:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22962:3:29"},"nodeType":"YulFunctionCall","src":"22962:33:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22948:6:29"},"nodeType":"YulFunctionCall","src":"22948:48:29"},"nodeType":"YulExpressionStatement","src":"22948:48:29"},{"nodeType":"YulVariableDeclaration","src":"23013:25:29","value":{"arguments":[{"name":"srcPtr_1","nodeType":"YulIdentifier","src":"23029:8:29"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"23023:5:29"},"nodeType":"YulFunctionCall","src":"23023:15:29"},"variables":[{"name":"_5","nodeType":"YulTypedName","src":"23017:2:29","type":""}]},{"nodeType":"YulVariableDeclaration","src":"23055:14:29","value":{"kind":"number","nodeType":"YulLiteral","src":"23065:4:29","type":"","value":"0xc0"},"variables":[{"name":"_6","nodeType":"YulTypedName","src":"23059:2:29","type":""}]},{"expression":{"arguments":[{"name":"tail_4","nodeType":"YulIdentifier","src":"23093:6:29"},{"arguments":[{"arguments":[{"name":"_5","nodeType":"YulIdentifier","src":"23111:2:29"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"23105:5:29"},"nodeType":"YulFunctionCall","src":"23105:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"23116:42:29","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"23101:3:29"},"nodeType":"YulFunctionCall","src":"23101:58:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23086:6:29"},"nodeType":"YulFunctionCall","src":"23086:74:29"},"nodeType":"YulExpressionStatement","src":"23086:74:29"},{"expression":{"arguments":[{"arguments":[{"name":"tail_4","nodeType":"YulIdentifier","src":"23188:6:29"},{"name":"_1","nodeType":"YulIdentifier","src":"23196:2:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23184:3:29"},"nodeType":"YulFunctionCall","src":"23184:15:29"},{"arguments":[{"arguments":[{"arguments":[{"name":"_5","nodeType":"YulIdentifier","src":"23215:2:29"},{"name":"_1","nodeType":"YulIdentifier","src":"23219:2:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23211:3:29"},"nodeType":"YulFunctionCall","src":"23211:11:29"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"23205:5:29"},"nodeType":"YulFunctionCall","src":"23205:18:29"},{"kind":"number","nodeType":"YulLiteral","src":"23225:18:29","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"23201:3:29"},"nodeType":"YulFunctionCall","src":"23201:43:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23177:6:29"},"nodeType":"YulFunctionCall","src":"23177:68:29"},"nodeType":"YulExpressionStatement","src":"23177:68:29"},{"expression":{"arguments":[{"arguments":[{"name":"tail_4","nodeType":"YulIdentifier","src":"23273:6:29"},{"name":"_2","nodeType":"YulIdentifier","src":"23281:2:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23269:3:29"},"nodeType":"YulFunctionCall","src":"23269:15:29"},{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"name":"_5","nodeType":"YulIdentifier","src":"23310:2:29"},{"name":"_2","nodeType":"YulIdentifier","src":"23314:2:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23306:3:29"},"nodeType":"YulFunctionCall","src":"23306:11:29"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"23300:5:29"},"nodeType":"YulFunctionCall","src":"23300:18:29"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"23293:6:29"},"nodeType":"YulFunctionCall","src":"23293:26:29"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"23286:6:29"},"nodeType":"YulFunctionCall","src":"23286:34:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23262:6:29"},"nodeType":"YulFunctionCall","src":"23262:59:29"},"nodeType":"YulExpressionStatement","src":"23262:59:29"},{"expression":{"arguments":[{"arguments":[{"name":"tail_4","nodeType":"YulIdentifier","src":"23349:6:29"},{"name":"_4","nodeType":"YulIdentifier","src":"23357:2:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23345:3:29"},"nodeType":"YulFunctionCall","src":"23345:15:29"},{"arguments":[{"arguments":[{"name":"_5","nodeType":"YulIdentifier","src":"23372:2:29"},{"name":"_4","nodeType":"YulIdentifier","src":"23376:2:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23368:3:29"},"nodeType":"YulFunctionCall","src":"23368:11:29"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"23362:5:29"},"nodeType":"YulFunctionCall","src":"23362:18:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23338:6:29"},"nodeType":"YulFunctionCall","src":"23338:43:29"},"nodeType":"YulExpressionStatement","src":"23338:43:29"},{"nodeType":"YulVariableDeclaration","src":"23398:14:29","value":{"kind":"number","nodeType":"YulLiteral","src":"23408:4:29","type":"","value":"0x80"},"variables":[{"name":"_7","nodeType":"YulTypedName","src":"23402:2:29","type":""}]},{"nodeType":"YulVariableDeclaration","src":"23429:40:29","value":{"arguments":[{"arguments":[{"name":"_5","nodeType":"YulIdentifier","src":"23461:2:29"},{"name":"_7","nodeType":"YulIdentifier","src":"23465:2:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23457:3:29"},"nodeType":"YulFunctionCall","src":"23457:11:29"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"23451:5:29"},"nodeType":"YulFunctionCall","src":"23451:18:29"},"variables":[{"name":"memberValue0_1","nodeType":"YulTypedName","src":"23433:14:29","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"tail_4","nodeType":"YulIdentifier","src":"23497:6:29"},{"name":"_7","nodeType":"YulIdentifier","src":"23505:2:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23493:3:29"},"nodeType":"YulFunctionCall","src":"23493:15:29"},{"name":"_6","nodeType":"YulIdentifier","src":"23510:2:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23486:6:29"},"nodeType":"YulFunctionCall","src":"23486:27:29"},"nodeType":"YulExpressionStatement","src":"23486:27:29"},{"nodeType":"YulVariableDeclaration","src":"23530:64:29","value":{"arguments":[{"name":"memberValue0_1","nodeType":"YulIdentifier","src":"23562:14:29"},{"arguments":[{"name":"tail_4","nodeType":"YulIdentifier","src":"23582:6:29"},{"name":"_6","nodeType":"YulIdentifier","src":"23590:2:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23578:3:29"},"nodeType":"YulFunctionCall","src":"23578:15:29"}],"functionName":{"name":"abi_encode_string","nodeType":"YulIdentifier","src":"23544:17:29"},"nodeType":"YulFunctionCall","src":"23544:50:29"},"variables":[{"name":"tail_5","nodeType":"YulTypedName","src":"23534:6:29","type":""}]},{"nodeType":"YulVariableDeclaration","src":"23611:14:29","value":{"kind":"number","nodeType":"YulLiteral","src":"23621:4:29","type":"","value":"0xa0"},"variables":[{"name":"_8","nodeType":"YulTypedName","src":"23615:2:29","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"tail_4","nodeType":"YulIdentifier","src":"23653:6:29"},{"name":"_8","nodeType":"YulIdentifier","src":"23661:2:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23649:3:29"},"nodeType":"YulFunctionCall","src":"23649:15:29"},{"arguments":[{"arguments":[{"name":"_5","nodeType":"YulIdentifier","src":"23676:2:29"},{"name":"_8","nodeType":"YulIdentifier","src":"23680:2:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23672:3:29"},"nodeType":"YulFunctionCall","src":"23672:11:29"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"23666:5:29"},"nodeType":"YulFunctionCall","src":"23666:18:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23642:6:29"},"nodeType":"YulFunctionCall","src":"23642:43:29"},"nodeType":"YulExpressionStatement","src":"23642:43:29"},{"nodeType":"YulAssignment","src":"23702:16:29","value":{"name":"tail_5","nodeType":"YulIdentifier","src":"23712:6:29"},"variableNames":[{"name":"tail_4","nodeType":"YulIdentifier","src":"23702:6:29"}]},{"nodeType":"YulAssignment","src":"23735:29:29","value":{"arguments":[{"name":"srcPtr_1","nodeType":"YulIdentifier","src":"23751:8:29"},{"name":"_1","nodeType":"YulIdentifier","src":"23761:2:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23747:3:29"},"nodeType":"YulFunctionCall","src":"23747:17:29"},"variableNames":[{"name":"srcPtr_1","nodeType":"YulIdentifier","src":"23735:8:29"}]},{"nodeType":"YulAssignment","src":"23781:23:29","value":{"arguments":[{"name":"pos_1","nodeType":"YulIdentifier","src":"23794:5:29"},{"name":"_1","nodeType":"YulIdentifier","src":"23801:2:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23790:3:29"},"nodeType":"YulFunctionCall","src":"23790:14:29"},"variableNames":[{"name":"pos_1","nodeType":"YulIdentifier","src":"23781:5:29"}]}]},"condition":{"arguments":[{"name":"i_1","nodeType":"YulIdentifier","src":"22880:3:29"},{"name":"length_1","nodeType":"YulIdentifier","src":"22885:8:29"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"22877:2:29"},"nodeType":"YulFunctionCall","src":"22877:17:29"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"22895:22:29","statements":[{"nodeType":"YulAssignment","src":"22897:18:29","value":{"arguments":[{"name":"i_1","nodeType":"YulIdentifier","src":"22908:3:29"},{"kind":"number","nodeType":"YulLiteral","src":"22913:1:29","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22904:3:29"},"nodeType":"YulFunctionCall","src":"22904:11:29"},"variableNames":[{"name":"i_1","nodeType":"YulIdentifier","src":"22897:3:29"}]}]},"pre":{"nodeType":"YulBlock","src":"22873:3:29","statements":[]},"src":"22869:949:29"},{"nodeType":"YulAssignment","src":"23831:16:29","value":{"name":"tail_4","nodeType":"YulIdentifier","src":"23841:6:29"},"variableNames":[{"name":"tail_2","nodeType":"YulIdentifier","src":"23831:6:29"}]},{"nodeType":"YulAssignment","src":"23860:25:29","value":{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"23874:6:29"},{"name":"_1","nodeType":"YulIdentifier","src":"23882:2:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23870:3:29"},"nodeType":"YulFunctionCall","src":"23870:15:29"},"variableNames":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"23860:6:29"}]},{"nodeType":"YulAssignment","src":"23898:19:29","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"23909:3:29"},{"name":"_1","nodeType":"YulIdentifier","src":"23914:2:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23905:3:29"},"nodeType":"YulFunctionCall","src":"23905:12:29"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"23898:3:29"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"22229:1:29"},{"name":"length","nodeType":"YulIdentifier","src":"22232:6:29"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"22226:2:29"},"nodeType":"YulFunctionCall","src":"22226:13:29"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"22240:18:29","statements":[{"nodeType":"YulAssignment","src":"22242:14:29","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"22251:1:29"},{"kind":"number","nodeType":"YulLiteral","src":"22254:1:29","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22247:3:29"},"nodeType":"YulFunctionCall","src":"22247:9:29"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"22242:1:29"}]}]},"pre":{"nodeType":"YulBlock","src":"22222:3:29","statements":[]},"src":"22218:1709:29"},{"nodeType":"YulAssignment","src":"23936:14:29","value":{"name":"tail_2","nodeType":"YulIdentifier","src":"23944:6:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"23936:4:29"}]}]},"name":"abi_encode_tuple_t_array$_t_struct$_MultiAttestationRequest_$105_memory_ptr_$dyn_memory_ptr__to_t_array$_t_struct$_MultiAttestationRequest_$105_memory_ptr_$dyn_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"21818:9:29","type":""},{"name":"value0","nodeType":"YulTypedName","src":"21829:6:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"21840:4:29","type":""}],"src":"21618:2338:29"},{"body":{"nodeType":"YulBlock","src":"24067:796:29","statements":[{"nodeType":"YulVariableDeclaration","src":"24077:12:29","value":{"kind":"number","nodeType":"YulLiteral","src":"24087:2:29","type":"","value":"32"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"24081:2:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"24134:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"24143:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"24146:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"24136:6:29"},"nodeType":"YulFunctionCall","src":"24136:12:29"},"nodeType":"YulExpressionStatement","src":"24136:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"24109:7:29"},{"name":"headStart","nodeType":"YulIdentifier","src":"24118:9:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"24105:3:29"},"nodeType":"YulFunctionCall","src":"24105:23:29"},{"name":"_1","nodeType":"YulIdentifier","src":"24130:2:29"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"24101:3:29"},"nodeType":"YulFunctionCall","src":"24101:32:29"},"nodeType":"YulIf","src":"24098:52:29"},{"nodeType":"YulVariableDeclaration","src":"24159:30:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"24179:9:29"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"24173:5:29"},"nodeType":"YulFunctionCall","src":"24173:16:29"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"24163:6:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"24232:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"24241:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"24244:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"24234:6:29"},"nodeType":"YulFunctionCall","src":"24234:12:29"},"nodeType":"YulExpressionStatement","src":"24234:12:29"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"24204:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"24212:18:29","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"24201:2:29"},"nodeType":"YulFunctionCall","src":"24201:30:29"},"nodeType":"YulIf","src":"24198:50:29"},{"nodeType":"YulVariableDeclaration","src":"24257:32:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"24271:9:29"},{"name":"offset","nodeType":"YulIdentifier","src":"24282:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24267:3:29"},"nodeType":"YulFunctionCall","src":"24267:22:29"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"24261:2:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"24337:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"24346:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"24349:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"24339:6:29"},"nodeType":"YulFunctionCall","src":"24339:12:29"},"nodeType":"YulExpressionStatement","src":"24339:12:29"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"24316:2:29"},{"kind":"number","nodeType":"YulLiteral","src":"24320:4:29","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24312:3:29"},"nodeType":"YulFunctionCall","src":"24312:13:29"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"24327:7:29"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"24308:3:29"},"nodeType":"YulFunctionCall","src":"24308:27:29"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"24301:6:29"},"nodeType":"YulFunctionCall","src":"24301:35:29"},"nodeType":"YulIf","src":"24298:55:29"},{"nodeType":"YulVariableDeclaration","src":"24362:19:29","value":{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"24378:2:29"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"24372:5:29"},"nodeType":"YulFunctionCall","src":"24372:9:29"},"variables":[{"name":"_3","nodeType":"YulTypedName","src":"24366:2:29","type":""}]},{"nodeType":"YulVariableDeclaration","src":"24390:92:29","value":{"arguments":[{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"24478:2:29"}],"functionName":{"name":"array_allocation_size_array_struct_RevocationRequestData_dyn","nodeType":"YulIdentifier","src":"24417:60:29"},"nodeType":"YulFunctionCall","src":"24417:64:29"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"24401:15:29"},"nodeType":"YulFunctionCall","src":"24401:81:29"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"24394:3:29","type":""}]},{"nodeType":"YulVariableDeclaration","src":"24491:16:29","value":{"name":"dst","nodeType":"YulIdentifier","src":"24504:3:29"},"variables":[{"name":"dst_1","nodeType":"YulTypedName","src":"24495:5:29","type":""}]},{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"24523:3:29"},{"name":"_3","nodeType":"YulIdentifier","src":"24528:2:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"24516:6:29"},"nodeType":"YulFunctionCall","src":"24516:15:29"},"nodeType":"YulExpressionStatement","src":"24516:15:29"},{"nodeType":"YulAssignment","src":"24540:19:29","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"24551:3:29"},{"name":"_1","nodeType":"YulIdentifier","src":"24556:2:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24547:3:29"},"nodeType":"YulFunctionCall","src":"24547:12:29"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"24540:3:29"}]},{"nodeType":"YulVariableDeclaration","src":"24568:42:29","value":{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"24590:2:29"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"24598:1:29","type":"","value":"5"},{"name":"_3","nodeType":"YulIdentifier","src":"24601:2:29"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"24594:3:29"},"nodeType":"YulFunctionCall","src":"24594:10:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24586:3:29"},"nodeType":"YulFunctionCall","src":"24586:19:29"},{"name":"_1","nodeType":"YulIdentifier","src":"24607:2:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24582:3:29"},"nodeType":"YulFunctionCall","src":"24582:28:29"},"variables":[{"name":"srcEnd","nodeType":"YulTypedName","src":"24572:6:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"24642:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"24651:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"24654:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"24644:6:29"},"nodeType":"YulFunctionCall","src":"24644:12:29"},"nodeType":"YulExpressionStatement","src":"24644:12:29"}]},"condition":{"arguments":[{"name":"srcEnd","nodeType":"YulIdentifier","src":"24625:6:29"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"24633:7:29"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"24622:2:29"},"nodeType":"YulFunctionCall","src":"24622:19:29"},"nodeType":"YulIf","src":"24619:39:29"},{"nodeType":"YulVariableDeclaration","src":"24667:22:29","value":{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"24682:2:29"},{"name":"_1","nodeType":"YulIdentifier","src":"24686:2:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24678:3:29"},"nodeType":"YulFunctionCall","src":"24678:11:29"},"variables":[{"name":"src","nodeType":"YulTypedName","src":"24671:3:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"24754:79:29","statements":[{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"24775:3:29"},{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"24786:3:29"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"24780:5:29"},"nodeType":"YulFunctionCall","src":"24780:10:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"24768:6:29"},"nodeType":"YulFunctionCall","src":"24768:23:29"},"nodeType":"YulExpressionStatement","src":"24768:23:29"},{"nodeType":"YulAssignment","src":"24804:19:29","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"24815:3:29"},{"name":"_1","nodeType":"YulIdentifier","src":"24820:2:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24811:3:29"},"nodeType":"YulFunctionCall","src":"24811:12:29"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"24804:3:29"}]}]},"condition":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"24709:3:29"},{"name":"srcEnd","nodeType":"YulIdentifier","src":"24714:6:29"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"24706:2:29"},"nodeType":"YulFunctionCall","src":"24706:15:29"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"24722:23:29","statements":[{"nodeType":"YulAssignment","src":"24724:19:29","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"24735:3:29"},{"name":"_1","nodeType":"YulIdentifier","src":"24740:2:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24731:3:29"},"nodeType":"YulFunctionCall","src":"24731:12:29"},"variableNames":[{"name":"src","nodeType":"YulIdentifier","src":"24724:3:29"}]}]},"pre":{"nodeType":"YulBlock","src":"24702:3:29","statements":[]},"src":"24698:135:29"},{"nodeType":"YulAssignment","src":"24842:15:29","value":{"name":"dst_1","nodeType":"YulIdentifier","src":"24852:5:29"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"24842:6:29"}]}]},"name":"abi_decode_tuple_t_array$_t_bytes32_$dyn_memory_ptr_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"24033:9:29","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"24044:7:29","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"24056:6:29","type":""}],"src":"23961:902:29"},{"body":{"nodeType":"YulBlock","src":"25042:167:29","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"25059:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"25070:2:29","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"25052:6:29"},"nodeType":"YulFunctionCall","src":"25052:21:29"},"nodeType":"YulExpressionStatement","src":"25052:21:29"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"25093:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"25104:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25089:3:29"},"nodeType":"YulFunctionCall","src":"25089:18:29"},{"kind":"number","nodeType":"YulLiteral","src":"25109:2:29","type":"","value":"17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"25082:6:29"},"nodeType":"YulFunctionCall","src":"25082:30:29"},"nodeType":"YulExpressionStatement","src":"25082:30:29"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"25132:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"25143:2:29","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25128:3:29"},"nodeType":"YulFunctionCall","src":"25128:18:29"},{"hexValue":"5369676e61747572652065787069726564","kind":"string","nodeType":"YulLiteral","src":"25148:19:29","type":"","value":"Signature expired"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"25121:6:29"},"nodeType":"YulFunctionCall","src":"25121:47:29"},"nodeType":"YulExpressionStatement","src":"25121:47:29"},{"nodeType":"YulAssignment","src":"25177:26:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"25189:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"25200:2:29","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25185:3:29"},"nodeType":"YulFunctionCall","src":"25185:18:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"25177:4:29"}]}]},"name":"abi_encode_tuple_t_stringliteral_99132f8bb903a5d9600420e3899938d8bfd8aa30795f8fee460656e87dd9c517__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"25019:9:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"25033:4:29","type":""}],"src":"24868:341:29"},{"body":{"nodeType":"YulBlock","src":"25388:232:29","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"25405:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"25416:2:29","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"25398:6:29"},"nodeType":"YulFunctionCall","src":"25398:21:29"},"nodeType":"YulExpressionStatement","src":"25398:21:29"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"25439:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"25450:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25435:3:29"},"nodeType":"YulFunctionCall","src":"25435:18:29"},{"kind":"number","nodeType":"YulLiteral","src":"25455:2:29","type":"","value":"42"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"25428:6:29"},"nodeType":"YulFunctionCall","src":"25428:30:29"},"nodeType":"YulExpressionStatement","src":"25428:30:29"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"25478:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"25489:2:29","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25474:3:29"},"nodeType":"YulFunctionCall","src":"25474:18:29"},{"hexValue":"5369676e657220616e642061747465737465722061646472657373657320646f","kind":"string","nodeType":"YulLiteral","src":"25494:34:29","type":"","value":"Signer and attester addresses do"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"25467:6:29"},"nodeType":"YulFunctionCall","src":"25467:62:29"},"nodeType":"YulExpressionStatement","src":"25467:62:29"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"25549:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"25560:2:29","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25545:3:29"},"nodeType":"YulFunctionCall","src":"25545:18:29"},{"hexValue":"6e2774206d617463682e","kind":"string","nodeType":"YulLiteral","src":"25565:12:29","type":"","value":"n't match."}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"25538:6:29"},"nodeType":"YulFunctionCall","src":"25538:40:29"},"nodeType":"YulExpressionStatement","src":"25538:40:29"},{"nodeType":"YulAssignment","src":"25587:27:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"25599:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"25610:3:29","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25595:3:29"},"nodeType":"YulFunctionCall","src":"25595:19:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"25587:4:29"}]}]},"name":"abi_encode_tuple_t_stringliteral_4273fbad0f59c6a7ae7dbee11f68ce4ebedcf6c034c1140f12b6e6f0444ffa6c__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"25365:9:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"25379:4:29","type":""}],"src":"25214:406:29"},{"body":{"nodeType":"YulBlock","src":"25799:163:29","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"25816:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"25827:2:29","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"25809:6:29"},"nodeType":"YulFunctionCall","src":"25809:21:29"},"nodeType":"YulExpressionStatement","src":"25809:21:29"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"25850:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"25861:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25846:3:29"},"nodeType":"YulFunctionCall","src":"25846:18:29"},{"kind":"number","nodeType":"YulLiteral","src":"25866:2:29","type":"","value":"13"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"25839:6:29"},"nodeType":"YulFunctionCall","src":"25839:30:29"},"nodeType":"YulExpressionStatement","src":"25839:30:29"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"25889:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"25900:2:29","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25885:3:29"},"nodeType":"YulFunctionCall","src":"25885:18:29"},{"hexValue":"496e76616c6964206e6f6e6365","kind":"string","nodeType":"YulLiteral","src":"25905:15:29","type":"","value":"Invalid nonce"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"25878:6:29"},"nodeType":"YulFunctionCall","src":"25878:43:29"},"nodeType":"YulExpressionStatement","src":"25878:43:29"},{"nodeType":"YulAssignment","src":"25930:26:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"25942:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"25953:2:29","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25938:3:29"},"nodeType":"YulFunctionCall","src":"25938:18:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"25930:4:29"}]}]},"name":"abi_encode_tuple_t_stringliteral_19a9c5fdfc984667e300523283171e2aca8bb9e593f19eef41052fcdbfdb1568__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"25776:9:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"25790:4:29","type":""}],"src":"25625:337:29"},{"body":{"nodeType":"YulBlock","src":"26152:206:29","statements":[{"nodeType":"YulAssignment","src":"26162:27:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"26174:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"26185:3:29","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26170:3:29"},"nodeType":"YulFunctionCall","src":"26170:19:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"26162:4:29"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"26205:9:29"},{"name":"value0","nodeType":"YulIdentifier","src":"26216:6:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"26198:6:29"},"nodeType":"YulFunctionCall","src":"26198:25:29"},"nodeType":"YulExpressionStatement","src":"26198:25:29"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"26243:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"26254:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26239:3:29"},"nodeType":"YulFunctionCall","src":"26239:18:29"},{"name":"value1","nodeType":"YulIdentifier","src":"26259:6:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"26232:6:29"},"nodeType":"YulFunctionCall","src":"26232:34:29"},"nodeType":"YulExpressionStatement","src":"26232:34:29"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"26286:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"26297:2:29","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26282:3:29"},"nodeType":"YulFunctionCall","src":"26282:18:29"},{"name":"value2","nodeType":"YulIdentifier","src":"26302:6:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"26275:6:29"},"nodeType":"YulFunctionCall","src":"26275:34:29"},"nodeType":"YulExpressionStatement","src":"26275:34:29"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"26329:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"26340:2:29","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26325:3:29"},"nodeType":"YulFunctionCall","src":"26325:18:29"},{"name":"value3","nodeType":"YulIdentifier","src":"26345:6:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"26318:6:29"},"nodeType":"YulFunctionCall","src":"26318:34:29"},"nodeType":"YulExpressionStatement","src":"26318:34:29"}]},"name":"abi_encode_tuple_t_bytes32_t_bytes32_t_uint256_t_uint256__to_t_bytes32_t_bytes32_t_uint256_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"26097:9:29","type":""},{"name":"value3","nodeType":"YulTypedName","src":"26108:6:29","type":""},{"name":"value2","nodeType":"YulTypedName","src":"26116:6:29","type":""},{"name":"value1","nodeType":"YulTypedName","src":"26124:6:29","type":""},{"name":"value0","nodeType":"YulTypedName","src":"26132:6:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"26143:4:29","type":""}],"src":"25967:391:29"},{"body":{"nodeType":"YulBlock","src":"26537:171:29","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"26554:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"26565:2:29","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"26547:6:29"},"nodeType":"YulFunctionCall","src":"26547:21:29"},"nodeType":"YulExpressionStatement","src":"26547:21:29"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"26588:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"26599:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26584:3:29"},"nodeType":"YulFunctionCall","src":"26584:18:29"},{"kind":"number","nodeType":"YulLiteral","src":"26604:2:29","type":"","value":"21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"26577:6:29"},"nodeType":"YulFunctionCall","src":"26577:30:29"},"nodeType":"YulExpressionStatement","src":"26577:30:29"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"26627:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"26638:2:29","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26623:3:29"},"nodeType":"YulFunctionCall","src":"26623:18:29"},{"hexValue":"4549503731323a20556e696e697469616c697a6564","kind":"string","nodeType":"YulLiteral","src":"26643:23:29","type":"","value":"EIP712: Uninitialized"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"26616:6:29"},"nodeType":"YulFunctionCall","src":"26616:51:29"},"nodeType":"YulExpressionStatement","src":"26616:51:29"},{"nodeType":"YulAssignment","src":"26676:26:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"26688:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"26699:2:29","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26684:3:29"},"nodeType":"YulFunctionCall","src":"26684:18:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"26676:4:29"}]}]},"name":"abi_encode_tuple_t_stringliteral_2e5045ff73280aa8e8acd8c82710f23812497f87f7f576e2220a2ddd0d45eade__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"26514:9:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"26528:4:29","type":""}],"src":"26363:345:29"},{"body":{"nodeType":"YulBlock","src":"26887:236:29","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"26904:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"26915:2:29","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"26897:6:29"},"nodeType":"YulFunctionCall","src":"26897:21:29"},"nodeType":"YulExpressionStatement","src":"26897:21:29"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"26938:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"26949:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26934:3:29"},"nodeType":"YulFunctionCall","src":"26934:18:29"},{"kind":"number","nodeType":"YulLiteral","src":"26954:2:29","type":"","value":"46"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"26927:6:29"},"nodeType":"YulFunctionCall","src":"26927:30:29"},"nodeType":"YulExpressionStatement","src":"26927:30:29"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"26977:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"26988:2:29","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26973:3:29"},"nodeType":"YulFunctionCall","src":"26973:18:29"},{"hexValue":"496e697469616c697a61626c653a20636f6e747261637420697320616c726561","kind":"string","nodeType":"YulLiteral","src":"26993:34:29","type":"","value":"Initializable: contract is alrea"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"26966:6:29"},"nodeType":"YulFunctionCall","src":"26966:62:29"},"nodeType":"YulExpressionStatement","src":"26966:62:29"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"27048:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"27059:2:29","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27044:3:29"},"nodeType":"YulFunctionCall","src":"27044:18:29"},{"hexValue":"647920696e697469616c697a6564","kind":"string","nodeType":"YulLiteral","src":"27064:16:29","type":"","value":"dy initialized"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"27037:6:29"},"nodeType":"YulFunctionCall","src":"27037:44:29"},"nodeType":"YulExpressionStatement","src":"27037:44:29"},{"nodeType":"YulAssignment","src":"27090:27:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"27102:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"27113:3:29","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27098:3:29"},"nodeType":"YulFunctionCall","src":"27098:19:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"27090:4:29"}]}]},"name":"abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"26864:9:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"26878:4:29","type":""}],"src":"26713:410:29"},{"body":{"nodeType":"YulBlock","src":"27235:87:29","statements":[{"nodeType":"YulAssignment","src":"27245:26:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"27257:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"27268:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27253:3:29"},"nodeType":"YulFunctionCall","src":"27253:18:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"27245:4:29"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"27287:9:29"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"27302:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"27310:4:29","type":"","value":"0xff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"27298:3:29"},"nodeType":"YulFunctionCall","src":"27298:17:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"27280:6:29"},"nodeType":"YulFunctionCall","src":"27280:36:29"},"nodeType":"YulExpressionStatement","src":"27280:36:29"}]},"name":"abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"27204:9:29","type":""},{"name":"value0","nodeType":"YulTypedName","src":"27215:6:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"27226:4:29","type":""}],"src":"27128:194:29"},{"body":{"nodeType":"YulBlock","src":"27403:424:29","statements":[{"nodeType":"YulVariableDeclaration","src":"27413:43:29","value":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"27452:3:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"27439:12:29"},"nodeType":"YulFunctionCall","src":"27439:17:29"},"variables":[{"name":"rel_offset_of_tail","nodeType":"YulTypedName","src":"27417:18:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"27545:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"27554:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"27557:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"27547:6:29"},"nodeType":"YulFunctionCall","src":"27547:12:29"},"nodeType":"YulExpressionStatement","src":"27547:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"rel_offset_of_tail","nodeType":"YulIdentifier","src":"27479:18:29"},{"arguments":[{"arguments":[{"arguments":[],"functionName":{"name":"calldatasize","nodeType":"YulIdentifier","src":"27507:12:29"},"nodeType":"YulFunctionCall","src":"27507:14:29"},{"name":"base_ref","nodeType":"YulIdentifier","src":"27523:8:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"27503:3:29"},"nodeType":"YulFunctionCall","src":"27503:29:29"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"27538:2:29","type":"","value":"30"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"27534:3:29"},"nodeType":"YulFunctionCall","src":"27534:7:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27499:3:29"},"nodeType":"YulFunctionCall","src":"27499:43:29"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"27475:3:29"},"nodeType":"YulFunctionCall","src":"27475:68:29"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"27468:6:29"},"nodeType":"YulFunctionCall","src":"27468:76:29"},"nodeType":"YulIf","src":"27465:96:29"},{"nodeType":"YulVariableDeclaration","src":"27570:48:29","value":{"arguments":[{"name":"rel_offset_of_tail","nodeType":"YulIdentifier","src":"27589:18:29"},{"name":"base_ref","nodeType":"YulIdentifier","src":"27609:8:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27585:3:29"},"nodeType":"YulFunctionCall","src":"27585:33:29"},"variables":[{"name":"value_1","nodeType":"YulTypedName","src":"27574:7:29","type":""}]},{"nodeType":"YulAssignment","src":"27627:31:29","value":{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"27650:7:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"27637:12:29"},"nodeType":"YulFunctionCall","src":"27637:21:29"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"27627:6:29"}]},{"nodeType":"YulAssignment","src":"27667:27:29","value":{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"27680:7:29"},{"kind":"number","nodeType":"YulLiteral","src":"27689:4:29","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27676:3:29"},"nodeType":"YulFunctionCall","src":"27676:18:29"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"27667:5:29"}]},{"body":{"nodeType":"YulBlock","src":"27737:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"27746:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"27749:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"27739:6:29"},"nodeType":"YulFunctionCall","src":"27739:12:29"},"nodeType":"YulExpressionStatement","src":"27739:12:29"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"27709:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"27717:18:29","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"27706:2:29"},"nodeType":"YulFunctionCall","src":"27706:30:29"},"nodeType":"YulIf","src":"27703:50:29"},{"body":{"nodeType":"YulBlock","src":"27805:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"27814:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"27817:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"27807:6:29"},"nodeType":"YulFunctionCall","src":"27807:12:29"},"nodeType":"YulExpressionStatement","src":"27807:12:29"}]},"condition":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"27769:5:29"},{"arguments":[{"arguments":[],"functionName":{"name":"calldatasize","nodeType":"YulIdentifier","src":"27780:12:29"},"nodeType":"YulFunctionCall","src":"27780:14:29"},{"name":"length","nodeType":"YulIdentifier","src":"27796:6:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"27776:3:29"},"nodeType":"YulFunctionCall","src":"27776:27:29"}],"functionName":{"name":"sgt","nodeType":"YulIdentifier","src":"27765:3:29"},"nodeType":"YulFunctionCall","src":"27765:39:29"},"nodeType":"YulIf","src":"27762:59:29"}]},"name":"calldata_access_bytes_calldata","nodeType":"YulFunctionDefinition","parameters":[{"name":"base_ref","nodeType":"YulTypedName","src":"27367:8:29","type":""},{"name":"ptr","nodeType":"YulTypedName","src":"27377:3:29","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"27385:5:29","type":""},{"name":"length","nodeType":"YulTypedName","src":"27392:6:29","type":""}],"src":"27327:500:29"},{"body":{"nodeType":"YulBlock","src":"27898:200:29","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"27915:3:29"},{"name":"length","nodeType":"YulIdentifier","src":"27920:6:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"27908:6:29"},"nodeType":"YulFunctionCall","src":"27908:19:29"},"nodeType":"YulExpressionStatement","src":"27908:19:29"},{"expression":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"27953:3:29"},{"kind":"number","nodeType":"YulLiteral","src":"27958:4:29","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27949:3:29"},"nodeType":"YulFunctionCall","src":"27949:14:29"},{"name":"start","nodeType":"YulIdentifier","src":"27965:5:29"},{"name":"length","nodeType":"YulIdentifier","src":"27972:6:29"}],"functionName":{"name":"calldatacopy","nodeType":"YulIdentifier","src":"27936:12:29"},"nodeType":"YulFunctionCall","src":"27936:43:29"},"nodeType":"YulExpressionStatement","src":"27936:43:29"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"28003:3:29"},{"name":"length","nodeType":"YulIdentifier","src":"28008:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27999:3:29"},"nodeType":"YulFunctionCall","src":"27999:16:29"},{"kind":"number","nodeType":"YulLiteral","src":"28017:4:29","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27995:3:29"},"nodeType":"YulFunctionCall","src":"27995:27:29"},{"kind":"number","nodeType":"YulLiteral","src":"28024:1:29","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"27988:6:29"},"nodeType":"YulFunctionCall","src":"27988:38:29"},"nodeType":"YulExpressionStatement","src":"27988:38:29"},{"nodeType":"YulAssignment","src":"28035:57:29","value":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"28050:3:29"},{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"28063:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"28071:2:29","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28059:3:29"},"nodeType":"YulFunctionCall","src":"28059:15:29"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"28080:2:29","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"28076:3:29"},"nodeType":"YulFunctionCall","src":"28076:7:29"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"28055:3:29"},"nodeType":"YulFunctionCall","src":"28055:29:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28046:3:29"},"nodeType":"YulFunctionCall","src":"28046:39:29"},{"kind":"number","nodeType":"YulLiteral","src":"28087:4:29","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28042:3:29"},"nodeType":"YulFunctionCall","src":"28042:50:29"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"28035:3:29"}]}]},"name":"abi_encode_bytes_calldata","nodeType":"YulFunctionDefinition","parameters":[{"name":"start","nodeType":"YulTypedName","src":"27867:5:29","type":""},{"name":"length","nodeType":"YulTypedName","src":"27874:6:29","type":""},{"name":"pos","nodeType":"YulTypedName","src":"27882:3:29","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"27890:3:29","type":""}],"src":"27832:266:29"},{"body":{"nodeType":"YulBlock","src":"28274:1246:29","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"28291:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"28302:2:29","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"28284:6:29"},"nodeType":"YulFunctionCall","src":"28284:21:29"},"nodeType":"YulExpressionStatement","src":"28284:21:29"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"28325:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"28336:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28321:3:29"},"nodeType":"YulFunctionCall","src":"28321:18:29"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"28354:6:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"28341:12:29"},"nodeType":"YulFunctionCall","src":"28341:20:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"28314:6:29"},"nodeType":"YulFunctionCall","src":"28314:48:29"},"nodeType":"YulExpressionStatement","src":"28314:48:29"},{"nodeType":"YulVariableDeclaration","src":"28371:55:29","value":{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"28414:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"28422:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28410:3:29"},"nodeType":"YulFunctionCall","src":"28410:15:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"28397:12:29"},"nodeType":"YulFunctionCall","src":"28397:29:29"},"variables":[{"name":"rel_offset_of_tail","nodeType":"YulTypedName","src":"28375:18:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"28514:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"28523:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"28526:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"28516:6:29"},"nodeType":"YulFunctionCall","src":"28516:12:29"},"nodeType":"YulExpressionStatement","src":"28516:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"rel_offset_of_tail","nodeType":"YulIdentifier","src":"28449:18:29"},{"arguments":[{"arguments":[{"arguments":[],"functionName":{"name":"calldatasize","nodeType":"YulIdentifier","src":"28477:12:29"},"nodeType":"YulFunctionCall","src":"28477:14:29"},{"name":"value0","nodeType":"YulIdentifier","src":"28493:6:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"28473:3:29"},"nodeType":"YulFunctionCall","src":"28473:27:29"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"28506:3:29","type":"","value":"190"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"28502:3:29"},"nodeType":"YulFunctionCall","src":"28502:8:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28469:3:29"},"nodeType":"YulFunctionCall","src":"28469:42:29"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"28445:3:29"},"nodeType":"YulFunctionCall","src":"28445:67:29"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"28438:6:29"},"nodeType":"YulFunctionCall","src":"28438:75:29"},"nodeType":"YulIf","src":"28435:95:29"},{"nodeType":"YulVariableDeclaration","src":"28539:44:29","value":{"arguments":[{"name":"rel_offset_of_tail","nodeType":"YulIdentifier","src":"28556:18:29"},{"name":"value0","nodeType":"YulIdentifier","src":"28576:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28552:3:29"},"nodeType":"YulFunctionCall","src":"28552:31:29"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"28543:5:29","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"28603:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"28614:4:29","type":"","value":"0x40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28599:3:29"},"nodeType":"YulFunctionCall","src":"28599:20:29"},{"kind":"number","nodeType":"YulLiteral","src":"28621:4:29","type":"","value":"0x40"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"28592:6:29"},"nodeType":"YulFunctionCall","src":"28592:34:29"},"nodeType":"YulExpressionStatement","src":"28592:34:29"},{"nodeType":"YulVariableDeclaration","src":"28635:34:29","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"28663:5:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"28650:12:29"},"nodeType":"YulFunctionCall","src":"28650:19:29"},"variables":[{"name":"value_1","nodeType":"YulTypedName","src":"28639:7:29","type":""}]},{"expression":{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"28703:7:29"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"28678:24:29"},"nodeType":"YulFunctionCall","src":"28678:33:29"},"nodeType":"YulExpressionStatement","src":"28678:33:29"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"28731:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"28742:2:29","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28727:3:29"},"nodeType":"YulFunctionCall","src":"28727:18:29"},{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"28751:7:29"},{"kind":"number","nodeType":"YulLiteral","src":"28760:42:29","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"28747:3:29"},"nodeType":"YulFunctionCall","src":"28747:56:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"28720:6:29"},"nodeType":"YulFunctionCall","src":"28720:84:29"},"nodeType":"YulExpressionStatement","src":"28720:84:29"},{"nodeType":"YulVariableDeclaration","src":"28813:43:29","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"28845:5:29"},{"kind":"number","nodeType":"YulLiteral","src":"28852:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28841:3:29"},"nodeType":"YulFunctionCall","src":"28841:14:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"28828:12:29"},"nodeType":"YulFunctionCall","src":"28828:28:29"},"variables":[{"name":"value_2","nodeType":"YulTypedName","src":"28817:7:29","type":""}]},{"expression":{"arguments":[{"name":"value_2","nodeType":"YulIdentifier","src":"28889:7:29"}],"functionName":{"name":"validator_revert_uint64","nodeType":"YulIdentifier","src":"28865:23:29"},"nodeType":"YulFunctionCall","src":"28865:32:29"},"nodeType":"YulExpressionStatement","src":"28865:32:29"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"28917:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"28928:3:29","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28913:3:29"},"nodeType":"YulFunctionCall","src":"28913:19:29"},{"arguments":[{"name":"value_2","nodeType":"YulIdentifier","src":"28938:7:29"},{"kind":"number","nodeType":"YulLiteral","src":"28947:18:29","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"28934:3:29"},"nodeType":"YulFunctionCall","src":"28934:32:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"28906:6:29"},"nodeType":"YulFunctionCall","src":"28906:61:29"},"nodeType":"YulExpressionStatement","src":"28906:61:29"},{"nodeType":"YulVariableDeclaration","src":"28976:45:29","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"29008:5:29"},{"kind":"number","nodeType":"YulLiteral","src":"29015:4:29","type":"","value":"0x40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29004:3:29"},"nodeType":"YulFunctionCall","src":"29004:16:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"28991:12:29"},"nodeType":"YulFunctionCall","src":"28991:30:29"},"variables":[{"name":"value_3","nodeType":"YulTypedName","src":"28980:7:29","type":""}]},{"expression":{"arguments":[{"name":"value_3","nodeType":"YulIdentifier","src":"29052:7:29"}],"functionName":{"name":"validator_revert_bool","nodeType":"YulIdentifier","src":"29030:21:29"},"nodeType":"YulFunctionCall","src":"29030:30:29"},"nodeType":"YulExpressionStatement","src":"29030:30:29"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"29080:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"29091:3:29","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29076:3:29"},"nodeType":"YulFunctionCall","src":"29076:19:29"},{"arguments":[{"arguments":[{"name":"value_3","nodeType":"YulIdentifier","src":"29111:7:29"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"29104:6:29"},"nodeType":"YulFunctionCall","src":"29104:15:29"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"29097:6:29"},"nodeType":"YulFunctionCall","src":"29097:23:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"29069:6:29"},"nodeType":"YulFunctionCall","src":"29069:52:29"},"nodeType":"YulExpressionStatement","src":"29069:52:29"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"29141:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"29152:4:29","type":"","value":"0xc0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29137:3:29"},"nodeType":"YulFunctionCall","src":"29137:20:29"},{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"29176:5:29"},{"kind":"number","nodeType":"YulLiteral","src":"29183:2:29","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29172:3:29"},"nodeType":"YulFunctionCall","src":"29172:14:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"29159:12:29"},"nodeType":"YulFunctionCall","src":"29159:28:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"29130:6:29"},"nodeType":"YulFunctionCall","src":"29130:58:29"},"nodeType":"YulExpressionStatement","src":"29130:58:29"},{"nodeType":"YulVariableDeclaration","src":"29197:88:29","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"29262:5:29"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"29273:5:29"},{"kind":"number","nodeType":"YulLiteral","src":"29280:3:29","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29269:3:29"},"nodeType":"YulFunctionCall","src":"29269:15:29"}],"functionName":{"name":"calldata_access_bytes_calldata","nodeType":"YulIdentifier","src":"29231:30:29"},"nodeType":"YulFunctionCall","src":"29231:54:29"},"variables":[{"name":"memberValue0","nodeType":"YulTypedName","src":"29201:12:29","type":""},{"name":"memberValue1","nodeType":"YulTypedName","src":"29215:12:29","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"29305:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"29316:3:29","type":"","value":"224"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29301:3:29"},"nodeType":"YulFunctionCall","src":"29301:19:29"},{"kind":"number","nodeType":"YulLiteral","src":"29322:4:29","type":"","value":"0xc0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"29294:6:29"},"nodeType":"YulFunctionCall","src":"29294:33:29"},"nodeType":"YulExpressionStatement","src":"29294:33:29"},{"nodeType":"YulVariableDeclaration","src":"29336:88:29","value":{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"29376:12:29"},{"name":"memberValue1","nodeType":"YulIdentifier","src":"29390:12:29"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"29408:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"29419:3:29","type":"","value":"288"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29404:3:29"},"nodeType":"YulFunctionCall","src":"29404:19:29"}],"functionName":{"name":"abi_encode_bytes_calldata","nodeType":"YulIdentifier","src":"29350:25:29"},"nodeType":"YulFunctionCall","src":"29350:74:29"},"variables":[{"name":"tail_1","nodeType":"YulTypedName","src":"29340:6:29","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"29444:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"29455:3:29","type":"","value":"256"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29440:3:29"},"nodeType":"YulFunctionCall","src":"29440:19:29"},{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"29478:5:29"},{"kind":"number","nodeType":"YulLiteral","src":"29485:3:29","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29474:3:29"},"nodeType":"YulFunctionCall","src":"29474:15:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"29461:12:29"},"nodeType":"YulFunctionCall","src":"29461:29:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"29433:6:29"},"nodeType":"YulFunctionCall","src":"29433:58:29"},"nodeType":"YulExpressionStatement","src":"29433:58:29"},{"nodeType":"YulAssignment","src":"29500:14:29","value":{"name":"tail_1","nodeType":"YulIdentifier","src":"29508:6:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"29500:4:29"}]}]},"name":"abi_encode_tuple_t_struct$_AttestationRequest_$87_calldata_ptr__to_t_struct$_AttestationRequest_$87_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"28243:9:29","type":""},{"name":"value0","nodeType":"YulTypedName","src":"28254:6:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"28265:4:29","type":""}],"src":"28103:1417:29"},{"body":{"nodeType":"YulBlock","src":"29606:103:29","statements":[{"body":{"nodeType":"YulBlock","src":"29652:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"29661:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"29664:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"29654:6:29"},"nodeType":"YulFunctionCall","src":"29654:12:29"},"nodeType":"YulExpressionStatement","src":"29654:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"29627:7:29"},{"name":"headStart","nodeType":"YulIdentifier","src":"29636:9:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"29623:3:29"},"nodeType":"YulFunctionCall","src":"29623:23:29"},{"kind":"number","nodeType":"YulLiteral","src":"29648:2:29","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"29619:3:29"},"nodeType":"YulFunctionCall","src":"29619:32:29"},"nodeType":"YulIf","src":"29616:52:29"},{"nodeType":"YulAssignment","src":"29677:26:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"29693:9:29"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"29687:5:29"},"nodeType":"YulFunctionCall","src":"29687:16:29"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"29677:6:29"}]}]},"name":"abi_decode_tuple_t_bytes32_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"29572:9:29","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"29583:7:29","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"29595:6:29","type":""}],"src":"29525:184:29"},{"body":{"nodeType":"YulBlock","src":"29829:223:29","statements":[{"nodeType":"YulVariableDeclaration","src":"29839:51:29","value":{"arguments":[{"name":"ptr_to_tail","nodeType":"YulIdentifier","src":"29878:11:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"29865:12:29"},"nodeType":"YulFunctionCall","src":"29865:25:29"},"variables":[{"name":"rel_offset_of_tail","nodeType":"YulTypedName","src":"29843:18:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"29980:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"29989:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"29992:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"29982:6:29"},"nodeType":"YulFunctionCall","src":"29982:12:29"},"nodeType":"YulExpressionStatement","src":"29982:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"rel_offset_of_tail","nodeType":"YulIdentifier","src":"29913:18:29"},{"arguments":[{"arguments":[{"arguments":[],"functionName":{"name":"calldatasize","nodeType":"YulIdentifier","src":"29941:12:29"},"nodeType":"YulFunctionCall","src":"29941:14:29"},{"name":"base_ref","nodeType":"YulIdentifier","src":"29957:8:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"29937:3:29"},"nodeType":"YulFunctionCall","src":"29937:29:29"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"29972:3:29","type":"","value":"190"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"29968:3:29"},"nodeType":"YulFunctionCall","src":"29968:8:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29933:3:29"},"nodeType":"YulFunctionCall","src":"29933:44:29"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"29909:3:29"},"nodeType":"YulFunctionCall","src":"29909:69:29"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"29902:6:29"},"nodeType":"YulFunctionCall","src":"29902:77:29"},"nodeType":"YulIf","src":"29899:97:29"},{"nodeType":"YulAssignment","src":"30005:41:29","value":{"arguments":[{"name":"base_ref","nodeType":"YulIdentifier","src":"30017:8:29"},{"name":"rel_offset_of_tail","nodeType":"YulIdentifier","src":"30027:18:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"30013:3:29"},"nodeType":"YulFunctionCall","src":"30013:33:29"},"variableNames":[{"name":"addr","nodeType":"YulIdentifier","src":"30005:4:29"}]}]},"name":"access_calldata_tail_t_struct$_AttestationRequestData_$81_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"base_ref","nodeType":"YulTypedName","src":"29794:8:29","type":""},{"name":"ptr_to_tail","nodeType":"YulTypedName","src":"29804:11:29","type":""}],"returnVariables":[{"name":"addr","nodeType":"YulTypedName","src":"29820:4:29","type":""}],"src":"29714:338:29"},{"body":{"nodeType":"YulBlock","src":"30199:92:29","statements":[{"nodeType":"YulAssignment","src":"30209:76:29","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"30263:5:29"},{"arguments":[],"functionName":{"name":"calldatasize","nodeType":"YulIdentifier","src":"30270:12:29"},"nodeType":"YulFunctionCall","src":"30270:14:29"}],"functionName":{"name":"abi_decode_struct_AttestationRequestData","nodeType":"YulIdentifier","src":"30222:40:29"},"nodeType":"YulFunctionCall","src":"30222:63:29"},"variableNames":[{"name":"converted","nodeType":"YulIdentifier","src":"30209:9:29"}]}]},"name":"convert_t_struct$_AttestationRequestData_$81_calldata_ptr_to_t_struct$_AttestationRequestData_$81_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"30175:5:29","type":""}],"returnVariables":[{"name":"converted","nodeType":"YulTypedName","src":"30185:9:29","type":""}],"src":"30057:234:29"},{"body":{"nodeType":"YulBlock","src":"30470:228:29","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"30487:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"30498:2:29","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"30480:6:29"},"nodeType":"YulFunctionCall","src":"30480:21:29"},"nodeType":"YulExpressionStatement","src":"30480:21:29"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"30521:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"30532:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"30517:3:29"},"nodeType":"YulFunctionCall","src":"30517:18:29"},{"kind":"number","nodeType":"YulLiteral","src":"30537:2:29","type":"","value":"38"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"30510:6:29"},"nodeType":"YulFunctionCall","src":"30510:30:29"},"nodeType":"YulExpressionStatement","src":"30510:30:29"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"30560:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"30571:2:29","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"30556:3:29"},"nodeType":"YulFunctionCall","src":"30556:18:29"},{"hexValue":"4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061","kind":"string","nodeType":"YulLiteral","src":"30576:34:29","type":"","value":"Ownable: new owner is the zero a"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"30549:6:29"},"nodeType":"YulFunctionCall","src":"30549:62:29"},"nodeType":"YulExpressionStatement","src":"30549:62:29"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"30631:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"30642:2:29","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"30627:3:29"},"nodeType":"YulFunctionCall","src":"30627:18:29"},{"hexValue":"646472657373","kind":"string","nodeType":"YulLiteral","src":"30647:8:29","type":"","value":"ddress"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"30620:6:29"},"nodeType":"YulFunctionCall","src":"30620:36:29"},"nodeType":"YulExpressionStatement","src":"30620:36:29"},{"nodeType":"YulAssignment","src":"30665:27:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"30677:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"30688:3:29","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"30673:3:29"},"nodeType":"YulFunctionCall","src":"30673:19:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"30665:4:29"}]}]},"name":"abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"30447:9:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"30461:4:29","type":""}],"src":"30296:402:29"},{"body":{"nodeType":"YulBlock","src":"30877:182:29","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"30894:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"30905:2:29","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"30887:6:29"},"nodeType":"YulFunctionCall","src":"30887:21:29"},"nodeType":"YulExpressionStatement","src":"30887:21:29"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"30928:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"30939:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"30924:3:29"},"nodeType":"YulFunctionCall","src":"30924:18:29"},{"kind":"number","nodeType":"YulLiteral","src":"30944:2:29","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"30917:6:29"},"nodeType":"YulFunctionCall","src":"30917:30:29"},"nodeType":"YulExpressionStatement","src":"30917:30:29"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"30967:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"30978:2:29","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"30963:3:29"},"nodeType":"YulFunctionCall","src":"30963:18:29"},{"hexValue":"4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572","kind":"string","nodeType":"YulLiteral","src":"30983:34:29","type":"","value":"Ownable: caller is not the owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"30956:6:29"},"nodeType":"YulFunctionCall","src":"30956:62:29"},"nodeType":"YulExpressionStatement","src":"30956:62:29"},{"nodeType":"YulAssignment","src":"31027:26:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"31039:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"31050:2:29","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"31035:3:29"},"nodeType":"YulFunctionCall","src":"31035:18:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"31027:4:29"}]}]},"name":"abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"30854:9:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"30868:4:29","type":""}],"src":"30703:356:29"},{"body":{"nodeType":"YulBlock","src":"31119:382:29","statements":[{"nodeType":"YulAssignment","src":"31129:22:29","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"31143:1:29","type":"","value":"1"},{"name":"data","nodeType":"YulIdentifier","src":"31146:4:29"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"31139:3:29"},"nodeType":"YulFunctionCall","src":"31139:12:29"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"31129:6:29"}]},{"nodeType":"YulVariableDeclaration","src":"31160:38:29","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"31190:4:29"},{"kind":"number","nodeType":"YulLiteral","src":"31196:1:29","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"31186:3:29"},"nodeType":"YulFunctionCall","src":"31186:12:29"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"31164:18:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"31237:31:29","statements":[{"nodeType":"YulAssignment","src":"31239:27:29","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"31253:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"31261:4:29","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"31249:3:29"},"nodeType":"YulFunctionCall","src":"31249:17:29"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"31239:6:29"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"31217:18:29"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"31210:6:29"},"nodeType":"YulFunctionCall","src":"31210:26:29"},"nodeType":"YulIf","src":"31207:61:29"},{"body":{"nodeType":"YulBlock","src":"31327:168:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"31348:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"31351:77:29","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"31341:6:29"},"nodeType":"YulFunctionCall","src":"31341:88:29"},"nodeType":"YulExpressionStatement","src":"31341:88:29"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"31449:1:29","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"31452:4:29","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"31442:6:29"},"nodeType":"YulFunctionCall","src":"31442:15:29"},"nodeType":"YulExpressionStatement","src":"31442:15:29"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"31477:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"31480:4:29","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"31470:6:29"},"nodeType":"YulFunctionCall","src":"31470:15:29"},"nodeType":"YulExpressionStatement","src":"31470:15:29"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"31283:18:29"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"31306:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"31314:2:29","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"31303:2:29"},"nodeType":"YulFunctionCall","src":"31303:14:29"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"31280:2:29"},"nodeType":"YulFunctionCall","src":"31280:38:29"},"nodeType":"YulIf","src":"31277:218:29"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"31099:4:29","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"31108:6:29","type":""}],"src":"31064:437:29"},{"body":{"nodeType":"YulBlock","src":"31680:233:29","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"31697:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"31708:2:29","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"31690:6:29"},"nodeType":"YulFunctionCall","src":"31690:21:29"},"nodeType":"YulExpressionStatement","src":"31690:21:29"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"31731:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"31742:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"31727:3:29"},"nodeType":"YulFunctionCall","src":"31727:18:29"},{"kind":"number","nodeType":"YulLiteral","src":"31747:2:29","type":"","value":"43"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"31720:6:29"},"nodeType":"YulFunctionCall","src":"31720:30:29"},"nodeType":"YulExpressionStatement","src":"31720:30:29"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"31770:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"31781:2:29","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"31766:3:29"},"nodeType":"YulFunctionCall","src":"31766:18:29"},{"hexValue":"496e697469616c697a61626c653a20636f6e7472616374206973206e6f742069","kind":"string","nodeType":"YulLiteral","src":"31786:34:29","type":"","value":"Initializable: contract is not i"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"31759:6:29"},"nodeType":"YulFunctionCall","src":"31759:62:29"},"nodeType":"YulExpressionStatement","src":"31759:62:29"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"31841:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"31852:2:29","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"31837:3:29"},"nodeType":"YulFunctionCall","src":"31837:18:29"},{"hexValue":"6e697469616c697a696e67","kind":"string","nodeType":"YulLiteral","src":"31857:13:29","type":"","value":"nitializing"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"31830:6:29"},"nodeType":"YulFunctionCall","src":"31830:41:29"},"nodeType":"YulExpressionStatement","src":"31830:41:29"},{"nodeType":"YulAssignment","src":"31880:27:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"31892:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"31903:3:29","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"31888:3:29"},"nodeType":"YulFunctionCall","src":"31888:19:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"31880:4:29"}]}]},"name":"abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"31657:9:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"31671:4:29","type":""}],"src":"31506:407:29"},{"body":{"nodeType":"YulBlock","src":"32099:217:29","statements":[{"nodeType":"YulAssignment","src":"32109:27:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"32121:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"32132:3:29","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"32117:3:29"},"nodeType":"YulFunctionCall","src":"32117:19:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"32109:4:29"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"32152:9:29"},{"name":"value0","nodeType":"YulIdentifier","src":"32163:6:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"32145:6:29"},"nodeType":"YulFunctionCall","src":"32145:25:29"},"nodeType":"YulExpressionStatement","src":"32145:25:29"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"32190:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"32201:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"32186:3:29"},"nodeType":"YulFunctionCall","src":"32186:18:29"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"32210:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"32218:4:29","type":"","value":"0xff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"32206:3:29"},"nodeType":"YulFunctionCall","src":"32206:17:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"32179:6:29"},"nodeType":"YulFunctionCall","src":"32179:45:29"},"nodeType":"YulExpressionStatement","src":"32179:45:29"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"32244:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"32255:2:29","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"32240:3:29"},"nodeType":"YulFunctionCall","src":"32240:18:29"},{"name":"value2","nodeType":"YulIdentifier","src":"32260:6:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"32233:6:29"},"nodeType":"YulFunctionCall","src":"32233:34:29"},"nodeType":"YulExpressionStatement","src":"32233:34:29"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"32287:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"32298:2:29","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"32283:3:29"},"nodeType":"YulFunctionCall","src":"32283:18:29"},{"name":"value3","nodeType":"YulIdentifier","src":"32303:6:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"32276:6:29"},"nodeType":"YulFunctionCall","src":"32276:34:29"},"nodeType":"YulExpressionStatement","src":"32276:34:29"}]},"name":"abi_encode_tuple_t_bytes32_t_uint8_t_bytes32_t_bytes32__to_t_bytes32_t_uint8_t_bytes32_t_bytes32__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"32044:9:29","type":""},{"name":"value3","nodeType":"YulTypedName","src":"32055:6:29","type":""},{"name":"value2","nodeType":"YulTypedName","src":"32063:6:29","type":""},{"name":"value1","nodeType":"YulTypedName","src":"32071:6:29","type":""},{"name":"value0","nodeType":"YulTypedName","src":"32079:6:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"32090:4:29","type":""}],"src":"31918:398:29"},{"body":{"nodeType":"YulBlock","src":"32353:152:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"32370:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"32373:77:29","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"32363:6:29"},"nodeType":"YulFunctionCall","src":"32363:88:29"},"nodeType":"YulExpressionStatement","src":"32363:88:29"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"32467:1:29","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"32470:4:29","type":"","value":"0x21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"32460:6:29"},"nodeType":"YulFunctionCall","src":"32460:15:29"},"nodeType":"YulExpressionStatement","src":"32460:15:29"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"32491:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"32494:4:29","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"32484:6:29"},"nodeType":"YulFunctionCall","src":"32484:15:29"},"nodeType":"YulExpressionStatement","src":"32484:15:29"}]},"name":"panic_error_0x21","nodeType":"YulFunctionDefinition","src":"32321:184:29"},{"body":{"nodeType":"YulBlock","src":"32684:174:29","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"32701:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"32712:2:29","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"32694:6:29"},"nodeType":"YulFunctionCall","src":"32694:21:29"},"nodeType":"YulExpressionStatement","src":"32694:21:29"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"32735:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"32746:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"32731:3:29"},"nodeType":"YulFunctionCall","src":"32731:18:29"},{"kind":"number","nodeType":"YulLiteral","src":"32751:2:29","type":"","value":"24"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"32724:6:29"},"nodeType":"YulFunctionCall","src":"32724:30:29"},"nodeType":"YulExpressionStatement","src":"32724:30:29"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"32774:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"32785:2:29","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"32770:3:29"},"nodeType":"YulFunctionCall","src":"32770:18:29"},{"hexValue":"45434453413a20696e76616c6964207369676e6174757265","kind":"string","nodeType":"YulLiteral","src":"32790:26:29","type":"","value":"ECDSA: invalid signature"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"32763:6:29"},"nodeType":"YulFunctionCall","src":"32763:54:29"},"nodeType":"YulExpressionStatement","src":"32763:54:29"},{"nodeType":"YulAssignment","src":"32826:26:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"32838:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"32849:2:29","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"32834:3:29"},"nodeType":"YulFunctionCall","src":"32834:18:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"32826:4:29"}]}]},"name":"abi_encode_tuple_t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"32661:9:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"32675:4:29","type":""}],"src":"32510:348:29"},{"body":{"nodeType":"YulBlock","src":"33037:181:29","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"33054:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"33065:2:29","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"33047:6:29"},"nodeType":"YulFunctionCall","src":"33047:21:29"},"nodeType":"YulExpressionStatement","src":"33047:21:29"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"33088:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"33099:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"33084:3:29"},"nodeType":"YulFunctionCall","src":"33084:18:29"},{"kind":"number","nodeType":"YulLiteral","src":"33104:2:29","type":"","value":"31"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"33077:6:29"},"nodeType":"YulFunctionCall","src":"33077:30:29"},"nodeType":"YulExpressionStatement","src":"33077:30:29"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"33127:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"33138:2:29","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"33123:3:29"},"nodeType":"YulFunctionCall","src":"33123:18:29"},{"hexValue":"45434453413a20696e76616c6964207369676e6174757265206c656e677468","kind":"string","nodeType":"YulLiteral","src":"33143:33:29","type":"","value":"ECDSA: invalid signature length"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"33116:6:29"},"nodeType":"YulFunctionCall","src":"33116:61:29"},"nodeType":"YulExpressionStatement","src":"33116:61:29"},{"nodeType":"YulAssignment","src":"33186:26:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"33198:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"33209:2:29","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"33194:3:29"},"nodeType":"YulFunctionCall","src":"33194:18:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"33186:4:29"}]}]},"name":"abi_encode_tuple_t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"33014:9:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"33028:4:29","type":""}],"src":"32863:355:29"},{"body":{"nodeType":"YulBlock","src":"33397:224:29","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"33414:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"33425:2:29","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"33407:6:29"},"nodeType":"YulFunctionCall","src":"33407:21:29"},"nodeType":"YulExpressionStatement","src":"33407:21:29"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"33448:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"33459:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"33444:3:29"},"nodeType":"YulFunctionCall","src":"33444:18:29"},{"kind":"number","nodeType":"YulLiteral","src":"33464:2:29","type":"","value":"34"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"33437:6:29"},"nodeType":"YulFunctionCall","src":"33437:30:29"},"nodeType":"YulExpressionStatement","src":"33437:30:29"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"33487:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"33498:2:29","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"33483:3:29"},"nodeType":"YulFunctionCall","src":"33483:18:29"},{"hexValue":"45434453413a20696e76616c6964207369676e6174757265202773272076616c","kind":"string","nodeType":"YulLiteral","src":"33503:34:29","type":"","value":"ECDSA: invalid signature 's' val"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"33476:6:29"},"nodeType":"YulFunctionCall","src":"33476:62:29"},"nodeType":"YulExpressionStatement","src":"33476:62:29"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"33558:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"33569:2:29","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"33554:3:29"},"nodeType":"YulFunctionCall","src":"33554:18:29"},{"hexValue":"7565","kind":"string","nodeType":"YulLiteral","src":"33574:4:29","type":"","value":"ue"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"33547:6:29"},"nodeType":"YulFunctionCall","src":"33547:32:29"},"nodeType":"YulExpressionStatement","src":"33547:32:29"},{"nodeType":"YulAssignment","src":"33588:27:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"33600:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"33611:3:29","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"33596:3:29"},"nodeType":"YulFunctionCall","src":"33596:19:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"33588:4:29"}]}]},"name":"abi_encode_tuple_t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"33374:9:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"33388:4:29","type":""}],"src":"33223:398:29"},{"body":{"nodeType":"YulBlock","src":"33682:65:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"33699:1:29","type":"","value":"0"},{"name":"ptr","nodeType":"YulIdentifier","src":"33702:3:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"33692:6:29"},"nodeType":"YulFunctionCall","src":"33692:14:29"},"nodeType":"YulExpressionStatement","src":"33692:14:29"},{"nodeType":"YulAssignment","src":"33715:26:29","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"33733:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"33736:4:29","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"33723:9:29"},"nodeType":"YulFunctionCall","src":"33723:18:29"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"33715:4:29"}]}]},"name":"array_dataslot_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nodeType":"YulTypedName","src":"33665:3:29","type":""}],"returnVariables":[{"name":"data","nodeType":"YulTypedName","src":"33673:4:29","type":""}],"src":"33626:121:29"},{"body":{"nodeType":"YulBlock","src":"33833:464:29","statements":[{"body":{"nodeType":"YulBlock","src":"33866:425:29","statements":[{"nodeType":"YulVariableDeclaration","src":"33880:11:29","value":{"kind":"number","nodeType":"YulLiteral","src":"33890:1:29","type":"","value":"0"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"33884:2:29","type":""}]},{"expression":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"33911:2:29"},{"name":"array","nodeType":"YulIdentifier","src":"33915:5:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"33904:6:29"},"nodeType":"YulFunctionCall","src":"33904:17:29"},"nodeType":"YulExpressionStatement","src":"33904:17:29"},{"nodeType":"YulVariableDeclaration","src":"33934:31:29","value":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"33956:2:29"},{"kind":"number","nodeType":"YulLiteral","src":"33960:4:29","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"33946:9:29"},"nodeType":"YulFunctionCall","src":"33946:19:29"},"variables":[{"name":"data","nodeType":"YulTypedName","src":"33938:4:29","type":""}]},{"nodeType":"YulVariableDeclaration","src":"33978:57:29","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"34001:4:29"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"34011:1:29","type":"","value":"5"},{"arguments":[{"name":"startIndex","nodeType":"YulIdentifier","src":"34018:10:29"},{"kind":"number","nodeType":"YulLiteral","src":"34030:2:29","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"34014:3:29"},"nodeType":"YulFunctionCall","src":"34014:19:29"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"34007:3:29"},"nodeType":"YulFunctionCall","src":"34007:27:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"33997:3:29"},"nodeType":"YulFunctionCall","src":"33997:38:29"},"variables":[{"name":"deleteStart","nodeType":"YulTypedName","src":"33982:11:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"34072:23:29","statements":[{"nodeType":"YulAssignment","src":"34074:19:29","value":{"name":"data","nodeType":"YulIdentifier","src":"34089:4:29"},"variableNames":[{"name":"deleteStart","nodeType":"YulIdentifier","src":"34074:11:29"}]}]},"condition":{"arguments":[{"name":"startIndex","nodeType":"YulIdentifier","src":"34054:10:29"},{"kind":"number","nodeType":"YulLiteral","src":"34066:4:29","type":"","value":"0x20"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"34051:2:29"},"nodeType":"YulFunctionCall","src":"34051:20:29"},"nodeType":"YulIf","src":"34048:47:29"},{"nodeType":"YulVariableDeclaration","src":"34108:41:29","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"34122:4:29"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"34132:1:29","type":"","value":"5"},{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"34139:3:29"},{"kind":"number","nodeType":"YulLiteral","src":"34144:2:29","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"34135:3:29"},"nodeType":"YulFunctionCall","src":"34135:12:29"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"34128:3:29"},"nodeType":"YulFunctionCall","src":"34128:20:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"34118:3:29"},"nodeType":"YulFunctionCall","src":"34118:31:29"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"34112:2:29","type":""}]},{"nodeType":"YulVariableDeclaration","src":"34162:24:29","value":{"name":"deleteStart","nodeType":"YulIdentifier","src":"34175:11:29"},"variables":[{"name":"start","nodeType":"YulTypedName","src":"34166:5:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"34260:21:29","statements":[{"expression":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"34269:5:29"},{"name":"_1","nodeType":"YulIdentifier","src":"34276:2:29"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"34262:6:29"},"nodeType":"YulFunctionCall","src":"34262:17:29"},"nodeType":"YulExpressionStatement","src":"34262:17:29"}]},"condition":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"34210:5:29"},{"name":"_2","nodeType":"YulIdentifier","src":"34217:2:29"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"34207:2:29"},"nodeType":"YulFunctionCall","src":"34207:13:29"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"34221:26:29","statements":[{"nodeType":"YulAssignment","src":"34223:22:29","value":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"34236:5:29"},{"kind":"number","nodeType":"YulLiteral","src":"34243:1:29","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"34232:3:29"},"nodeType":"YulFunctionCall","src":"34232:13:29"},"variableNames":[{"name":"start","nodeType":"YulIdentifier","src":"34223:5:29"}]}]},"pre":{"nodeType":"YulBlock","src":"34203:3:29","statements":[]},"src":"34199:82:29"}]},"condition":{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"33849:3:29"},{"kind":"number","nodeType":"YulLiteral","src":"33854:2:29","type":"","value":"31"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"33846:2:29"},"nodeType":"YulFunctionCall","src":"33846:11:29"},"nodeType":"YulIf","src":"33843:448:29"}]},"name":"clean_up_bytearray_end_slots_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"array","nodeType":"YulTypedName","src":"33805:5:29","type":""},{"name":"len","nodeType":"YulTypedName","src":"33812:3:29","type":""},{"name":"startIndex","nodeType":"YulTypedName","src":"33817:10:29","type":""}],"src":"33752:545:29"},{"body":{"nodeType":"YulBlock","src":"34387:81:29","statements":[{"nodeType":"YulAssignment","src":"34397:65:29","value":{"arguments":[{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"34412:4:29"},{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"34430:1:29","type":"","value":"3"},{"name":"len","nodeType":"YulIdentifier","src":"34433:3:29"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"34426:3:29"},"nodeType":"YulFunctionCall","src":"34426:11:29"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"34443:1:29","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"34439:3:29"},"nodeType":"YulFunctionCall","src":"34439:6:29"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"34422:3:29"},"nodeType":"YulFunctionCall","src":"34422:24:29"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"34418:3:29"},"nodeType":"YulFunctionCall","src":"34418:29:29"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"34408:3:29"},"nodeType":"YulFunctionCall","src":"34408:40:29"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"34454:1:29","type":"","value":"1"},{"name":"len","nodeType":"YulIdentifier","src":"34457:3:29"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"34450:3:29"},"nodeType":"YulFunctionCall","src":"34450:11:29"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"34405:2:29"},"nodeType":"YulFunctionCall","src":"34405:57:29"},"variableNames":[{"name":"used","nodeType":"YulIdentifier","src":"34397:4:29"}]}]},"name":"extract_used_part_and_set_length_of_short_byte_array","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"34364:4:29","type":""},{"name":"len","nodeType":"YulTypedName","src":"34370:3:29","type":""}],"returnVariables":[{"name":"used","nodeType":"YulTypedName","src":"34378:4:29","type":""}],"src":"34302:166:29"},{"body":{"nodeType":"YulBlock","src":"34569:1256:29","statements":[{"nodeType":"YulVariableDeclaration","src":"34579:24:29","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"34599:3:29"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"34593:5:29"},"nodeType":"YulFunctionCall","src":"34593:10:29"},"variables":[{"name":"newLen","nodeType":"YulTypedName","src":"34583:6:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"34646:22:29","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"34648:16:29"},"nodeType":"YulFunctionCall","src":"34648:18:29"},"nodeType":"YulExpressionStatement","src":"34648:18:29"}]},"condition":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"34618:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"34626:18:29","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"34615:2:29"},"nodeType":"YulFunctionCall","src":"34615:30:29"},"nodeType":"YulIf","src":"34612:56:29"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"34721:4:29"},{"arguments":[{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"34759:4:29"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"34753:5:29"},"nodeType":"YulFunctionCall","src":"34753:11:29"}],"functionName":{"name":"extract_byte_array_length","nodeType":"YulIdentifier","src":"34727:25:29"},"nodeType":"YulFunctionCall","src":"34727:38:29"},{"name":"newLen","nodeType":"YulIdentifier","src":"34767:6:29"}],"functionName":{"name":"clean_up_bytearray_end_slots_string_storage","nodeType":"YulIdentifier","src":"34677:43:29"},"nodeType":"YulFunctionCall","src":"34677:97:29"},"nodeType":"YulExpressionStatement","src":"34677:97:29"},{"nodeType":"YulVariableDeclaration","src":"34783:18:29","value":{"kind":"number","nodeType":"YulLiteral","src":"34800:1:29","type":"","value":"0"},"variables":[{"name":"srcOffset","nodeType":"YulTypedName","src":"34787:9:29","type":""}]},{"nodeType":"YulVariableDeclaration","src":"34810:23:29","value":{"kind":"number","nodeType":"YulLiteral","src":"34829:4:29","type":"","value":"0x20"},"variables":[{"name":"srcOffset_1","nodeType":"YulTypedName","src":"34814:11:29","type":""}]},{"nodeType":"YulAssignment","src":"34842:24:29","value":{"name":"srcOffset_1","nodeType":"YulIdentifier","src":"34855:11:29"},"variableNames":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"34842:9:29"}]},{"cases":[{"body":{"nodeType":"YulBlock","src":"34912:656:29","statements":[{"nodeType":"YulVariableDeclaration","src":"34926:35:29","value":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"34945:6:29"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"34957:2:29","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"34953:3:29"},"nodeType":"YulFunctionCall","src":"34953:7:29"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"34941:3:29"},"nodeType":"YulFunctionCall","src":"34941:20:29"},"variables":[{"name":"loopEnd","nodeType":"YulTypedName","src":"34930:7:29","type":""}]},{"nodeType":"YulVariableDeclaration","src":"34974:49:29","value":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"35018:4:29"}],"functionName":{"name":"array_dataslot_string_storage","nodeType":"YulIdentifier","src":"34988:29:29"},"nodeType":"YulFunctionCall","src":"34988:35:29"},"variables":[{"name":"dstPtr","nodeType":"YulTypedName","src":"34978:6:29","type":""}]},{"nodeType":"YulVariableDeclaration","src":"35036:10:29","value":{"kind":"number","nodeType":"YulLiteral","src":"35045:1:29","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"35040:1:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"35123:172:29","statements":[{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"35148:6:29"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"35166:3:29"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"35171:9:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"35162:3:29"},"nodeType":"YulFunctionCall","src":"35162:19:29"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"35156:5:29"},"nodeType":"YulFunctionCall","src":"35156:26:29"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"35141:6:29"},"nodeType":"YulFunctionCall","src":"35141:42:29"},"nodeType":"YulExpressionStatement","src":"35141:42:29"},{"nodeType":"YulAssignment","src":"35200:24:29","value":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"35214:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"35222:1:29","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"35210:3:29"},"nodeType":"YulFunctionCall","src":"35210:14:29"},"variableNames":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"35200:6:29"}]},{"nodeType":"YulAssignment","src":"35241:40:29","value":{"arguments":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"35258:9:29"},{"name":"srcOffset_1","nodeType":"YulIdentifier","src":"35269:11:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"35254:3:29"},"nodeType":"YulFunctionCall","src":"35254:27:29"},"variableNames":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"35241:9:29"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"35070:1:29"},{"name":"loopEnd","nodeType":"YulIdentifier","src":"35073:7:29"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"35067:2:29"},"nodeType":"YulFunctionCall","src":"35067:14:29"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"35082:28:29","statements":[{"nodeType":"YulAssignment","src":"35084:24:29","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"35093:1:29"},{"name":"srcOffset_1","nodeType":"YulIdentifier","src":"35096:11:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"35089:3:29"},"nodeType":"YulFunctionCall","src":"35089:19:29"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"35084:1:29"}]}]},"pre":{"nodeType":"YulBlock","src":"35063:3:29","statements":[]},"src":"35059:236:29"},{"body":{"nodeType":"YulBlock","src":"35343:166:29","statements":[{"nodeType":"YulVariableDeclaration","src":"35361:43:29","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"35388:3:29"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"35393:9:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"35384:3:29"},"nodeType":"YulFunctionCall","src":"35384:19:29"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"35378:5:29"},"nodeType":"YulFunctionCall","src":"35378:26:29"},"variables":[{"name":"lastValue","nodeType":"YulTypedName","src":"35365:9:29","type":""}]},{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"35428:6:29"},{"arguments":[{"name":"lastValue","nodeType":"YulIdentifier","src":"35440:9:29"},{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"35467:1:29","type":"","value":"3"},{"name":"newLen","nodeType":"YulIdentifier","src":"35470:6:29"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"35463:3:29"},"nodeType":"YulFunctionCall","src":"35463:14:29"},{"kind":"number","nodeType":"YulLiteral","src":"35479:3:29","type":"","value":"248"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"35459:3:29"},"nodeType":"YulFunctionCall","src":"35459:24:29"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"35489:1:29","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"35485:3:29"},"nodeType":"YulFunctionCall","src":"35485:6:29"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"35455:3:29"},"nodeType":"YulFunctionCall","src":"35455:37:29"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"35451:3:29"},"nodeType":"YulFunctionCall","src":"35451:42:29"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"35436:3:29"},"nodeType":"YulFunctionCall","src":"35436:58:29"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"35421:6:29"},"nodeType":"YulFunctionCall","src":"35421:74:29"},"nodeType":"YulExpressionStatement","src":"35421:74:29"}]},"condition":{"arguments":[{"name":"loopEnd","nodeType":"YulIdentifier","src":"35314:7:29"},{"name":"newLen","nodeType":"YulIdentifier","src":"35323:6:29"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"35311:2:29"},"nodeType":"YulFunctionCall","src":"35311:19:29"},"nodeType":"YulIf","src":"35308:201:29"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"35529:4:29"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"35543:1:29","type":"","value":"1"},{"name":"newLen","nodeType":"YulIdentifier","src":"35546:6:29"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"35539:3:29"},"nodeType":"YulFunctionCall","src":"35539:14:29"},{"kind":"number","nodeType":"YulLiteral","src":"35555:1:29","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"35535:3:29"},"nodeType":"YulFunctionCall","src":"35535:22:29"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"35522:6:29"},"nodeType":"YulFunctionCall","src":"35522:36:29"},"nodeType":"YulExpressionStatement","src":"35522:36:29"}]},"nodeType":"YulCase","src":"34905:663:29","value":{"kind":"number","nodeType":"YulLiteral","src":"34910:1:29","type":"","value":"1"}},{"body":{"nodeType":"YulBlock","src":"35585:234:29","statements":[{"nodeType":"YulVariableDeclaration","src":"35599:14:29","value":{"kind":"number","nodeType":"YulLiteral","src":"35612:1:29","type":"","value":"0"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"35603:5:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"35648:67:29","statements":[{"nodeType":"YulAssignment","src":"35666:35:29","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"35685:3:29"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"35690:9:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"35681:3:29"},"nodeType":"YulFunctionCall","src":"35681:19:29"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"35675:5:29"},"nodeType":"YulFunctionCall","src":"35675:26:29"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"35666:5:29"}]}]},"condition":{"name":"newLen","nodeType":"YulIdentifier","src":"35629:6:29"},"nodeType":"YulIf","src":"35626:89:29"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"35735:4:29"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"35794:5:29"},{"name":"newLen","nodeType":"YulIdentifier","src":"35801:6:29"}],"functionName":{"name":"extract_used_part_and_set_length_of_short_byte_array","nodeType":"YulIdentifier","src":"35741:52:29"},"nodeType":"YulFunctionCall","src":"35741:67:29"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"35728:6:29"},"nodeType":"YulFunctionCall","src":"35728:81:29"},"nodeType":"YulExpressionStatement","src":"35728:81:29"}]},"nodeType":"YulCase","src":"35577:242:29","value":"default"}],"expression":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"34885:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"34893:2:29","type":"","value":"31"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"34882:2:29"},"nodeType":"YulFunctionCall","src":"34882:14:29"},"nodeType":"YulSwitch","src":"34875:944:29"}]},"name":"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nodeType":"YulTypedName","src":"34554:4:29","type":""},{"name":"src","nodeType":"YulTypedName","src":"34560:3:29","type":""}],"src":"34473:1352:29"},{"body":{"nodeType":"YulBlock","src":"36043:299:29","statements":[{"nodeType":"YulAssignment","src":"36053:27:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"36065:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"36076:3:29","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"36061:3:29"},"nodeType":"YulFunctionCall","src":"36061:19:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"36053:4:29"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"36096:9:29"},{"name":"value0","nodeType":"YulIdentifier","src":"36107:6:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"36089:6:29"},"nodeType":"YulFunctionCall","src":"36089:25:29"},"nodeType":"YulExpressionStatement","src":"36089:25:29"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"36134:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"36145:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"36130:3:29"},"nodeType":"YulFunctionCall","src":"36130:18:29"},{"name":"value1","nodeType":"YulIdentifier","src":"36150:6:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"36123:6:29"},"nodeType":"YulFunctionCall","src":"36123:34:29"},"nodeType":"YulExpressionStatement","src":"36123:34:29"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"36177:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"36188:2:29","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"36173:3:29"},"nodeType":"YulFunctionCall","src":"36173:18:29"},{"name":"value2","nodeType":"YulIdentifier","src":"36193:6:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"36166:6:29"},"nodeType":"YulFunctionCall","src":"36166:34:29"},"nodeType":"YulExpressionStatement","src":"36166:34:29"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"36220:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"36231:2:29","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"36216:3:29"},"nodeType":"YulFunctionCall","src":"36216:18:29"},{"name":"value3","nodeType":"YulIdentifier","src":"36236:6:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"36209:6:29"},"nodeType":"YulFunctionCall","src":"36209:34:29"},"nodeType":"YulExpressionStatement","src":"36209:34:29"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"36263:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"36274:3:29","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"36259:3:29"},"nodeType":"YulFunctionCall","src":"36259:19:29"},{"arguments":[{"name":"value4","nodeType":"YulIdentifier","src":"36284:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"36292:42:29","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"36280:3:29"},"nodeType":"YulFunctionCall","src":"36280:55:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"36252:6:29"},"nodeType":"YulFunctionCall","src":"36252:84:29"},"nodeType":"YulExpressionStatement","src":"36252:84:29"}]},"name":"abi_encode_tuple_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__to_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"35980:9:29","type":""},{"name":"value4","nodeType":"YulTypedName","src":"35991:6:29","type":""},{"name":"value3","nodeType":"YulTypedName","src":"35999:6:29","type":""},{"name":"value2","nodeType":"YulTypedName","src":"36007:6:29","type":""},{"name":"value1","nodeType":"YulTypedName","src":"36015:6:29","type":""},{"name":"value0","nodeType":"YulTypedName","src":"36023:6:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"36034:4:29","type":""}],"src":"35830:512:29"}]},"contents":"{\n    { }\n    function abi_decode_array_struct_MultiRevocationRequest_calldata_dyn_calldata(offset, end) -> arrayPos, length\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        length := calldataload(offset)\n        if gt(length, 0xffffffffffffffff) { revert(0, 0) }\n        arrayPos := add(offset, 0x20)\n        if gt(add(add(offset, shl(5, length)), 0x20), end) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_array$_t_struct$_MultiRevocationRequest_$147_calldata_ptr_$dyn_calldata_ptr(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        let value0_1, value1_1 := abi_decode_array_struct_MultiRevocationRequest_calldata_dyn_calldata(add(headStart, offset), dataEnd)\n        value0 := value0_1\n        value1 := value1_1\n    }\n    function abi_decode_tuple_t_array$_t_struct$_AttestationRequestNode_$5232_calldata_ptr_$dyn_calldata_ptr(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        let value0_1, value1_1 := abi_decode_array_struct_MultiRevocationRequest_calldata_dyn_calldata(add(headStart, offset), dataEnd)\n        value0 := value0_1\n        value1 := value1_1\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function allocate_memory_6725() -> memPtr\n    {\n        memPtr := mload(0x40)\n        let newFreePtr := add(memPtr, 0x40)\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(0x40, newFreePtr)\n    }\n    function allocate_memory_6728() -> memPtr\n    {\n        memPtr := mload(64)\n        let newFreePtr := add(memPtr, 0x0140)\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n    function allocate_memory(size) -> memPtr\n    {\n        memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(size, 31), not(31)))\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n    function array_allocation_size_string(length) -> size\n    {\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n        size := add(and(add(length, 31), not(31)), 0x20)\n    }\n    function abi_decode_string(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        let _1 := calldataload(offset)\n        let array_1 := allocate_memory(array_allocation_size_string(_1))\n        mstore(array_1, _1)\n        if gt(add(add(offset, _1), 0x20), end) { revert(0, 0) }\n        calldatacopy(add(array_1, 0x20), add(offset, 0x20), _1)\n        mstore(add(add(array_1, _1), 0x20), 0)\n        array := array_1\n    }\n    function validator_revert_address(value)\n    {\n        if iszero(eq(value, and(value, 0xffffffffffffffffffffffffffffffffffffffff))) { revert(0, 0) }\n    }\n    function abi_decode_uint8(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, 0xff))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_array$_t_struct$_MultiRevocationRequest_$147_calldata_ptr_$dyn_calldata_ptrt_string_memory_ptrt_addresst_uint256t_uint256t_uint8t_bytes32t_bytes32(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5, value6, value7, value8\n    {\n        if slt(sub(dataEnd, headStart), 256) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let value0_1, value1_1 := abi_decode_array_struct_MultiRevocationRequest_calldata_dyn_calldata(add(headStart, offset), dataEnd)\n        value0 := value0_1\n        value1 := value1_1\n        let offset_1 := calldataload(add(headStart, 32))\n        if gt(offset_1, _1) { revert(0, 0) }\n        value2 := abi_decode_string(add(headStart, offset_1), dataEnd)\n        let value := calldataload(add(headStart, 64))\n        validator_revert_address(value)\n        value3 := value\n        value4 := calldataload(add(headStart, 96))\n        value5 := calldataload(add(headStart, 128))\n        value6 := abi_decode_uint8(add(headStart, 160))\n        value7 := calldataload(add(headStart, 192))\n        value8 := calldataload(add(headStart, 224))\n    }\n    function abi_decode_tuple_t_array$_t_struct$_AttestationRequestNode_$5232_calldata_ptr_$dyn_calldata_ptrt_string_memory_ptrt_addresst_uint256t_uint256t_uint8t_bytes32t_bytes32(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5, value6, value7, value8\n    {\n        if slt(sub(dataEnd, headStart), 256) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let value0_1, value1_1 := abi_decode_array_struct_MultiRevocationRequest_calldata_dyn_calldata(add(headStart, offset), dataEnd)\n        value0 := value0_1\n        value1 := value1_1\n        let offset_1 := calldataload(add(headStart, 32))\n        if gt(offset_1, _1) { revert(0, 0) }\n        value2 := abi_decode_string(add(headStart, offset_1), dataEnd)\n        let value := calldataload(add(headStart, 64))\n        validator_revert_address(value)\n        value3 := value\n        value4 := calldataload(add(headStart, 96))\n        value5 := calldataload(add(headStart, 128))\n        value6 := abi_decode_uint8(add(headStart, 160))\n        value7 := calldataload(add(headStart, 192))\n        value8 := calldataload(add(headStart, 224))\n    }\n    function abi_decode_tuple_t_string_memory_ptrt_uint256t_uint256t_uint8t_bytes32t_bytes32(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5\n    {\n        if slt(sub(dataEnd, headStart), 192) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        value0 := abi_decode_string(add(headStart, offset), dataEnd)\n        value1 := calldataload(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n        value3 := abi_decode_uint8(add(headStart, 96))\n        value4 := calldataload(add(headStart, 128))\n        value5 := calldataload(add(headStart, 160))\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_encode_tuple_t_contract$_IEAS_$346__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function copy_memory_to_memory_with_cleanup(src, dst, length)\n    {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n    }\n    function abi_encode_string(value, pos) -> end\n    {\n        let length := mload(value)\n        mstore(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), add(pos, 0x20), length)\n        end := add(add(pos, and(add(length, 31), not(31))), 0x20)\n    }\n    function abi_encode_tuple_t_bytes1_t_string_memory_ptr_t_string_memory_ptr_t_uint256_t_address_t_bytes32_t_array$_t_uint256_$dyn_memory_ptr__to_t_bytes1_t_string_memory_ptr_t_string_memory_ptr_t_uint256_t_address_t_bytes32_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed(headStart, value6, value5, value4, value3, value2, value1, value0) -> tail\n    {\n        mstore(headStart, and(value0, 0xff00000000000000000000000000000000000000000000000000000000000000))\n        let _1 := 32\n        mstore(add(headStart, _1), 224)\n        let tail_1 := abi_encode_string(value1, add(headStart, 224))\n        mstore(add(headStart, 64), sub(tail_1, headStart))\n        let tail_2 := abi_encode_string(value2, tail_1)\n        mstore(add(headStart, 96), value3)\n        mstore(add(headStart, 128), and(value4, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 160), value5)\n        mstore(add(headStart, 192), sub(tail_2, headStart))\n        let pos := tail_2\n        let length := mload(value6)\n        mstore(tail_2, length)\n        pos := add(tail_2, _1)\n        let srcPtr := add(value6, _1)\n        let i := 0\n        for { } lt(i, length) { i := add(i, 1) }\n        {\n            mstore(pos, mload(srcPtr))\n            pos := add(pos, _1)\n            srcPtr := add(srcPtr, _1)\n        }\n        tail := pos\n    }\n    function abi_decode_struct_AttestationRequest_calldata(offset, end) -> value\n    {\n        if slt(sub(end, offset), 64) { revert(0, 0) }\n        value := offset\n    }\n    function abi_decode_tuple_t_struct$_AttestationRequest_$87_calldata_ptrt_string_memory_ptrt_addresst_uint256t_uint256t_uint8t_bytes32t_bytes32(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5, value6, value7\n    {\n        if slt(sub(dataEnd, headStart), 256) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        value0 := abi_decode_struct_AttestationRequest_calldata(add(headStart, offset), dataEnd)\n        let offset_1 := calldataload(add(headStart, 32))\n        if gt(offset_1, _1) { revert(0, 0) }\n        value1 := abi_decode_string(add(headStart, offset_1), dataEnd)\n        let value := calldataload(add(headStart, 64))\n        validator_revert_address(value)\n        value2 := value\n        value3 := calldataload(add(headStart, 96))\n        value4 := calldataload(add(headStart, 128))\n        value5 := abi_decode_uint8(add(headStart, 160))\n        value6 := calldataload(add(headStart, 192))\n        value7 := calldataload(add(headStart, 224))\n    }\n    function abi_decode_tuple_t_struct$_AttestationRequest_$87_calldata_ptr(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        value0 := abi_decode_struct_AttestationRequest_calldata(add(headStart, offset), dataEnd)\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n    function access_calldata_tail_t_struct$_MultiRevocationRequest_$147_calldata_ptr(base_ref, ptr_to_tail) -> addr\n    {\n        let rel_offset_of_tail := calldataload(ptr_to_tail)\n        if iszero(slt(rel_offset_of_tail, add(sub(calldatasize(), base_ref), not(62)))) { revert(0, 0) }\n        addr := add(base_ref, rel_offset_of_tail)\n    }\n    function array_allocation_size_array_struct_RevocationRequestData_dyn(length) -> size\n    {\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n        size := add(shl(5, length), 0x20)\n    }\n    function convert_t_struct$_MultiRevocationRequest_$147_calldata_ptr_to_t_struct$_MultiRevocationRequest_$147_memory_ptr(value) -> converted\n    {\n        let _1 := 0x40\n        if slt(sub(calldatasize(), value), _1) { revert(0, 0) }\n        let value_1 := allocate_memory_6725()\n        mstore(value_1, calldataload(value))\n        let _2 := 32\n        let offset := calldataload(add(value, _2))\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        let _3 := add(value, offset)\n        if iszero(slt(add(_3, 0x1f), calldatasize())) { revert(0, 0) }\n        let _4 := calldataload(_3)\n        let dst := allocate_memory(array_allocation_size_array_struct_RevocationRequestData_dyn(_4))\n        let dst_1 := dst\n        mstore(dst, _4)\n        dst := add(dst, _2)\n        let srcEnd := add(add(_3, shl(6, _4)), _2)\n        if gt(srcEnd, calldatasize()) { revert(0, 0) }\n        let src := add(_3, _2)\n        for { } lt(src, srcEnd) { src := add(src, _1) }\n        {\n            if slt(sub(calldatasize(), src), _1)\n            {\n                let _5 := 0\n                revert(_5, _5)\n            }\n            let value_2 := allocate_memory_6725()\n            mstore(value_2, calldataload(src))\n            mstore(add(value_2, _2), calldataload(add(src, _2)))\n            mstore(dst, value_2)\n            dst := add(dst, _2)\n        }\n        mstore(add(value_1, _2), dst_1)\n        converted := value_1\n    }\n    function validator_revert_uint64(value)\n    {\n        if iszero(eq(value, and(value, 0xffffffffffffffff))) { revert(0, 0) }\n    }\n    function abi_decode_uint64_fromMemory(offset) -> value\n    {\n        value := mload(offset)\n        validator_revert_uint64(value)\n    }\n    function abi_decode_address_fromMemory(offset) -> value\n    {\n        value := mload(offset)\n        validator_revert_address(value)\n    }\n    function validator_revert_bool(value)\n    {\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n    }\n    function abi_decode_bool_fromMemory(offset) -> value\n    {\n        value := mload(offset)\n        validator_revert_bool(value)\n    }\n    function abi_decode_bytes_fromMemory(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        let _1 := mload(offset)\n        let array_1 := allocate_memory(array_allocation_size_string(_1))\n        mstore(array_1, _1)\n        if gt(add(add(offset, _1), 0x20), end) { revert(0, 0) }\n        copy_memory_to_memory_with_cleanup(add(offset, 0x20), add(array_1, 0x20), _1)\n        array := array_1\n    }\n    function abi_decode_tuple_t_struct$_Attestation_$45_memory_ptr_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let offset := mload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let _2 := add(headStart, offset)\n        if slt(sub(dataEnd, _2), 0x0140) { revert(0, 0) }\n        let value := allocate_memory_6728()\n        mstore(value, mload(_2))\n        mstore(add(value, 32), mload(add(_2, 32)))\n        mstore(add(value, 64), abi_decode_uint64_fromMemory(add(_2, 64)))\n        mstore(add(value, 96), abi_decode_uint64_fromMemory(add(_2, 96)))\n        mstore(add(value, 128), abi_decode_uint64_fromMemory(add(_2, 128)))\n        mstore(add(value, 160), mload(add(_2, 160)))\n        mstore(add(value, 192), abi_decode_address_fromMemory(add(_2, 192)))\n        mstore(add(value, 224), abi_decode_address_fromMemory(add(_2, 224)))\n        let _3 := 256\n        mstore(add(value, _3), abi_decode_bool_fromMemory(add(_2, _3)))\n        let _4 := 288\n        let offset_1 := mload(add(_2, _4))\n        if gt(offset_1, _1) { revert(0, 0) }\n        mstore(add(value, _4), abi_decode_bytes_fromMemory(add(_2, offset_1), dataEnd))\n        value0 := value\n    }\n    function abi_encode_tuple_t_stringliteral_bf2878a0327c5efcb59586051281508822c0d430e7858d25ba3f27d805f4146d__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 10)\n        mstore(add(headStart, 64), \"Not owner.\")\n        tail := add(headStart, 96)\n    }\n    function increment_t_uint256(value) -> ret\n    {\n        if eq(value, not(0))\n        {\n            mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n            mstore(4, 0x11)\n            revert(0, 0x24)\n        }\n        ret := add(value, 1)\n    }\n    function abi_encode_tuple_t_array$_t_struct$_MultiRevocationRequest_$147_calldata_ptr_$dyn_calldata_ptr__to_t_array$_t_struct$_MultiRevocationRequest_$147_memory_ptr_$dyn_memory_ptr__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        let _1 := 32\n        let tail_1 := add(headStart, _1)\n        mstore(headStart, _1)\n        let pos := tail_1\n        mstore(tail_1, value1)\n        let _2 := 64\n        pos := add(headStart, _2)\n        let tail_2 := add(add(headStart, shl(5, value1)), _2)\n        let srcPtr := value0\n        let i := 0\n        for { } lt(i, value1) { i := add(i, 1) }\n        {\n            mstore(pos, add(sub(tail_2, headStart), not(63)))\n            let rel_offset_of_tail := calldataload(srcPtr)\n            if iszero(slt(rel_offset_of_tail, add(sub(calldatasize(), value0), not(62)))) { revert(0, 0) }\n            let value := add(rel_offset_of_tail, value0)\n            let tail_3 := add(tail_2, _2)\n            mstore(tail_2, calldataload(value))\n            let rel_offset_of_tail_1 := calldataload(add(value, _1))\n            if iszero(slt(rel_offset_of_tail_1, add(sub(calldatasize(), value), not(30)))) { revert(0, 0) }\n            let value_1 := add(rel_offset_of_tail_1, value)\n            let length := calldataload(value_1)\n            let value_2 := add(value_1, _1)\n            if gt(length, 0xffffffffffffffff) { revert(0, 0) }\n            if sgt(value_2, sub(calldatasize(), shl(6, length))) { revert(0, 0) }\n            mstore(add(tail_2, _1), _2)\n            let pos_1 := tail_3\n            mstore(tail_3, length)\n            pos_1 := add(tail_2, 96)\n            let srcPtr_1 := value_2\n            let i_1 := 0\n            for { } lt(i_1, length) { i_1 := add(i_1, 1) }\n            {\n                mstore(pos_1, calldataload(srcPtr_1))\n                mstore(add(pos_1, _1), calldataload(add(srcPtr_1, _1)))\n                pos_1 := add(pos_1, _2)\n                srcPtr_1 := add(srcPtr_1, _2)\n            }\n            tail_2 := pos_1\n            srcPtr := add(srcPtr, _1)\n            pos := add(pos, _1)\n        }\n        tail := tail_2\n    }\n    function access_calldata_tail_t_struct$_AttestationRequestNode_$5232_calldata_ptr(base_ref, ptr_to_tail) -> addr\n    {\n        let rel_offset_of_tail := calldataload(ptr_to_tail)\n        if iszero(slt(rel_offset_of_tail, add(sub(calldatasize(), base_ref), not(94)))) { revert(0, 0) }\n        addr := add(base_ref, rel_offset_of_tail)\n    }\n    function access_calldata_tail_t_struct$_MultiAttestationRequest_$105_calldata_ptr(base_ref, ptr_to_tail) -> addr\n    {\n        let rel_offset_of_tail := calldataload(ptr_to_tail)\n        if iszero(slt(rel_offset_of_tail, add(sub(calldatasize(), base_ref), not(62)))) { revert(0, 0) }\n        addr := add(base_ref, rel_offset_of_tail)\n    }\n    function abi_decode_struct_AttestationRequestData(headStart, end) -> value\n    {\n        if slt(sub(end, headStart), 0xc0) { revert(0, 0) }\n        let memPtr := mload(64)\n        let newFreePtr := add(memPtr, 0xc0)\n        let _1 := 0xffffffffffffffff\n        if or(gt(newFreePtr, _1), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n        value := memPtr\n        let value_1 := calldataload(headStart)\n        validator_revert_address(value_1)\n        mstore(memPtr, value_1)\n        let value_2 := calldataload(add(headStart, 32))\n        validator_revert_uint64(value_2)\n        mstore(add(memPtr, 32), value_2)\n        let value_3 := calldataload(add(headStart, 64))\n        validator_revert_bool(value_3)\n        mstore(add(memPtr, 64), value_3)\n        mstore(add(memPtr, 96), calldataload(add(headStart, 96)))\n        let offset := calldataload(add(headStart, 128))\n        if gt(offset, _1) { revert(0, 0) }\n        mstore(add(memPtr, 128), abi_decode_string(add(headStart, offset), end))\n        mstore(add(memPtr, 160), calldataload(add(headStart, 160)))\n    }\n    function convert_t_struct$_MultiAttestationRequest_$105_calldata_ptr_to_t_struct$_MultiAttestationRequest_$105_memory_ptr(value) -> converted\n    {\n        if slt(sub(calldatasize(), value), 0x40) { revert(0, 0) }\n        let value_1 := allocate_memory_6725()\n        mstore(value_1, calldataload(value))\n        let _1 := 32\n        let offset := calldataload(add(value, _1))\n        let _2 := 0xffffffffffffffff\n        if gt(offset, _2) { revert(0, 0) }\n        let _3 := add(value, offset)\n        if iszero(slt(add(_3, 0x1f), calldatasize())) { revert(0, 0) }\n        let _4 := calldataload(_3)\n        let dst := allocate_memory(array_allocation_size_array_struct_RevocationRequestData_dyn(_4))\n        let dst_1 := dst\n        mstore(dst, _4)\n        dst := add(dst, _1)\n        let srcEnd := add(add(_3, shl(5, _4)), _1)\n        if gt(srcEnd, calldatasize()) { revert(0, 0) }\n        let src := add(_3, _1)\n        for { } lt(src, srcEnd) { src := add(src, _1) }\n        {\n            let innerOffset := calldataload(src)\n            if gt(innerOffset, _2)\n            {\n                let _5 := 0\n                revert(_5, _5)\n            }\n            mstore(dst, abi_decode_struct_AttestationRequestData(add(add(_3, innerOffset), _1), calldatasize()))\n            dst := add(dst, _1)\n        }\n        mstore(add(value_1, _1), dst_1)\n        converted := value_1\n    }\n    function abi_encode_tuple_t_array$_t_struct$_MultiAttestationRequest_$105_memory_ptr_$dyn_memory_ptr__to_t_array$_t_struct$_MultiAttestationRequest_$105_memory_ptr_$dyn_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        let _1 := 32\n        let tail_1 := add(headStart, _1)\n        mstore(headStart, _1)\n        let pos := tail_1\n        let length := mload(value0)\n        mstore(tail_1, length)\n        let _2 := 64\n        pos := add(headStart, _2)\n        let tail_2 := add(add(headStart, shl(5, length)), _2)\n        let srcPtr := add(value0, _1)\n        let i := 0\n        for { } lt(i, length) { i := add(i, 1) }\n        {\n            mstore(pos, add(sub(tail_2, headStart), not(63)))\n            let _3 := mload(srcPtr)\n            let tail_3 := add(tail_2, _2)\n            mstore(tail_2, mload(_3))\n            let memberValue0 := mload(add(_3, _1))\n            mstore(add(tail_2, _1), _2)\n            let pos_1 := tail_3\n            let length_1 := mload(memberValue0)\n            mstore(tail_3, length_1)\n            let _4 := 96\n            pos_1 := add(tail_2, _4)\n            let tail_4 := add(add(tail_2, shl(5, length_1)), _4)\n            let srcPtr_1 := add(memberValue0, _1)\n            let i_1 := 0\n            for { } lt(i_1, length_1) { i_1 := add(i_1, 1) }\n            {\n                mstore(pos_1, add(sub(tail_4, tail_2), not(95)))\n                let _5 := mload(srcPtr_1)\n                let _6 := 0xc0\n                mstore(tail_4, and(mload(_5), 0xffffffffffffffffffffffffffffffffffffffff))\n                mstore(add(tail_4, _1), and(mload(add(_5, _1)), 0xffffffffffffffff))\n                mstore(add(tail_4, _2), iszero(iszero(mload(add(_5, _2)))))\n                mstore(add(tail_4, _4), mload(add(_5, _4)))\n                let _7 := 0x80\n                let memberValue0_1 := mload(add(_5, _7))\n                mstore(add(tail_4, _7), _6)\n                let tail_5 := abi_encode_string(memberValue0_1, add(tail_4, _6))\n                let _8 := 0xa0\n                mstore(add(tail_4, _8), mload(add(_5, _8)))\n                tail_4 := tail_5\n                srcPtr_1 := add(srcPtr_1, _1)\n                pos_1 := add(pos_1, _1)\n            }\n            tail_2 := tail_4\n            srcPtr := add(srcPtr, _1)\n            pos := add(pos, _1)\n        }\n        tail := tail_2\n    }\n    function abi_decode_tuple_t_array$_t_bytes32_$dyn_memory_ptr_fromMemory(headStart, dataEnd) -> value0\n    {\n        let _1 := 32\n        if slt(sub(dataEnd, headStart), _1) { revert(0, 0) }\n        let offset := mload(headStart)\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        let _2 := add(headStart, offset)\n        if iszero(slt(add(_2, 0x1f), dataEnd)) { revert(0, 0) }\n        let _3 := mload(_2)\n        let dst := allocate_memory(array_allocation_size_array_struct_RevocationRequestData_dyn(_3))\n        let dst_1 := dst\n        mstore(dst, _3)\n        dst := add(dst, _1)\n        let srcEnd := add(add(_2, shl(5, _3)), _1)\n        if gt(srcEnd, dataEnd) { revert(0, 0) }\n        let src := add(_2, _1)\n        for { } lt(src, srcEnd) { src := add(src, _1) }\n        {\n            mstore(dst, mload(src))\n            dst := add(dst, _1)\n        }\n        value0 := dst_1\n    }\n    function abi_encode_tuple_t_stringliteral_99132f8bb903a5d9600420e3899938d8bfd8aa30795f8fee460656e87dd9c517__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 17)\n        mstore(add(headStart, 64), \"Signature expired\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_4273fbad0f59c6a7ae7dbee11f68ce4ebedcf6c034c1140f12b6e6f0444ffa6c__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 42)\n        mstore(add(headStart, 64), \"Signer and attester addresses do\")\n        mstore(add(headStart, 96), \"n't match.\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_19a9c5fdfc984667e300523283171e2aca8bb9e593f19eef41052fcdbfdb1568__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 13)\n        mstore(add(headStart, 64), \"Invalid nonce\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_bytes32_t_bytes32_t_uint256_t_uint256__to_t_bytes32_t_bytes32_t_uint256_t_uint256__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 128)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), value3)\n    }\n    function abi_encode_tuple_t_stringliteral_2e5045ff73280aa8e8acd8c82710f23812497f87f7f576e2220a2ddd0d45eade__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 21)\n        mstore(add(headStart, 64), \"EIP712: Uninitialized\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 46)\n        mstore(add(headStart, 64), \"Initializable: contract is alrea\")\n        mstore(add(headStart, 96), \"dy initialized\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xff))\n    }\n    function calldata_access_bytes_calldata(base_ref, ptr) -> value, length\n    {\n        let rel_offset_of_tail := calldataload(ptr)\n        if iszero(slt(rel_offset_of_tail, add(sub(calldatasize(), base_ref), not(30)))) { revert(0, 0) }\n        let value_1 := add(rel_offset_of_tail, base_ref)\n        length := calldataload(value_1)\n        value := add(value_1, 0x20)\n        if gt(length, 0xffffffffffffffff) { revert(0, 0) }\n        if sgt(value, sub(calldatasize(), length)) { revert(0, 0) }\n    }\n    function abi_encode_bytes_calldata(start, length, pos) -> end\n    {\n        mstore(pos, length)\n        calldatacopy(add(pos, 0x20), start, length)\n        mstore(add(add(pos, length), 0x20), 0)\n        end := add(add(pos, and(add(length, 31), not(31))), 0x20)\n    }\n    function abi_encode_tuple_t_struct$_AttestationRequest_$87_calldata_ptr__to_t_struct$_AttestationRequest_$87_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), calldataload(value0))\n        let rel_offset_of_tail := calldataload(add(value0, 32))\n        if iszero(slt(rel_offset_of_tail, add(sub(calldatasize(), value0), not(190)))) { revert(0, 0) }\n        let value := add(rel_offset_of_tail, value0)\n        mstore(add(headStart, 0x40), 0x40)\n        let value_1 := calldataload(value)\n        validator_revert_address(value_1)\n        mstore(add(headStart, 96), and(value_1, 0xffffffffffffffffffffffffffffffffffffffff))\n        let value_2 := calldataload(add(value, 32))\n        validator_revert_uint64(value_2)\n        mstore(add(headStart, 128), and(value_2, 0xffffffffffffffff))\n        let value_3 := calldataload(add(value, 0x40))\n        validator_revert_bool(value_3)\n        mstore(add(headStart, 160), iszero(iszero(value_3)))\n        mstore(add(headStart, 0xc0), calldataload(add(value, 96)))\n        let memberValue0, memberValue1 := calldata_access_bytes_calldata(value, add(value, 128))\n        mstore(add(headStart, 224), 0xc0)\n        let tail_1 := abi_encode_bytes_calldata(memberValue0, memberValue1, add(headStart, 288))\n        mstore(add(headStart, 256), calldataload(add(value, 160)))\n        tail := tail_1\n    }\n    function abi_decode_tuple_t_bytes32_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := mload(headStart)\n    }\n    function access_calldata_tail_t_struct$_AttestationRequestData_$81_calldata_ptr(base_ref, ptr_to_tail) -> addr\n    {\n        let rel_offset_of_tail := calldataload(ptr_to_tail)\n        if iszero(slt(rel_offset_of_tail, add(sub(calldatasize(), base_ref), not(190)))) { revert(0, 0) }\n        addr := add(base_ref, rel_offset_of_tail)\n    }\n    function convert_t_struct$_AttestationRequestData_$81_calldata_ptr_to_t_struct$_AttestationRequestData_$81_memory_ptr(value) -> converted\n    {\n        converted := abi_decode_struct_AttestationRequestData(value, calldatasize())\n    }\n    function abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"Ownable: new owner is the zero a\")\n        mstore(add(headStart, 96), \"ddress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 32)\n        mstore(add(headStart, 64), \"Ownable: caller is not the owner\")\n        tail := add(headStart, 96)\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 43)\n        mstore(add(headStart, 64), \"Initializable: contract is not i\")\n        mstore(add(headStart, 96), \"nitializing\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_bytes32_t_uint8_t_bytes32_t_bytes32__to_t_bytes32_t_uint8_t_bytes32_t_bytes32__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 128)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), and(value1, 0xff))\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), value3)\n    }\n    function panic_error_0x21()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x21)\n        revert(0, 0x24)\n    }\n    function abi_encode_tuple_t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 24)\n        mstore(add(headStart, 64), \"ECDSA: invalid signature\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 31)\n        mstore(add(headStart, 64), \"ECDSA: invalid signature length\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 34)\n        mstore(add(headStart, 64), \"ECDSA: invalid signature 's' val\")\n        mstore(add(headStart, 96), \"ue\")\n        tail := add(headStart, 128)\n    }\n    function array_dataslot_string_storage(ptr) -> data\n    {\n        mstore(0, ptr)\n        data := keccak256(0, 0x20)\n    }\n    function clean_up_bytearray_end_slots_string_storage(array, len, startIndex)\n    {\n        if gt(len, 31)\n        {\n            let _1 := 0\n            mstore(_1, array)\n            let data := keccak256(_1, 0x20)\n            let deleteStart := add(data, shr(5, add(startIndex, 31)))\n            if lt(startIndex, 0x20) { deleteStart := data }\n            let _2 := add(data, shr(5, add(len, 31)))\n            let start := deleteStart\n            for { } lt(start, _2) { start := add(start, 1) }\n            { sstore(start, _1) }\n        }\n    }\n    function extract_used_part_and_set_length_of_short_byte_array(data, len) -> used\n    {\n        used := or(and(data, not(shr(shl(3, len), not(0)))), shl(1, len))\n    }\n    function copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage(slot, src)\n    {\n        let newLen := mload(src)\n        if gt(newLen, 0xffffffffffffffff) { panic_error_0x41() }\n        clean_up_bytearray_end_slots_string_storage(slot, extract_byte_array_length(sload(slot)), newLen)\n        let srcOffset := 0\n        let srcOffset_1 := 0x20\n        srcOffset := srcOffset_1\n        switch gt(newLen, 31)\n        case 1 {\n            let loopEnd := and(newLen, not(31))\n            let dstPtr := array_dataslot_string_storage(slot)\n            let i := 0\n            for { } lt(i, loopEnd) { i := add(i, srcOffset_1) }\n            {\n                sstore(dstPtr, mload(add(src, srcOffset)))\n                dstPtr := add(dstPtr, 1)\n                srcOffset := add(srcOffset, srcOffset_1)\n            }\n            if lt(loopEnd, newLen)\n            {\n                let lastValue := mload(add(src, srcOffset))\n                sstore(dstPtr, and(lastValue, not(shr(and(shl(3, newLen), 248), not(0)))))\n            }\n            sstore(slot, add(shl(1, newLen), 1))\n        }\n        default {\n            let value := 0\n            if newLen\n            {\n                value := mload(add(src, srcOffset))\n            }\n            sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n        }\n    }\n    function abi_encode_tuple_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__to_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__fromStack_reversed(headStart, value4, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 160)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), value3)\n        mstore(add(headStart, 128), and(value4, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n}","id":29,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"6080604052600436106100e85760003560e01c80637ecebe001161008a578063c4d66de811610059578063c4d66de814610289578063d68a5ab6146102a9578063f17325e7146102c9578063f2fde38b146102dc57600080fd5b80637ecebe00146101f65780638150864d1461022357806384b0196e146102435780638da5cb5b1461026b57600080fd5b80635ea677e9116100c65780635ea677e9146101425780635ffed2f014610162578063715018a61461019f5780637e4a7d8f146101b457600080fd5b80634cb7e9e5146100ed5780635913a31c146101025780635cad755514610122575b600080fd5b6101006100fb36600461196b565b6102fc565b005b34801561010e57600080fd5b5061010061011d36600461196b565b6104dd565b34801561012e57600080fd5b5061010061013d366004611aea565b61078f565b34801561014e57600080fd5b5061010061015d366004611aea565b610922565b34801561016e57600080fd5b5061018261017d366004611b9d565b610a68565b6040516001600160a01b0390911681526020015b60405180910390f35b3480156101ab57600080fd5b50610100610af7565b3480156101c057600080fd5b506101e87f17132900f74aadb4a80e6e5d88759b509b5a55861f3e0542632865ccc1180c4981565b604051908152602001610196565b34801561020257600080fd5b506101e8610211366004611c10565b609a6020526000908152604090205481565b34801561022f57600080fd5b50609954610182906001600160a01b031681565b34801561024f57600080fd5b50610258610b0b565b6040516101969796959493929190611c7d565b34801561027757600080fd5b506033546001600160a01b0316610182565b34801561029557600080fd5b506101006102a4366004611c10565b610bcd565b3480156102b557600080fd5b506101e86102c4366004611d47565b610d87565b6101e86102d7366004611df5565b610f2d565b3480156102e857600080fd5b506101006102f7366004611c10565b611041565b60005b8181101561047457600083838381811061031b5761031b611e32565b905060200281019061032d9190611e48565b61033690611e8c565b905060005b81602001515181101561045f57609954602083015180516000926001600160a01b03169163a3112a64918590811061037557610375611e32565b6020026020010151600001516040518263ffffffff1660e01b815260040161039f91815260200190565b600060405180830381865afa1580156103bc573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526103e49190810190611fe0565b60e08101519091506001600160a01b031633148061040e575060c08101516001600160a01b031633145b61044c5760405162461bcd60e51b815260206004820152600a6024820152692737ba1037bbb732b91760b11b60448201526064015b60405180910390fd5b5080610457816120d7565b91505061033b565b5050808061046c906120d7565b9150506102ff565b50609954604051634cb7e9e560e01b81526001600160a01b0390911690634cb7e9e5906104a790859085906004016120fe565b600060405180830381600087803b1580156104c157600080fd5b505af11580156104d5573d6000803e3d6000fd5b505050505050565b60008167ffffffffffffffff8111156104f8576104f86119ad565b60405190808252806020026020018201604052801561052b57816020015b60608152602001906001900390816105165790505b50905060005b8281101561078957600084848381811061054d5761054d611e32565b905060200281019061055f91906121ee565b61056d906020810190611e48565b610576906122be565b905061058581602001516110d1565b81156106675760005b816020015151811015610665576000826020015182815181106105b3576105b3611e32565b602002602001015190506000801b81606001510361065257848787868181106105de576105de611e32565b90506020028101906105f091906121ee565b604001358151811061060457610604611e32565b602002602001015160008151811061061e5761061e611e32565b6020026020010151816060018181525050808360200151838151811061064657610646611e32565b60200260200101819052505b508061065d816120d7565b91505061058e565b505b604080516001808252818301909252600091816020015b60408051808201909152600081526060602082015281526020019060019003908161067e57905050905081816000815181106106bc576106bc611e32565b60209081029190910101526099546040517f44adc90e0000000000000000000000000000000000000000000000000000000081526001600160a01b03909116906344adc90e90610710908490600401612383565b6000604051808303816000875af115801561072f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610757919081019061247f565b84848151811061076957610769611e32565b602002602001018190525050508080610781906120d7565b915050610531565b50505050565b834211156107d35760405162461bcd60e51b815260206004820152601160248201527014da59db985d1d5c9948195e1c1a5c9959607a1b6044820152606401610443565b60006107e3888787878787610a68565b9050866001600160a01b0316816001600160a01b0316146108595760405162461bcd60e51b815260206004820152602a60248201527f5369676e657220616e642061747465737465722061646472657373657320646f6044820152693713ba1036b0ba31b41760b11b6064820152608401610443565b6001600160a01b0381166000908152609a6020526040812080549161087d836120d7565b9190505586146108bf5760405162461bcd60e51b815260206004820152600d60248201526c496e76616c6964206e6f6e636560981b6044820152606401610443565b604051634cb7e9e560e01b81523090634cb7e9e5906108e4908d908d906004016120fe565b600060405180830381600087803b1580156108fe57600080fd5b505af1158015610912573d6000803e3d6000fd5b5050505050505050505050505050565b834211156109665760405162461bcd60e51b815260206004820152601160248201527014da59db985d1d5c9948195e1c1a5c9959607a1b6044820152606401610443565b6000610976888787878787610a68565b9050866001600160a01b0316816001600160a01b0316146109ec5760405162461bcd60e51b815260206004820152602a60248201527f5369676e657220616e642061747465737465722061646472657373657320646f6044820152693713ba1036b0ba31b41760b11b6064820152608401610443565b6001600160a01b0381166000908152609a60205260408120805491610a10836120d7565b919050558614610a525760405162461bcd60e51b815260206004820152600d60248201526c496e76616c6964206e6f6e636560981b6044820152606401610443565b610a5c8a8a6104dd565b50505050505050505050565b600080610add7f17132900f74aadb4a80e6e5d88759b509b5a55861f3e0542632865ccc1180c4989805190602001208989604051602001610ac2949392919093845260208401929092526040830152606082015260800190565b6040516020818303038152906040528051906020012061113c565b9050610aeb8186868661118a565b98975050505050505050565b610aff6111b2565b610b09600061120c565b565b6000606080600080600060606065546000801b148015610b2b5750606654155b610b775760405162461bcd60e51b815260206004820152601560248201527f4549503731323a20556e696e697469616c697a656400000000000000000000006044820152606401610443565b610b7f61126b565b610b876112fd565b604080516000808252602082019092527f0f000000000000000000000000000000000000000000000000000000000000009b939a50919850469750309650945092509050565b600054610100900460ff1615808015610bed5750600054600160ff909116105b80610c075750303b158015610c07575060005460ff166001145b610c795760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610443565b6000805460ff191660011790558015610c9c576000805461ff0019166101001790555b6099805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b038416179055604080518082018252600f81527f6761702d6174746573746174696f6e00000000000000000000000000000000006020808301919091528251808401909352600383527f312e30000000000000000000000000000000000000000000000000000000000090830152610d359161130c565b610d3d611381565b8015610d83576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050565b600084421115610dcd5760405162461bcd60e51b815260206004820152601160248201527014da59db985d1d5c9948195e1c1a5c9959607a1b6044820152606401610443565b6000610ddd898888888888610a68565b9050876001600160a01b0316816001600160a01b031614610e535760405162461bcd60e51b815260206004820152602a60248201527f5369676e657220616e642061747465737465722061646472657373657320646f6044820152693713ba1036b0ba31b41760b11b6064820152608401610443565b6001600160a01b0381166000908152609a60205260408120805491610e77836120d7565b919050558714610eb95760405162461bcd60e51b815260206004820152600d60248201526c496e76616c6964206e6f6e636560981b6044820152606401610443565b60405163f17325e760e01b8152309063f17325e790610edc908d9060040161257f565b6020604051808303816000875af1158015610efb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f1f919061263c565b9a9950505050505050505050565b604080516001808252818301909252600091829190816020015b6040805160c081018252600080825260208083018290529282018190526060808301829052608083015260a08201528252600019909201910181610f47579050509050610f976020840184612655565b610fa09061266b565b81600081518110610fb357610fb3611e32565b6020026020010181905250610fc7816110d1565b60995460405163f17325e760e01b81526001600160a01b039091169063f17325e790610ff790869060040161257f565b6020604051808303816000875af1158015611016573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061103a919061263c565b9392505050565b6110496111b2565b6001600160a01b0381166110c55760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610443565b6110ce8161120c565b50565b60005b8151811015610d83576000801b8282815181106110f3576110f3611e32565b6020026020010151606001511461112a5761112a82828151811061111957611119611e32565b6020026020010151606001516113f4565b80611134816120d7565b9150506110d4565b60006111846111496114e2565b836040517f19010000000000000000000000000000000000000000000000000000000000008152600281019290925260228201526042902090565b92915050565b600080600061119b878787876114f1565b915091506111a8816115b5565b5095945050505050565b6033546001600160a01b03163314610b095760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610443565b603380546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60606067805461127a90612677565b80601f01602080910402602001604051908101604052809291908181526020018280546112a690612677565b80156112f35780601f106112c8576101008083540402835291602001916112f3565b820191906000526020600020905b8154815290600101906020018083116112d657829003601f168201915b5050505050905090565b60606068805461127a90612677565b600054610100900460ff166113775760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610443565b610d83828261171a565b600054610100900460ff166113ec5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610443565b610b096117ad565b6099546040517fa3112a64000000000000000000000000000000000000000000000000000000008152600481018390526000916001600160a01b03169063a3112a6490602401600060405180830381865afa158015611457573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261147f9190810190611fe0565b60e08101519091506001600160a01b03163314806114a9575060c08101516001600160a01b031633145b610d835760405162461bcd60e51b815260206004820152600a6024820152692737ba1037bbb732b91760b11b6044820152606401610443565b60006114ec611821565b905090565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a083111561152857506000905060036115ac565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa15801561157c573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166115a5576000600192509250506115ac565b9150600090505b94509492505050565b60008160048111156115c9576115c96126ab565b036115d15750565b60018160048111156115e5576115e56126ab565b036116325760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610443565b6002816004811115611646576116466126ab565b036116935760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610443565b60038160048111156116a7576116a76126ab565b036110ce5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c60448201527f75650000000000000000000000000000000000000000000000000000000000006064820152608401610443565b600054610100900460ff166117855760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610443565b6067611791838261270c565b50606861179e828261270c565b50506000606581905560665550565b600054610100900460ff166118185760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610443565b610b093361120c565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f61184c611895565b6118546118ee565b60408051602081019490945283019190915260608201524660808201523060a082015260c00160405160208183030381529060405280519060200120905090565b6000806118a061126b565b8051909150156118b7578051602090910120919050565b60655480156118c65792915050565b7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a4709250505090565b6000806118f96112fd565b805190915015611910578051602090910120919050565b60665480156118c65792915050565b60008083601f84011261193157600080fd5b50813567ffffffffffffffff81111561194957600080fd5b6020830191508360208260051b850101111561196457600080fd5b9250929050565b6000806020838503121561197e57600080fd5b823567ffffffffffffffff81111561199557600080fd5b6119a18582860161191f565b90969095509350505050565b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff811182821017156119e6576119e66119ad565b60405290565b604051610140810167ffffffffffffffff811182821017156119e6576119e66119ad565b604051601f8201601f1916810167ffffffffffffffff81118282101715611a3957611a396119ad565b604052919050565b600067ffffffffffffffff821115611a5b57611a5b6119ad565b50601f01601f191660200190565b600082601f830112611a7a57600080fd5b8135611a8d611a8882611a41565b611a10565b818152846020838601011115611aa257600080fd5b816020850160208301376000918101602001919091529392505050565b6001600160a01b03811681146110ce57600080fd5b803560ff81168114611ae557600080fd5b919050565b60008060008060008060008060006101008a8c031215611b0957600080fd5b893567ffffffffffffffff80821115611b2157600080fd5b611b2d8d838e0161191f565b909b50995060208c0135915080821115611b4657600080fd5b50611b538c828d01611a69565b97505060408a0135611b6481611abf565b955060608a0135945060808a01359350611b8060a08b01611ad4565b925060c08a0135915060e08a013590509295985092959850929598565b60008060008060008060c08789031215611bb657600080fd5b863567ffffffffffffffff811115611bcd57600080fd5b611bd989828a01611a69565b9650506020870135945060408701359350611bf660608801611ad4565b92506080870135915060a087013590509295509295509295565b600060208284031215611c2257600080fd5b813561103a81611abf565b60005b83811015611c48578181015183820152602001611c30565b50506000910152565b60008151808452611c69816020860160208601611c2d565b601f01601f19169290920160200192915050565b7fff00000000000000000000000000000000000000000000000000000000000000881681526000602060e081840152611cb960e084018a611c51565b8381036040850152611ccb818a611c51565b606085018990526001600160a01b038816608086015260a0850187905284810360c0860152855180825283870192509083019060005b81811015611d1d57835183529284019291840191600101611d01565b50909c9b505050505050505050505050565b600060408284031215611d4157600080fd5b50919050565b600080600080600080600080610100898b031215611d6457600080fd5b883567ffffffffffffffff80821115611d7c57600080fd5b611d888c838d01611d2f565b995060208b0135915080821115611d9e57600080fd5b50611dab8b828c01611a69565b9750506040890135611dbc81611abf565b95506060890135945060808901359350611dd860a08a01611ad4565b925060c0890135915060e089013590509295985092959890939650565b600060208284031215611e0757600080fd5b813567ffffffffffffffff811115611e1e57600080fd5b611e2a84828501611d2f565b949350505050565b634e487b7160e01b600052603260045260246000fd5b60008235603e19833603018112611e5e57600080fd5b9190910192915050565b600067ffffffffffffffff821115611e8257611e826119ad565b5060051b60200190565b60006040808336031215611e9f57600080fd5b611ea76119c3565b8335815260208085013567ffffffffffffffff811115611ec657600080fd5b850136601f820112611ed757600080fd5b8035611ee5611a8882611e68565b81815260069190911b82018301908381019036831115611f0457600080fd5b928401925b82841015611f4457868436031215611f215760008081fd5b611f296119c3565b84358152858501358682015282529286019290840190611f09565b93850193909352509195945050505050565b67ffffffffffffffff811681146110ce57600080fd5b8051611ae581611f56565b8051611ae581611abf565b80151581146110ce57600080fd5b8051611ae581611f82565b600082601f830112611fac57600080fd5b8151611fba611a8882611a41565b818152846020838601011115611fcf57600080fd5b611e2a826020830160208701611c2d565b600060208284031215611ff257600080fd5b815167ffffffffffffffff8082111561200a57600080fd5b90830190610140828603121561201f57600080fd5b6120276119ec565b825181526020830151602082015261204160408401611f6c565b604082015261205260608401611f6c565b606082015261206360808401611f6c565b608082015260a083015160a082015261207e60c08401611f77565b60c082015261208f60e08401611f77565b60e08201526101006120a2818501611f90565b9082015261012083810151838111156120ba57600080fd5b6120c688828701611f9b565b918301919091525095945050505050565b6000600182016120f757634e487b7160e01b600052601160045260246000fd5b5060010190565b60208082528181018390526000906040808401600586901b8501820187855b888110156121e057878303603f190184528135368b9003603e1901811261214357600080fd5b8a01803584528386018782013536839003601e1901811261216357600080fd5b90910187810191903567ffffffffffffffff81111561218157600080fd5b8060061b360383131561219357600080fd5b85890188905290819052600090606086015b818310156121cb5783358152898401358a820152928801926001929092019188016121a5565b9689019695505050918601915060010161211d565b509098975050505050505050565b60008235605e19833603018112611e5e57600080fd5b600060c0828403121561221657600080fd5b60405160c0810167ffffffffffffffff828210818311171561223a5761223a6119ad565b816040528293508435915061224e82611abf565b90825260208401359061226082611f56565b8160208401526040850135915061227682611f82565b81604084015260608501356060840152608085013591508082111561229a57600080fd5b506122a785828601611a69565b60808301525060a083013560a08201525092915050565b6000604082360312156122d057600080fd5b6122d86119c3565b8235815260208084013567ffffffffffffffff808211156122f857600080fd5b9085019036601f83011261230b57600080fd5b8135612319611a8882611e68565b81815260059190911b8301840190848101903683111561233857600080fd5b8585015b83811015612370578035858111156123545760008081fd5b6123623689838a0101612204565b84525091860191860161233c565b5094860194909452509295945050505050565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b838110156121e057888303603f1901855281518051845287015187840187905280518785018190529088019060609081860190600581901b8701830160005b8281101561246857605f19898303018452855160c06001600160a01b03825116845267ffffffffffffffff8f830151168f8501528d82015115158e8501528682015187850152608080830151828287015261244683870182611c51565b60a09485015196909401959095525050958d0195938d019391506001016123e9565b50988b0198965050509288019250506001016123aa565b6000602080838503121561249257600080fd5b825167ffffffffffffffff8111156124a957600080fd5b8301601f810185136124ba57600080fd5b80516124c8611a8882611e68565b81815260059190911b820183019083810190878311156124e757600080fd5b928401925b82841015612505578351825292840192908401906124ec565b979650505050505050565b6000808335601e1984360301811261252757600080fd5b830160208101925035905067ffffffffffffffff81111561254757600080fd5b80360382131561196457600080fd5b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60208152813560208201526000602083013560be198436030181126125a357600080fd5b604083810152830180356125b681611abf565b6001600160a01b0316606084015260208101356125d281611f56565b67ffffffffffffffff16608084015260408101356125ef81611f82565b151560a0840152606081013560c084015261260d6080820182612510565b60c060e086015261262361012086018284612556565b91505060a0820135610100850152809250505092915050565b60006020828403121561264e57600080fd5b5051919050565b6000823560be19833603018112611e5e57600080fd5b60006111843683612204565b600181811c9082168061268b57607f821691505b602082108103611d4157634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052602160045260246000fd5b601f82111561270757600081815260208120601f850160051c810160208610156126e85750805b601f850160051c820191505b818110156104d5578281556001016126f4565b505050565b815167ffffffffffffffff811115612726576127266119ad565b61273a816127348454612677565b846126c1565b602080601f83116001811461276f57600084156127575750858301515b600019600386901b1c1916600185901b1785556104d5565b600085815260208120601f198616915b8281101561279e5788860151825594840194600190910190840161277f565b50858210156127bc5787850151600019600388901b60f8161c191681555b5050505050600190811b0190555056fea26469706673582212209d295fc07ad69dc0e81e72abc01012614638b062bf313c22b8963e0db80fb9bb64736f6c63430008130033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0xE8 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x7ECEBE00 GT PUSH2 0x8A JUMPI DUP1 PUSH4 0xC4D66DE8 GT PUSH2 0x59 JUMPI DUP1 PUSH4 0xC4D66DE8 EQ PUSH2 0x289 JUMPI DUP1 PUSH4 0xD68A5AB6 EQ PUSH2 0x2A9 JUMPI DUP1 PUSH4 0xF17325E7 EQ PUSH2 0x2C9 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x2DC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x7ECEBE00 EQ PUSH2 0x1F6 JUMPI DUP1 PUSH4 0x8150864D EQ PUSH2 0x223 JUMPI DUP1 PUSH4 0x84B0196E EQ PUSH2 0x243 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x26B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x5EA677E9 GT PUSH2 0xC6 JUMPI DUP1 PUSH4 0x5EA677E9 EQ PUSH2 0x142 JUMPI DUP1 PUSH4 0x5FFED2F0 EQ PUSH2 0x162 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x19F JUMPI DUP1 PUSH4 0x7E4A7D8F EQ PUSH2 0x1B4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x4CB7E9E5 EQ PUSH2 0xED JUMPI DUP1 PUSH4 0x5913A31C EQ PUSH2 0x102 JUMPI DUP1 PUSH4 0x5CAD7555 EQ PUSH2 0x122 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x100 PUSH2 0xFB CALLDATASIZE PUSH1 0x4 PUSH2 0x196B JUMP JUMPDEST PUSH2 0x2FC JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x10E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x100 PUSH2 0x11D CALLDATASIZE PUSH1 0x4 PUSH2 0x196B JUMP JUMPDEST PUSH2 0x4DD JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x12E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x100 PUSH2 0x13D CALLDATASIZE PUSH1 0x4 PUSH2 0x1AEA JUMP JUMPDEST PUSH2 0x78F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x14E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x100 PUSH2 0x15D CALLDATASIZE PUSH1 0x4 PUSH2 0x1AEA JUMP JUMPDEST PUSH2 0x922 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x16E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x182 PUSH2 0x17D CALLDATASIZE PUSH1 0x4 PUSH2 0x1B9D JUMP JUMPDEST PUSH2 0xA68 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1AB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x100 PUSH2 0xAF7 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1C0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1E8 PUSH32 0x17132900F74AADB4A80E6E5D88759B509B5A55861F3E0542632865CCC1180C49 DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x196 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x202 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1E8 PUSH2 0x211 CALLDATASIZE PUSH1 0x4 PUSH2 0x1C10 JUMP JUMPDEST PUSH1 0x9A PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x22F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x99 SLOAD PUSH2 0x182 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x24F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x258 PUSH2 0xB0B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x196 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1C7D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x277 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x33 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x182 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x295 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x100 PUSH2 0x2A4 CALLDATASIZE PUSH1 0x4 PUSH2 0x1C10 JUMP JUMPDEST PUSH2 0xBCD JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2B5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1E8 PUSH2 0x2C4 CALLDATASIZE PUSH1 0x4 PUSH2 0x1D47 JUMP JUMPDEST PUSH2 0xD87 JUMP JUMPDEST PUSH2 0x1E8 PUSH2 0x2D7 CALLDATASIZE PUSH1 0x4 PUSH2 0x1DF5 JUMP JUMPDEST PUSH2 0xF2D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2E8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x100 PUSH2 0x2F7 CALLDATASIZE PUSH1 0x4 PUSH2 0x1C10 JUMP JUMPDEST PUSH2 0x1041 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x474 JUMPI PUSH1 0x0 DUP4 DUP4 DUP4 DUP2 DUP2 LT PUSH2 0x31B JUMPI PUSH2 0x31B PUSH2 0x1E32 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0x32D SWAP2 SWAP1 PUSH2 0x1E48 JUMP JUMPDEST PUSH2 0x336 SWAP1 PUSH2 0x1E8C JUMP JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST DUP2 PUSH1 0x20 ADD MLOAD MLOAD DUP2 LT ISZERO PUSH2 0x45F JUMPI PUSH1 0x99 SLOAD PUSH1 0x20 DUP4 ADD MLOAD DUP1 MLOAD PUSH1 0x0 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 PUSH4 0xA3112A64 SWAP2 DUP6 SWAP1 DUP2 LT PUSH2 0x375 JUMPI PUSH2 0x375 PUSH2 0x1E32 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 ADD MLOAD PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x39F SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x3BC JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x3E4 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x1FE0 JUMP JUMPDEST PUSH1 0xE0 DUP2 ADD MLOAD SWAP1 SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ DUP1 PUSH2 0x40E JUMPI POP PUSH1 0xC0 DUP2 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ JUMPDEST PUSH2 0x44C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xA PUSH1 0x24 DUP3 ADD MSTORE PUSH10 0x2737BA1037BBB732B917 PUSH1 0xB1 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP DUP1 PUSH2 0x457 DUP2 PUSH2 0x20D7 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x33B JUMP JUMPDEST POP POP DUP1 DUP1 PUSH2 0x46C SWAP1 PUSH2 0x20D7 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x2FF JUMP JUMPDEST POP PUSH1 0x99 SLOAD PUSH1 0x40 MLOAD PUSH4 0x4CB7E9E5 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x4CB7E9E5 SWAP1 PUSH2 0x4A7 SWAP1 DUP6 SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0x20FE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4C1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x4D5 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x4F8 JUMPI PUSH2 0x4F8 PUSH2 0x19AD JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x52B JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x516 JUMPI SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x789 JUMPI PUSH1 0x0 DUP5 DUP5 DUP4 DUP2 DUP2 LT PUSH2 0x54D JUMPI PUSH2 0x54D PUSH2 0x1E32 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0x55F SWAP2 SWAP1 PUSH2 0x21EE JUMP JUMPDEST PUSH2 0x56D SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x1E48 JUMP JUMPDEST PUSH2 0x576 SWAP1 PUSH2 0x22BE JUMP JUMPDEST SWAP1 POP PUSH2 0x585 DUP2 PUSH1 0x20 ADD MLOAD PUSH2 0x10D1 JUMP JUMPDEST DUP2 ISZERO PUSH2 0x667 JUMPI PUSH1 0x0 JUMPDEST DUP2 PUSH1 0x20 ADD MLOAD MLOAD DUP2 LT ISZERO PUSH2 0x665 JUMPI PUSH1 0x0 DUP3 PUSH1 0x20 ADD MLOAD DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x5B3 JUMPI PUSH2 0x5B3 PUSH2 0x1E32 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH1 0x0 DUP1 SHL DUP2 PUSH1 0x60 ADD MLOAD SUB PUSH2 0x652 JUMPI DUP5 DUP8 DUP8 DUP7 DUP2 DUP2 LT PUSH2 0x5DE JUMPI PUSH2 0x5DE PUSH2 0x1E32 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0x5F0 SWAP2 SWAP1 PUSH2 0x21EE JUMP JUMPDEST PUSH1 0x40 ADD CALLDATALOAD DUP2 MLOAD DUP2 LT PUSH2 0x604 JUMPI PUSH2 0x604 PUSH2 0x1E32 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x61E JUMPI PUSH2 0x61E PUSH2 0x1E32 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP2 PUSH1 0x60 ADD DUP2 DUP2 MSTORE POP POP DUP1 DUP4 PUSH1 0x20 ADD MLOAD DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x646 JUMPI PUSH2 0x646 PUSH2 0x1E32 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP JUMPDEST POP DUP1 PUSH2 0x65D DUP2 PUSH2 0x20D7 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x58E JUMP JUMPDEST POP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE PUSH1 0x0 SWAP2 DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP2 MSTORE PUSH1 0x60 PUSH1 0x20 DUP3 ADD MSTORE DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x67E JUMPI SWAP1 POP POP SWAP1 POP DUP2 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x6BC JUMPI PUSH2 0x6BC PUSH2 0x1E32 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x99 SLOAD PUSH1 0x40 MLOAD PUSH32 0x44ADC90E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x44ADC90E SWAP1 PUSH2 0x710 SWAP1 DUP5 SWAP1 PUSH1 0x4 ADD PUSH2 0x2383 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x72F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x757 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x247F JUMP JUMPDEST DUP5 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x769 JUMPI PUSH2 0x769 PUSH2 0x1E32 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP POP POP DUP1 DUP1 PUSH2 0x781 SWAP1 PUSH2 0x20D7 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x531 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST DUP4 TIMESTAMP GT ISZERO PUSH2 0x7D3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x11 PUSH1 0x24 DUP3 ADD MSTORE PUSH17 0x14DA59DB985D1D5C9948195E1C1A5C9959 PUSH1 0x7A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x443 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x7E3 DUP9 DUP8 DUP8 DUP8 DUP8 DUP8 PUSH2 0xA68 JUMP JUMPDEST SWAP1 POP DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x859 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5369676E657220616E642061747465737465722061646472657373657320646F PUSH1 0x44 DUP3 ADD MSTORE PUSH10 0x3713BA1036B0BA31B417 PUSH1 0xB1 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x443 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9A PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD SWAP2 PUSH2 0x87D DUP4 PUSH2 0x20D7 JUMP JUMPDEST SWAP2 SWAP1 POP SSTORE DUP7 EQ PUSH2 0x8BF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xD PUSH1 0x24 DUP3 ADD MSTORE PUSH13 0x496E76616C6964206E6F6E6365 PUSH1 0x98 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x443 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x4CB7E9E5 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS SWAP1 PUSH4 0x4CB7E9E5 SWAP1 PUSH2 0x8E4 SWAP1 DUP14 SWAP1 DUP14 SWAP1 PUSH1 0x4 ADD PUSH2 0x20FE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x8FE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x912 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST DUP4 TIMESTAMP GT ISZERO PUSH2 0x966 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x11 PUSH1 0x24 DUP3 ADD MSTORE PUSH17 0x14DA59DB985D1D5C9948195E1C1A5C9959 PUSH1 0x7A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x443 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x976 DUP9 DUP8 DUP8 DUP8 DUP8 DUP8 PUSH2 0xA68 JUMP JUMPDEST SWAP1 POP DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x9EC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5369676E657220616E642061747465737465722061646472657373657320646F PUSH1 0x44 DUP3 ADD MSTORE PUSH10 0x3713BA1036B0BA31B417 PUSH1 0xB1 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x443 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9A PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD SWAP2 PUSH2 0xA10 DUP4 PUSH2 0x20D7 JUMP JUMPDEST SWAP2 SWAP1 POP SSTORE DUP7 EQ PUSH2 0xA52 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xD PUSH1 0x24 DUP3 ADD MSTORE PUSH13 0x496E76616C6964206E6F6E6365 PUSH1 0x98 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x443 JUMP JUMPDEST PUSH2 0xA5C DUP11 DUP11 PUSH2 0x4DD JUMP JUMPDEST POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xADD PUSH32 0x17132900F74AADB4A80E6E5D88759B509B5A55861F3E0542632865CCC1180C49 DUP10 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 DUP10 DUP10 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xAC2 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 SWAP4 DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH2 0x113C JUMP JUMPDEST SWAP1 POP PUSH2 0xAEB DUP2 DUP7 DUP7 DUP7 PUSH2 0x118A JUMP JUMPDEST SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0xAFF PUSH2 0x11B2 JUMP JUMPDEST PUSH2 0xB09 PUSH1 0x0 PUSH2 0x120C JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 PUSH1 0x65 SLOAD PUSH1 0x0 DUP1 SHL EQ DUP1 ISZERO PUSH2 0xB2B JUMPI POP PUSH1 0x66 SLOAD ISZERO JUMPDEST PUSH2 0xB77 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4549503731323A20556E696E697469616C697A65640000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x443 JUMP JUMPDEST PUSH2 0xB7F PUSH2 0x126B JUMP JUMPDEST PUSH2 0xB87 PUSH2 0x12FD JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 SWAP3 MSTORE PUSH32 0xF00000000000000000000000000000000000000000000000000000000000000 SWAP12 SWAP4 SWAP11 POP SWAP2 SWAP9 POP CHAINID SWAP8 POP ADDRESS SWAP7 POP SWAP5 POP SWAP3 POP SWAP1 POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND ISZERO DUP1 DUP1 ISZERO PUSH2 0xBED JUMPI POP PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0xFF SWAP1 SWAP2 AND LT JUMPDEST DUP1 PUSH2 0xC07 JUMPI POP ADDRESS EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xC07 JUMPI POP PUSH1 0x0 SLOAD PUSH1 0xFF AND PUSH1 0x1 EQ JUMPDEST PUSH2 0xC79 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E747261637420697320616C726561 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x647920696E697469616C697A6564000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x443 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE DUP1 ISZERO PUSH2 0xC9C JUMPI PUSH1 0x0 DUP1 SLOAD PUSH2 0xFF00 NOT AND PUSH2 0x100 OR SWAP1 SSTORE JUMPDEST PUSH1 0x99 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND OR SWAP1 SSTORE PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD DUP3 MSTORE PUSH1 0xF DUP2 MSTORE PUSH32 0x6761702D6174746573746174696F6E0000000000000000000000000000000000 PUSH1 0x20 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP3 MLOAD DUP1 DUP5 ADD SWAP1 SWAP4 MSTORE PUSH1 0x3 DUP4 MSTORE PUSH32 0x312E300000000000000000000000000000000000000000000000000000000000 SWAP1 DUP4 ADD MSTORE PUSH2 0xD35 SWAP2 PUSH2 0x130C JUMP JUMPDEST PUSH2 0xD3D PUSH2 0x1381 JUMP JUMPDEST DUP1 ISZERO PUSH2 0xD83 JUMPI PUSH1 0x0 DUP1 SLOAD PUSH2 0xFF00 NOT AND SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH1 0x1 DUP2 MSTORE PUSH32 0x7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 DUP5 TIMESTAMP GT ISZERO PUSH2 0xDCD JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x11 PUSH1 0x24 DUP3 ADD MSTORE PUSH17 0x14DA59DB985D1D5C9948195E1C1A5C9959 PUSH1 0x7A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x443 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xDDD DUP10 DUP9 DUP9 DUP9 DUP9 DUP9 PUSH2 0xA68 JUMP JUMPDEST SWAP1 POP DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0xE53 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5369676E657220616E642061747465737465722061646472657373657320646F PUSH1 0x44 DUP3 ADD MSTORE PUSH10 0x3713BA1036B0BA31B417 PUSH1 0xB1 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x443 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9A PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD SWAP2 PUSH2 0xE77 DUP4 PUSH2 0x20D7 JUMP JUMPDEST SWAP2 SWAP1 POP SSTORE DUP8 EQ PUSH2 0xEB9 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xD PUSH1 0x24 DUP3 ADD MSTORE PUSH13 0x496E76616C6964206E6F6E6365 PUSH1 0x98 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x443 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xF17325E7 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS SWAP1 PUSH4 0xF17325E7 SWAP1 PUSH2 0xEDC SWAP1 DUP14 SWAP1 PUSH1 0x4 ADD PUSH2 0x257F JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0xEFB JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xF1F SWAP2 SWAP1 PUSH2 0x263C JUMP JUMPDEST SWAP11 SWAP10 POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE PUSH1 0x0 SWAP2 DUP3 SWAP2 SWAP1 DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0xC0 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 ADD DUP3 SWAP1 MSTORE SWAP3 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x60 DUP1 DUP4 ADD DUP3 SWAP1 MSTORE PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0xA0 DUP3 ADD MSTORE DUP3 MSTORE PUSH1 0x0 NOT SWAP1 SWAP3 ADD SWAP2 ADD DUP2 PUSH2 0xF47 JUMPI SWAP1 POP POP SWAP1 POP PUSH2 0xF97 PUSH1 0x20 DUP5 ADD DUP5 PUSH2 0x2655 JUMP JUMPDEST PUSH2 0xFA0 SWAP1 PUSH2 0x266B JUMP JUMPDEST DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0xFB3 JUMPI PUSH2 0xFB3 PUSH2 0x1E32 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP PUSH2 0xFC7 DUP2 PUSH2 0x10D1 JUMP JUMPDEST PUSH1 0x99 SLOAD PUSH1 0x40 MLOAD PUSH4 0xF17325E7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0xF17325E7 SWAP1 PUSH2 0xFF7 SWAP1 DUP7 SWAP1 PUSH1 0x4 ADD PUSH2 0x257F JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1016 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x103A SWAP2 SWAP1 PUSH2 0x263C JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x1049 PUSH2 0x11B2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x10C5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6464726573730000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x443 JUMP JUMPDEST PUSH2 0x10CE DUP2 PUSH2 0x120C JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 MLOAD DUP2 LT ISZERO PUSH2 0xD83 JUMPI PUSH1 0x0 DUP1 SHL DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x10F3 JUMPI PUSH2 0x10F3 PUSH2 0x1E32 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x60 ADD MLOAD EQ PUSH2 0x112A JUMPI PUSH2 0x112A DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x1119 JUMPI PUSH2 0x1119 PUSH2 0x1E32 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x60 ADD MLOAD PUSH2 0x13F4 JUMP JUMPDEST DUP1 PUSH2 0x1134 DUP2 PUSH2 0x20D7 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x10D4 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1184 PUSH2 0x1149 PUSH2 0x14E2 JUMP JUMPDEST DUP4 PUSH1 0x40 MLOAD PUSH32 0x1901000000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x2 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x22 DUP3 ADD MSTORE PUSH1 0x42 SWAP1 KECCAK256 SWAP1 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x119B DUP8 DUP8 DUP8 DUP8 PUSH2 0x14F1 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH2 0x11A8 DUP2 PUSH2 0x15B5 JUMP JUMPDEST POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x33 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xB09 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x443 JUMP JUMPDEST PUSH1 0x33 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 MLOAD SWAP2 AND SWAP2 SWAP1 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x67 DUP1 SLOAD PUSH2 0x127A SWAP1 PUSH2 0x2677 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x12A6 SWAP1 PUSH2 0x2677 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x12F3 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x12C8 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x12F3 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x12D6 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x68 DUP1 SLOAD PUSH2 0x127A SWAP1 PUSH2 0x2677 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1377 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E7472616374206973206E6F742069 PUSH1 0x44 DUP3 ADD MSTORE PUSH11 0x6E697469616C697A696E67 PUSH1 0xA8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x443 JUMP JUMPDEST PUSH2 0xD83 DUP3 DUP3 PUSH2 0x171A JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x13EC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E7472616374206973206E6F742069 PUSH1 0x44 DUP3 ADD MSTORE PUSH11 0x6E697469616C697A696E67 PUSH1 0xA8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x443 JUMP JUMPDEST PUSH2 0xB09 PUSH2 0x17AD JUMP JUMPDEST PUSH1 0x99 SLOAD PUSH1 0x40 MLOAD PUSH32 0xA3112A6400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x0 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0xA3112A64 SWAP1 PUSH1 0x24 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1457 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x147F SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x1FE0 JUMP JUMPDEST PUSH1 0xE0 DUP2 ADD MLOAD SWAP1 SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ DUP1 PUSH2 0x14A9 JUMPI POP PUSH1 0xC0 DUP2 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ JUMPDEST PUSH2 0xD83 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xA PUSH1 0x24 DUP3 ADD MSTORE PUSH10 0x2737BA1037BBB732B917 PUSH1 0xB1 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x443 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x14EC PUSH2 0x1821 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH32 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0 DUP4 GT ISZERO PUSH2 0x1528 JUMPI POP PUSH1 0x0 SWAP1 POP PUSH1 0x3 PUSH2 0x15AC JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP1 DUP5 MSTORE DUP10 SWAP1 MSTORE PUSH1 0xFF DUP9 AND SWAP3 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x60 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x1 SWAP1 PUSH1 0xA0 ADD PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 SUB SWAP1 DUP1 DUP5 SUB SWAP1 DUP6 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x157C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH1 0x1F NOT ADD MLOAD SWAP2 POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x15A5 JUMPI PUSH1 0x0 PUSH1 0x1 SWAP3 POP SWAP3 POP POP PUSH2 0x15AC JUMP JUMPDEST SWAP2 POP PUSH1 0x0 SWAP1 POP JUMPDEST SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x15C9 JUMPI PUSH2 0x15C9 PUSH2 0x26AB JUMP JUMPDEST SUB PUSH2 0x15D1 JUMPI POP JUMP JUMPDEST PUSH1 0x1 DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x15E5 JUMPI PUSH2 0x15E5 PUSH2 0x26AB JUMP JUMPDEST SUB PUSH2 0x1632 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45434453413A20696E76616C6964207369676E61747572650000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x443 JUMP JUMPDEST PUSH1 0x2 DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x1646 JUMPI PUSH2 0x1646 PUSH2 0x26AB JUMP JUMPDEST SUB PUSH2 0x1693 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45434453413A20696E76616C6964207369676E6174757265206C656E67746800 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x443 JUMP JUMPDEST PUSH1 0x3 DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x16A7 JUMPI PUSH2 0x16A7 PUSH2 0x26AB JUMP JUMPDEST SUB PUSH2 0x10CE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45434453413A20696E76616C6964207369676E6174757265202773272076616C PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x7565000000000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x443 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1785 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E7472616374206973206E6F742069 PUSH1 0x44 DUP3 ADD MSTORE PUSH11 0x6E697469616C697A696E67 PUSH1 0xA8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x443 JUMP JUMPDEST PUSH1 0x67 PUSH2 0x1791 DUP4 DUP3 PUSH2 0x270C JUMP JUMPDEST POP PUSH1 0x68 PUSH2 0x179E DUP3 DUP3 PUSH2 0x270C JUMP JUMPDEST POP POP PUSH1 0x0 PUSH1 0x65 DUP2 SWAP1 SSTORE PUSH1 0x66 SSTORE POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1818 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E7472616374206973206E6F742069 PUSH1 0x44 DUP3 ADD MSTORE PUSH11 0x6E697469616C697A696E67 PUSH1 0xA8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x443 JUMP JUMPDEST PUSH2 0xB09 CALLER PUSH2 0x120C JUMP JUMPDEST PUSH1 0x0 PUSH32 0x8B73C3C69BB8FE3D512ECC4CF759CC79239F7B179B0FFACAA9A75D522B39400F PUSH2 0x184C PUSH2 0x1895 JUMP JUMPDEST PUSH2 0x1854 PUSH2 0x18EE JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD SWAP5 SWAP1 SWAP5 MSTORE DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 DUP3 ADD MSTORE CHAINID PUSH1 0x80 DUP3 ADD MSTORE ADDRESS PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xC0 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x18A0 PUSH2 0x126B JUMP JUMPDEST DUP1 MLOAD SWAP1 SWAP2 POP ISZERO PUSH2 0x18B7 JUMPI DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD KECCAK256 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x65 SLOAD DUP1 ISZERO PUSH2 0x18C6 JUMPI SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0xC5D2460186F7233C927E7DB2DCC703C0E500B653CA82273B7BFAD8045D85A470 SWAP3 POP POP POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x18F9 PUSH2 0x12FD JUMP JUMPDEST DUP1 MLOAD SWAP1 SWAP2 POP ISZERO PUSH2 0x1910 JUMPI DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD KECCAK256 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x66 SLOAD DUP1 ISZERO PUSH2 0x18C6 JUMPI SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x1931 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1949 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP6 ADD ADD GT ISZERO PUSH2 0x1964 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x20 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x197E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1995 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x19A1 DUP6 DUP3 DUP7 ADD PUSH2 0x191F JUMP JUMPDEST SWAP1 SWAP7 SWAP1 SWAP6 POP SWAP4 POP POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP1 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x19E6 JUMPI PUSH2 0x19E6 PUSH2 0x19AD JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x140 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x19E6 JUMPI PUSH2 0x19E6 PUSH2 0x19AD JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x1A39 JUMPI PUSH2 0x1A39 PUSH2 0x19AD JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x1A5B JUMPI PUSH2 0x1A5B PUSH2 0x19AD JUMP JUMPDEST POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1A7A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1A8D PUSH2 0x1A88 DUP3 PUSH2 0x1A41 JUMP JUMPDEST PUSH2 0x1A10 JUMP JUMPDEST DUP2 DUP2 MSTORE DUP5 PUSH1 0x20 DUP4 DUP7 ADD ADD GT ISZERO PUSH2 0x1AA2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 PUSH1 0x20 DUP6 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 SWAP2 DUP2 ADD PUSH1 0x20 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x10CE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH1 0xFF DUP2 AND DUP2 EQ PUSH2 0x1AE5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x100 DUP11 DUP13 SUB SLT ISZERO PUSH2 0x1B09 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP10 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x1B21 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1B2D DUP14 DUP4 DUP15 ADD PUSH2 0x191F JUMP JUMPDEST SWAP1 SWAP12 POP SWAP10 POP PUSH1 0x20 DUP13 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x1B46 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1B53 DUP13 DUP3 DUP14 ADD PUSH2 0x1A69 JUMP JUMPDEST SWAP8 POP POP PUSH1 0x40 DUP11 ADD CALLDATALOAD PUSH2 0x1B64 DUP2 PUSH2 0x1ABF JUMP JUMPDEST SWAP6 POP PUSH1 0x60 DUP11 ADD CALLDATALOAD SWAP5 POP PUSH1 0x80 DUP11 ADD CALLDATALOAD SWAP4 POP PUSH2 0x1B80 PUSH1 0xA0 DUP12 ADD PUSH2 0x1AD4 JUMP JUMPDEST SWAP3 POP PUSH1 0xC0 DUP11 ADD CALLDATALOAD SWAP2 POP PUSH1 0xE0 DUP11 ADD CALLDATALOAD SWAP1 POP SWAP3 SWAP6 SWAP9 POP SWAP3 SWAP6 SWAP9 POP SWAP3 SWAP6 SWAP9 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xC0 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x1BB6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1BCD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1BD9 DUP10 DUP3 DUP11 ADD PUSH2 0x1A69 JUMP JUMPDEST SWAP7 POP POP PUSH1 0x20 DUP8 ADD CALLDATALOAD SWAP5 POP PUSH1 0x40 DUP8 ADD CALLDATALOAD SWAP4 POP PUSH2 0x1BF6 PUSH1 0x60 DUP9 ADD PUSH2 0x1AD4 JUMP JUMPDEST SWAP3 POP PUSH1 0x80 DUP8 ADD CALLDATALOAD SWAP2 POP PUSH1 0xA0 DUP8 ADD CALLDATALOAD SWAP1 POP SWAP3 SWAP6 POP SWAP3 SWAP6 POP SWAP3 SWAP6 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1C22 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x103A DUP2 PUSH2 0x1ABF JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1C48 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x1C30 JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x1C69 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x1C2D JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0xFF00000000000000000000000000000000000000000000000000000000000000 DUP9 AND DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 PUSH1 0xE0 DUP2 DUP5 ADD MSTORE PUSH2 0x1CB9 PUSH1 0xE0 DUP5 ADD DUP11 PUSH2 0x1C51 JUMP JUMPDEST DUP4 DUP2 SUB PUSH1 0x40 DUP6 ADD MSTORE PUSH2 0x1CCB DUP2 DUP11 PUSH2 0x1C51 JUMP JUMPDEST PUSH1 0x60 DUP6 ADD DUP10 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND PUSH1 0x80 DUP7 ADD MSTORE PUSH1 0xA0 DUP6 ADD DUP8 SWAP1 MSTORE DUP5 DUP2 SUB PUSH1 0xC0 DUP7 ADD MSTORE DUP6 MLOAD DUP1 DUP3 MSTORE DUP4 DUP8 ADD SWAP3 POP SWAP1 DUP4 ADD SWAP1 PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1D1D JUMPI DUP4 MLOAD DUP4 MSTORE SWAP3 DUP5 ADD SWAP3 SWAP2 DUP5 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x1D01 JUMP JUMPDEST POP SWAP1 SWAP13 SWAP12 POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1D41 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH2 0x100 DUP10 DUP12 SUB SLT ISZERO PUSH2 0x1D64 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP9 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x1D7C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1D88 DUP13 DUP4 DUP14 ADD PUSH2 0x1D2F JUMP JUMPDEST SWAP10 POP PUSH1 0x20 DUP12 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x1D9E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1DAB DUP12 DUP3 DUP13 ADD PUSH2 0x1A69 JUMP JUMPDEST SWAP8 POP POP PUSH1 0x40 DUP10 ADD CALLDATALOAD PUSH2 0x1DBC DUP2 PUSH2 0x1ABF JUMP JUMPDEST SWAP6 POP PUSH1 0x60 DUP10 ADD CALLDATALOAD SWAP5 POP PUSH1 0x80 DUP10 ADD CALLDATALOAD SWAP4 POP PUSH2 0x1DD8 PUSH1 0xA0 DUP11 ADD PUSH2 0x1AD4 JUMP JUMPDEST SWAP3 POP PUSH1 0xC0 DUP10 ADD CALLDATALOAD SWAP2 POP PUSH1 0xE0 DUP10 ADD CALLDATALOAD SWAP1 POP SWAP3 SWAP6 SWAP9 POP SWAP3 SWAP6 SWAP9 SWAP1 SWAP4 SWAP7 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1E07 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1E1E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1E2A DUP5 DUP3 DUP6 ADD PUSH2 0x1D2F JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 CALLDATALOAD PUSH1 0x3E NOT DUP4 CALLDATASIZE SUB ADD DUP2 SLT PUSH2 0x1E5E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x1E82 JUMPI PUSH2 0x1E82 PUSH2 0x19AD JUMP JUMPDEST POP PUSH1 0x5 SHL PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP1 DUP4 CALLDATASIZE SUB SLT ISZERO PUSH2 0x1E9F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1EA7 PUSH2 0x19C3 JUMP JUMPDEST DUP4 CALLDATALOAD DUP2 MSTORE PUSH1 0x20 DUP1 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1EC6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 ADD CALLDATASIZE PUSH1 0x1F DUP3 ADD SLT PUSH2 0x1ED7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH2 0x1EE5 PUSH2 0x1A88 DUP3 PUSH2 0x1E68 JUMP JUMPDEST DUP2 DUP2 MSTORE PUSH1 0x6 SWAP2 SWAP1 SWAP2 SHL DUP3 ADD DUP4 ADD SWAP1 DUP4 DUP2 ADD SWAP1 CALLDATASIZE DUP4 GT ISZERO PUSH2 0x1F04 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 DUP5 ADD SWAP3 JUMPDEST DUP3 DUP5 LT ISZERO PUSH2 0x1F44 JUMPI DUP7 DUP5 CALLDATASIZE SUB SLT ISZERO PUSH2 0x1F21 JUMPI PUSH1 0x0 DUP1 DUP2 REVERT JUMPDEST PUSH2 0x1F29 PUSH2 0x19C3 JUMP JUMPDEST DUP5 CALLDATALOAD DUP2 MSTORE DUP6 DUP6 ADD CALLDATALOAD DUP7 DUP3 ADD MSTORE DUP3 MSTORE SWAP3 DUP7 ADD SWAP3 SWAP1 DUP5 ADD SWAP1 PUSH2 0x1F09 JUMP JUMPDEST SWAP4 DUP6 ADD SWAP4 SWAP1 SWAP4 MSTORE POP SWAP2 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x10CE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 MLOAD PUSH2 0x1AE5 DUP2 PUSH2 0x1F56 JUMP JUMPDEST DUP1 MLOAD PUSH2 0x1AE5 DUP2 PUSH2 0x1ABF JUMP JUMPDEST DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x10CE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 MLOAD PUSH2 0x1AE5 DUP2 PUSH2 0x1F82 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1FAC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x1FBA PUSH2 0x1A88 DUP3 PUSH2 0x1A41 JUMP JUMPDEST DUP2 DUP2 MSTORE DUP5 PUSH1 0x20 DUP4 DUP7 ADD ADD GT ISZERO PUSH2 0x1FCF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1E2A DUP3 PUSH1 0x20 DUP4 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x1C2D JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1FF2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x200A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 DUP4 ADD SWAP1 PUSH2 0x140 DUP3 DUP7 SUB SLT ISZERO PUSH2 0x201F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2027 PUSH2 0x19EC JUMP JUMPDEST DUP3 MLOAD DUP2 MSTORE PUSH1 0x20 DUP4 ADD MLOAD PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x2041 PUSH1 0x40 DUP5 ADD PUSH2 0x1F6C JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE PUSH2 0x2052 PUSH1 0x60 DUP5 ADD PUSH2 0x1F6C JUMP JUMPDEST PUSH1 0x60 DUP3 ADD MSTORE PUSH2 0x2063 PUSH1 0x80 DUP5 ADD PUSH2 0x1F6C JUMP JUMPDEST PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xA0 DUP4 ADD MLOAD PUSH1 0xA0 DUP3 ADD MSTORE PUSH2 0x207E PUSH1 0xC0 DUP5 ADD PUSH2 0x1F77 JUMP JUMPDEST PUSH1 0xC0 DUP3 ADD MSTORE PUSH2 0x208F PUSH1 0xE0 DUP5 ADD PUSH2 0x1F77 JUMP JUMPDEST PUSH1 0xE0 DUP3 ADD MSTORE PUSH2 0x100 PUSH2 0x20A2 DUP2 DUP6 ADD PUSH2 0x1F90 JUMP JUMPDEST SWAP1 DUP3 ADD MSTORE PUSH2 0x120 DUP4 DUP2 ADD MLOAD DUP4 DUP2 GT ISZERO PUSH2 0x20BA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x20C6 DUP9 DUP3 DUP8 ADD PUSH2 0x1F9B JUMP JUMPDEST SWAP2 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 ADD PUSH2 0x20F7 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH1 0x40 DUP1 DUP5 ADD PUSH1 0x5 DUP7 SWAP1 SHL DUP6 ADD DUP3 ADD DUP8 DUP6 JUMPDEST DUP9 DUP2 LT ISZERO PUSH2 0x21E0 JUMPI DUP8 DUP4 SUB PUSH1 0x3F NOT ADD DUP5 MSTORE DUP2 CALLDATALOAD CALLDATASIZE DUP12 SWAP1 SUB PUSH1 0x3E NOT ADD DUP2 SLT PUSH2 0x2143 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP11 ADD DUP1 CALLDATALOAD DUP5 MSTORE DUP4 DUP7 ADD DUP8 DUP3 ADD CALLDATALOAD CALLDATASIZE DUP4 SWAP1 SUB PUSH1 0x1E NOT ADD DUP2 SLT PUSH2 0x2163 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 SWAP2 ADD DUP8 DUP2 ADD SWAP2 SWAP1 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2181 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH1 0x6 SHL CALLDATASIZE SUB DUP4 SGT ISZERO PUSH2 0x2193 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 DUP10 ADD DUP9 SWAP1 MSTORE SWAP1 DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH1 0x60 DUP7 ADD JUMPDEST DUP2 DUP4 LT ISZERO PUSH2 0x21CB JUMPI DUP4 CALLDATALOAD DUP2 MSTORE DUP10 DUP5 ADD CALLDATALOAD DUP11 DUP3 ADD MSTORE SWAP3 DUP9 ADD SWAP3 PUSH1 0x1 SWAP3 SWAP1 SWAP3 ADD SWAP2 DUP9 ADD PUSH2 0x21A5 JUMP JUMPDEST SWAP7 DUP10 ADD SWAP7 SWAP6 POP POP POP SWAP2 DUP7 ADD SWAP2 POP PUSH1 0x1 ADD PUSH2 0x211D JUMP JUMPDEST POP SWAP1 SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 CALLDATALOAD PUSH1 0x5E NOT DUP4 CALLDATASIZE SUB ADD DUP2 SLT PUSH2 0x1E5E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0xC0 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2216 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH1 0xC0 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP3 DUP3 LT DUP2 DUP4 GT OR ISZERO PUSH2 0x223A JUMPI PUSH2 0x223A PUSH2 0x19AD JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP3 SWAP4 POP DUP5 CALLDATALOAD SWAP2 POP PUSH2 0x224E DUP3 PUSH2 0x1ABF JUMP JUMPDEST SWAP1 DUP3 MSTORE PUSH1 0x20 DUP5 ADD CALLDATALOAD SWAP1 PUSH2 0x2260 DUP3 PUSH2 0x1F56 JUMP JUMPDEST DUP2 PUSH1 0x20 DUP5 ADD MSTORE PUSH1 0x40 DUP6 ADD CALLDATALOAD SWAP2 POP PUSH2 0x2276 DUP3 PUSH2 0x1F82 JUMP JUMPDEST DUP2 PUSH1 0x40 DUP5 ADD MSTORE PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x80 DUP6 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x229A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x22A7 DUP6 DUP3 DUP7 ADD PUSH2 0x1A69 JUMP JUMPDEST PUSH1 0x80 DUP4 ADD MSTORE POP PUSH1 0xA0 DUP4 ADD CALLDATALOAD PUSH1 0xA0 DUP3 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 CALLDATASIZE SUB SLT ISZERO PUSH2 0x22D0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x22D8 PUSH2 0x19C3 JUMP JUMPDEST DUP3 CALLDATALOAD DUP2 MSTORE PUSH1 0x20 DUP1 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x22F8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 DUP6 ADD SWAP1 CALLDATASIZE PUSH1 0x1F DUP4 ADD SLT PUSH2 0x230B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x2319 PUSH2 0x1A88 DUP3 PUSH2 0x1E68 JUMP JUMPDEST DUP2 DUP2 MSTORE PUSH1 0x5 SWAP2 SWAP1 SWAP2 SHL DUP4 ADD DUP5 ADD SWAP1 DUP5 DUP2 ADD SWAP1 CALLDATASIZE DUP4 GT ISZERO PUSH2 0x2338 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 DUP6 ADD JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x2370 JUMPI DUP1 CALLDATALOAD DUP6 DUP2 GT ISZERO PUSH2 0x2354 JUMPI PUSH1 0x0 DUP1 DUP2 REVERT JUMPDEST PUSH2 0x2362 CALLDATASIZE DUP10 DUP4 DUP11 ADD ADD PUSH2 0x2204 JUMP JUMPDEST DUP5 MSTORE POP SWAP2 DUP7 ADD SWAP2 DUP7 ADD PUSH2 0x233C JUMP JUMPDEST POP SWAP5 DUP7 ADD SWAP5 SWAP1 SWAP5 MSTORE POP SWAP3 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 ADD DUP2 DUP5 MSTORE DUP1 DUP6 MLOAD DUP1 DUP4 MSTORE PUSH1 0x40 SWAP3 POP DUP3 DUP7 ADD SWAP2 POP DUP3 DUP2 PUSH1 0x5 SHL DUP8 ADD ADD DUP5 DUP9 ADD PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x21E0 JUMPI DUP9 DUP4 SUB PUSH1 0x3F NOT ADD DUP6 MSTORE DUP2 MLOAD DUP1 MLOAD DUP5 MSTORE DUP8 ADD MLOAD DUP8 DUP5 ADD DUP8 SWAP1 MSTORE DUP1 MLOAD DUP8 DUP6 ADD DUP2 SWAP1 MSTORE SWAP1 DUP9 ADD SWAP1 PUSH1 0x60 SWAP1 DUP2 DUP7 ADD SWAP1 PUSH1 0x5 DUP2 SWAP1 SHL DUP8 ADD DUP4 ADD PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x2468 JUMPI PUSH1 0x5F NOT DUP10 DUP4 SUB ADD DUP5 MSTORE DUP6 MLOAD PUSH1 0xC0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 MLOAD AND DUP5 MSTORE PUSH8 0xFFFFFFFFFFFFFFFF DUP16 DUP4 ADD MLOAD AND DUP16 DUP6 ADD MSTORE DUP14 DUP3 ADD MLOAD ISZERO ISZERO DUP15 DUP6 ADD MSTORE DUP7 DUP3 ADD MLOAD DUP8 DUP6 ADD MSTORE PUSH1 0x80 DUP1 DUP4 ADD MLOAD DUP3 DUP3 DUP8 ADD MSTORE PUSH2 0x2446 DUP4 DUP8 ADD DUP3 PUSH2 0x1C51 JUMP JUMPDEST PUSH1 0xA0 SWAP5 DUP6 ADD MLOAD SWAP7 SWAP1 SWAP5 ADD SWAP6 SWAP1 SWAP6 MSTORE POP POP SWAP6 DUP14 ADD SWAP6 SWAP4 DUP14 ADD SWAP4 SWAP2 POP PUSH1 0x1 ADD PUSH2 0x23E9 JUMP JUMPDEST POP SWAP9 DUP12 ADD SWAP9 SWAP7 POP POP POP SWAP3 DUP9 ADD SWAP3 POP POP PUSH1 0x1 ADD PUSH2 0x23AA JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2492 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x24A9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 ADD PUSH1 0x1F DUP2 ADD DUP6 SGT PUSH2 0x24BA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 MLOAD PUSH2 0x24C8 PUSH2 0x1A88 DUP3 PUSH2 0x1E68 JUMP JUMPDEST DUP2 DUP2 MSTORE PUSH1 0x5 SWAP2 SWAP1 SWAP2 SHL DUP3 ADD DUP4 ADD SWAP1 DUP4 DUP2 ADD SWAP1 DUP8 DUP4 GT ISZERO PUSH2 0x24E7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 DUP5 ADD SWAP3 JUMPDEST DUP3 DUP5 LT ISZERO PUSH2 0x2505 JUMPI DUP4 MLOAD DUP3 MSTORE SWAP3 DUP5 ADD SWAP3 SWAP1 DUP5 ADD SWAP1 PUSH2 0x24EC JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 CALLDATALOAD PUSH1 0x1E NOT DUP5 CALLDATASIZE SUB ADD DUP2 SLT PUSH2 0x2527 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 ADD PUSH1 0x20 DUP2 ADD SWAP3 POP CALLDATALOAD SWAP1 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2547 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATASIZE SUB DUP3 SGT ISZERO PUSH2 0x1964 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP4 MSTORE DUP2 DUP2 PUSH1 0x20 DUP6 ADD CALLDATACOPY POP PUSH1 0x0 DUP3 DUP3 ADD PUSH1 0x20 SWAP1 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x1F SWAP1 SWAP2 ADD PUSH1 0x1F NOT AND SWAP1 SWAP2 ADD ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE DUP2 CALLDATALOAD PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH1 0xBE NOT DUP5 CALLDATASIZE SUB ADD DUP2 SLT PUSH2 0x25A3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 DUP4 DUP2 ADD MSTORE DUP4 ADD DUP1 CALLDATALOAD PUSH2 0x25B6 DUP2 PUSH2 0x1ABF JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD CALLDATALOAD PUSH2 0x25D2 DUP2 PUSH2 0x1F56 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH1 0x80 DUP5 ADD MSTORE PUSH1 0x40 DUP2 ADD CALLDATALOAD PUSH2 0x25EF DUP2 PUSH2 0x1F82 JUMP JUMPDEST ISZERO ISZERO PUSH1 0xA0 DUP5 ADD MSTORE PUSH1 0x60 DUP2 ADD CALLDATALOAD PUSH1 0xC0 DUP5 ADD MSTORE PUSH2 0x260D PUSH1 0x80 DUP3 ADD DUP3 PUSH2 0x2510 JUMP JUMPDEST PUSH1 0xC0 PUSH1 0xE0 DUP7 ADD MSTORE PUSH2 0x2623 PUSH2 0x120 DUP7 ADD DUP3 DUP5 PUSH2 0x2556 JUMP JUMPDEST SWAP2 POP POP PUSH1 0xA0 DUP3 ADD CALLDATALOAD PUSH2 0x100 DUP6 ADD MSTORE DUP1 SWAP3 POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x264E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 CALLDATALOAD PUSH1 0xBE NOT DUP4 CALLDATASIZE SUB ADD DUP2 SLT PUSH2 0x1E5E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1184 CALLDATASIZE DUP4 PUSH2 0x2204 JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x268B JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x1D41 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH2 0x2707 JUMPI PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP2 ADD PUSH1 0x20 DUP7 LT ISZERO PUSH2 0x26E8 JUMPI POP DUP1 JUMPDEST PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP3 ADD SWAP2 POP JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x4D5 JUMPI DUP3 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x26F4 JUMP JUMPDEST POP POP POP JUMP JUMPDEST DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2726 JUMPI PUSH2 0x2726 PUSH2 0x19AD JUMP JUMPDEST PUSH2 0x273A DUP2 PUSH2 0x2734 DUP5 SLOAD PUSH2 0x2677 JUMP JUMPDEST DUP5 PUSH2 0x26C1 JUMP JUMPDEST PUSH1 0x20 DUP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH2 0x276F JUMPI PUSH1 0x0 DUP5 ISZERO PUSH2 0x2757 JUMPI POP DUP6 DUP4 ADD MLOAD JUMPDEST PUSH1 0x0 NOT PUSH1 0x3 DUP7 SWAP1 SHL SHR NOT AND PUSH1 0x1 DUP6 SWAP1 SHL OR DUP6 SSTORE PUSH2 0x4D5 JUMP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F NOT DUP7 AND SWAP2 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x279E JUMPI DUP9 DUP7 ADD MLOAD DUP3 SSTORE SWAP5 DUP5 ADD SWAP5 PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 DUP5 ADD PUSH2 0x277F JUMP JUMPDEST POP DUP6 DUP3 LT ISZERO PUSH2 0x27BC JUMPI DUP8 DUP6 ADD MLOAD PUSH1 0x0 NOT PUSH1 0x3 DUP9 SWAP1 SHL PUSH1 0xF8 AND SHR NOT AND DUP2 SSTORE JUMPDEST POP POP POP POP POP PUSH1 0x1 SWAP1 DUP2 SHL ADD SWAP1 SSTORE POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP14 0x29 0x5F 0xC0 PUSH27 0xD69DC0E81E72ABC01012614638B062BF313C22B8963E0DB80FB9BB PUSH5 0x736F6C6343 STOP ADDMOD SGT STOP CALLER ","sourceMap":"549:7119:25:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3368:808;;;;;;:::i;:::-;;:::i;:::-;;6396:1270;;;;;;;;;;-1:-1:-1;6396:1270:25;;;;;:::i;:::-;;:::i;2579:729::-;;;;;;;;;;-1:-1:-1;2579:729:25;;;;;:::i;:::-;;:::i;5434:::-;;;;;;;;;;-1:-1:-1;5434:729:25;;;;;:::i;:::-;;:::i;1936:584::-;;;;;;;;;;-1:-1:-1;1936:584:25;;;;;:::i;:::-;;:::i;:::-;;;-1:-1:-1;;;;;6689:55:29;;;6671:74;;6659:2;6644:18;1936:584:25;;;;;;;;2064:101:6;;;;;;;;;;;;;:::i;693:118:25:-;;;;;;;;;;;;743:68;693:118;;;;;6902:25:29;;;6890:2;6875:18;693:118:25;6756:177:29;645:41:25;;;;;;;;;;-1:-1:-1;645:41:25;;;;;:::i;:::-;;;;;;;;;;;;;;624:15;;;;;;;;;;-1:-1:-1;624:15:25;;;;-1:-1:-1;;;;;624:15:25;;;4500:861:13;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;:::i;1441:85:6:-;;;;;;;;;;-1:-1:-1;1513:6:6;;-1:-1:-1;;;;;1513:6:6;1441:85;;1064:167:25;;;;;;;;;;-1:-1:-1;1064:167:25;;;;;:::i;:::-;;:::i;4249:725::-;;;;;;;;;;-1:-1:-1;4249:725:25;;;;;:::i;:::-;;:::i;5033:330::-;;;;;;:::i;:::-;;:::i;2314:198:6:-;;;;;;;;;;-1:-1:-1;2314:198:6;;;;;:::i;:::-;;:::i;3368:808:25:-;3615:9;3610:520;3630:24;;;3610:520;;;3675:37;3715:13;;3729:1;3715:16;;;;;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;3675:56;;;:::i;:::-;;;3750:9;3745:375;3769:7;:12;;;:19;3765:1;:23;3745:375;;;3841:3;;3881:12;;;;:15;;3813:25;;-1:-1:-1;;;;;3841:3:25;;:18;;3894:1;;3881:15;;;;;;:::i;:::-;;;;;;;:19;;;3841:77;;;;;;;;;;;;;6902:25:29;;6890:2;6875:18;;6756:177;3841:77:25;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;3841:77:25;;;;;;;;;;;;:::i;:::-;3966:15;;;;3813:105;;-1:-1:-1;;;;;;3966:29:25;3985:10;3966:29;;:87;;-1:-1:-1;4023:16:25;;;;-1:-1:-1;;;;;4023:30:25;4043:10;4023:30;3966:87;3937:168;;;;-1:-1:-1;;;3937:168:25;;15895:2:29;3937:168:25;;;15877:21:29;15934:2;15914:18;;;15907:30;-1:-1:-1;;;15953:18:29;;;15946:40;16003:18;;3937:168:25;;;;;;;;;-1:-1:-1;3790:3:25;;;;:::i;:::-;;;;3745:375;;;;3661:469;3656:3;;;;;:::i;:::-;;;;3610:520;;;-1:-1:-1;4139:3:25;;:30;;-1:-1:-1;;;4139:30:25;;-1:-1:-1;;;;;4139:3:25;;;;:15;;:30;;4155:13;;;;4139:30;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3368:808;;:::o;6396:1270::-;6506:28;6553:12;6537:36;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6506:67;;6589:9;6584:1076;6604:23;;;6584:1076;;;6648:38;6689:12;;6702:1;6689:15;;;;;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;:45;;;;;;;:::i;:::-;6648:86;;;:::i;:::-;;;6877:37;6901:7;:12;;;6877:23;:37::i;:::-;6996:5;;6992:462;;7026:9;7021:419;7045:7;:12;;;:19;7041:1;:23;7021:419;;;7093:34;7130:7;:12;;;7143:1;7130:15;;;;;;;;:::i;:::-;;;;;;;7093:52;;7271:1;7263:10;;7248:4;:11;;;:25;7244:178;;7315:9;7325:12;;7338:1;7325:15;;;;;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;:22;;;7315:33;;;;;;;;:::i;:::-;;;;;;;7349:1;7315:36;;;;;;;;:::i;:::-;;;;;;;7301:4;:11;;:50;;;;;7395:4;7377:7;:12;;;7390:1;7377:15;;;;;;;;:::i;:::-;;;;;;:22;;;;7244:178;-1:-1:-1;7066:3:25;;;;:::i;:::-;;;;7021:419;;;;6992:462;7528:32;;;7558:1;7528:32;;;;;;;;;7468:57;;7528:32;;;;-1:-1:-1;;;;;;;;;;;;;;;;;7528:32:25;;;;;;;;;;;;;;;7468:92;;7588:7;7574:8;7583:1;7574:11;;;;;;;;:::i;:::-;;;;;;;;;;:21;7624:3;;:25;;;;;-1:-1:-1;;;;;7624:3:25;;;;:15;;:25;;7640:8;;7624:25;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;7624:25:25;;;;;;;;;;;;:::i;:::-;7609:9;7619:1;7609:12;;;;;;;;:::i;:::-;;;;;;:40;;;;6634:1026;;6629:3;;;;;:::i;:::-;;;;6584:1076;;;;6496:1170;6396:1270;;:::o;2579:729::-;2885:6;2866:15;:25;;2858:55;;;;-1:-1:-1;;;2858:55:25;;25070:2:29;2858:55:25;;;25052:21:29;25109:2;25089:18;;;25082:30;-1:-1:-1;;;25128:18:29;;;25121:47;25185:18;;2858:55:25;24868:341:29;2858:55:25;2924:14;2941:140;2976:11;3001:5;3020:6;3040:1;3055;3070;2941:21;:140::i;:::-;2924:157;;3123:8;-1:-1:-1;;;;;3113:18:25;:6;-1:-1:-1;;;;;3113:18:25;;3092:107;;;;-1:-1:-1;;;3092:107:25;;25416:2:29;3092:107:25;;;25398:21:29;25455:2;25435:18;;;25428:30;25494:34;25474:18;;;25467:62;-1:-1:-1;;;25545:18:29;;;25538:40;25595:19;;3092:107:25;25214:406:29;3092:107:25;-1:-1:-1;;;;;3226:14:25;;;;;;:6;:14;;;;;:16;;;;;;:::i;:::-;;;;;3217:5;:25;3209:51;;;;-1:-1:-1;;;3209:51:25;;25827:2:29;3209:51:25;;;25809:21:29;25866:2;25846:18;;;25839:30;-1:-1:-1;;;25885:18:29;;;25878:43;25938:18;;3209:51:25;25625:337:29;3209:51:25;3270:31;;-1:-1:-1;;;3270:31:25;;:4;;:16;;:31;;3287:13;;;;3270:31;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2848:460;2579:729;;;;;;;;;:::o;5434:::-;5737:6;5718:15;:25;;5710:55;;;;-1:-1:-1;;;5710:55:25;;25070:2:29;5710:55:25;;;25052:21:29;25109:2;25089:18;;;25082:30;-1:-1:-1;;;25128:18:29;;;25121:47;25185:18;;5710:55:25;24868:341:29;5710:55:25;5776:14;5793:140;5828:11;5853:5;5872:6;5892:1;5907;5922;5793:21;:140::i;:::-;5776:157;;5974:8;-1:-1:-1;;;;;5964:18:25;:6;-1:-1:-1;;;;;5964:18:25;;5943:107;;;;-1:-1:-1;;;5943:107:25;;25416:2:29;5943:107:25;;;25398:21:29;25455:2;25435:18;;;25428:30;25494:34;25474:18;;;25467:62;-1:-1:-1;;;25545:18:29;;;25538:40;25595:19;;5943:107:25;25214:406:29;5943:107:25;-1:-1:-1;;;;;6077:14:25;;;;;;:6;:14;;;;;:16;;;;;;:::i;:::-;;;;;6068:5;:25;6060:51;;;;-1:-1:-1;;;6060:51:25;;25827:2:29;6060:51:25;;;25809:21:29;25866:2;25846:18;;;25839:30;-1:-1:-1;;;25885:18:29;;;25878:43;25938:18;;6060:51:25;25625:337:29;6060:51:25;6121:35;6143:12;;6121:21;:35::i;:::-;5700:463;5434:729;;;;;;;;;:::o;1936:584::-;2131:14;2157;2174:252;743:68;2316:11;2300:29;;;;;;2351:5;2378:6;2231:171;;;;;;;;;;26198:25:29;;;26254:2;26239:18;;26232:34;;;;26297:2;26282:18;;26275:34;26340:2;26325:18;;26318:34;26185:3;26170:19;;25967:391;2231:171:25;;;;;;;;;;;;;2204:212;;;;;;2174:16;:252::i;:::-;2157:269;;2446:41;2471:6;2479:1;2482;2485;2446:24;:41::i;:::-;2437:50;1936:584;-1:-1:-1;;;;;;;;1936:584:25:o;2064:101:6:-;1334:13;:11;:13::i;:::-;2128:30:::1;2155:1;2128:18;:30::i;:::-;2064:101::o:0;4500:861:13:-;4615:13;4642:18;4674:21;4709:15;4738:25;4777:12;4803:27;5066:11;;5081:1;5066:16;;;:39;;;;-1:-1:-1;5086:14:13;;:19;5066:39;5058:73;;;;-1:-1:-1;;;5058:73:13;;26565:2:29;5058:73:13;;;26547:21:29;26604:2;26584:18;;;26577:30;26643:23;26623:18;;;26616:51;26684:18;;5058:73:13;26363:345:29;5058:73:13;5193:13;:11;:13::i;:::-;5220:16;:14;:16::i;:::-;5328;;;5312:1;5328:16;;;;;;;;;5142:212;;;;-1:-1:-1;5142:212:13;;-1:-1:-1;5250:13:13;;-1:-1:-1;5285:4:13;;-1:-1:-1;5312:1:13;-1:-1:-1;5328:16:13;-1:-1:-1;5142:212:13;-1:-1:-1;4500:861:13:o;1064:167:25:-;3279:19:8;3302:13;;;;;;3301:14;;3347:34;;;;-1:-1:-1;3365:12:8;;3380:1;3365:12;;;;:16;3347:34;3346:108;;;-1:-1:-1;3426:4:8;1713:19:9;:23;;;3387:66:8;;-1:-1:-1;3436:12:8;;;;;:17;3387:66;3325:201;;;;-1:-1:-1;;;3325:201:8;;26915:2:29;3325:201:8;;;26897:21:29;26954:2;26934:18;;;26927:30;26993:34;26973:18;;;26966:62;27064:16;27044:18;;;27037:44;27098:19;;3325:201:8;26713:410:29;3325:201:8;3536:12;:16;;-1:-1:-1;;3536:16:8;3551:1;3536:16;;;3562:65;;;;3596:13;:20;;-1:-1:-1;;3596:20:8;;;;;3562:65;1130:3:25::1;:19:::0;;-1:-1:-1;;1130:19:25::1;-1:-1:-1::0;;;;;1130:19:25;::::1;;::::0;;1159:39:::1;::::0;;;;::::1;::::0;;::::1;::::0;;::::1;;::::0;;::::1;::::0;;;;;;;;::::1;::::0;;;::::1;::::0;;::::1;::::0;;::::1;::::0;::::1;::::0;:13:::1;:39::i;:::-;1208:16;:14;:16::i;:::-;3651:14:8::0;3647:99;;;3697:5;3681:21;;-1:-1:-1;;3681:21:8;;;3721:14;;-1:-1:-1;27280:36:29;;3721:14:8;;27268:2:29;27253:18;3721:14:8;;;;;;;3647:99;3269:483;1064:167:25;:::o;4249:725::-;4510:7;4556:6;4537:15;:25;;4529:55;;;;-1:-1:-1;;;4529:55:25;;25070:2:29;4529:55:25;;;25052:21:29;25109:2;25089:18;;;25082:30;-1:-1:-1;;;25128:18:29;;;25121:47;25185:18;;4529:55:25;24868:341:29;4529:55:25;4595:14;4612:140;4647:11;4672:5;4691:6;4711:1;4726;4741;4612:21;:140::i;:::-;4595:157;;4793:8;-1:-1:-1;;;;;4783:18:25;:6;-1:-1:-1;;;;;4783:18:25;;4762:107;;;;-1:-1:-1;;;4762:107:25;;25416:2:29;4762:107:25;;;25398:21:29;25455:2;25435:18;;;25428:30;25494:34;25474:18;;;25467:62;-1:-1:-1;;;25545:18:29;;;25538:40;25595:19;;4762:107:25;25214:406:29;4762:107:25;-1:-1:-1;;;;;4896:14:25;;;;;;:6;:14;;;;;:16;;;;;;:::i;:::-;;;;;4887:5;:25;4879:51;;;;-1:-1:-1;;;4879:51:25;;25827:2:29;4879:51:25;;;25809:21:29;25866:2;25846:18;;;25839:30;-1:-1:-1;;;25885:18:29;;;25878:43;25938:18;;4879:51:25;25625:337:29;4879:51:25;4947:20;;-1:-1:-1;;;4947:20:25;;:4;;:11;;:20;;4959:7;;4947:20;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4940:27;4249:725;-1:-1:-1;;;;;;;;;;4249:725:25:o;5033:330::-;5203:31;;;5232:1;5203:31;;;;;;;;;5126:7;;;;5203:31;;;;;-1:-1:-1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5203:31:25;;-1:-1:-1;;5203:31:25;;;;;;;;;;-1:-1:-1;5145:89:25;-1:-1:-1;5261:12:25;;;;:7;:12;:::i;:::-;5244:29;;;:::i;:::-;:11;5256:1;5244:14;;;;;;;;:::i;:::-;;;;;;:29;;;;5283:36;5307:11;5283:23;:36::i;:::-;5337:3;;:19;;-1:-1:-1;;;5337:19:25;;-1:-1:-1;;;;;5337:3:25;;;;:10;;:19;;5348:7;;5337:19;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;5330:26;5033:330;-1:-1:-1;;;5033:330:25:o;2314:198:6:-;1334:13;:11;:13::i;:::-;-1:-1:-1;;;;;2402:22:6;::::1;2394:73;;;::::0;-1:-1:-1;;;2394:73:6;;30498:2:29;2394:73:6::1;::::0;::::1;30480:21:29::0;30537:2;30517:18;;;30510:30;30576:34;30556:18;;;30549:62;30647:8;30627:18;;;30620:36;30673:19;;2394:73:6::1;30296:402:29::0;2394:73:6::1;2477:28;2496:8;2477:18;:28::i;:::-;2314:198:::0;:::o;1641:289:25:-;1755:9;1750:174;1774:5;:12;1770:1;:16;1750:174;;;1838:1;1830:10;;1811:5;1817:1;1811:8;;;;;;;;:::i;:::-;;;;;;;:15;;;:29;1807:107;;1860:39;1883:5;1889:1;1883:8;;;;;;;;:::i;:::-;;;;;;;:15;;;1860:22;:39::i;:::-;1788:3;;;;:::i;:::-;;;;1750:174;;4236:176:13;4313:7;4339:66;4372:20;:18;:20::i;:::-;4394:10;8569:4:12;8563:11;8599:10;8587:23;;8639:4;8630:14;;8623:39;;;;8691:4;8682:14;;8675:34;8745:4;8730:20;;;8369:397;4339:66:13;4332:73;4236:176;-1:-1:-1;;4236:176:13:o;6620:232:12:-;6705:7;6725:17;6744:18;6766:25;6777:4;6783:1;6786;6789;6766:10;:25::i;:::-;6724:67;;;;6801:18;6813:5;6801:11;:18::i;:::-;-1:-1:-1;6836:9:12;6620:232;-1:-1:-1;;;;;6620:232:12:o;1599:130:6:-;1513:6;;-1:-1:-1;;;;;1513:6:6;929:10:10;1662:23:6;1654:68;;;;-1:-1:-1;;;1654:68:6;;30905:2:29;1654:68:6;;;30887:21:29;;;30924:18;;;30917:30;30983:34;30963:18;;;30956:62;31035:18;;1654:68:6;30703:356:29;2666:187:6;2758:6;;;-1:-1:-1;;;;;2774:17:6;;;-1:-1:-1;;2774:17:6;;;;;;;2806:40;;2758:6;;;2774:17;2758:6;;2806:40;;2739:16;;2806:40;2729:124;2666:187;:::o;5585:98:13:-;5639:13;5671:5;5664:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5585:98;:::o;5910:104::-;5967:13;5999:8;5992:15;;;;;:::i;2798:147::-;5374:13:8;;;;;;;5366:69;;;;-1:-1:-1;;;5366:69:8;;31708:2:29;5366:69:8;;;31690:21:29;31747:2;31727:18;;;31720:30;31786:34;31766:18;;;31759:62;-1:-1:-1;;;31837:18:29;;;31830:41;31888:19;;5366:69:8;31506:407:29;5366:69:8;2900:38:13::1;2924:4;2930:7;2900:23;:38::i;1003:95:6:-:0;5374:13:8;;;;;;;5366:69;;;;-1:-1:-1;;;5366:69:8;;31708:2:29;5366:69:8;;;31690:21:29;31747:2;31727:18;;;31720:30;31786:34;31766:18;;;31759:62;-1:-1:-1;;;31837:18:29;;;31830:41;31888:19;;5366:69:8;31506:407:29;5366:69:8;1065:26:6::1;:24;:26::i;1314:247:25:-:0;1407:3;;:23;;;;;;;;6902:25:29;;;1382:22:25;;-1:-1:-1;;;;;1407:3:25;;:18;;6875::29;;1407:23:25;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1407:23:25;;;;;;;;;;;;:::i;:::-;1461:12;;;;1382:48;;-1:-1:-1;;;;;;1461:26:25;1477:10;1461:26;;:57;;-1:-1:-1;1491:13:25;;;;-1:-1:-1;;;;;1491:27:25;1508:10;1491:27;1461:57;1440:114;;;;-1:-1:-1;;;1440:114:25;;15895:2:29;1440:114:25;;;15877:21:29;15934:2;15914:18;;;15907:30;-1:-1:-1;;;15953:18:29;;;15946:40;16003:18;;1440:114:25;15693:334:29;3304:109:13;3357:7;3383:23;:21;:23::i;:::-;3376:30;;3304:109;:::o;5031:1456:12:-;5119:7;;6043:66;6030:79;;6026:161;;;-1:-1:-1;6141:1:12;;-1:-1:-1;6145:30:12;6125:51;;6026:161;6298:24;;;6281:14;6298:24;;;;;;;;;32145:25:29;;;32218:4;32206:17;;32186:18;;;32179:45;;;;32240:18;;;32233:34;;;32283:18;;;32276:34;;;6298:24:12;;32117:19:29;;6298:24:12;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;6298:24:12;;-1:-1:-1;;6298:24:12;;;-1:-1:-1;;;;;;;6336:20:12;;6332:101;;6388:1;6392:29;6372:50;;;;;;;6332:101;6451:6;-1:-1:-1;6459:20:12;;-1:-1:-1;5031:1456:12;;;;;;;;:::o;592:511::-;669:20;660:5;:29;;;;;;;;:::i;:::-;;656:441;;592:511;:::o;656:441::-;765:29;756:5;:38;;;;;;;;:::i;:::-;;752:345;;810:34;;-1:-1:-1;;;810:34:12;;32712:2:29;810:34:12;;;32694:21:29;32751:2;32731:18;;;32724:30;32790:26;32770:18;;;32763:54;32834:18;;810:34:12;32510:348:29;752:345:12;874:35;865:5;:44;;;;;;;;:::i;:::-;;861:236;;925:41;;-1:-1:-1;;;925:41:12;;33065:2:29;925:41:12;;;33047:21:29;33104:2;33084:18;;;33077:30;33143:33;33123:18;;;33116:61;33194:18;;925:41:12;32863:355:29;861:236:12;996:30;987:5;:39;;;;;;;;:::i;:::-;;983:114;;1042:44;;-1:-1:-1;;;1042:44:12;;33425:2:29;1042:44:12;;;33407:21:29;33464:2;33444:18;;;33437:30;33503:34;33483:18;;;33476:62;33574:4;33554:18;;;33547:32;33596:19;;1042:44:12;33223:398:29;2951:267:13;5374:13:8;;;;;;;5366:69;;;;-1:-1:-1;;;5366:69:8;;31708:2:29;5366:69:8;;;31690:21:29;31747:2;31727:18;;;31720:30;31786:34;31766:18;;;31759:62;-1:-1:-1;;;31837:18:29;;;31830:41;31888:19;;5366:69:8;31506:407:29;5366:69:8;3063:5:13::1;:12;3071:4:::0;3063:5;:12:::1;:::i;:::-;-1:-1:-1::0;3085:8:13::1;:18;3096:7:::0;3085:8;:18:::1;:::i;:::-;-1:-1:-1::0;;3182:1:13::1;3168:11;:15:::0;;;3193:14:::1;:18:::0;-1:-1:-1;2951:267:13:o;1104:111:6:-;5374:13:8;;;;;;;5366:69;;;;-1:-1:-1;;;5366:69:8;;31708:2:29;5366:69:8;;;31690:21:29;31747:2;31727:18;;;31720:30;31786:34;31766:18;;;31759:62;-1:-1:-1;;;31837:18:29;;;31830:41;31888:19;;5366:69:8;31506:407:29;5366:69:8;1176:32:6::1;929:10:10::0;1176:18:6::1;:32::i;3419:192:13:-:0;3474:7;1913:95;3533:17;:15;:17::i;:::-;3552:20;:18;:20::i;:::-;3510:93;;;;;;36089:25:29;;;;36130:18;;36123:34;;;;36173:18;;;36166:34;3574:13:13;36216:18:29;;;36209:34;3597:4:13;36259:19:29;;;36252:84;36061:19;;3510:93:13;;;;;;;;;;;;3500:104;;;;;;3493:111;;3419:192;:::o;6229:630::-;6279:7;6298:18;6319:13;:11;:13::i;:::-;6346:18;;6298:34;;-1:-1:-1;6346:22:13;6342:511;;6391:22;;;;;;;;6229:630;-1:-1:-1;6229:630:13:o;6342:511::-;6688:11;;6717:15;;6713:130;;6759:10;6229:630;-1:-1:-1;;6229:630:13:o;6713:130::-;6815:13;6808:20;;;;6229:630;:::o;7080:666::-;7133:7;7152:21;7176:16;:14;:16::i;:::-;7206:21;;7152:40;;-1:-1:-1;7206:25:13;7202:538;;7254:25;;;;;;;;7080:666;-1:-1:-1;7080:666:13:o;7202:538::-;7566:14;;7598:18;;7594:136;;7643:13;7080:666;-1:-1:-1;;7080:666:13:o;14:398:29:-;108:8;118:6;172:3;165:4;157:6;153:17;149:27;139:55;;190:1;187;180:12;139:55;-1:-1:-1;213:20:29;;256:18;245:30;;242:50;;;288:1;285;278:12;242:50;325:4;317:6;313:17;301:29;;385:3;378:4;368:6;365:1;361:14;353:6;349:27;345:38;342:47;339:67;;;402:1;399;392:12;339:67;14:398;;;;;:::o;417:509::-;544:6;552;605:2;593:9;584:7;580:23;576:32;573:52;;;621:1;618;611:12;573:52;661:9;648:23;694:18;686:6;683:30;680:50;;;726:1;723;716:12;680:50;765:101;858:7;849:6;838:9;834:22;765:101;:::i;:::-;885:8;;739:127;;-1:-1:-1;417:509:29;-1:-1:-1;;;;417:509:29:o;1446:184::-;-1:-1:-1;;;1495:1:29;1488:88;1595:4;1592:1;1585:15;1619:4;1616:1;1609:15;1635:257;1707:4;1701:11;;;1739:17;;1786:18;1771:34;;1807:22;;;1768:62;1765:88;;;1833:18;;:::i;:::-;1869:4;1862:24;1635:257;:::o;1897:255::-;1969:2;1963:9;2011:6;1999:19;;2048:18;2033:34;;2069:22;;;2030:62;2027:88;;;2095:18;;:::i;2157:275::-;2228:2;2222:9;2293:2;2274:13;;-1:-1:-1;;2270:27:29;2258:40;;2328:18;2313:34;;2349:22;;;2310:62;2307:88;;;2375:18;;:::i;:::-;2411:2;2404:22;2157:275;;-1:-1:-1;2157:275:29:o;2437:187::-;2486:4;2519:18;2511:6;2508:30;2505:56;;;2541:18;;:::i;:::-;-1:-1:-1;2607:2:29;2586:15;-1:-1:-1;;2582:29:29;2613:4;2578:40;;2437:187::o;2629:464::-;2672:5;2725:3;2718:4;2710:6;2706:17;2702:27;2692:55;;2743:1;2740;2733:12;2692:55;2779:6;2766:20;2810:49;2826:32;2855:2;2826:32;:::i;:::-;2810:49;:::i;:::-;2884:2;2875:7;2868:19;2930:3;2923:4;2918:2;2910:6;2906:15;2902:26;2899:35;2896:55;;;2947:1;2944;2937:12;2896:55;3012:2;3005:4;2997:6;2993:17;2986:4;2977:7;2973:18;2960:55;3060:1;3035:16;;;3053:4;3031:27;3024:38;;;;3039:7;2629:464;-1:-1:-1;;;2629:464:29:o;3098:154::-;-1:-1:-1;;;;;3177:5:29;3173:54;3166:5;3163:65;3153:93;;3242:1;3239;3232:12;3257:156;3323:20;;3383:4;3372:16;;3362:27;;3352:55;;3403:1;3400;3393:12;3352:55;3257:156;;;:::o;3418:1212::-;3616:6;3624;3632;3640;3648;3656;3664;3672;3680;3733:3;3721:9;3712:7;3708:23;3704:33;3701:53;;;3750:1;3747;3740:12;3701:53;3790:9;3777:23;3819:18;3860:2;3852:6;3849:14;3846:34;;;3876:1;3873;3866:12;3846:34;3915:101;4008:7;3999:6;3988:9;3984:22;3915:101;:::i;:::-;4035:8;;-1:-1:-1;3889:127:29;-1:-1:-1;4123:2:29;4108:18;;4095:32;;-1:-1:-1;4139:16:29;;;4136:36;;;4168:1;4165;4158:12;4136:36;;4191:52;4235:7;4224:8;4213:9;4209:24;4191:52;:::i;:::-;4181:62;;;4293:2;4282:9;4278:18;4265:32;4306:31;4331:5;4306:31;:::i;:::-;4356:5;-1:-1:-1;4408:2:29;4393:18;;4380:32;;-1:-1:-1;4459:3:29;4444:19;;4431:33;;-1:-1:-1;4483:37:29;4515:3;4500:19;;4483:37;:::i;:::-;4473:47;;4567:3;4556:9;4552:19;4539:33;4529:43;;4619:3;4608:9;4604:19;4591:33;4581:43;;3418:1212;;;;;;;;;;;:::o;5853:667::-;5965:6;5973;5981;5989;5997;6005;6058:3;6046:9;6037:7;6033:23;6029:33;6026:53;;;6075:1;6072;6065:12;6026:53;6115:9;6102:23;6148:18;6140:6;6137:30;6134:50;;;6180:1;6177;6170:12;6134:50;6203;6245:7;6236:6;6225:9;6221:22;6203:50;:::i;:::-;6193:60;;;6300:2;6289:9;6285:18;6272:32;6262:42;;6351:2;6340:9;6336:18;6323:32;6313:42;;6374:36;6406:2;6395:9;6391:18;6374:36;:::i;:::-;6364:46;;6457:3;6446:9;6442:19;6429:33;6419:43;;6509:3;6498:9;6494:19;6481:33;6471:43;;5853:667;;;;;;;;:::o;6938:247::-;6997:6;7050:2;7038:9;7029:7;7025:23;7021:32;7018:52;;;7066:1;7063;7056:12;7018:52;7105:9;7092:23;7124:31;7149:5;7124:31;:::i;7615:250::-;7700:1;7710:113;7724:6;7721:1;7718:13;7710:113;;;7800:11;;;7794:18;7781:11;;;7774:39;7746:2;7739:10;7710:113;;;-1:-1:-1;;7857:1:29;7839:16;;7832:27;7615:250::o;7870:271::-;7912:3;7950:5;7944:12;7977:6;7972:3;7965:19;7993:76;8062:6;8055:4;8050:3;8046:14;8039:4;8032:5;8028:16;7993:76;:::i;:::-;8123:2;8102:15;-1:-1:-1;;8098:29:29;8089:39;;;;8130:4;8085:50;;7870:271;-1:-1:-1;;7870:271:29:o;8146:1335::-;8543:66;8535:6;8531:79;8520:9;8513:98;8494:4;8630:2;8668:3;8663:2;8652:9;8648:18;8641:31;8695:46;8736:3;8725:9;8721:19;8713:6;8695:46;:::i;:::-;8789:9;8781:6;8777:22;8772:2;8761:9;8757:18;8750:50;8823:33;8849:6;8841;8823:33;:::i;:::-;8887:2;8872:18;;8865:34;;;-1:-1:-1;;;;;8936:55:29;;8930:3;8915:19;;8908:84;9023:3;9008:19;;9001:35;;;9073:22;;;9067:3;9052:19;;9045:51;9145:13;;9167:22;;;9243:15;;;;-1:-1:-1;9205:15:29;;;;-1:-1:-1;9286:169:29;9300:6;9297:1;9294:13;9286:169;;;9361:13;;9349:26;;9430:15;;;;9395:12;;;;9322:1;9315:9;9286:169;;;-1:-1:-1;9472:3:29;;8146:1335;-1:-1:-1;;;;;;;;;;;;8146:1335:29:o;9486:166::-;9557:5;9602:2;9593:6;9588:3;9584:16;9580:25;9577:45;;;9618:1;9615;9608:12;9577:45;-1:-1:-1;9640:6:29;9486:166;-1:-1:-1;9486:166:29:o;9657:1079::-;9823:6;9831;9839;9847;9855;9863;9871;9879;9932:3;9920:9;9911:7;9907:23;9903:33;9900:53;;;9949:1;9946;9939:12;9900:53;9989:9;9976:23;10018:18;10059:2;10051:6;10048:14;10045:34;;;10075:1;10072;10065:12;10045:34;10098:78;10168:7;10159:6;10148:9;10144:22;10098:78;:::i;:::-;10088:88;;10229:2;10218:9;10214:18;10201:32;10185:48;;10258:2;10248:8;10245:16;10242:36;;;10274:1;10271;10264:12;10242:36;;10297:52;10341:7;10330:8;10319:9;10315:24;10297:52;:::i;:::-;10287:62;;;10399:2;10388:9;10384:18;10371:32;10412:31;10437:5;10412:31;:::i;:::-;10462:5;-1:-1:-1;10514:2:29;10499:18;;10486:32;;-1:-1:-1;10565:3:29;10550:19;;10537:33;;-1:-1:-1;10589:37:29;10621:3;10606:19;;10589:37;:::i;:::-;10579:47;;10673:3;10662:9;10658:19;10645:33;10635:43;;10725:3;10714:9;10710:19;10697:33;10687:43;;9657:1079;;;;;;;;;;;:::o;10741:376::-;10836:6;10889:2;10877:9;10868:7;10864:23;10860:32;10857:52;;;10905:1;10902;10895:12;10857:52;10945:9;10932:23;10978:18;10970:6;10967:30;10964:50;;;11010:1;11007;11000:12;10964:50;11033:78;11103:7;11094:6;11083:9;11079:22;11033:78;:::i;:::-;11023:88;10741:376;-1:-1:-1;;;;10741:376:29:o;11122:184::-;-1:-1:-1;;;11171:1:29;11164:88;11271:4;11268:1;11261:15;11295:4;11292:1;11285:15;11311:338;11418:4;11476:11;11463:25;11570:2;11566:7;11555:8;11539:14;11535:29;11531:43;11511:18;11507:68;11497:96;;11589:1;11586;11579:12;11497:96;11610:33;;;;;11311:338;-1:-1:-1;;11311:338:29:o;11654:204::-;11735:4;11768:18;11760:6;11757:30;11754:56;;;11790:18;;:::i;:::-;-1:-1:-1;11835:1:29;11831:14;11847:4;11827:25;;11654:204::o;11863:1426::-;11993:9;12027:4;12075:2;12067:5;12051:14;12047:26;12043:35;12040:55;;;12091:1;12088;12081:12;12040:55;12119:22;;:::i;:::-;12179:5;12166:19;12157:7;12150:36;12205:2;12254;12247:5;12243:14;12230:28;12281:18;12273:6;12270:30;12267:50;;;12313:1;12310;12303:12;12267:50;12336:18;;12392:14;12385:4;12377:13;;12373:34;12363:62;;12421:1;12418;12411:12;12363:62;12457:2;12444:16;12480:81;12496:64;12557:2;12496:64;:::i;12480:81::-;12595:15;;;12677:1;12673:10;;;;12665:19;;12661:28;;;12626:12;;;;12712:14;12701:26;;12698:46;;;12740:1;12737;12730:12;12698:46;12764:11;;;;12784:430;12800:6;12795:3;12792:15;12784:430;;;12887:2;12881:3;12865:14;12861:24;12857:33;12854:123;;;12931:1;12960:2;12956;12949:14;12854:123;13005:22;;:::i;:::-;13056:17;;13040:34;;13125:12;;;13112:26;13094:16;;;13087:52;13152:20;;12817:12;;;;13192;;;;12784:430;;;13230:16;;;13223:31;;;;-1:-1:-1;13234:7:29;;11863:1426;-1:-1:-1;;;;;11863:1426:29:o;13294:129::-;13379:18;13372:5;13368:30;13361:5;13358:41;13348:69;;13413:1;13410;13403:12;13428:136;13506:13;;13528:30;13506:13;13528:30;:::i;13569:138::-;13648:13;;13670:31;13648:13;13670:31;:::i;13712:118::-;13798:5;13791:13;13784:21;13777:5;13774:32;13764:60;;13820:1;13817;13810:12;13835:132;13911:13;;13933:28;13911:13;13933:28;:::i;13972:442::-;14025:5;14078:3;14071:4;14063:6;14059:17;14055:27;14045:55;;14096:1;14093;14086:12;14045:55;14125:6;14119:13;14156:49;14172:32;14201:2;14172:32;:::i;14156:49::-;14230:2;14221:7;14214:19;14276:3;14269:4;14264:2;14256:6;14252:15;14248:26;14245:35;14242:55;;;14293:1;14290;14283:12;14242:55;14306:77;14380:2;14373:4;14364:7;14360:18;14353:4;14345:6;14341:17;14306:77;:::i;14419:1269::-;14516:6;14569:2;14557:9;14548:7;14544:23;14540:32;14537:52;;;14585:1;14582;14575:12;14537:52;14618:9;14612:16;14647:18;14688:2;14680:6;14677:14;14674:34;;;14704:1;14701;14694:12;14674:34;14727:22;;;;14783:6;14765:16;;;14761:29;14758:49;;;14803:1;14800;14793:12;14758:49;14829:22;;:::i;:::-;14880:2;14874:9;14867:5;14860:24;14930:2;14926;14922:11;14916:18;14911:2;14904:5;14900:14;14893:42;14967:41;15004:2;15000;14996:11;14967:41;:::i;:::-;14962:2;14955:5;14951:14;14944:65;15041:41;15078:2;15074;15070:11;15041:41;:::i;:::-;15036:2;15029:5;15025:14;15018:65;15116:42;15153:3;15149:2;15145:12;15116:42;:::i;:::-;15110:3;15103:5;15099:15;15092:67;15206:3;15202:2;15198:12;15192:19;15186:3;15179:5;15175:15;15168:44;15245:43;15283:3;15279:2;15275:12;15245:43;:::i;:::-;15239:3;15232:5;15228:15;15221:68;15322:43;15360:3;15356:2;15352:12;15322:43;:::i;:::-;15316:3;15309:5;15305:15;15298:68;15385:3;15420:39;15455:2;15451;15447:11;15420:39;:::i;:::-;15404:14;;;15397:63;15479:3;15513:11;;;15507:18;15537:16;;;15534:36;;;15566:1;15563;15556:12;15534:36;15602:55;15649:7;15638:8;15634:2;15630:17;15602:55;:::i;:::-;15586:14;;;15579:79;;;;-1:-1:-1;15590:5:29;14419:1269;-1:-1:-1;;;;;14419:1269:29:o;16032:289::-;16071:3;16092:17;;;16089:197;;-1:-1:-1;;;16139:1:29;16132:88;16243:4;16240:1;16233:15;16271:4;16268:1;16261:15;16089:197;-1:-1:-1;16313:1:29;16302:13;;16032:289::o;16326:2105::-;16587:2;16639:21;;;16612:18;;;16695:22;;;16558:4;;16736:2;16754:18;;;16818:1;16814:14;;;16799:30;;16795:39;;16857:6;16558:4;16891:1511;16905:6;16902:1;16899:13;16891:1511;;;16970:22;;;-1:-1:-1;;16966:36:29;16954:49;;17042:20;;17117:14;17113:27;;;-1:-1:-1;;17109:41:29;17085:66;;17075:94;;17165:1;17162;17155:12;17075:94;17195:31;;17296:19;;17281:35;;17253:15;;;17370:14;;;17357:28;17442:14;17438:26;;;-1:-1:-1;;17434:40:29;17408:67;;17398:95;;17489:1;17486;17479:12;17398:95;17521:32;;;17629:16;;;;-1:-1:-1;17580:21:29;17672:18;17661:30;;17658:50;;;17704:1;17701;17694:12;17658:50;17764:6;17761:1;17757:14;17741;17737:35;17728:7;17724:49;17721:69;;;17786:1;17783;17776:12;17721:69;17810:15;;;17803:27;;;17875:22;;;;17994:1;;17931:2;17919:15;;18008:286;18024:6;18019:3;18016:15;18008:286;;;18099:22;;18085:37;;18175:17;;;18162:31;18146:14;;;18139:55;18263:17;;;;18050:1;18041:11;;;;;18220:14;;18008:286;;;18380:12;;;;18317:5;-1:-1:-1;;;18345:15:29;;;;-1:-1:-1;16927:1:29;16920:9;16891:1511;;;-1:-1:-1;18419:6:29;;16326:2105;-1:-1:-1;;;;;;;;16326:2105:29:o;18436:339::-;18544:4;18602:11;18589:25;18696:2;18692:7;18681:8;18665:14;18661:29;18657:43;18637:18;18633:68;18623:96;;18715:1;18712;18705:12;19124:1103;19193:5;19241:4;19229:9;19224:3;19220:19;19216:30;19213:50;;;19259:1;19256;19249:12;19213:50;19292:2;19286:9;19334:4;19326:6;19322:17;19358:18;19426:6;19414:10;19411:22;19406:2;19394:10;19391:18;19388:46;19385:72;;;19437:18;;:::i;:::-;19477:10;19473:2;19466:22;19506:6;19497:15;;19549:9;19536:23;19521:38;;19568:33;19593:7;19568:33;:::i;:::-;19610:23;;;19685:2;19670:18;;19657:32;;19698;19657;19698;:::i;:::-;19763:7;19758:2;19750:6;19746:15;19739:32;19823:2;19812:9;19808:18;19795:32;19780:47;;19836:30;19858:7;19836:30;:::i;:::-;19899:7;19894:2;19886:6;19882:15;19875:32;19968:2;19957:9;19953:18;19940:32;19935:2;19927:6;19923:15;19916:57;20024:3;20013:9;20009:19;19996:33;19982:47;;20052:2;20044:6;20041:14;20038:34;;;20068:1;20065;20058:12;20038:34;;20106:46;20148:3;20139:6;20128:9;20124:22;20106:46;:::i;:::-;20100:3;20092:6;20088:16;20081:72;;20215:3;20204:9;20200:19;20187:33;20181:3;20173:6;20169:16;20162:59;;19124:1103;;;;:::o;20232:1381::-;20364:9;20423:4;20415:5;20399:14;20395:26;20391:37;20388:57;;;20441:1;20438;20431:12;20388:57;20469:22;;:::i;:::-;20529:5;20516:19;20507:7;20500:36;20555:2;20604;20597:5;20593:14;20580:28;20627:18;20668:2;20660:6;20657:14;20654:34;;;20684:1;20681;20674:12;20654:34;20707:18;;;;20763:14;20756:4;20748:13;;20744:34;20734:62;;20792:1;20789;20782:12;20734:62;20828:2;20815:16;20851:81;20867:64;20928:2;20867:64;:::i;20851:81::-;20966:15;;;21048:1;21044:10;;;;21036:19;;21032:28;;;20997:12;;;;21083:14;21072:26;;21069:46;;;21111:1;21108;21101:12;21069:46;21143:2;21139;21135:11;21155:383;21171:6;21166:3;21163:15;21155:383;;;21257:3;21244:17;21293:2;21280:11;21277:19;21274:109;;;21337:1;21366:2;21362;21355:14;21274:109;21408:87;21480:14;21475:2;21461:11;21457:2;21453:20;21449:29;21408:87;:::i;:::-;21396:100;;-1:-1:-1;21516:12:29;;;;21188;;21155:383;;;-1:-1:-1;21554:16:29;;;21547:31;;;;-1:-1:-1;21558:7:29;;20232:1381;-1:-1:-1;;;;;20232:1381:29:o;21618:2338::-;21840:4;21869:2;21909;21898:9;21894:18;21939:2;21928:9;21921:21;21962:6;21997;21991:13;22028:6;22020;22013:22;22054:2;22044:12;;22087:2;22076:9;22072:18;22065:25;;22149:2;22139:6;22136:1;22132:14;22121:9;22117:30;22113:39;22187:2;22179:6;22175:15;22208:1;22218:1709;22232:6;22229:1;22226:13;22218:1709;;;22297:22;;;-1:-1:-1;;22293:36:29;22281:49;;22353:13;;22436:9;;22421:25;;22485:11;;22479:18;22517:15;;;22510:27;;;22598:19;;22393:15;;;22630:24;;;22810:21;;;;22677:2;;22701:15;;;;22763:1;22759:16;;;22747:29;;22743:38;;22855:1;22869:949;22885:8;22880:3;22877:17;22869:949;;;22991:2;22987:7;22978:6;22970;22966:19;22962:33;22955:5;22948:48;23029:8;23023:15;23065:4;-1:-1:-1;;;;;23111:2:29;23105:9;23101:58;23093:6;23086:74;23225:18;23219:2;23215;23211:11;23205:18;23201:43;23196:2;23188:6;23184:15;23177:68;23314:2;23310;23306:11;23300:18;23293:26;23286:34;23281:2;23273:6;23269:15;23262:59;23376:2;23372;23368:11;23362:18;23357:2;23349:6;23345:15;23338:43;23408:4;23465:2;23461;23457:11;23451:18;23510:2;23505;23497:6;23493:15;23486:27;23544:50;23590:2;23582:6;23578:15;23562:14;23544:50;:::i;:::-;23621:4;23672:11;;;23666:18;23649:15;;;;23642:43;;;;-1:-1:-1;;23747:17:29;;;;23790:14;;;;23530:64;-1:-1:-1;22913:1:29;22904:11;22869:949;;;-1:-1:-1;23905:12:29;;;;23841:6;-1:-1:-1;;;23870:15:29;;;;-1:-1:-1;;22254:1:29;22247:9;22218:1709;;23961:902;24056:6;24087:2;24130;24118:9;24109:7;24105:23;24101:32;24098:52;;;24146:1;24143;24136:12;24098:52;24179:9;24173:16;24212:18;24204:6;24201:30;24198:50;;;24244:1;24241;24234:12;24198:50;24267:22;;24320:4;24312:13;;24308:27;-1:-1:-1;24298:55:29;;24349:1;24346;24339:12;24298:55;24378:2;24372:9;24401:81;24417:64;24478:2;24417:64;:::i;24401:81::-;24516:15;;;24598:1;24594:10;;;;24586:19;;24582:28;;;24547:12;;;;24622:19;;;24619:39;;;24654:1;24651;24644:12;24619:39;24678:11;;;;24698:135;24714:6;24709:3;24706:15;24698:135;;;24780:10;;24768:23;;24731:12;;;;24811;;;;24698:135;;;24852:5;23961:902;-1:-1:-1;;;;;;;23961:902:29:o;27327:500::-;27385:5;27392:6;27452:3;27439:17;27538:2;27534:7;27523:8;27507:14;27503:29;27499:43;27479:18;27475:68;27465:96;;27557:1;27554;27547:12;27465:96;27585:33;;27689:4;27676:18;;;-1:-1:-1;27637:21:29;;-1:-1:-1;27717:18:29;27706:30;;27703:50;;;27749:1;27746;27739:12;27703:50;27796:6;27780:14;27776:27;27769:5;27765:39;27762:59;;;27817:1;27814;27807:12;27832:266;27920:6;27915:3;27908:19;27972:6;27965:5;27958:4;27953:3;27949:14;27936:43;-1:-1:-1;28024:1:29;27999:16;;;28017:4;27995:27;;;27988:38;;;;28080:2;28059:15;;;-1:-1:-1;;28055:29:29;28046:39;;;28042:50;;27832:266::o;28103:1417::-;28302:2;28291:9;28284:21;28354:6;28341:20;28336:2;28325:9;28321:18;28314:48;28265:4;28422:2;28414:6;28410:15;28397:29;28506:3;28502:8;28493:6;28477:14;28473:27;28469:42;28449:18;28445:67;28435:95;;28526:1;28523;28516:12;28435:95;28621:4;28599:20;;;28592:34;28552:31;;28650:19;;28678:33;28650:19;28678:33;:::i;:::-;-1:-1:-1;;;;;28747:56:29;28742:2;28727:18;;28720:84;28852:2;28841:14;;28828:28;28865:32;28828:28;28865:32;:::i;:::-;28947:18;28934:32;28928:3;28913:19;;28906:61;29015:4;29004:16;;28991:30;29030;28991;29030;:::i;:::-;29104:15;29097:23;29091:3;29076:19;;29069:52;29183:2;29172:14;;29159:28;29152:4;29137:20;;29130:58;29231:54;29280:3;29269:15;;29176:5;29231:54;:::i;:::-;29322:4;29316:3;29305:9;29301:19;29294:33;29350:74;29419:3;29408:9;29404:19;29390:12;29376;29350:74;:::i;:::-;29336:88;;;29485:3;29478:5;29474:15;29461:29;29455:3;29444:9;29440:19;29433:58;29508:6;29500:14;;;;28103:1417;;;;:::o;29525:184::-;29595:6;29648:2;29636:9;29627:7;29623:23;29619:32;29616:52;;;29664:1;29661;29654:12;29616:52;-1:-1:-1;29687:16:29;;29525:184;-1:-1:-1;29525:184:29:o;29714:338::-;29820:4;29878:11;29865:25;29972:3;29968:8;29957;29941:14;29937:29;29933:44;29913:18;29909:69;29899:97;;29992:1;29989;29982:12;30057:234;30185:9;30222:63;30270:14;30263:5;30222:63;:::i;31064:437::-;31143:1;31139:12;;;;31186;;;31207:61;;31261:4;31253:6;31249:17;31239:27;;31207:61;31314:2;31306:6;31303:14;31283:18;31280:38;31277:218;;-1:-1:-1;;;31348:1:29;31341:88;31452:4;31449:1;31442:15;31480:4;31477:1;31470:15;32321:184;-1:-1:-1;;;32370:1:29;32363:88;32470:4;32467:1;32460:15;32494:4;32491:1;32484:15;33752:545;33854:2;33849:3;33846:11;33843:448;;;33890:1;33915:5;33911:2;33904:17;33960:4;33956:2;33946:19;34030:2;34018:10;34014:19;34011:1;34007:27;34001:4;33997:38;34066:4;34054:10;34051:20;34048:47;;;-1:-1:-1;34089:4:29;34048:47;34144:2;34139:3;34135:12;34132:1;34128:20;34122:4;34118:31;34108:41;;34199:82;34217:2;34210:5;34207:13;34199:82;;;34262:17;;;34243:1;34232:13;34199:82;;33843:448;33752:545;;;:::o;34473:1352::-;34599:3;34593:10;34626:18;34618:6;34615:30;34612:56;;;34648:18;;:::i;:::-;34677:97;34767:6;34727:38;34759:4;34753:11;34727:38;:::i;:::-;34721:4;34677:97;:::i;:::-;34829:4;;34893:2;34882:14;;34910:1;34905:663;;;;35612:1;35629:6;35626:89;;;-1:-1:-1;35681:19:29;;;35675:26;35626:89;-1:-1:-1;;34430:1:29;34426:11;;;34422:24;34418:29;34408:40;34454:1;34450:11;;;34405:57;35728:81;;34875:944;;34905:663;33699:1;33692:14;;;33736:4;33723:18;;-1:-1:-1;;34941:20:29;;;35059:236;35073:7;35070:1;35067:14;35059:236;;;35162:19;;;35156:26;35141:42;;35254:27;;;;35222:1;35210:14;;;;35089:19;;35059:236;;;35063:3;35323:6;35314:7;35311:19;35308:201;;;35384:19;;;35378:26;-1:-1:-1;;35467:1:29;35463:14;;;35479:3;35459:24;35455:37;35451:42;35436:58;35421:74;;35308:201;-1:-1:-1;;;;;35555:1:29;35539:14;;;35535:22;35522:36;;-1:-1:-1;34473:1352:29:o"},"gasEstimates":{"creation":{"codeDepositCost":"2048400","executionCost":"31767","totalCost":"2080167"},"external":{"ATTEST_TYPEHASH()":"284","_recoverSignerAddress(string,uint256,uint256,uint8,bytes32,bytes32)":"infinite","attest((bytes32,(address,uint64,bool,bytes32,bytes,uint256)))":"infinite","attestBySig((bytes32,(address,uint64,bool,bytes32,bytes,uint256)),string,address,uint256,uint256,uint8,bytes32,bytes32)":"infinite","eas()":"2371","eip712Domain()":"infinite","initialize(address)":"infinite","multiAttestBySig((bytes32,(bytes32,(address,uint64,bool,bytes32,bytes,uint256)[]),uint256)[],string,address,uint256,uint256,uint8,bytes32,bytes32)":"infinite","multiRevoke((bytes32,(bytes32,uint256)[])[])":"infinite","multiRevokeBySig((bytes32,(bytes32,uint256)[])[],string,address,uint256,uint256,uint8,bytes32,bytes32)":"infinite","multiSequentialAttest((bytes32,(bytes32,(address,uint64,bool,bytes32,bytes,uint256)[]),uint256)[])":"infinite","nonces(address)":"2536","owner()":"2409","renounceOwnership()":"infinite","transferOwnership(address)":"infinite"},"internal":{"validateCanAttestToRef(bytes32)":"infinite","validateCanAttestToRefs(struct AttestationRequestData memory[] memory)":"infinite"}},"methodIdentifiers":{"ATTEST_TYPEHASH()":"7e4a7d8f","_recoverSignerAddress(string,uint256,uint256,uint8,bytes32,bytes32)":"5ffed2f0","attest((bytes32,(address,uint64,bool,bytes32,bytes,uint256)))":"f17325e7","attestBySig((bytes32,(address,uint64,bool,bytes32,bytes,uint256)),string,address,uint256,uint256,uint8,bytes32,bytes32)":"d68a5ab6","eas()":"8150864d","eip712Domain()":"84b0196e","initialize(address)":"c4d66de8","multiAttestBySig((bytes32,(bytes32,(address,uint64,bool,bytes32,bytes,uint256)[]),uint256)[],string,address,uint256,uint256,uint8,bytes32,bytes32)":"5ea677e9","multiRevoke((bytes32,(bytes32,uint256)[])[])":"4cb7e9e5","multiRevokeBySig((bytes32,(bytes32,uint256)[])[],string,address,uint256,uint256,uint8,bytes32,bytes32)":"5cad7555","multiSequentialAttest((bytes32,(bytes32,(address,uint64,bool,bytes32,bytes,uint256)[]),uint256)[])":"5913a31c","nonces(address)":"7ecebe00","owner()":"8da5cb5b","renounceOwnership()":"715018a6","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EIP712DomainChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ATTEST_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"payloadHash\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"_recoverSignerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"schema\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"expirationTime\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"revocable\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"refUID\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct AttestationRequestData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct AttestationRequest\",\"name\":\"request\",\"type\":\"tuple\"}],\"name\":\"attest\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"schema\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"expirationTime\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"revocable\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"refUID\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct AttestationRequestData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct AttestationRequest\",\"name\":\"request\",\"type\":\"tuple\"},{\"internalType\":\"string\",\"name\":\"payloadHash\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"attester\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"attestBySig\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eas\",\"outputs\":[{\"internalType\":\"contract IEAS\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eip712Domain\",\"outputs\":[{\"internalType\":\"bytes1\",\"name\":\"fields\",\"type\":\"bytes1\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"verifyingContract\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"extensions\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"easAddr\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"uid\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"schema\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"expirationTime\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"revocable\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"refUID\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct AttestationRequestData[]\",\"name\":\"data\",\"type\":\"tuple[]\"}],\"internalType\":\"struct MultiAttestationRequest\",\"name\":\"multiRequest\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"refIdx\",\"type\":\"uint256\"}],\"internalType\":\"struct Gap.AttestationRequestNode[]\",\"name\":\"requestNodes\",\"type\":\"tuple[]\"},{\"internalType\":\"string\",\"name\":\"payloadHash\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"attester\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"multiAttestBySig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"schema\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"uid\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct RevocationRequestData[]\",\"name\":\"data\",\"type\":\"tuple[]\"}],\"internalType\":\"struct MultiRevocationRequest[]\",\"name\":\"multiRequests\",\"type\":\"tuple[]\"}],\"name\":\"multiRevoke\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"schema\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"uid\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct RevocationRequestData[]\",\"name\":\"data\",\"type\":\"tuple[]\"}],\"internalType\":\"struct MultiRevocationRequest[]\",\"name\":\"multiRequests\",\"type\":\"tuple[]\"},{\"internalType\":\"string\",\"name\":\"payloadHash\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"attester\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"multiRevokeBySig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"uid\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"schema\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"expirationTime\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"revocable\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"refUID\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct AttestationRequestData[]\",\"name\":\"data\",\"type\":\"tuple[]\"}],\"internalType\":\"struct MultiAttestationRequest\",\"name\":\"multiRequest\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"refIdx\",\"type\":\"uint256\"}],\"internalType\":\"struct Gap.AttestationRequestNode[]\",\"name\":\"requestNodes\",\"type\":\"tuple[]\"}],\"name\":\"multiSequentialAttest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"EIP712DomainChanged()\":{\"details\":\"MAY be emitted to signal that the domain could have changed.\"},\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"eip712Domain()\":{\"details\":\"See {EIP-5267}. _Available since v4.9._\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"attest((bytes32,(address,uint64,bool,bytes32,bytes,uint256)))\":{\"notice\":\" Perform a single attestation\"},\"attestBySig((bytes32,(address,uint64,bool,bytes32,bytes,uint256)),string,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\" Performs a single attestation by signature\"},\"multiAttestBySig((bytes32,(bytes32,(address,uint64,bool,bytes32,bytes,uint256)[]),uint256)[],string,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\" Performs multi attestations by signature\"},\"multiRevoke((bytes32,(bytes32,uint256)[])[])\":{\"notice\":\" Revokes multiple attestations\"},\"multiRevokeBySig((bytes32,(bytes32,uint256)[])[],string,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\" Performs multi revoke by sig\"},\"multiSequentialAttest((bytes32,(bytes32,(address,uint64,bool,bytes32,bytes,uint256)[]),uint256)[])\":{\"notice\":\" Performs a multi attest with relations between attestations and assess for attesation permissions based on the parent attestation. If refUID is set in any attestation it will be ignored.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Gap.sol\":\"Gap\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@ethereum-attestation-service/eas-contracts/contracts/Common.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// A representation of an empty/uninitialized UID.\\nbytes32 constant EMPTY_UID = 0;\\n\\n// A zero expiration represents an non-expiring attestation.\\nuint64 constant NO_EXPIRATION_TIME = 0;\\n\\nerror AccessDenied();\\nerror InvalidEAS();\\nerror InvalidLength();\\nerror InvalidSignature();\\nerror NotFound();\\n\\n/**\\n * @dev A struct representing EIP712 signature data.\\n */\\nstruct EIP712Signature {\\n    uint8 v; // The recovery ID.\\n    bytes32 r; // The x-coordinate of the nonce R.\\n    bytes32 s; // The signature data.\\n}\\n\\n/**\\n * @dev A struct representing a single attestation.\\n */\\nstruct Attestation {\\n    bytes32 uid; // A unique identifier of the attestation.\\n    bytes32 schema; // The unique identifier of the schema.\\n    uint64 time; // The time when the attestation was created (Unix timestamp).\\n    uint64 expirationTime; // The time when the attestation expires (Unix timestamp).\\n    uint64 revocationTime; // The time when the attestation was revoked (Unix timestamp).\\n    bytes32 refUID; // The UID of the related attestation.\\n    address recipient; // The recipient of the attestation.\\n    address attester; // The attester/sender of the attestation.\\n    bool revocable; // Whether the attestation is revocable.\\n    bytes data; // Custom attestation data.\\n}\\n\\n/**\\n * @dev A helper function to work with unchecked iterators in loops.\\n */\\nfunction uncheckedInc(uint256 i) pure returns (uint256 j) {\\n    unchecked {\\n        j = i + 1;\\n    }\\n}\\n\",\"keccak256\":\"0x4bab9ec76bdb009e9fb505c45a679d39c9e80771eb13ed901029a1068025752a\",\"license\":\"MIT\"},\"@ethereum-attestation-service/eas-contracts/contracts/IEAS.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { ISchemaRegistry } from \\\"./ISchemaRegistry.sol\\\";\\nimport { Attestation, EIP712Signature } from \\\"./Common.sol\\\";\\n\\n/**\\n * @dev A struct representing the arguments of the attestation request.\\n */\\nstruct AttestationRequestData {\\n    address recipient; // The recipient of the attestation.\\n    uint64 expirationTime; // The time when the attestation expires (Unix timestamp).\\n    bool revocable; // Whether the attestation is revocable.\\n    bytes32 refUID; // The UID of the related attestation.\\n    bytes data; // Custom attestation data.\\n    uint256 value; // An explicit ETH amount to send to the resolver. This is important to prevent accidental user errors.\\n}\\n\\n/**\\n * @dev A struct representing the full arguments of the attestation request.\\n */\\nstruct AttestationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    AttestationRequestData data; // The arguments of the attestation request.\\n}\\n\\n/**\\n * @dev A struct representing the full arguments of the full delegated attestation request.\\n */\\nstruct DelegatedAttestationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    AttestationRequestData data; // The arguments of the attestation request.\\n    EIP712Signature signature; // The EIP712 signature data.\\n    address attester; // The attesting account.\\n}\\n\\n/**\\n * @dev A struct representing the full arguments of the multi attestation request.\\n */\\nstruct MultiAttestationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    AttestationRequestData[] data; // The arguments of the attestation request.\\n}\\n\\n/**\\n * @dev A struct representing the full arguments of the delegated multi attestation request.\\n */\\nstruct MultiDelegatedAttestationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    AttestationRequestData[] data; // The arguments of the attestation requests.\\n    EIP712Signature[] signatures; // The EIP712 signatures data. Please note that the signatures are assumed to be signed with increasing nonces.\\n    address attester; // The attesting account.\\n}\\n\\n/**\\n * @dev A struct representing the arguments of the revocation request.\\n */\\nstruct RevocationRequestData {\\n    bytes32 uid; // The UID of the attestation to revoke.\\n    uint256 value; // An explicit ETH amount to send to the resolver. This is important to prevent accidental user errors.\\n}\\n\\n/**\\n * @dev A struct representing the full arguments of the revocation request.\\n */\\nstruct RevocationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    RevocationRequestData data; // The arguments of the revocation request.\\n}\\n\\n/**\\n * @dev A struct representing the arguments of the full delegated revocation request.\\n */\\nstruct DelegatedRevocationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    RevocationRequestData data; // The arguments of the revocation request.\\n    EIP712Signature signature; // The EIP712 signature data.\\n    address revoker; // The revoking account.\\n}\\n\\n/**\\n * @dev A struct representing the full arguments of the multi revocation request.\\n */\\nstruct MultiRevocationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    RevocationRequestData[] data; // The arguments of the revocation request.\\n}\\n\\n/**\\n * @dev A struct representing the full arguments of the delegated multi revocation request.\\n */\\nstruct MultiDelegatedRevocationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    RevocationRequestData[] data; // The arguments of the revocation requests.\\n    EIP712Signature[] signatures; // The EIP712 signatures data. Please note that the signatures are assumed to be signed with increasing nonces.\\n    address revoker; // The revoking account.\\n}\\n\\n/**\\n * @title EAS - Ethereum Attestation Service interface.\\n */\\ninterface IEAS {\\n    /**\\n     * @dev Emitted when an attestation has been made.\\n     *\\n     * @param recipient The recipient of the attestation.\\n     * @param attester The attesting account.\\n     * @param uid The UID the revoked attestation.\\n     * @param schema The UID of the schema.\\n     */\\n    event Attested(address indexed recipient, address indexed attester, bytes32 uid, bytes32 indexed schema);\\n\\n    /**\\n     * @dev Emitted when an attestation has been revoked.\\n     *\\n     * @param recipient The recipient of the attestation.\\n     * @param attester The attesting account.\\n     * @param schema The UID of the schema.\\n     * @param uid The UID the revoked attestation.\\n     */\\n    event Revoked(address indexed recipient, address indexed attester, bytes32 uid, bytes32 indexed schema);\\n\\n    /**\\n     * @dev Emitted when a data has been timestamped.\\n     *\\n     * @param data The data.\\n     * @param timestamp The timestamp.\\n     */\\n    event Timestamped(bytes32 indexed data, uint64 indexed timestamp);\\n\\n    /**\\n     * @dev Emitted when a data has been revoked.\\n     *\\n     * @param revoker The address of the revoker.\\n     * @param data The data.\\n     * @param timestamp The timestamp.\\n     */\\n    event RevokedOffchain(address indexed revoker, bytes32 indexed data, uint64 indexed timestamp);\\n\\n    /**\\n     * @dev Returns the address of the global schema registry.\\n     *\\n     * @return The address of the global schema registry.\\n     */\\n    function getSchemaRegistry() external view returns (ISchemaRegistry);\\n\\n    /**\\n     * @dev Attests to a specific schema.\\n     *\\n     * @param request The arguments of the attestation request.\\n     *\\n     * Example:\\n     *\\n     * attest({\\n     *     schema: \\\"0facc36681cbe2456019c1b0d1e7bedd6d1d40f6f324bf3dd3a4cef2999200a0\\\",\\n     *     data: {\\n     *         recipient: \\\"0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf\\\",\\n     *         expirationTime: 0,\\n     *         revocable: true,\\n     *         refUID: \\\"0x0000000000000000000000000000000000000000000000000000000000000000\\\",\\n     *         data: \\\"0xF00D\\\",\\n     *         value: 0\\n     *     }\\n     * })\\n     *\\n     * @return The UID of the new attestation.\\n     */\\n    function attest(AttestationRequest calldata request) external payable returns (bytes32);\\n\\n    /**\\n     * @dev Attests to a specific schema via the provided EIP712 signature.\\n     *\\n     * @param delegatedRequest The arguments of the delegated attestation request.\\n     *\\n     * Example:\\n     *\\n     * attestByDelegation({\\n     *     schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n     *     data: {\\n     *         recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',\\n     *         expirationTime: 1673891048,\\n     *         revocable: true,\\n     *         refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\\n     *         data: '0x1234',\\n     *         value: 0\\n     *     },\\n     *     signature: {\\n     *         v: 28,\\n     *         r: '0x148c...b25b',\\n     *         s: '0x5a72...be22'\\n     *     },\\n     *     attester: '0xc5E8740aD971409492b1A63Db8d83025e0Fc427e'\\n     * })\\n     *\\n     * @return The UID of the new attestation.\\n     */\\n    function attestByDelegation(\\n        DelegatedAttestationRequest calldata delegatedRequest\\n    ) external payable returns (bytes32);\\n\\n    /**\\n     * @dev Attests to multiple schemas.\\n     *\\n     * @param multiRequests The arguments of the multi attestation requests. The requests should be grouped by distinct\\n     * schema ids to benefit from the best batching optimization.\\n     *\\n     * Example:\\n     *\\n     * multiAttest([{\\n     *     schema: '0x33e9094830a5cba5554d1954310e4fbed2ef5f859ec1404619adea4207f391fd',\\n     *     data: [{\\n     *         recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',\\n     *         expirationTime: 1673891048,\\n     *         revocable: true,\\n     *         refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\\n     *         data: '0x1234',\\n     *         value: 1000\\n     *     },\\n     *     {\\n     *         recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',\\n     *         expirationTime: 0,\\n     *         revocable: false,\\n     *         refUID: '0x480df4a039efc31b11bfdf491b383ca138b6bde160988222a2a3509c02cee174',\\n     *         data: '0x00',\\n     *         value: 0\\n     *     }],\\n     * },\\n     * {\\n     *     schema: '0x5ac273ce41e3c8bfa383efe7c03e54c5f0bff29c9f11ef6ffa930fc84ca32425',\\n     *     data: [{\\n     *         recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',\\n     *         expirationTime: 0,\\n     *         revocable: true,\\n     *         refUID: '0x75bf2ed8dca25a8190c50c52db136664de25b2449535839008ccfdab469b214f',\\n     *         data: '0x12345678',\\n     *         value: 0\\n     *     },\\n     * }])\\n     *\\n     * @return The UIDs of the new attestations.\\n     */\\n    function multiAttest(MultiAttestationRequest[] calldata multiRequests) external payable returns (bytes32[] memory);\\n\\n    /**\\n     * @dev Attests to multiple schemas using via provided EIP712 signatures.\\n     *\\n     * @param multiDelegatedRequests The arguments of the delegated multi attestation requests. The requests should be\\n     * grouped by distinct schema ids to benefit from the best batching optimization.\\n     *\\n     * Example:\\n     *\\n     * multiAttestByDelegation([{\\n     *     schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n     *     data: [{\\n     *         recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',\\n     *         expirationTime: 1673891048,\\n     *         revocable: true,\\n     *         refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\\n     *         data: '0x1234',\\n     *         value: 0\\n     *     },\\n     *     {\\n     *         recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',\\n     *         expirationTime: 0,\\n     *         revocable: false,\\n     *         refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\\n     *         data: '0x00',\\n     *         value: 0\\n     *     }],\\n     *     signatures: [{\\n     *         v: 28,\\n     *         r: '0x148c...b25b',\\n     *         s: '0x5a72...be22'\\n     *     },\\n     *     {\\n     *         v: 28,\\n     *         r: '0x487s...67bb',\\n     *         s: '0x12ad...2366'\\n     *     }],\\n     *     attester: '0x1D86495b2A7B524D747d2839b3C645Bed32e8CF4'\\n     * }])\\n     *\\n     * @return The UIDs of the new attestations.\\n     */\\n    function multiAttestByDelegation(\\n        MultiDelegatedAttestationRequest[] calldata multiDelegatedRequests\\n    ) external payable returns (bytes32[] memory);\\n\\n    /**\\n     * @dev Revokes an existing attestation to a specific schema.\\n     *\\n     * Example:\\n     *\\n     * revoke({\\n     *     schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n     *     data: {\\n     *         uid: '0x101032e487642ee04ee17049f99a70590c735b8614079fc9275f9dd57c00966d',\\n     *         value: 0\\n     *     }\\n     * })\\n     *\\n     * @param request The arguments of the revocation request.\\n     */\\n    function revoke(RevocationRequest calldata request) external payable;\\n\\n    /**\\n     * @dev Revokes an existing attestation to a specific schema via the provided EIP712 signature.\\n     *\\n     * Example:\\n     *\\n     * revokeByDelegation({\\n     *     schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n     *     data: {\\n     *         uid: '0xcbbc12102578c642a0f7b34fe7111e41afa25683b6cd7b5a14caf90fa14d24ba',\\n     *         value: 0\\n     *     },\\n     *     signature: {\\n     *         v: 27,\\n     *         r: '0xb593...7142',\\n     *         s: '0x0f5b...2cce'\\n     *     },\\n     *     revoker: '0x244934dd3e31bE2c81f84ECf0b3E6329F5381992'\\n     * })\\n     *\\n     * @param delegatedRequest The arguments of the delegated revocation request.\\n     */\\n    function revokeByDelegation(DelegatedRevocationRequest calldata delegatedRequest) external payable;\\n\\n    /**\\n     * @dev Revokes existing attestations to multiple schemas.\\n     *\\n     * @param multiRequests The arguments of the multi revocation requests. The requests should be grouped by distinct\\n     * schema ids to benefit from the best batching optimization.\\n     *\\n     * Example:\\n     *\\n     * multiRevoke([{\\n     *     schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n     *     data: [{\\n     *         uid: '0x211296a1ca0d7f9f2cfebf0daaa575bea9b20e968d81aef4e743d699c6ac4b25',\\n     *         value: 1000\\n     *     },\\n     *     {\\n     *         uid: '0xe160ac1bd3606a287b4d53d5d1d6da5895f65b4b4bab6d93aaf5046e48167ade',\\n     *         value: 0\\n     *     }],\\n     * },\\n     * {\\n     *     schema: '0x5ac273ce41e3c8bfa383efe7c03e54c5f0bff29c9f11ef6ffa930fc84ca32425',\\n     *     data: [{\\n     *         uid: '0x053d42abce1fd7c8fcddfae21845ad34dae287b2c326220b03ba241bc5a8f019',\\n     *         value: 0\\n     *     },\\n     * }])\\n     */\\n    function multiRevoke(MultiRevocationRequest[] calldata multiRequests) external payable;\\n\\n    /**\\n     * @dev Revokes existing attestations to multiple schemas via provided EIP712 signatures.\\n     *\\n     * @param multiDelegatedRequests The arguments of the delegated multi revocation attestation requests. The requests should be\\n     * grouped by distinct schema ids to benefit from the best batching optimization.\\n     *\\n     * Example:\\n     *\\n     * multiRevokeByDelegation([{\\n     *     schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n     *     data: [{\\n     *         uid: '0x211296a1ca0d7f9f2cfebf0daaa575bea9b20e968d81aef4e743d699c6ac4b25',\\n     *         value: 1000\\n     *     },\\n     *     {\\n     *         uid: '0xe160ac1bd3606a287b4d53d5d1d6da5895f65b4b4bab6d93aaf5046e48167ade',\\n     *         value: 0\\n     *     }],\\n     *     signatures: [{\\n     *         v: 28,\\n     *         r: '0x148c...b25b',\\n     *         s: '0x5a72...be22'\\n     *     },\\n     *     {\\n     *         v: 28,\\n     *         r: '0x487s...67bb',\\n     *         s: '0x12ad...2366'\\n     *     }],\\n     *     revoker: '0x244934dd3e31bE2c81f84ECf0b3E6329F5381992'\\n     * }])\\n     *\\n     */\\n    function multiRevokeByDelegation(\\n        MultiDelegatedRevocationRequest[] calldata multiDelegatedRequests\\n    ) external payable;\\n\\n    /**\\n     * @dev Timestamps the specified bytes32 data.\\n     *\\n     * @param data The data to timestamp.\\n     *\\n     * @return The timestamp the data was timestamped with.\\n     */\\n    function timestamp(bytes32 data) external returns (uint64);\\n\\n    /**\\n     * @dev Timestamps the specified multiple bytes32 data.\\n     *\\n     * @param data The data to timestamp.\\n     *\\n     * @return The timestamp the data was timestamped with.\\n     */\\n    function multiTimestamp(bytes32[] calldata data) external returns (uint64);\\n\\n    /**\\n     * @dev Revokes the specified bytes32 data.\\n     *\\n     * @param data The data to timestamp.\\n     *\\n     * @return The timestamp the data was revoked with.\\n     */\\n    function revokeOffchain(bytes32 data) external returns (uint64);\\n\\n    /**\\n     * @dev Revokes the specified multiple bytes32 data.\\n     *\\n     * @param data The data to timestamp.\\n     *\\n     * @return The timestamp the data was revoked with.\\n     */\\n    function multiRevokeOffchain(bytes32[] calldata data) external returns (uint64);\\n\\n    /**\\n     * @dev Returns an existing attestation by UID.\\n     *\\n     * @param uid The UID of the attestation to retrieve.\\n     *\\n     * @return The attestation data members.\\n     */\\n    function getAttestation(bytes32 uid) external view returns (Attestation memory);\\n\\n    /**\\n     * @dev Checks whether an attestation exists.\\n     *\\n     * @param uid The UID of the attestation to retrieve.\\n     *\\n     * @return Whether an attestation exists.\\n     */\\n    function isAttestationValid(bytes32 uid) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the timestamp that the specified data was timestamped with.\\n     *\\n     * @param data The data to query.\\n     *\\n     * @return The timestamp the data was timestamped with.\\n     */\\n    function getTimestamp(bytes32 data) external view returns (uint64);\\n\\n    /**\\n     * @dev Returns the timestamp that the specified data was timestamped with.\\n     *\\n     * @param data The data to query.\\n     *\\n     * @return The timestamp the data was timestamped with.\\n     */\\n    function getRevokeOffchain(address revoker, bytes32 data) external view returns (uint64);\\n}\\n\",\"keccak256\":\"0xd530be686226f3c8d7b02bb59797901620f64749a02228539afc8b082a1ee036\",\"license\":\"MIT\"},\"@ethereum-attestation-service/eas-contracts/contracts/ISchemaRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { ISchemaResolver } from \\\"./resolver/ISchemaResolver.sol\\\";\\n\\n/**\\n * @title A struct representing a record for a submitted schema.\\n */\\nstruct SchemaRecord {\\n    bytes32 uid; // The unique identifier of the schema.\\n    ISchemaResolver resolver; // Optional schema resolver.\\n    bool revocable; // Whether the schema allows revocations explicitly.\\n    string schema; // Custom specification of the schema (e.g., an ABI).\\n}\\n\\n/**\\n * @title The global schema registry interface.\\n */\\ninterface ISchemaRegistry {\\n    /**\\n     * @dev Emitted when a new schema has been registered\\n     *\\n     * @param uid The schema UID.\\n     * @param registerer The address of the account used to register the schema.\\n     */\\n    event Registered(bytes32 indexed uid, address registerer);\\n\\n    /**\\n     * @dev Submits and reserves a new schema\\n     *\\n     * @param schema The schema data schema.\\n     * @param resolver An optional schema resolver.\\n     * @param revocable Whether the schema allows revocations explicitly.\\n     *\\n     * @return The UID of the new schema.\\n     */\\n    function register(string calldata schema, ISchemaResolver resolver, bool revocable) external returns (bytes32);\\n\\n    /**\\n     * @dev Returns an existing schema by UID\\n     *\\n     * @param uid The UID of the schema to retrieve.\\n     *\\n     * @return The schema data members.\\n     */\\n    function getSchema(bytes32 uid) external view returns (SchemaRecord memory);\\n}\\n\",\"keccak256\":\"0xef47e449dd02bd034e26b1dea505ce533906f8462fc674c938ed0e872a68d640\",\"license\":\"MIT\"},\"@ethereum-attestation-service/eas-contracts/contracts/resolver/ISchemaResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { Attestation } from \\\"../Common.sol\\\";\\n\\n/**\\n * @title The interface of an optional schema resolver.\\n */\\ninterface ISchemaResolver {\\n    /**\\n     * @dev Returns whether the resolver supports ETH transfers.\\n     */\\n    function isPayable() external pure returns (bool);\\n\\n    /**\\n     * @dev Processes an attestation and verifies whether it's valid.\\n     *\\n     * @param attestation The new attestation.\\n     *\\n     * @return Whether the attestation is valid.\\n     */\\n    function attest(Attestation calldata attestation) external payable returns (bool);\\n\\n    /**\\n     * @dev Processes multiple attestations and verifies whether they are valid.\\n     *\\n     * @param attestations The new attestations.\\n     * @param values Explicit ETH amounts which were sent with each attestation.\\n     *\\n     * @return Whether all the attestations are valid.\\n     */\\n    function multiAttest(\\n        Attestation[] calldata attestations,\\n        uint256[] calldata values\\n    ) external payable returns (bool);\\n\\n    /**\\n     * @dev Processes an attestation revocation and verifies if it can be revoked.\\n     *\\n     * @param attestation The existing attestation to be revoked.\\n     *\\n     * @return Whether the attestation can be revoked.\\n     */\\n    function revoke(Attestation calldata attestation) external payable returns (bool);\\n\\n    /**\\n     * @dev Processes revocation of multiple attestation and verifies they can be revoked.\\n     *\\n     * @param attestations The existing attestations to be revoked.\\n     * @param values Explicit ETH amounts which were sent with each revocation.\\n     *\\n     * @return Whether the attestations can be revoked.\\n     */\\n    function multiRevoke(\\n        Attestation[] calldata attestations,\\n        uint256[] calldata values\\n    ) external payable returns (bool);\\n}\\n\",\"keccak256\":\"0xc628c6540da258f76192eaa34c21699c9cbcc4a4029d7ee04e88dc9c18c981fd\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x4075622496acc77fd6d4de4cc30a8577a744d5c75afad33fdeacf1704d6eda98\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/IERC5267Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC5267.sol)\\n\\npragma solidity ^0.8.0;\\n\\ninterface IERC5267Upgradeable {\\n    /**\\n     * @dev MAY be emitted to signal that the domain could have changed.\\n     */\\n    event EIP712DomainChanged();\\n\\n    /**\\n     * @dev returns the fields and values that describe the domain separator used by this contract for EIP-712\\n     * signature.\\n     */\\n    function eip712Domain()\\n        external\\n        view\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        );\\n}\\n\",\"keccak256\":\"0xe562dab443278837fa50faddb76743399e942181881db8dccaea3bd1712994db\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\nimport \\\"./math/SignedMathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMathUpgradeable.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0xb96dc79b65b7c37937919dcdb356a969ce0aa2e8338322bf4dc027a3c9c9a7eb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../StringsUpgradeable.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSAUpgradeable {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\")\\n            mstore(0x1c, hash)\\n            message := keccak256(0x00, 0x3c)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", StringsUpgradeable.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, \\\"\\\\x19\\\\x01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            data := keccak256(ptr, 0x42)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\\n     * `validator` and `data` according to the version 0 of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x00\\\", validator, data));\\n    }\\n}\\n\",\"keccak256\":\"0xa014f65d84b02827055d99993ccdbfb4b56b2c9e91eb278d82a93330659d06e4\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/EIP712.sol)\\n\\npragma solidity ^0.8.8;\\n\\nimport \\\"./ECDSAUpgradeable.sol\\\";\\nimport \\\"../../interfaces/IERC5267Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain\\n * separator of the implementation contract. This will cause the `_domainSeparatorV4` function to always rebuild the\\n * separator from the immutable values, which is cheaper than accessing a cached version in cold storage.\\n *\\n * _Available since v3.4._\\n *\\n * @custom:storage-size 52\\n */\\nabstract contract EIP712Upgradeable is Initializable, IERC5267Upgradeable {\\n    bytes32 private constant _TYPE_HASH =\\n        keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n\\n    /// @custom:oz-renamed-from _HASHED_NAME\\n    bytes32 private _hashedName;\\n    /// @custom:oz-renamed-from _HASHED_VERSION\\n    bytes32 private _hashedVersion;\\n\\n    string private _name;\\n    string private _version;\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    function __EIP712_init(string memory name, string memory version) internal onlyInitializing {\\n        __EIP712_init_unchained(name, version);\\n    }\\n\\n    function __EIP712_init_unchained(string memory name, string memory version) internal onlyInitializing {\\n        _name = name;\\n        _version = version;\\n\\n        // Reset prior values in storage if upgrading\\n        _hashedName = 0;\\n        _hashedVersion = 0;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        return _buildDomainSeparator();\\n    }\\n\\n    function _buildDomainSeparator() private view returns (bytes32) {\\n        return keccak256(abi.encode(_TYPE_HASH, _EIP712NameHash(), _EIP712VersionHash(), block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSAUpgradeable.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n\\n    /**\\n     * @dev See {EIP-5267}.\\n     *\\n     * _Available since v4.9._\\n     */\\n    function eip712Domain()\\n        public\\n        view\\n        virtual\\n        override\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        )\\n    {\\n        // If the hashed name and version in storage are non-zero, the contract hasn't been properly initialized\\n        // and the EIP712 domain is not reliable, as it will be missing name and version.\\n        require(_hashedName == 0 && _hashedVersion == 0, \\\"EIP712: Uninitialized\\\");\\n\\n        return (\\n            hex\\\"0f\\\", // 01111\\n            _EIP712Name(),\\n            _EIP712Version(),\\n            block.chainid,\\n            address(this),\\n            bytes32(0),\\n            new uint256[](0)\\n        );\\n    }\\n\\n    /**\\n     * @dev The name parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712Name() internal virtual view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev The version parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712Version() internal virtual view returns (string memory) {\\n        return _version;\\n    }\\n\\n    /**\\n     * @dev The hash of the name parameter for the EIP712 domain.\\n     *\\n     * NOTE: In previous versions this function was virtual. In this version you should override `_EIP712Name` instead.\\n     */\\n    function _EIP712NameHash() internal view returns (bytes32) {\\n        string memory name = _EIP712Name();\\n        if (bytes(name).length > 0) {\\n            return keccak256(bytes(name));\\n        } else {\\n            // If the name is empty, the contract may have been upgraded without initializing the new storage.\\n            // We return the name hash in storage if non-zero, otherwise we assume the name is empty by design.\\n            bytes32 hashedName = _hashedName;\\n            if (hashedName != 0) {\\n                return hashedName;\\n            } else {\\n                return keccak256(\\\"\\\");\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev The hash of the version parameter for the EIP712 domain.\\n     *\\n     * NOTE: In previous versions this function was virtual. In this version you should override `_EIP712Version` instead.\\n     */\\n    function _EIP712VersionHash() internal view returns (bytes32) {\\n        string memory version = _EIP712Version();\\n        if (bytes(version).length > 0) {\\n            return keccak256(bytes(version));\\n        } else {\\n            // If the version is empty, the contract may have been upgraded without initializing the new storage.\\n            // We return the version hash in storage if non-zero, otherwise we assume the version is empty by design.\\n            bytes32 hashedVersion = _hashedVersion;\\n            if (hashedVersion != 0) {\\n                return hashedVersion;\\n            } else {\\n                return keccak256(\\\"\\\");\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[48] private __gap;\\n}\\n\",\"keccak256\":\"0xeb8d6be406a373771724922eb41b5d593bc8e2dc705daa22cd1145cfc8f5a3a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2bc0007987c229ae7624eb29be6a9b84f6a6a5872f76248b15208b131ea41c4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMathUpgradeable {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x88f6b7bba3ee33eeb741f9a0f5bc98b6e6e352d0fe4905377bb328590f84095a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0dd6e52cb394d7f5abe5dca2d4908a6be40417914720932de757de34a99ab87f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/Gap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\n\\nimport {IEAS, Attestation, AttestationRequest, AttestationRequestData, MultiAttestationRequest, MultiRevocationRequest} from \\\"@ethereum-attestation-service/eas-contracts/contracts/IEAS.sol\\\";\\n\\ncontract Gap is Initializable, OwnableUpgradeable, EIP712Upgradeable {\\n    IEAS public eas;\\n    mapping(address => uint256) public nonces;\\n\\n    bytes32 public constant ATTEST_TYPEHASH =\\n        keccak256(\\\"Attest(string payloadHash,uint256 nonce,uint256 expiry)\\\");\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    struct AttestationRequestNode {\\n        bytes32 uid;\\n        MultiAttestationRequest multiRequest;\\n        uint256 refIdx;\\n    }\\n\\n    function initialize(address easAddr) public initializer {\\n        eas = IEAS(easAddr);\\n        __EIP712_init(\\\"gap-attestation\\\", \\\"1.0\\\");\\n        __Ownable_init();\\n    }\\n\\n    ///\\n    /// Verify if msg.sender owns the referenced attestation\\n    ///\\n    function validateCanAttestToRef(bytes32 uid) private view {\\n        Attestation memory ref = eas.getAttestation(uid);\\n        require(\\n            ref.attester == msg.sender || ref.recipient == msg.sender,\\n            \\\"Not owner.\\\"\\n        );\\n    }\\n\\n    ///\\n    /// Verify if msg.sender owns the set of attestations\\n    ///\\n    function validateCanAttestToRefs(\\n        AttestationRequestData[] memory datas\\n    ) private view {\\n        for (uint256 j = 0; j < datas.length; j++) {\\n            if (datas[j].refUID != bytes32(0)) {\\n                validateCanAttestToRef(datas[j].refUID);\\n            }\\n        }\\n    }\\n\\n    function _recoverSignerAddress(\\n        string memory payloadHash,\\n        uint256 nonce,\\n        uint256 expiry,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public view returns (address signer) {\\n        bytes32 digest = _hashTypedDataV4(\\n            keccak256(\\n                abi.encode(\\n                    ATTEST_TYPEHASH,\\n                    keccak256(bytes(payloadHash)),\\n                    nonce,\\n                    expiry\\n                )\\n            )\\n        );\\n\\n        signer = ECDSAUpgradeable.recover(digest, v, r, s);\\n\\n        return (signer);\\n    }\\n\\n    ///\\n    /// Performs multi revoke by sig\\n    ///\\n    function multiRevokeBySig(\\n        MultiRevocationRequest[] calldata multiRequests,\\n        string memory payloadHash,\\n        address attester,\\n        uint256 nonce,\\n        uint256 expiry,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external virtual {\\n        require(block.timestamp <= expiry, \\\"Signature expired\\\");\\n\\n        address signer = _recoverSignerAddress(\\n            payloadHash,\\n            nonce,\\n            expiry,\\n            v,\\n            r,\\n            s\\n        );\\n\\n        require(\\n            signer == attester,\\n            \\\"Signer and attester addresses don't match.\\\"\\n        );\\n        require(nonce == nonces[signer]++, \\\"Invalid nonce\\\");\\n        this.multiRevoke(multiRequests);\\n    }\\n\\n    ///\\n    /// Revokes multiple attestations\\n    ///\\n    function multiRevoke(\\n        MultiRevocationRequest[] calldata multiRequests\\n    ) external payable {\\n        // Checks if every revoke request belongs to the sender\\n        // The sender can be either the attester or the recipient.\\n        for (uint256 i = 0; i < multiRequests.length; i++) {\\n            MultiRevocationRequest memory request = multiRequests[i];\\n            for (uint256 j = 0; j < request.data.length; j++) {\\n                Attestation memory target = eas.getAttestation(\\n                    request.data[j].uid\\n                );\\n\\n                require(\\n                    target.attester == msg.sender ||\\n                        target.recipient == msg.sender,\\n                    \\\"Not owner.\\\"\\n                );\\n            }\\n        }\\n        eas.multiRevoke(multiRequests);\\n    }\\n\\n    ///\\n    /// Performs a single attestation by signature\\n    ///\\n    function attestBySig(\\n        AttestationRequest calldata request,\\n        string memory payloadHash,\\n        address attester,\\n        uint256 nonce,\\n        uint256 expiry,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external virtual returns (bytes32) {\\n        require(block.timestamp <= expiry, \\\"Signature expired\\\");\\n\\n        address signer = _recoverSignerAddress(\\n            payloadHash,\\n            nonce,\\n            expiry,\\n            v,\\n            r,\\n            s\\n        );\\n        require(\\n            signer == attester,\\n            \\\"Signer and attester addresses don't match.\\\"\\n        );\\n        require(nonce == nonces[signer]++, \\\"Invalid nonce\\\");\\n        return this.attest(request);\\n    }\\n\\n    ///\\n    /// Perform a single attestation\\n    ///\\n    function attest(\\n        AttestationRequest calldata request\\n    ) external payable returns (bytes32) {\\n        AttestationRequestData[]\\n            memory requestData = new AttestationRequestData[](1);\\n        requestData[0] = request.data;\\n        validateCanAttestToRefs(requestData);\\n\\n        return eas.attest(request);\\n    }\\n\\n    ///\\n    /// Performs multi attestations by signature\\n    ///\\n    function multiAttestBySig(\\n        AttestationRequestNode[] calldata requestNodes,\\n        string memory payloadHash,\\n        address attester,\\n        uint256 nonce,\\n        uint256 expiry,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual {\\n        require(block.timestamp <= expiry, \\\"Signature expired\\\");\\n\\n        address signer = _recoverSignerAddress(\\n            payloadHash,\\n            nonce,\\n            expiry,\\n            v,\\n            r,\\n            s\\n        );\\n        require(\\n            signer == attester,\\n            \\\"Signer and attester addresses don't match.\\\"\\n        );\\n        require(nonce == nonces[signer]++, \\\"Invalid nonce\\\");\\n        multiSequentialAttest(requestNodes);\\n    }\\n\\n    ///\\n    /// Performs a multi attest with relations between attestations and\\n    /// assess for attesation permissions based on the parent attestation.\\n    /// If refUID is set in any attestation it will be ignored.\\n    ///\\n    function multiSequentialAttest(\\n        AttestationRequestNode[] calldata requestNodes\\n    ) public {\\n        bytes32[][] memory totalUids = new bytes32[][](requestNodes.length);\\n\\n        for (uint256 i = 0; i < requestNodes.length; i++) {\\n            MultiAttestationRequest memory request = requestNodes[i]\\n                .multiRequest;\\n            // If first item reference an attestation, checks if sender\\n            // is owner or attester of that attestation.\\n            validateCanAttestToRefs(request.data);\\n            // Updates the upcoming attestation reference uids.\\n            if (i > 0) {\\n                for (uint256 j = 0; j < request.data.length; j++) {\\n                    AttestationRequestData memory data = request.data[j];\\n                    // If a request already has a ref, should not change it.\\n                    if (data.refUID == bytes32(0)) {\\n                        data.refUID = totalUids[requestNodes[i].refIdx][0];\\n                        request.data[j] = data;\\n                    }\\n                }\\n            }\\n\\n            MultiAttestationRequest[]\\n                memory requests = new MultiAttestationRequest[](1);\\n            requests[0] = request;\\n            totalUids[i] = eas.multiAttest(requests);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x40689d28e9472da60181b4cb0bfea89f2453c5f75f949cd0261209e46b68ffe8\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":983,"contract":"contracts/Gap.sol:Gap","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":986,"contract":"contracts/Gap.sol:Gap","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":1516,"contract":"contracts/Gap.sol:Gap","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"},{"astId":830,"contract":"contracts/Gap.sol:Gap","label":"_owner","offset":0,"slot":"51","type":"t_address"},{"astId":950,"contract":"contracts/Gap.sol:Gap","label":"__gap","offset":0,"slot":"52","type":"t_array(t_uint256)49_storage"},{"astId":2130,"contract":"contracts/Gap.sol:Gap","label":"_hashedName","offset":0,"slot":"101","type":"t_bytes32"},{"astId":2133,"contract":"contracts/Gap.sol:Gap","label":"_hashedVersion","offset":0,"slot":"102","type":"t_bytes32"},{"astId":2135,"contract":"contracts/Gap.sol:Gap","label":"_name","offset":0,"slot":"103","type":"t_string_storage"},{"astId":2137,"contract":"contracts/Gap.sol:Gap","label":"_version","offset":0,"slot":"104","type":"t_string_storage"},{"astId":2395,"contract":"contracts/Gap.sol:Gap","label":"__gap","offset":0,"slot":"105","type":"t_array(t_uint256)48_storage"},{"astId":5207,"contract":"contracts/Gap.sol:Gap","label":"eas","offset":0,"slot":"153","type":"t_contract(IEAS)346"},{"astId":5211,"contract":"contracts/Gap.sol:Gap","label":"nonces","offset":0,"slot":"154","type":"t_mapping(t_address,t_uint256)"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_uint256)48_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[48]","numberOfBytes":"1536"},"t_array(t_uint256)49_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[49]","numberOfBytes":"1568"},"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_contract(IEAS)346":{"encoding":"inplace","label":"contract IEAS","numberOfBytes":"20"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{"attest((bytes32,(address,uint64,bool,bytes32,bytes,uint256)))":{"notice":" Perform a single attestation"},"attestBySig((bytes32,(address,uint64,bool,bytes32,bytes,uint256)),string,address,uint256,uint256,uint8,bytes32,bytes32)":{"notice":" Performs a single attestation by signature"},"multiAttestBySig((bytes32,(bytes32,(address,uint64,bool,bytes32,bytes,uint256)[]),uint256)[],string,address,uint256,uint256,uint8,bytes32,bytes32)":{"notice":" Performs multi attestations by signature"},"multiRevoke((bytes32,(bytes32,uint256)[])[])":{"notice":" Revokes multiple attestations"},"multiRevokeBySig((bytes32,(bytes32,uint256)[])[],string,address,uint256,uint256,uint8,bytes32,bytes32)":{"notice":" Performs multi revoke by sig"},"multiSequentialAttest((bytes32,(bytes32,(address,uint64,bool,bytes32,bytes,uint256)[]),uint256)[])":{"notice":" Performs a multi attest with relations between attestations and assess for attesation permissions based on the parent attestation. If refUID is set in any attestation it will be ignored."}},"version":1}}},"contracts/ICommunityResolver.sol":{"ICommunityResolver":{"abi":[{"inputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"bytes32","name":"schema","type":"bytes32"},{"internalType":"uint64","name":"time","type":"uint64"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"uint64","name":"revocationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Attestation","name":"attestation","type":"tuple"}],"name":"attest","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"communityUID","type":"bytes32"},{"internalType":"address","name":"addr","type":"address"}],"name":"isAdmin","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"isPayable","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"pure","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"bytes32","name":"schema","type":"bytes32"},{"internalType":"uint64","name":"time","type":"uint64"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"uint64","name":"revocationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Attestation[]","name":"attestations","type":"tuple[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"}],"name":"multiAttest","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"payable","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"bytes32","name":"schema","type":"bytes32"},{"internalType":"uint64","name":"time","type":"uint64"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"uint64","name":"revocationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Attestation[]","name":"attestations","type":"tuple[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"}],"name":"multiRevoke","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"payable","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"bytes32","name":"schema","type":"bytes32"},{"internalType":"uint64","name":"time","type":"uint64"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"uint64","name":"revocationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Attestation","name":"attestation","type":"tuple"}],"name":"revoke","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"payable","type":"function"}],"devdoc":{"kind":"dev","methods":{"attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))":{"details":"Processes an attestation and verifies whether it's valid.","params":{"attestation":"The new attestation."},"returns":{"_0":"Whether the attestation is valid."}},"isPayable()":{"details":"Returns whether the resolver supports ETH transfers."},"multiAttest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])":{"details":"Processes multiple attestations and verifies whether they are valid.","params":{"attestations":"The new attestations.","values":"Explicit ETH amounts which were sent with each attestation."},"returns":{"_0":"Whether all the attestations are valid."}},"multiRevoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])":{"details":"Processes revocation of multiple attestation and verifies they can be revoked.","params":{"attestations":"The existing attestations to be revoked.","values":"Explicit ETH amounts which were sent with each revocation."},"returns":{"_0":"Whether the attestations can be revoked."}},"revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))":{"details":"Processes an attestation revocation and verifies if it can be revoked.","params":{"attestation":"The existing attestation to be revoked."},"returns":{"_0":"Whether the attestation can be revoked."}}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))":"e60c3505","isAdmin(bytes32,address)":"b75dbb8e","isPayable()":"ce46e046","multiAttest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])":"91db0b7e","multiRevoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])":"88e5b2d9","revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))":"e49617e1"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"uid\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"schema\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"time\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"expirationTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"revocationTime\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"refUID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"attester\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"revocable\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct Attestation\",\"name\":\"attestation\",\"type\":\"tuple\"}],\"name\":\"attest\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"communityUID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPayable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"uid\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"schema\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"time\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"expirationTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"revocationTime\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"refUID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"attester\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"revocable\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct Attestation[]\",\"name\":\"attestations\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"multiAttest\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"uid\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"schema\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"time\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"expirationTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"revocationTime\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"refUID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"attester\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"revocable\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct Attestation[]\",\"name\":\"attestations\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"multiRevoke\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"uid\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"schema\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"time\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"expirationTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"revocationTime\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"refUID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"attester\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"revocable\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct Attestation\",\"name\":\"attestation\",\"type\":\"tuple\"}],\"name\":\"revoke\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))\":{\"details\":\"Processes an attestation and verifies whether it's valid.\",\"params\":{\"attestation\":\"The new attestation.\"},\"returns\":{\"_0\":\"Whether the attestation is valid.\"}},\"isPayable()\":{\"details\":\"Returns whether the resolver supports ETH transfers.\"},\"multiAttest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])\":{\"details\":\"Processes multiple attestations and verifies whether they are valid.\",\"params\":{\"attestations\":\"The new attestations.\",\"values\":\"Explicit ETH amounts which were sent with each attestation.\"},\"returns\":{\"_0\":\"Whether all the attestations are valid.\"}},\"multiRevoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])\":{\"details\":\"Processes revocation of multiple attestation and verifies they can be revoked.\",\"params\":{\"attestations\":\"The existing attestations to be revoked.\",\"values\":\"Explicit ETH amounts which were sent with each revocation.\"},\"returns\":{\"_0\":\"Whether the attestations can be revoked.\"}},\"revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))\":{\"details\":\"Processes an attestation revocation and verifies if it can be revoked.\",\"params\":{\"attestation\":\"The existing attestation to be revoked.\"},\"returns\":{\"_0\":\"Whether the attestation can be revoked.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ICommunityResolver.sol\":\"ICommunityResolver\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@ethereum-attestation-service/eas-contracts/contracts/Common.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// A representation of an empty/uninitialized UID.\\nbytes32 constant EMPTY_UID = 0;\\n\\n// A zero expiration represents an non-expiring attestation.\\nuint64 constant NO_EXPIRATION_TIME = 0;\\n\\nerror AccessDenied();\\nerror InvalidEAS();\\nerror InvalidLength();\\nerror InvalidSignature();\\nerror NotFound();\\n\\n/**\\n * @dev A struct representing EIP712 signature data.\\n */\\nstruct EIP712Signature {\\n    uint8 v; // The recovery ID.\\n    bytes32 r; // The x-coordinate of the nonce R.\\n    bytes32 s; // The signature data.\\n}\\n\\n/**\\n * @dev A struct representing a single attestation.\\n */\\nstruct Attestation {\\n    bytes32 uid; // A unique identifier of the attestation.\\n    bytes32 schema; // The unique identifier of the schema.\\n    uint64 time; // The time when the attestation was created (Unix timestamp).\\n    uint64 expirationTime; // The time when the attestation expires (Unix timestamp).\\n    uint64 revocationTime; // The time when the attestation was revoked (Unix timestamp).\\n    bytes32 refUID; // The UID of the related attestation.\\n    address recipient; // The recipient of the attestation.\\n    address attester; // The attester/sender of the attestation.\\n    bool revocable; // Whether the attestation is revocable.\\n    bytes data; // Custom attestation data.\\n}\\n\\n/**\\n * @dev A helper function to work with unchecked iterators in loops.\\n */\\nfunction uncheckedInc(uint256 i) pure returns (uint256 j) {\\n    unchecked {\\n        j = i + 1;\\n    }\\n}\\n\",\"keccak256\":\"0x4bab9ec76bdb009e9fb505c45a679d39c9e80771eb13ed901029a1068025752a\",\"license\":\"MIT\"},\"@ethereum-attestation-service/eas-contracts/contracts/resolver/ISchemaResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { Attestation } from \\\"../Common.sol\\\";\\n\\n/**\\n * @title The interface of an optional schema resolver.\\n */\\ninterface ISchemaResolver {\\n    /**\\n     * @dev Returns whether the resolver supports ETH transfers.\\n     */\\n    function isPayable() external pure returns (bool);\\n\\n    /**\\n     * @dev Processes an attestation and verifies whether it's valid.\\n     *\\n     * @param attestation The new attestation.\\n     *\\n     * @return Whether the attestation is valid.\\n     */\\n    function attest(Attestation calldata attestation) external payable returns (bool);\\n\\n    /**\\n     * @dev Processes multiple attestations and verifies whether they are valid.\\n     *\\n     * @param attestations The new attestations.\\n     * @param values Explicit ETH amounts which were sent with each attestation.\\n     *\\n     * @return Whether all the attestations are valid.\\n     */\\n    function multiAttest(\\n        Attestation[] calldata attestations,\\n        uint256[] calldata values\\n    ) external payable returns (bool);\\n\\n    /**\\n     * @dev Processes an attestation revocation and verifies if it can be revoked.\\n     *\\n     * @param attestation The existing attestation to be revoked.\\n     *\\n     * @return Whether the attestation can be revoked.\\n     */\\n    function revoke(Attestation calldata attestation) external payable returns (bool);\\n\\n    /**\\n     * @dev Processes revocation of multiple attestation and verifies they can be revoked.\\n     *\\n     * @param attestations The existing attestations to be revoked.\\n     * @param values Explicit ETH amounts which were sent with each revocation.\\n     *\\n     * @return Whether the attestations can be revoked.\\n     */\\n    function multiRevoke(\\n        Attestation[] calldata attestations,\\n        uint256[] calldata values\\n    ) external payable returns (bool);\\n}\\n\",\"keccak256\":\"0xc628c6540da258f76192eaa34c21699c9cbcc4a4029d7ee04e88dc9c18c981fd\",\"license\":\"MIT\"},\"contracts/ICommunityResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.19;\\r\\n\\r\\nimport {ISchemaResolver} from \\\"@ethereum-attestation-service/eas-contracts/contracts/resolver/ISchemaResolver.sol\\\";\\r\\n\\r\\ninterface ICommunityResolver is ISchemaResolver {\\r\\n    function isAdmin(bytes32 communityUID, address addr) external returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0xac3da8fd583300ed75ec80ae1118adfcced241220b19ecc30083a277fc57e46b\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/MilestoneStatusResolver.sol":{"MilestoneStatusResolver":{"abi":[{"inputs":[{"internalType":"contract IEAS","name":"eas","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"AccessDenied","type":"error"},{"inputs":[],"name":"InsufficientValue","type":"error"},{"inputs":[],"name":"InvalidEAS","type":"error"},{"inputs":[],"name":"NotPayable","type":"error"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"bytes32","name":"schema","type":"bytes32"},{"internalType":"uint64","name":"time","type":"uint64"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"uint64","name":"revocationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Attestation","name":"attestation","type":"tuple"}],"name":"attest","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"contract ICommunityResolver","name":"resolver","type":"address"}],"name":"changeCommunityResolver","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes","name":"grantData","type":"bytes"}],"name":"getGrantCommunityUID","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"bytes","name":"milestoneData","type":"bytes"}],"name":"getMilestoneApprovalType","outputs":[{"internalType":"bytes32","name":"typeHash","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"contract ICommunityResolver","name":"resolver","type":"address"}],"name":"initialize","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"isPayable","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"pure","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"bytes32","name":"schema","type":"bytes32"},{"internalType":"uint64","name":"time","type":"uint64"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"uint64","name":"revocationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Attestation[]","name":"attestations","type":"tuple[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"}],"name":"multiAttest","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"payable","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"bytes32","name":"schema","type":"bytes32"},{"internalType":"uint64","name":"time","type":"uint64"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"uint64","name":"revocationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Attestation[]","name":"attestations","type":"tuple[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"}],"name":"multiRevoke","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"bytes32","name":"schema","type":"bytes32"},{"internalType":"uint64","name":"time","type":"uint64"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"uint64","name":"revocationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Attestation","name":"attestation","type":"tuple"}],"name":"revoke","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"version","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"stateMutability":"payable","type":"receive"}],"devdoc":{"events":{"Initialized(uint8)":{"details":"Triggered when the contract has been initialized or reinitialized."}},"kind":"dev","methods":{"attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))":{"details":"Processes an attestation and verifies whether it's valid.","params":{"attestation":"The new attestation."},"returns":{"_0":"Whether the attestation is valid."}},"constructor":{"custom:oz-upgrades-unsafe-allow":"constructor"},"getGrantCommunityUID(bytes)":{"returns":{"_0":"the referred community UID"}},"getMilestoneApprovalType(bytes)":{"returns":{"typeHash":"\"approved\" | \"rejected\" | \"completed\""}},"isPayable()":{"details":"Returns whether the resolver supports ETH transfers."},"multiAttest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])":{"details":"Processes multiple attestations and verifies whether they are valid.","params":{"attestations":"The new attestations.","values":"Explicit ETH amounts which were sent with each attestation."},"returns":{"_0":"Whether all the attestations are valid."}},"multiRevoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])":{"details":"Processes revocation of multiple attestation and verifies they can be revoked.","params":{"attestations":"The existing attestations to be revoked.","values":"Explicit ETH amounts which were sent with each revocation."},"returns":{"_0":"Whether the attestations can be revoked."}},"owner()":{"details":"Returns the address of the current owner."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."},"revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))":{"details":"Processes an attestation revocation and verifies if it can be revoked.","params":{"attestation":"The existing attestation to be revoked."},"returns":{"_0":"Whether the attestation can be revoked."}},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."},"version()":{"returns":{"_0":"Semver contract version as a string."}}},"version":1},"evm":{"bytecode":{"functionDebugData":{"@_425":{"entryPoint":null,"id":425,"parameterSlots":3,"returnSlots":0},"@_567":{"entryPoint":null,"id":567,"parameterSlots":1,"returnSlots":0},"@_5874":{"entryPoint":null,"id":5874,"parameterSlots":1,"returnSlots":0},"@_disableInitializers_1126":{"entryPoint":138,"id":1126,"parameterSlots":0,"returnSlots":0},"abi_decode_tuple_t_contract$_IEAS_$346_fromMemory":{"entryPoint":331,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:915:29","statements":[{"nodeType":"YulBlock","src":"6:3:29","statements":[]},{"body":{"nodeType":"YulBlock","src":"107:209:29","statements":[{"body":{"nodeType":"YulBlock","src":"153:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"162:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"165:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"155:6:29"},"nodeType":"YulFunctionCall","src":"155:12:29"},"nodeType":"YulExpressionStatement","src":"155:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"128:7:29"},{"name":"headStart","nodeType":"YulIdentifier","src":"137:9:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"124:3:29"},"nodeType":"YulFunctionCall","src":"124:23:29"},{"kind":"number","nodeType":"YulLiteral","src":"149:2:29","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"120:3:29"},"nodeType":"YulFunctionCall","src":"120:32:29"},"nodeType":"YulIf","src":"117:52:29"},{"nodeType":"YulVariableDeclaration","src":"178:29:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"197:9:29"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"191:5:29"},"nodeType":"YulFunctionCall","src":"191:16:29"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"182:5:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"270:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"279:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"282:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"272:6:29"},"nodeType":"YulFunctionCall","src":"272:12:29"},"nodeType":"YulExpressionStatement","src":"272:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"229:5:29"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"240:5:29"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"255:3:29","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"260:1:29","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"251:3:29"},"nodeType":"YulFunctionCall","src":"251:11:29"},{"kind":"number","nodeType":"YulLiteral","src":"264:1:29","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"247:3:29"},"nodeType":"YulFunctionCall","src":"247:19:29"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"236:3:29"},"nodeType":"YulFunctionCall","src":"236:31:29"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"226:2:29"},"nodeType":"YulFunctionCall","src":"226:42:29"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"219:6:29"},"nodeType":"YulFunctionCall","src":"219:50:29"},"nodeType":"YulIf","src":"216:70:29"},{"nodeType":"YulAssignment","src":"295:15:29","value":{"name":"value","nodeType":"YulIdentifier","src":"305:5:29"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"295:6:29"}]}]},"name":"abi_decode_tuple_t_contract$_IEAS_$346_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"73:9:29","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"84:7:29","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"96:6:29","type":""}],"src":"14:302:29"},{"body":{"nodeType":"YulBlock","src":"495:229:29","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"512:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"523:2:29","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"505:6:29"},"nodeType":"YulFunctionCall","src":"505:21:29"},"nodeType":"YulExpressionStatement","src":"505:21:29"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"546:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"557:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"542:3:29"},"nodeType":"YulFunctionCall","src":"542:18:29"},{"kind":"number","nodeType":"YulLiteral","src":"562:2:29","type":"","value":"39"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"535:6:29"},"nodeType":"YulFunctionCall","src":"535:30:29"},"nodeType":"YulExpressionStatement","src":"535:30:29"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"585:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"596:2:29","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"581:3:29"},"nodeType":"YulFunctionCall","src":"581:18:29"},{"hexValue":"496e697469616c697a61626c653a20636f6e747261637420697320696e697469","kind":"string","nodeType":"YulLiteral","src":"601:34:29","type":"","value":"Initializable: contract is initi"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"574:6:29"},"nodeType":"YulFunctionCall","src":"574:62:29"},"nodeType":"YulExpressionStatement","src":"574:62:29"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"656:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"667:2:29","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"652:3:29"},"nodeType":"YulFunctionCall","src":"652:18:29"},{"hexValue":"616c697a696e67","kind":"string","nodeType":"YulLiteral","src":"672:9:29","type":"","value":"alizing"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"645:6:29"},"nodeType":"YulFunctionCall","src":"645:37:29"},"nodeType":"YulExpressionStatement","src":"645:37:29"},{"nodeType":"YulAssignment","src":"691:27:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"703:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"714:3:29","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"699:3:29"},"nodeType":"YulFunctionCall","src":"699:19:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"691:4:29"}]}]},"name":"abi_encode_tuple_t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"472:9:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"486:4:29","type":""}],"src":"321:403:29"},{"body":{"nodeType":"YulBlock","src":"826:87:29","statements":[{"nodeType":"YulAssignment","src":"836:26:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"848:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"859:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"844:3:29"},"nodeType":"YulFunctionCall","src":"844:18:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"836:4:29"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"878:9:29"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"893:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"901:4:29","type":"","value":"0xff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"889:3:29"},"nodeType":"YulFunctionCall","src":"889:17:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"871:6:29"},"nodeType":"YulFunctionCall","src":"871:36:29"},"nodeType":"YulExpressionStatement","src":"871:36:29"}]},"name":"abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"795:9:29","type":""},{"name":"value0","nodeType":"YulTypedName","src":"806:6:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"817:4:29","type":""}],"src":"729:184:29"}]},"contents":"{\n    { }\n    function abi_decode_tuple_t_contract$_IEAS_$346_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 39)\n        mstore(add(headStart, 64), \"Initializable: contract is initi\")\n        mstore(add(headStart, 96), \"alizing\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xff))\n    }\n}","id":29,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"","opcodes":"PUSH2 0x100 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x12 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x19C6 CODESIZE SUB DUP1 PUSH3 0x19C6 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x35 SWAP2 PUSH3 0x14B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x80 MSTORE PUSH1 0x0 PUSH1 0xA0 DUP2 SWAP1 MSTORE PUSH1 0xC0 MSTORE DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH3 0x6D JUMPI PUSH1 0x40 MLOAD PUSH4 0x41BC07FF PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0xE0 MSTORE PUSH3 0x83 PUSH3 0x8A JUMP JUMPDEST POP PUSH3 0x17D JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH3 0xF7 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x27 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E747261637420697320696E697469 PUSH1 0x44 DUP3 ADD MSTORE PUSH7 0x616C697A696E67 PUSH1 0xC8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 SLOAD PUSH1 0xFF SWAP1 DUP2 AND EQ PUSH3 0x149 JUMPI PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0xFF SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH32 0x7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0x15E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH3 0x176 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x80 MLOAD PUSH1 0xA0 MLOAD PUSH1 0xC0 MLOAD PUSH1 0xE0 MLOAD PUSH2 0x17FA PUSH3 0x1CC PUSH1 0x0 CODECOPY PUSH1 0x0 DUP2 DUP2 PUSH2 0xA41 ADD MSTORE DUP2 DUP2 PUSH2 0xB5F ADD MSTORE DUP2 DUP2 PUSH2 0xCB4 ADD MSTORE PUSH2 0xEE8 ADD MSTORE PUSH1 0x0 PUSH2 0x3AC ADD MSTORE PUSH1 0x0 PUSH2 0x383 ADD MSTORE PUSH1 0x0 PUSH2 0x35A ADD MSTORE PUSH2 0x17FA PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0xD6 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xC4D66DE8 GT PUSH2 0x7F JUMPI DUP1 PUSH4 0xE49617E1 GT PUSH2 0x59 JUMPI DUP1 PUSH4 0xE49617E1 EQ PUSH2 0x230 JUMPI DUP1 PUSH4 0xE60C3505 EQ PUSH2 0x243 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x256 JUMPI DUP1 PUSH4 0xF39F43E3 EQ PUSH2 0x276 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xC4D66DE8 EQ PUSH2 0x1DC JUMPI DUP1 PUSH4 0xCD2C78B8 EQ PUSH2 0x1FC JUMPI DUP1 PUSH4 0xCE46E046 EQ PUSH2 0x21C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x88E5B2D9 GT PUSH2 0xB0 JUMPI DUP1 PUSH4 0x88E5B2D9 EQ PUSH2 0x17E JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x1A1 JUMPI DUP1 PUSH4 0x91DB0B7E EQ PUSH2 0x1C9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x4A47BB60 EQ PUSH2 0x114 JUMPI DUP1 PUSH4 0x54FD4D50 EQ PUSH2 0x147 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x169 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLDATASIZE PUSH2 0x10F JUMPI PUSH1 0x40 MLOAD PUSH32 0x1574F9F300000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST STOP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x120 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x134 PUSH2 0x12F CALLDATASIZE PUSH1 0x4 PUSH2 0x12BA JUMP JUMPDEST PUSH2 0x296 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x153 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x15C PUSH2 0x353 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x13E SWAP2 SWAP1 PUSH2 0x135E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x175 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x10D PUSH2 0x3F6 JUMP JUMPDEST PUSH2 0x191 PUSH2 0x18C CALLDATASIZE PUSH1 0x4 PUSH2 0x13DD JUMP JUMPDEST PUSH2 0x40A JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x13E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1AD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x33 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x13E JUMP JUMPDEST PUSH2 0x191 PUSH2 0x1D7 CALLDATASIZE PUSH1 0x4 PUSH2 0x13DD JUMP JUMPDEST PUSH2 0x4B9 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1E8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x10D PUSH2 0x1F7 CALLDATASIZE PUSH1 0x4 PUSH2 0x145E JUMP JUMPDEST PUSH2 0x558 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x208 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x134 PUSH2 0x217 CALLDATASIZE PUSH1 0x4 PUSH2 0x12BA JUMP JUMPDEST PUSH2 0x77E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x228 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x0 PUSH2 0x191 JUMP JUMPDEST PUSH2 0x191 PUSH2 0x23E CALLDATASIZE PUSH1 0x4 PUSH2 0x147B JUMP JUMPDEST PUSH2 0x79A JUMP JUMPDEST PUSH2 0x191 PUSH2 0x251 CALLDATASIZE PUSH1 0x4 PUSH2 0x147B JUMP JUMPDEST PUSH2 0x7B0 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x262 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x10D PUSH2 0x271 CALLDATASIZE PUSH1 0x4 PUSH2 0x145E JUMP JUMPDEST PUSH2 0x7C4 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x282 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x10D PUSH2 0x291 CALLDATASIZE PUSH1 0x4 PUSH2 0x145E JUMP JUMPDEST PUSH2 0x854 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x2AD SWAP2 SWAP1 PUSH2 0x14FC JUMP JUMPDEST POP SWAP1 POP DUP1 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x2C1 SWAP2 SWAP1 PUSH2 0x1560 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP2 POP PUSH1 0x67 SLOAD DUP3 EQ ISZERO DUP1 ISZERO PUSH2 0x2ED JUMPI POP PUSH1 0x68 SLOAD DUP3 EQ ISZERO JUMPDEST DUP1 ISZERO PUSH2 0x2FB JUMPI POP PUSH1 0x69 SLOAD DUP3 EQ ISZERO JUMPDEST ISZERO PUSH2 0x34D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E76616C696420617070726F76616C20747970652E00000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x37E PUSH32 0x0 PUSH2 0x8DD JUMP JUMPDEST PUSH2 0x3A7 PUSH32 0x0 PUSH2 0x8DD JUMP JUMPDEST PUSH2 0x3D0 PUSH32 0x0 PUSH2 0x8DD JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x3E2 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x157C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x3FE PUSH2 0x97D JUMP JUMPDEST PUSH2 0x408 PUSH1 0x0 PUSH2 0x9D7 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH2 0x414 PUSH2 0xA36 JUMP JUMPDEST DUP4 CALLVALUE PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x4A9 JUMPI PUSH1 0x0 DUP7 DUP7 DUP4 DUP2 DUP2 LT PUSH2 0x435 JUMPI PUSH2 0x435 PUSH2 0x15F2 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD SWAP1 POP DUP3 DUP2 GT ISZERO PUSH2 0x45F JUMPI PUSH1 0x40 MLOAD PUSH4 0x44044A5 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x48C DUP10 DUP10 DUP5 DUP2 DUP2 LT PUSH2 0x474 JUMPI PUSH2 0x474 PUSH2 0x15F2 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0x486 SWAP2 SWAP1 PUSH2 0x1608 JUMP JUMPDEST POP PUSH1 0x1 SWAP1 JUMP JUMPDEST PUSH2 0x49D JUMPI PUSH1 0x0 SWAP5 POP POP POP POP POP PUSH2 0x4B1 JUMP JUMPDEST SWAP1 SWAP2 SUB SWAP1 PUSH1 0x1 ADD PUSH2 0x419 JUMP JUMPDEST POP PUSH1 0x1 SWAP3 POP POP POP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4C3 PUSH2 0xA36 JUMP JUMPDEST DUP4 CALLVALUE PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x4A9 JUMPI PUSH1 0x0 DUP7 DUP7 DUP4 DUP2 DUP2 LT PUSH2 0x4E4 JUMPI PUSH2 0x4E4 PUSH2 0x15F2 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD SWAP1 POP DUP3 DUP2 GT ISZERO PUSH2 0x50E JUMPI PUSH1 0x40 MLOAD PUSH4 0x44044A5 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x53B DUP10 DUP10 DUP5 DUP2 DUP2 LT PUSH2 0x523 JUMPI PUSH2 0x523 PUSH2 0x15F2 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0x535 SWAP2 SWAP1 PUSH2 0x1608 JUMP JUMPDEST DUP3 PUSH2 0xA98 JUMP JUMPDEST PUSH2 0x54C JUMPI PUSH1 0x0 SWAP5 POP POP POP POP POP PUSH2 0x4B1 JUMP JUMPDEST SWAP1 SWAP2 SUB SWAP1 PUSH1 0x1 ADD PUSH2 0x4C8 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND ISZERO DUP1 DUP1 ISZERO PUSH2 0x578 JUMPI POP PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0xFF SWAP1 SWAP2 AND LT JUMPDEST DUP1 PUSH2 0x592 JUMPI POP ADDRESS EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x592 JUMPI POP PUSH1 0x0 SLOAD PUSH1 0xFF AND PUSH1 0x1 EQ JUMPDEST PUSH2 0x604 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E747261637420697320616C726561 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x647920696E697469616C697A6564000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x344 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE DUP1 ISZERO PUSH2 0x627 JUMPI PUSH1 0x0 DUP1 SLOAD PUSH2 0xFF00 NOT AND PUSH2 0x100 OR SWAP1 SSTORE JUMPDEST PUSH1 0x65 DUP1 SLOAD CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT SWAP2 DUP3 AND OR SWAP1 SWAP2 SSTORE PUSH1 0x66 DUP1 SLOAD SWAP1 SWAP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND OR SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH32 0x617070726F766564000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x28 ADD PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB PUSH1 0x1F NOT ADD DUP2 MSTORE SWAP1 DUP3 SWAP1 MSTORE DUP1 MLOAD PUSH1 0x20 SWAP2 DUP3 ADD KECCAK256 PUSH1 0x67 SSTORE PUSH32 0x636F6D706C657465640000000000000000000000000000000000000000000000 SWAP1 DUP3 ADD MSTORE PUSH1 0x29 ADD PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB PUSH1 0x1F NOT ADD DUP2 MSTORE SWAP1 DUP3 SWAP1 MSTORE DUP1 MLOAD PUSH1 0x20 SWAP2 DUP3 ADD KECCAK256 PUSH1 0x68 SSTORE PUSH32 0x72656A6563746564000000000000000000000000000000000000000000000000 SWAP1 DUP3 ADD MSTORE PUSH1 0x28 ADD PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD KECCAK256 PUSH1 0x69 SSTORE PUSH2 0x734 PUSH2 0xFC0 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x77A JUMPI PUSH1 0x0 DUP1 SLOAD PUSH2 0xFF00 NOT AND SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH1 0x1 DUP2 MSTORE PUSH32 0x7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x794 SWAP2 SWAP1 PUSH2 0x161F JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x7A4 PUSH2 0xA36 JUMP JUMPDEST PUSH1 0x1 PUSH2 0x794 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x7BA PUSH2 0xA36 JUMP JUMPDEST PUSH2 0x794 DUP3 CALLVALUE PUSH2 0xA98 JUMP JUMPDEST PUSH2 0x7CC PUSH2 0x97D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x848 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6464726573730000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x344 JUMP JUMPDEST PUSH2 0x851 DUP2 PUSH2 0x9D7 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x65 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x8AE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xA PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E6F74206F776E65722E00000000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x344 JUMP JUMPDEST PUSH1 0x66 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x8EA DUP4 PUSH2 0x1033 JUMP JUMPDEST PUSH1 0x1 ADD SWAP1 POP PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x90A JUMPI PUSH2 0x90A PUSH2 0x1221 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x934 JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP DUP2 DUP2 ADD PUSH1 0x20 ADD JUMPDEST PUSH1 0x0 NOT ADD PUSH32 0x3031323334353637383961626364656600000000000000000000000000000000 PUSH1 0xA DUP7 MOD BYTE DUP2 MSTORE8 PUSH1 0xA DUP6 DIV SWAP5 POP DUP5 PUSH2 0x93E JUMPI POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x33 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x408 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x344 JUMP JUMPDEST PUSH1 0x33 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 MLOAD SWAP2 AND SWAP2 SWAP1 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP JUMP JUMPDEST CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND EQ PUSH2 0x408 JUMPI PUSH1 0x40 MLOAD PUSH32 0x4CA8886700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0xA0 DUP4 ADD CALLDATALOAD PUSH2 0xAEB JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E76616C6964207265666572726564206D696C6573746F6E65000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x344 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB38 PUSH2 0xAFE PUSH2 0x120 DUP7 ADD DUP7 PUSH2 0x1638 JUMP JUMPDEST DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP PUSH2 0x296 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x28C44A99 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0xA0 DUP7 ADD CALLDATALOAD PUSH1 0x4 DUP3 ADD MSTORE SWAP1 SWAP2 POP PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND SWAP1 PUSH4 0xA3112A64 SWAP1 PUSH1 0x24 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xBA6 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0xBCE SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x16B2 JUMP JUMPDEST DUP1 MLOAD SWAP1 SWAP2 POP PUSH2 0xC1F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E76616C6964206D696C6573746F6E65207265666572656E63650000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x344 JUMP JUMPDEST PUSH1 0xA0 DUP2 ADD MLOAD PUSH2 0xC95 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x496E76616C6964206772616E74207265666572656E6365206F6E206D696C6573 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x746F6E6500000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x344 JUMP JUMPDEST PUSH1 0xA0 DUP2 ADD MLOAD PUSH1 0x40 MLOAD PUSH4 0x28C44A99 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x0 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND SWAP2 PUSH4 0xA3112A64 SWAP2 PUSH2 0xCEB SWAP2 PUSH1 0x4 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xD08 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0xD30 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x16B2 JUMP JUMPDEST DUP1 MLOAD SWAP1 SWAP2 POP PUSH2 0xD81 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E76616C6964206772616E74207265666572656E6365000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x344 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xD91 DUP3 PUSH2 0x120 ADD MLOAD PUSH2 0x77E JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xDAF DUP3 PUSH2 0xDAA PUSH2 0x100 DUP12 ADD PUSH1 0xE0 DUP13 ADD PUSH2 0x145E JUMP JUMPDEST PUSH2 0x1115 JUMP JUMPDEST SWAP1 POP PUSH1 0x68 SLOAD DUP6 SUB PUSH2 0xE6C JUMPI PUSH2 0xDCB PUSH2 0x100 DUP10 ADD PUSH1 0xE0 DUP11 ADD PUSH2 0x145E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0xE0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ DUP1 PUSH2 0xE13 JUMPI POP PUSH2 0xDFA PUSH2 0x100 DUP10 ADD PUSH1 0xE0 DUP11 ADD PUSH2 0x145E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0xC0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ JUMPDEST DUP1 PUSH2 0xE1B JUMPI POP DUP1 JUMPDEST PUSH2 0xE67 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x9 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E6F742061646D696E0000000000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x344 JUMP JUMPDEST PUSH2 0xFB2 JUMP JUMPDEST PUSH1 0x69 SLOAD DUP6 EQ DUP1 PUSH2 0xE7D JUMPI POP PUSH1 0x67 SLOAD DUP6 EQ JUMPDEST ISZERO PUSH2 0xFB2 JUMPI DUP1 PUSH2 0xECF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x9 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E6F74206F776E65720000000000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x344 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x28C44A99 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0xA3112A64 SWAP1 PUSH1 0x24 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xF37 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0xF5F SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x16B2 JUMP JUMPDEST DUP1 MLOAD SWAP1 SWAP2 POP PUSH2 0xFB0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E76616C696420636F6D6D756E697479207265666572656E63650000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x344 JUMP JUMPDEST POP JUMPDEST POP PUSH1 0x1 SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x102B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E7472616374206973206E6F742069 PUSH1 0x44 DUP3 ADD MSTORE PUSH11 0x6E697469616C697A696E67 PUSH1 0xA8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x344 JUMP JUMPDEST PUSH2 0x408 PUSH2 0x11AD JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP4 LT PUSH2 0x107C JUMPI PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP4 DIV SWAP3 POP PUSH1 0x40 ADD JUMPDEST PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 LT PUSH2 0x10A8 JUMPI PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 DIV SWAP3 POP PUSH1 0x20 ADD JUMPDEST PUSH7 0x2386F26FC10000 DUP4 LT PUSH2 0x10C6 JUMPI PUSH7 0x2386F26FC10000 DUP4 DIV SWAP3 POP PUSH1 0x10 ADD JUMPDEST PUSH4 0x5F5E100 DUP4 LT PUSH2 0x10DE JUMPI PUSH4 0x5F5E100 DUP4 DIV SWAP3 POP PUSH1 0x8 ADD JUMPDEST PUSH2 0x2710 DUP4 LT PUSH2 0x10F2 JUMPI PUSH2 0x2710 DUP4 DIV SWAP3 POP PUSH1 0x4 ADD JUMPDEST PUSH1 0x64 DUP4 LT PUSH2 0x1104 JUMPI PUSH1 0x64 DUP4 DIV SWAP3 POP PUSH1 0x2 ADD JUMPDEST PUSH1 0xA DUP4 LT PUSH2 0x794 JUMPI PUSH1 0x1 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x66 SLOAD PUSH1 0x40 MLOAD PUSH32 0xB75DBB8E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x24 DUP4 ADD MSTORE PUSH1 0x0 SWAP3 AND SWAP1 PUSH4 0xB75DBB8E SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1182 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x11A6 SWAP2 SWAP1 PUSH2 0x17A9 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1218 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E7472616374206973206E6F742069 PUSH1 0x44 DUP3 ADD MSTORE PUSH11 0x6E697469616C697A696E67 PUSH1 0xA8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x344 JUMP JUMPDEST PUSH2 0x408 CALLER PUSH2 0x9D7 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x140 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x125B JUMPI PUSH2 0x125B PUSH2 0x1221 JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x128A JUMPI PUSH2 0x128A PUSH2 0x1221 JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x12AC JUMPI PUSH2 0x12AC PUSH2 0x1221 JUMP JUMPDEST POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x12CC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x12E3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD PUSH1 0x1F DUP2 ADD DUP5 SGT PUSH2 0x12F4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH2 0x1307 PUSH2 0x1302 DUP3 PUSH2 0x1292 JUMP JUMPDEST PUSH2 0x1261 JUMP JUMPDEST DUP2 DUP2 MSTORE DUP6 PUSH1 0x20 DUP4 DUP6 ADD ADD GT ISZERO PUSH2 0x131C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 PUSH1 0x20 DUP5 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 SWAP2 DUP2 ADD PUSH1 0x20 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1355 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x133D JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x137D DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x133A JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x13A3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x13BB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP6 ADD ADD GT ISZERO PUSH2 0x13D6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x40 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x13F3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x140B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1417 DUP9 DUP4 DUP10 ADD PUSH2 0x1391 JUMP JUMPDEST SWAP1 SWAP7 POP SWAP5 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x1430 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x143D DUP8 DUP3 DUP9 ADD PUSH2 0x1391 JUMP JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP SWAP6 POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x851 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1470 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x11A6 DUP2 PUSH2 0x1449 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x148D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x14A4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD PUSH2 0x140 DUP2 DUP6 SUB SLT ISZERO PUSH2 0x11A6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x14C8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x14D6 PUSH2 0x1302 DUP3 PUSH2 0x1292 JUMP JUMPDEST DUP2 DUP2 MSTORE DUP5 PUSH1 0x20 DUP4 DUP7 ADD ADD GT ISZERO PUSH2 0x14EB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4B1 DUP3 PUSH1 0x20 DUP4 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x133A JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x150F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x1527 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1533 DUP7 DUP4 DUP8 ADD PUSH2 0x14B7 JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD MLOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x1549 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1556 DUP6 DUP3 DUP7 ADD PUSH2 0x14B7 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x1572 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x133A JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP5 MLOAD PUSH2 0x158E DUP2 DUP5 PUSH1 0x20 DUP10 ADD PUSH2 0x133A JUMP JUMPDEST DUP1 DUP4 ADD SWAP1 POP PUSH32 0x2E00000000000000000000000000000000000000000000000000000000000000 DUP1 DUP3 MSTORE DUP6 MLOAD PUSH2 0x15CA DUP2 PUSH1 0x1 DUP6 ADD PUSH1 0x20 DUP11 ADD PUSH2 0x133A JUMP JUMPDEST PUSH1 0x1 SWAP3 ADD SWAP2 DUP3 ADD MSTORE DUP4 MLOAD PUSH2 0x15E5 DUP2 PUSH1 0x2 DUP5 ADD PUSH1 0x20 DUP9 ADD PUSH2 0x133A JUMP JUMPDEST ADD PUSH1 0x2 ADD SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 CALLDATALOAD PUSH2 0x13E NOT DUP4 CALLDATASIZE SUB ADD DUP2 SLT PUSH2 0x1572 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1631 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 CALLDATALOAD PUSH1 0x1E NOT DUP5 CALLDATASIZE SUB ADD DUP2 SLT PUSH2 0x164F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 ADD DUP1 CALLDATALOAD SWAP2 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x166A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 ADD SWAP2 POP CALLDATASIZE DUP2 SWAP1 SUB DUP3 SGT ISZERO PUSH2 0x13D6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x7AB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 MLOAD PUSH2 0x7AB DUP2 PUSH2 0x1449 JUMP JUMPDEST DUP1 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x7AB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x16C4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x16DC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 DUP4 ADD SWAP1 PUSH2 0x140 DUP3 DUP7 SUB SLT ISZERO PUSH2 0x16F1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x16F9 PUSH2 0x1237 JUMP JUMPDEST DUP3 MLOAD DUP2 MSTORE PUSH1 0x20 DUP4 ADD MLOAD PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x1713 PUSH1 0x40 DUP5 ADD PUSH2 0x167F JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE PUSH2 0x1724 PUSH1 0x60 DUP5 ADD PUSH2 0x167F JUMP JUMPDEST PUSH1 0x60 DUP3 ADD MSTORE PUSH2 0x1735 PUSH1 0x80 DUP5 ADD PUSH2 0x167F JUMP JUMPDEST PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xA0 DUP4 ADD MLOAD PUSH1 0xA0 DUP3 ADD MSTORE PUSH2 0x1750 PUSH1 0xC0 DUP5 ADD PUSH2 0x1697 JUMP JUMPDEST PUSH1 0xC0 DUP3 ADD MSTORE PUSH2 0x1761 PUSH1 0xE0 DUP5 ADD PUSH2 0x1697 JUMP JUMPDEST PUSH1 0xE0 DUP3 ADD MSTORE PUSH2 0x100 PUSH2 0x1774 DUP2 DUP6 ADD PUSH2 0x16A2 JUMP JUMPDEST SWAP1 DUP3 ADD MSTORE PUSH2 0x120 DUP4 DUP2 ADD MLOAD DUP4 DUP2 GT ISZERO PUSH2 0x178C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1798 DUP9 DUP3 DUP8 ADD PUSH2 0x14B7 JUMP JUMPDEST SWAP2 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x17BB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x11A6 DUP3 PUSH2 0x16A2 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE8 0xA7 0x25 0xAF JUMP RETURNDATASIZE CALLDATALOAD 0x5F 0xAB 0x2B SLT SIGNEXTEND SWAP13 0xD8 DUP13 LOG4 MSIZE 0xEF 0xFC GAS JUMPI 0xC9 MUL 0xE8 0xE2 SWAP6 0x4F 0x4B 0xC PUSH9 0xF4F464736F6C634300 ADDMOD SGT STOP CALLER ","sourceMap":"565:3836:27:-:0;;;897:81;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;668:1:5;661:14:3;;671:1:5;685:14:3;;;;709:13;;934:3:27;-1:-1:-1;;;;;691:26:5;::::1;687:76;;740:12;;-1:-1:-1::0;;;740:12:5::1;;;;;;;;;;;687:76;-1:-1:-1::0;;;;;773:10:5::1;;::::0;949:22:27::1;:20;:22::i;:::-;897:81:::0;565:3836;;5939:280:8;6007:13;;;;;;;6006:14;5998:66;;;;-1:-1:-1;;;5998:66:8;;523:2:29;5998:66:8;;;505:21:29;562:2;542:18;;;535:30;601:34;581:18;;;574:62;-1:-1:-1;;;652:18:29;;;645:37;699:19;;5998:66:8;;;;;;;;6078:12;;6094:15;6078:12;;;:31;6074:139;;6125:12;:30;;-1:-1:-1;;6125:30:8;6140:15;6125:30;;;;;;6174:28;;871:36:29;;;6174:28:8;;859:2:29;844:18;6174:28:8;;;;;;;6074:139;5939:280::o;14:302:29:-;96:6;149:2;137:9;128:7;124:23;120:32;117:52;;;165:1;162;155:12;117:52;191:16;;-1:-1:-1;;;;;236:31:29;;226:42;;216:70;;282:1;279;272:12;216:70;305:5;14:302;-1:-1:-1;;;14:302:29:o;729:184::-;565:3836:27;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@_597":{"entryPoint":null,"id":597,"parameterSlots":0,"returnSlots":0},"@__Ownable_init_846":{"entryPoint":4032,"id":846,"parameterSlots":0,"returnSlots":0},"@__Ownable_init_unchained_857":{"entryPoint":4525,"id":857,"parameterSlots":0,"returnSlots":0},"@_checkOwner_888":{"entryPoint":2429,"id":888,"parameterSlots":0,"returnSlots":0},"@_msgSender_1502":{"entryPoint":null,"id":1502,"parameterSlots":0,"returnSlots":1},"@_onlyEAS_818":{"entryPoint":2614,"id":818,"parameterSlots":0,"returnSlots":0},"@_transferOwnership_945":{"entryPoint":2519,"id":945,"parameterSlots":1,"returnSlots":0},"@attest_615":{"entryPoint":1968,"id":615,"parameterSlots":1,"returnSlots":1},"@changeCommunityResolver_5942":{"entryPoint":2132,"id":5942,"parameterSlots":1,"returnSlots":0},"@getGrantCommunityUID_6026":{"entryPoint":1918,"id":6026,"parameterSlots":1,"returnSlots":1},"@getMilestoneApprovalType_6009":{"entryPoint":662,"id":6009,"parameterSlots":1,"returnSlots":1},"@initialize_5922":{"entryPoint":1368,"id":5922,"parameterSlots":1,"returnSlots":0},"@isCommunityAdmin_5959":{"entryPoint":4373,"id":5959,"parameterSlots":2,"returnSlots":1},"@isContract_1163":{"entryPoint":null,"id":1163,"parameterSlots":1,"returnSlots":1},"@isPayable_584":{"entryPoint":null,"id":584,"parameterSlots":0,"returnSlots":1},"@log10_4746":{"entryPoint":4147,"id":4746,"parameterSlots":1,"returnSlots":1},"@multiAttest_688":{"entryPoint":1209,"id":688,"parameterSlots":4,"returnSlots":1},"@multiRevoke_779":{"entryPoint":1034,"id":779,"parameterSlots":4,"returnSlots":1},"@onAttest_6179":{"entryPoint":2712,"id":6179,"parameterSlots":2,"returnSlots":1},"@onRevoke_6193":{"entryPoint":null,"id":6193,"parameterSlots":2,"returnSlots":1},"@owner_874":{"entryPoint":null,"id":874,"parameterSlots":0,"returnSlots":1},"@renounceOwnership_902":{"entryPoint":1014,"id":902,"parameterSlots":0,"returnSlots":0},"@revoke_706":{"entryPoint":1946,"id":706,"parameterSlots":1,"returnSlots":1},"@toString_3837":{"entryPoint":2269,"id":3837,"parameterSlots":1,"returnSlots":1},"@transferOwnership_925":{"entryPoint":1988,"id":925,"parameterSlots":1,"returnSlots":0},"@uncheckedInc_61":{"entryPoint":null,"id":61,"parameterSlots":1,"returnSlots":1},"@version_453":{"entryPoint":851,"id":453,"parameterSlots":0,"returnSlots":1},"abi_decode_address_fromMemory":{"entryPoint":5783,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_array_struct_Attestation_calldata_dyn_calldata":{"entryPoint":5009,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_bool_fromMemory":{"entryPoint":5794,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_string_fromMemory":{"entryPoint":5303,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_array$_t_struct$_Attestation_$45_calldata_ptr_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr":{"entryPoint":5085,"id":null,"parameterSlots":2,"returnSlots":4},"abi_decode_tuple_t_bool_fromMemory":{"entryPoint":6057,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes32_fromMemory":{"entryPoint":5663,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes_memory_ptr":{"entryPoint":4794,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_contract$_ICommunityResolver_$5831":{"entryPoint":5214,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_string_memory_ptrt_string_memory_ptr_fromMemory":{"entryPoint":5372,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_struct$_Attestation_$45_calldata_ptr":{"entryPoint":5243,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_struct$_Attestation_$45_memory_ptr_fromMemory":{"entryPoint":5810,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_uint64_fromMemory":{"entryPoint":5759,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_packed_t_string_memory_ptr__to_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":5472,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_packed_t_string_memory_ptr_t_stringliteral_6f010af653ebe3cb07d297a4ef13366103d392ceffa68dd48232e6e9ff2187bf_t_string_memory_ptr_t_stringliteral_6f010af653ebe3cb07d297a4ef13366103d392ceffa68dd48232e6e9ff2187bf_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":5500,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_packed_t_stringliteral_2b29265fc125740ae6bbc5035ae7af720b6932f4a3e44ba5ac02955c21ca9a05__to_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_packed_t_stringliteral_5e679716a01be890d854f2c1c5cb5336603215e65ff238044a5b11c586f61c1d__to_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_packed_t_stringliteral_6216ba39af4188a6d7c765710d7e6075007c3444b59a22a973d1b958c43e60bb__to_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_address__to_t_bytes32_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":4958,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_097b7dfef69a49741fd5f77b6fb5b8e666d014c06d719bb64cca3fac9d4602b3__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_6280dcc46e5ffd6accac4e830af14125986da285d00557ee32e5749338ab89d7__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_6d7436c5ac5ad34ac90d2a8c36871f55305b7c9e8280bed97bf6354cc8438858__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_904dc0e9fab3e65a75e96a21689602e2df418289adcd3917bdf2ae7f9f8c078b__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_bf2878a0327c5efcb59586051281508822c0d430e7858d25ba3f27d805f4146d__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_c266efca4f4ed37612271196433531dcbb4fca89a694d568d1e290e32feb1682__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_c8d92ba241a01d394399edff03dbdd829b53a5aee4d8b9ac9494e05c9df945d7__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_d3fa315f0692cefa5147859dc5bcffd7cd5202c8eef9347371d8c490e123f860__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_fa7e120cf98867f00c0ac28b387a73caec64b93b1889065f7b4c5e5232c0bad6__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"access_calldata_tail_t_bytes_calldata_ptr":{"entryPoint":5688,"id":null,"parameterSlots":2,"returnSlots":2},"access_calldata_tail_t_struct$_Attestation_$45_calldata_ptr":{"entryPoint":5640,"id":null,"parameterSlots":2,"returnSlots":1},"allocate_memory":{"entryPoint":4705,"id":null,"parameterSlots":1,"returnSlots":1},"allocate_memory_2073":{"entryPoint":4663,"id":null,"parameterSlots":0,"returnSlots":1},"array_allocation_size_bytes":{"entryPoint":4754,"id":null,"parameterSlots":1,"returnSlots":1},"copy_memory_to_memory_with_cleanup":{"entryPoint":4922,"id":null,"parameterSlots":3,"returnSlots":0},"panic_error_0x12":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x32":{"entryPoint":5618,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":4641,"id":null,"parameterSlots":0,"returnSlots":0},"validator_revert_contract_ICommunityResolver":{"entryPoint":5193,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:17056:29","statements":[{"nodeType":"YulBlock","src":"6:3:29","statements":[]},{"body":{"nodeType":"YulBlock","src":"46:152:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"63:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"66:77:29","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"56:6:29"},"nodeType":"YulFunctionCall","src":"56:88:29"},"nodeType":"YulExpressionStatement","src":"56:88:29"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"160:1:29","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"163:4:29","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"153:6:29"},"nodeType":"YulFunctionCall","src":"153:15:29"},"nodeType":"YulExpressionStatement","src":"153:15:29"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"184:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"187:4:29","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"177:6:29"},"nodeType":"YulFunctionCall","src":"177:15:29"},"nodeType":"YulExpressionStatement","src":"177:15:29"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"14:184:29"},{"body":{"nodeType":"YulBlock","src":"249:209:29","statements":[{"nodeType":"YulAssignment","src":"259:19:29","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"275:2:29","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"269:5:29"},"nodeType":"YulFunctionCall","src":"269:9:29"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"259:6:29"}]},{"nodeType":"YulVariableDeclaration","src":"287:37:29","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"309:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"317:6:29","type":"","value":"0x0140"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"305:3:29"},"nodeType":"YulFunctionCall","src":"305:19:29"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"291:10:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"399:22:29","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"401:16:29"},"nodeType":"YulFunctionCall","src":"401:18:29"},"nodeType":"YulExpressionStatement","src":"401:18:29"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"342:10:29"},{"kind":"number","nodeType":"YulLiteral","src":"354:18:29","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"339:2:29"},"nodeType":"YulFunctionCall","src":"339:34:29"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"378:10:29"},{"name":"memPtr","nodeType":"YulIdentifier","src":"390:6:29"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"375:2:29"},"nodeType":"YulFunctionCall","src":"375:22:29"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"336:2:29"},"nodeType":"YulFunctionCall","src":"336:62:29"},"nodeType":"YulIf","src":"333:88:29"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"437:2:29","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"441:10:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"430:6:29"},"nodeType":"YulFunctionCall","src":"430:22:29"},"nodeType":"YulExpressionStatement","src":"430:22:29"}]},"name":"allocate_memory_2073","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"238:6:29","type":""}],"src":"203:255:29"},{"body":{"nodeType":"YulBlock","src":"508:230:29","statements":[{"nodeType":"YulAssignment","src":"518:19:29","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"534:2:29","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"528:5:29"},"nodeType":"YulFunctionCall","src":"528:9:29"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"518:6:29"}]},{"nodeType":"YulVariableDeclaration","src":"546:58:29","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"568:6:29"},{"arguments":[{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"584:4:29"},{"kind":"number","nodeType":"YulLiteral","src":"590:2:29","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"580:3:29"},"nodeType":"YulFunctionCall","src":"580:13:29"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"599:2:29","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"595:3:29"},"nodeType":"YulFunctionCall","src":"595:7:29"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"576:3:29"},"nodeType":"YulFunctionCall","src":"576:27:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"564:3:29"},"nodeType":"YulFunctionCall","src":"564:40:29"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"550:10:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"679:22:29","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"681:16:29"},"nodeType":"YulFunctionCall","src":"681:18:29"},"nodeType":"YulExpressionStatement","src":"681:18:29"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"622:10:29"},{"kind":"number","nodeType":"YulLiteral","src":"634:18:29","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"619:2:29"},"nodeType":"YulFunctionCall","src":"619:34:29"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"658:10:29"},{"name":"memPtr","nodeType":"YulIdentifier","src":"670:6:29"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"655:2:29"},"nodeType":"YulFunctionCall","src":"655:22:29"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"616:2:29"},"nodeType":"YulFunctionCall","src":"616:62:29"},"nodeType":"YulIf","src":"613:88:29"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"717:2:29","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"721:10:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"710:6:29"},"nodeType":"YulFunctionCall","src":"710:22:29"},"nodeType":"YulExpressionStatement","src":"710:22:29"}]},"name":"allocate_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"size","nodeType":"YulTypedName","src":"488:4:29","type":""}],"returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"497:6:29","type":""}],"src":"463:275:29"},{"body":{"nodeType":"YulBlock","src":"800:129:29","statements":[{"body":{"nodeType":"YulBlock","src":"844:22:29","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"846:16:29"},"nodeType":"YulFunctionCall","src":"846:18:29"},"nodeType":"YulExpressionStatement","src":"846:18:29"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"816:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"824:18:29","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"813:2:29"},"nodeType":"YulFunctionCall","src":"813:30:29"},"nodeType":"YulIf","src":"810:56:29"},{"nodeType":"YulAssignment","src":"875:48:29","value":{"arguments":[{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"895:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"903:2:29","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"891:3:29"},"nodeType":"YulFunctionCall","src":"891:15:29"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"912:2:29","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"908:3:29"},"nodeType":"YulFunctionCall","src":"908:7:29"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"887:3:29"},"nodeType":"YulFunctionCall","src":"887:29:29"},{"kind":"number","nodeType":"YulLiteral","src":"918:4:29","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"883:3:29"},"nodeType":"YulFunctionCall","src":"883:40:29"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"875:4:29"}]}]},"name":"array_allocation_size_bytes","nodeType":"YulFunctionDefinition","parameters":[{"name":"length","nodeType":"YulTypedName","src":"780:6:29","type":""}],"returnVariables":[{"name":"size","nodeType":"YulTypedName","src":"791:4:29","type":""}],"src":"743:186:29"},{"body":{"nodeType":"YulBlock","src":"1013:592:29","statements":[{"body":{"nodeType":"YulBlock","src":"1059:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1068:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1071:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1061:6:29"},"nodeType":"YulFunctionCall","src":"1061:12:29"},"nodeType":"YulExpressionStatement","src":"1061:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1034:7:29"},{"name":"headStart","nodeType":"YulIdentifier","src":"1043:9:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1030:3:29"},"nodeType":"YulFunctionCall","src":"1030:23:29"},{"kind":"number","nodeType":"YulLiteral","src":"1055:2:29","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1026:3:29"},"nodeType":"YulFunctionCall","src":"1026:32:29"},"nodeType":"YulIf","src":"1023:52:29"},{"nodeType":"YulVariableDeclaration","src":"1084:37:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1111:9:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1098:12:29"},"nodeType":"YulFunctionCall","src":"1098:23:29"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"1088:6:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"1164:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1173:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1176:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1166:6:29"},"nodeType":"YulFunctionCall","src":"1166:12:29"},"nodeType":"YulExpressionStatement","src":"1166:12:29"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1136:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"1144:18:29","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1133:2:29"},"nodeType":"YulFunctionCall","src":"1133:30:29"},"nodeType":"YulIf","src":"1130:50:29"},{"nodeType":"YulVariableDeclaration","src":"1189:32:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1203:9:29"},{"name":"offset","nodeType":"YulIdentifier","src":"1214:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1199:3:29"},"nodeType":"YulFunctionCall","src":"1199:22:29"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"1193:2:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"1269:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1278:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1281:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1271:6:29"},"nodeType":"YulFunctionCall","src":"1271:12:29"},"nodeType":"YulExpressionStatement","src":"1271:12:29"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"1248:2:29"},{"kind":"number","nodeType":"YulLiteral","src":"1252:4:29","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1244:3:29"},"nodeType":"YulFunctionCall","src":"1244:13:29"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1259:7:29"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1240:3:29"},"nodeType":"YulFunctionCall","src":"1240:27:29"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1233:6:29"},"nodeType":"YulFunctionCall","src":"1233:35:29"},"nodeType":"YulIf","src":"1230:55:29"},{"nodeType":"YulVariableDeclaration","src":"1294:26:29","value":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"1317:2:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1304:12:29"},"nodeType":"YulFunctionCall","src":"1304:16:29"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"1298:2:29","type":""}]},{"nodeType":"YulVariableDeclaration","src":"1329:61:29","value":{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"1386:2:29"}],"functionName":{"name":"array_allocation_size_bytes","nodeType":"YulIdentifier","src":"1358:27:29"},"nodeType":"YulFunctionCall","src":"1358:31:29"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"1342:15:29"},"nodeType":"YulFunctionCall","src":"1342:48:29"},"variables":[{"name":"array","nodeType":"YulTypedName","src":"1333:5:29","type":""}]},{"expression":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"1406:5:29"},{"name":"_2","nodeType":"YulIdentifier","src":"1413:2:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1399:6:29"},"nodeType":"YulFunctionCall","src":"1399:17:29"},"nodeType":"YulExpressionStatement","src":"1399:17:29"},{"body":{"nodeType":"YulBlock","src":"1462:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1471:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1474:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1464:6:29"},"nodeType":"YulFunctionCall","src":"1464:12:29"},"nodeType":"YulExpressionStatement","src":"1464:12:29"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"1439:2:29"},{"name":"_2","nodeType":"YulIdentifier","src":"1443:2:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1435:3:29"},"nodeType":"YulFunctionCall","src":"1435:11:29"},{"kind":"number","nodeType":"YulLiteral","src":"1448:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1431:3:29"},"nodeType":"YulFunctionCall","src":"1431:20:29"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1453:7:29"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1428:2:29"},"nodeType":"YulFunctionCall","src":"1428:33:29"},"nodeType":"YulIf","src":"1425:53:29"},{"expression":{"arguments":[{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"1504:5:29"},{"kind":"number","nodeType":"YulLiteral","src":"1511:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1500:3:29"},"nodeType":"YulFunctionCall","src":"1500:14:29"},{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"1520:2:29"},{"kind":"number","nodeType":"YulLiteral","src":"1524:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1516:3:29"},"nodeType":"YulFunctionCall","src":"1516:11:29"},{"name":"_2","nodeType":"YulIdentifier","src":"1529:2:29"}],"functionName":{"name":"calldatacopy","nodeType":"YulIdentifier","src":"1487:12:29"},"nodeType":"YulFunctionCall","src":"1487:45:29"},"nodeType":"YulExpressionStatement","src":"1487:45:29"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"1556:5:29"},{"name":"_2","nodeType":"YulIdentifier","src":"1563:2:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1552:3:29"},"nodeType":"YulFunctionCall","src":"1552:14:29"},{"kind":"number","nodeType":"YulLiteral","src":"1568:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1548:3:29"},"nodeType":"YulFunctionCall","src":"1548:23:29"},{"kind":"number","nodeType":"YulLiteral","src":"1573:1:29","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1541:6:29"},"nodeType":"YulFunctionCall","src":"1541:34:29"},"nodeType":"YulExpressionStatement","src":"1541:34:29"},{"nodeType":"YulAssignment","src":"1584:15:29","value":{"name":"array","nodeType":"YulIdentifier","src":"1594:5:29"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1584:6:29"}]}]},"name":"abi_decode_tuple_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"979:9:29","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"990:7:29","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1002:6:29","type":""}],"src":"934:671:29"},{"body":{"nodeType":"YulBlock","src":"1711:76:29","statements":[{"nodeType":"YulAssignment","src":"1721:26:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1733:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"1744:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1729:3:29"},"nodeType":"YulFunctionCall","src":"1729:18:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1721:4:29"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1763:9:29"},{"name":"value0","nodeType":"YulIdentifier","src":"1774:6:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1756:6:29"},"nodeType":"YulFunctionCall","src":"1756:25:29"},"nodeType":"YulExpressionStatement","src":"1756:25:29"}]},"name":"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1680:9:29","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1691:6:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1702:4:29","type":""}],"src":"1610:177:29"},{"body":{"nodeType":"YulBlock","src":"1858:184:29","statements":[{"nodeType":"YulVariableDeclaration","src":"1868:10:29","value":{"kind":"number","nodeType":"YulLiteral","src":"1877:1:29","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"1872:1:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"1937:63:29","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"1962:3:29"},{"name":"i","nodeType":"YulIdentifier","src":"1967:1:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1958:3:29"},"nodeType":"YulFunctionCall","src":"1958:11:29"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"1981:3:29"},{"name":"i","nodeType":"YulIdentifier","src":"1986:1:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1977:3:29"},"nodeType":"YulFunctionCall","src":"1977:11:29"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1971:5:29"},"nodeType":"YulFunctionCall","src":"1971:18:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1951:6:29"},"nodeType":"YulFunctionCall","src":"1951:39:29"},"nodeType":"YulExpressionStatement","src":"1951:39:29"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"1898:1:29"},{"name":"length","nodeType":"YulIdentifier","src":"1901:6:29"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"1895:2:29"},"nodeType":"YulFunctionCall","src":"1895:13:29"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"1909:19:29","statements":[{"nodeType":"YulAssignment","src":"1911:15:29","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"1920:1:29"},{"kind":"number","nodeType":"YulLiteral","src":"1923:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1916:3:29"},"nodeType":"YulFunctionCall","src":"1916:10:29"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"1911:1:29"}]}]},"pre":{"nodeType":"YulBlock","src":"1891:3:29","statements":[]},"src":"1887:113:29"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"2020:3:29"},{"name":"length","nodeType":"YulIdentifier","src":"2025:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2016:3:29"},"nodeType":"YulFunctionCall","src":"2016:16:29"},{"kind":"number","nodeType":"YulLiteral","src":"2034:1:29","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2009:6:29"},"nodeType":"YulFunctionCall","src":"2009:27:29"},"nodeType":"YulExpressionStatement","src":"2009:27:29"}]},"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"1836:3:29","type":""},{"name":"dst","nodeType":"YulTypedName","src":"1841:3:29","type":""},{"name":"length","nodeType":"YulTypedName","src":"1846:6:29","type":""}],"src":"1792:250:29"},{"body":{"nodeType":"YulBlock","src":"2168:275:29","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2185:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"2196:2:29","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2178:6:29"},"nodeType":"YulFunctionCall","src":"2178:21:29"},"nodeType":"YulExpressionStatement","src":"2178:21:29"},{"nodeType":"YulVariableDeclaration","src":"2208:27:29","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"2228:6:29"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2222:5:29"},"nodeType":"YulFunctionCall","src":"2222:13:29"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"2212:6:29","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2255:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"2266:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2251:3:29"},"nodeType":"YulFunctionCall","src":"2251:18:29"},{"name":"length","nodeType":"YulIdentifier","src":"2271:6:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2244:6:29"},"nodeType":"YulFunctionCall","src":"2244:34:29"},"nodeType":"YulExpressionStatement","src":"2244:34:29"},{"expression":{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"2326:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"2334:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2322:3:29"},"nodeType":"YulFunctionCall","src":"2322:15:29"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2343:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"2354:2:29","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2339:3:29"},"nodeType":"YulFunctionCall","src":"2339:18:29"},{"name":"length","nodeType":"YulIdentifier","src":"2359:6:29"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"2287:34:29"},"nodeType":"YulFunctionCall","src":"2287:79:29"},"nodeType":"YulExpressionStatement","src":"2287:79:29"},{"nodeType":"YulAssignment","src":"2375:62:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2391:9:29"},{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"2410:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"2418:2:29","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2406:3:29"},"nodeType":"YulFunctionCall","src":"2406:15:29"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2427:2:29","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"2423:3:29"},"nodeType":"YulFunctionCall","src":"2423:7:29"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2402:3:29"},"nodeType":"YulFunctionCall","src":"2402:29:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2387:3:29"},"nodeType":"YulFunctionCall","src":"2387:45:29"},{"kind":"number","nodeType":"YulLiteral","src":"2434:2:29","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2383:3:29"},"nodeType":"YulFunctionCall","src":"2383:54:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2375:4:29"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2137:9:29","type":""},{"name":"value0","nodeType":"YulTypedName","src":"2148:6:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2159:4:29","type":""}],"src":"2047:396:29"},{"body":{"nodeType":"YulBlock","src":"2552:283:29","statements":[{"body":{"nodeType":"YulBlock","src":"2601:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2610:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2613:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2603:6:29"},"nodeType":"YulFunctionCall","src":"2603:12:29"},"nodeType":"YulExpressionStatement","src":"2603:12:29"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2580:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"2588:4:29","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2576:3:29"},"nodeType":"YulFunctionCall","src":"2576:17:29"},{"name":"end","nodeType":"YulIdentifier","src":"2595:3:29"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2572:3:29"},"nodeType":"YulFunctionCall","src":"2572:27:29"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2565:6:29"},"nodeType":"YulFunctionCall","src":"2565:35:29"},"nodeType":"YulIf","src":"2562:55:29"},{"nodeType":"YulAssignment","src":"2626:30:29","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2649:6:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2636:12:29"},"nodeType":"YulFunctionCall","src":"2636:20:29"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"2626:6:29"}]},{"body":{"nodeType":"YulBlock","src":"2699:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2708:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2711:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2701:6:29"},"nodeType":"YulFunctionCall","src":"2701:12:29"},"nodeType":"YulExpressionStatement","src":"2701:12:29"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"2671:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"2679:18:29","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2668:2:29"},"nodeType":"YulFunctionCall","src":"2668:30:29"},"nodeType":"YulIf","src":"2665:50:29"},{"nodeType":"YulAssignment","src":"2724:29:29","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2740:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"2748:4:29","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2736:3:29"},"nodeType":"YulFunctionCall","src":"2736:17:29"},"variableNames":[{"name":"arrayPos","nodeType":"YulIdentifier","src":"2724:8:29"}]},{"body":{"nodeType":"YulBlock","src":"2813:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2822:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2825:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2815:6:29"},"nodeType":"YulFunctionCall","src":"2815:12:29"},"nodeType":"YulExpressionStatement","src":"2815:12:29"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2776:6:29"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2788:1:29","type":"","value":"5"},{"name":"length","nodeType":"YulIdentifier","src":"2791:6:29"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2784:3:29"},"nodeType":"YulFunctionCall","src":"2784:14:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2772:3:29"},"nodeType":"YulFunctionCall","src":"2772:27:29"},{"kind":"number","nodeType":"YulLiteral","src":"2801:4:29","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2768:3:29"},"nodeType":"YulFunctionCall","src":"2768:38:29"},{"name":"end","nodeType":"YulIdentifier","src":"2808:3:29"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2765:2:29"},"nodeType":"YulFunctionCall","src":"2765:47:29"},"nodeType":"YulIf","src":"2762:67:29"}]},"name":"abi_decode_array_struct_Attestation_calldata_dyn_calldata","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"2515:6:29","type":""},{"name":"end","nodeType":"YulTypedName","src":"2523:3:29","type":""}],"returnVariables":[{"name":"arrayPos","nodeType":"YulTypedName","src":"2531:8:29","type":""},{"name":"length","nodeType":"YulTypedName","src":"2541:6:29","type":""}],"src":"2448:387:29"},{"body":{"nodeType":"YulBlock","src":"3026:656:29","statements":[{"body":{"nodeType":"YulBlock","src":"3072:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3081:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3084:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3074:6:29"},"nodeType":"YulFunctionCall","src":"3074:12:29"},"nodeType":"YulExpressionStatement","src":"3074:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3047:7:29"},{"name":"headStart","nodeType":"YulIdentifier","src":"3056:9:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3043:3:29"},"nodeType":"YulFunctionCall","src":"3043:23:29"},{"kind":"number","nodeType":"YulLiteral","src":"3068:2:29","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3039:3:29"},"nodeType":"YulFunctionCall","src":"3039:32:29"},"nodeType":"YulIf","src":"3036:52:29"},{"nodeType":"YulVariableDeclaration","src":"3097:37:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3124:9:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3111:12:29"},"nodeType":"YulFunctionCall","src":"3111:23:29"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3101:6:29","type":""}]},{"nodeType":"YulVariableDeclaration","src":"3143:28:29","value":{"kind":"number","nodeType":"YulLiteral","src":"3153:18:29","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"3147:2:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"3198:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3207:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3210:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3200:6:29"},"nodeType":"YulFunctionCall","src":"3200:12:29"},"nodeType":"YulExpressionStatement","src":"3200:12:29"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3186:6:29"},{"name":"_1","nodeType":"YulIdentifier","src":"3194:2:29"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3183:2:29"},"nodeType":"YulFunctionCall","src":"3183:14:29"},"nodeType":"YulIf","src":"3180:34:29"},{"nodeType":"YulVariableDeclaration","src":"3223:116:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3311:9:29"},{"name":"offset","nodeType":"YulIdentifier","src":"3322:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3307:3:29"},"nodeType":"YulFunctionCall","src":"3307:22:29"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3331:7:29"}],"functionName":{"name":"abi_decode_array_struct_Attestation_calldata_dyn_calldata","nodeType":"YulIdentifier","src":"3249:57:29"},"nodeType":"YulFunctionCall","src":"3249:90:29"},"variables":[{"name":"value0_1","nodeType":"YulTypedName","src":"3227:8:29","type":""},{"name":"value1_1","nodeType":"YulTypedName","src":"3237:8:29","type":""}]},{"nodeType":"YulAssignment","src":"3348:18:29","value":{"name":"value0_1","nodeType":"YulIdentifier","src":"3358:8:29"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3348:6:29"}]},{"nodeType":"YulAssignment","src":"3375:18:29","value":{"name":"value1_1","nodeType":"YulIdentifier","src":"3385:8:29"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"3375:6:29"}]},{"nodeType":"YulVariableDeclaration","src":"3402:48:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3435:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"3446:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3431:3:29"},"nodeType":"YulFunctionCall","src":"3431:18:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3418:12:29"},"nodeType":"YulFunctionCall","src":"3418:32:29"},"variables":[{"name":"offset_1","nodeType":"YulTypedName","src":"3406:8:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"3479:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3488:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3491:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3481:6:29"},"nodeType":"YulFunctionCall","src":"3481:12:29"},"nodeType":"YulExpressionStatement","src":"3481:12:29"}]},"condition":{"arguments":[{"name":"offset_1","nodeType":"YulIdentifier","src":"3465:8:29"},{"name":"_1","nodeType":"YulIdentifier","src":"3475:2:29"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3462:2:29"},"nodeType":"YulFunctionCall","src":"3462:16:29"},"nodeType":"YulIf","src":"3459:36:29"},{"nodeType":"YulVariableDeclaration","src":"3504:118:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3592:9:29"},{"name":"offset_1","nodeType":"YulIdentifier","src":"3603:8:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3588:3:29"},"nodeType":"YulFunctionCall","src":"3588:24:29"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3614:7:29"}],"functionName":{"name":"abi_decode_array_struct_Attestation_calldata_dyn_calldata","nodeType":"YulIdentifier","src":"3530:57:29"},"nodeType":"YulFunctionCall","src":"3530:92:29"},"variables":[{"name":"value2_1","nodeType":"YulTypedName","src":"3508:8:29","type":""},{"name":"value3_1","nodeType":"YulTypedName","src":"3518:8:29","type":""}]},{"nodeType":"YulAssignment","src":"3631:18:29","value":{"name":"value2_1","nodeType":"YulIdentifier","src":"3641:8:29"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"3631:6:29"}]},{"nodeType":"YulAssignment","src":"3658:18:29","value":{"name":"value3_1","nodeType":"YulIdentifier","src":"3668:8:29"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"3658:6:29"}]}]},"name":"abi_decode_tuple_t_array$_t_struct$_Attestation_$45_calldata_ptr_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2968:9:29","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2979:7:29","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2991:6:29","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2999:6:29","type":""},{"name":"value2","nodeType":"YulTypedName","src":"3007:6:29","type":""},{"name":"value3","nodeType":"YulTypedName","src":"3015:6:29","type":""}],"src":"2840:842:29"},{"body":{"nodeType":"YulBlock","src":"3782:92:29","statements":[{"nodeType":"YulAssignment","src":"3792:26:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3804:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"3815:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3800:3:29"},"nodeType":"YulFunctionCall","src":"3800:18:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"3792:4:29"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3834:9:29"},{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"3859:6:29"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3852:6:29"},"nodeType":"YulFunctionCall","src":"3852:14:29"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3845:6:29"},"nodeType":"YulFunctionCall","src":"3845:22:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3827:6:29"},"nodeType":"YulFunctionCall","src":"3827:41:29"},"nodeType":"YulExpressionStatement","src":"3827:41:29"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3751:9:29","type":""},{"name":"value0","nodeType":"YulTypedName","src":"3762:6:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"3773:4:29","type":""}],"src":"3687:187:29"},{"body":{"nodeType":"YulBlock","src":"3980:125:29","statements":[{"nodeType":"YulAssignment","src":"3990:26:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4002:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"4013:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3998:3:29"},"nodeType":"YulFunctionCall","src":"3998:18:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"3990:4:29"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4032:9:29"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"4047:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"4055:42:29","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4043:3:29"},"nodeType":"YulFunctionCall","src":"4043:55:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4025:6:29"},"nodeType":"YulFunctionCall","src":"4025:74:29"},"nodeType":"YulExpressionStatement","src":"4025:74:29"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3949:9:29","type":""},{"name":"value0","nodeType":"YulTypedName","src":"3960:6:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"3971:4:29","type":""}],"src":"3879:226:29"},{"body":{"nodeType":"YulBlock","src":"4175:109:29","statements":[{"body":{"nodeType":"YulBlock","src":"4262:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4271:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4274:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4264:6:29"},"nodeType":"YulFunctionCall","src":"4264:12:29"},"nodeType":"YulExpressionStatement","src":"4264:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4198:5:29"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4209:5:29"},{"kind":"number","nodeType":"YulLiteral","src":"4216:42:29","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4205:3:29"},"nodeType":"YulFunctionCall","src":"4205:54:29"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"4195:2:29"},"nodeType":"YulFunctionCall","src":"4195:65:29"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"4188:6:29"},"nodeType":"YulFunctionCall","src":"4188:73:29"},"nodeType":"YulIf","src":"4185:93:29"}]},"name":"validator_revert_contract_ICommunityResolver","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"4164:5:29","type":""}],"src":"4110:174:29"},{"body":{"nodeType":"YulBlock","src":"4386:197:29","statements":[{"body":{"nodeType":"YulBlock","src":"4432:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4441:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4444:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4434:6:29"},"nodeType":"YulFunctionCall","src":"4434:12:29"},"nodeType":"YulExpressionStatement","src":"4434:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"4407:7:29"},{"name":"headStart","nodeType":"YulIdentifier","src":"4416:9:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4403:3:29"},"nodeType":"YulFunctionCall","src":"4403:23:29"},{"kind":"number","nodeType":"YulLiteral","src":"4428:2:29","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4399:3:29"},"nodeType":"YulFunctionCall","src":"4399:32:29"},"nodeType":"YulIf","src":"4396:52:29"},{"nodeType":"YulVariableDeclaration","src":"4457:36:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4483:9:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4470:12:29"},"nodeType":"YulFunctionCall","src":"4470:23:29"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"4461:5:29","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4547:5:29"}],"functionName":{"name":"validator_revert_contract_ICommunityResolver","nodeType":"YulIdentifier","src":"4502:44:29"},"nodeType":"YulFunctionCall","src":"4502:51:29"},"nodeType":"YulExpressionStatement","src":"4502:51:29"},{"nodeType":"YulAssignment","src":"4562:15:29","value":{"name":"value","nodeType":"YulIdentifier","src":"4572:5:29"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"4562:6:29"}]}]},"name":"abi_decode_tuple_t_contract$_ICommunityResolver_$5831","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4352:9:29","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"4363:7:29","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"4375:6:29","type":""}],"src":"4289:294:29"},{"body":{"nodeType":"YulBlock","src":"4687:290:29","statements":[{"body":{"nodeType":"YulBlock","src":"4733:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4742:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4745:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4735:6:29"},"nodeType":"YulFunctionCall","src":"4735:12:29"},"nodeType":"YulExpressionStatement","src":"4735:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"4708:7:29"},{"name":"headStart","nodeType":"YulIdentifier","src":"4717:9:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4704:3:29"},"nodeType":"YulFunctionCall","src":"4704:23:29"},{"kind":"number","nodeType":"YulLiteral","src":"4729:2:29","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4700:3:29"},"nodeType":"YulFunctionCall","src":"4700:32:29"},"nodeType":"YulIf","src":"4697:52:29"},{"nodeType":"YulVariableDeclaration","src":"4758:37:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4785:9:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4772:12:29"},"nodeType":"YulFunctionCall","src":"4772:23:29"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"4762:6:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"4838:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4847:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4850:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4840:6:29"},"nodeType":"YulFunctionCall","src":"4840:12:29"},"nodeType":"YulExpressionStatement","src":"4840:12:29"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"4810:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"4818:18:29","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4807:2:29"},"nodeType":"YulFunctionCall","src":"4807:30:29"},"nodeType":"YulIf","src":"4804:50:29"},{"nodeType":"YulVariableDeclaration","src":"4863:32:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4877:9:29"},{"name":"offset","nodeType":"YulIdentifier","src":"4888:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4873:3:29"},"nodeType":"YulFunctionCall","src":"4873:22:29"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"4867:2:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"4934:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4943:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4946:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4936:6:29"},"nodeType":"YulFunctionCall","src":"4936:12:29"},"nodeType":"YulExpressionStatement","src":"4936:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"4915:7:29"},{"name":"_1","nodeType":"YulIdentifier","src":"4924:2:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4911:3:29"},"nodeType":"YulFunctionCall","src":"4911:16:29"},{"kind":"number","nodeType":"YulLiteral","src":"4929:3:29","type":"","value":"320"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4907:3:29"},"nodeType":"YulFunctionCall","src":"4907:26:29"},"nodeType":"YulIf","src":"4904:46:29"},{"nodeType":"YulAssignment","src":"4959:12:29","value":{"name":"_1","nodeType":"YulIdentifier","src":"4969:2:29"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"4959:6:29"}]}]},"name":"abi_decode_tuple_t_struct$_Attestation_$45_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4653:9:29","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"4664:7:29","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"4676:6:29","type":""}],"src":"4588:389:29"},{"body":{"nodeType":"YulBlock","src":"5052:197:29","statements":[{"body":{"nodeType":"YulBlock","src":"5098:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5107:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5110:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5100:6:29"},"nodeType":"YulFunctionCall","src":"5100:12:29"},"nodeType":"YulExpressionStatement","src":"5100:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"5073:7:29"},{"name":"headStart","nodeType":"YulIdentifier","src":"5082:9:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5069:3:29"},"nodeType":"YulFunctionCall","src":"5069:23:29"},{"kind":"number","nodeType":"YulLiteral","src":"5094:2:29","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"5065:3:29"},"nodeType":"YulFunctionCall","src":"5065:32:29"},"nodeType":"YulIf","src":"5062:52:29"},{"nodeType":"YulVariableDeclaration","src":"5123:36:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5149:9:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5136:12:29"},"nodeType":"YulFunctionCall","src":"5136:23:29"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"5127:5:29","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5213:5:29"}],"functionName":{"name":"validator_revert_contract_ICommunityResolver","nodeType":"YulIdentifier","src":"5168:44:29"},"nodeType":"YulFunctionCall","src":"5168:51:29"},"nodeType":"YulExpressionStatement","src":"5168:51:29"},{"nodeType":"YulAssignment","src":"5228:15:29","value":{"name":"value","nodeType":"YulIdentifier","src":"5238:5:29"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"5228:6:29"}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5018:9:29","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"5029:7:29","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"5041:6:29","type":""}],"src":"4982:267:29"},{"body":{"nodeType":"YulBlock","src":"5318:378:29","statements":[{"body":{"nodeType":"YulBlock","src":"5367:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5376:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5379:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5369:6:29"},"nodeType":"YulFunctionCall","src":"5369:12:29"},"nodeType":"YulExpressionStatement","src":"5369:12:29"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"5346:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"5354:4:29","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5342:3:29"},"nodeType":"YulFunctionCall","src":"5342:17:29"},{"name":"end","nodeType":"YulIdentifier","src":"5361:3:29"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"5338:3:29"},"nodeType":"YulFunctionCall","src":"5338:27:29"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"5331:6:29"},"nodeType":"YulFunctionCall","src":"5331:35:29"},"nodeType":"YulIf","src":"5328:55:29"},{"nodeType":"YulVariableDeclaration","src":"5392:23:29","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"5408:6:29"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"5402:5:29"},"nodeType":"YulFunctionCall","src":"5402:13:29"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"5396:2:29","type":""}]},{"nodeType":"YulVariableDeclaration","src":"5424:63:29","value":{"arguments":[{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"5483:2:29"}],"functionName":{"name":"array_allocation_size_bytes","nodeType":"YulIdentifier","src":"5455:27:29"},"nodeType":"YulFunctionCall","src":"5455:31:29"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"5439:15:29"},"nodeType":"YulFunctionCall","src":"5439:48:29"},"variables":[{"name":"array_1","nodeType":"YulTypedName","src":"5428:7:29","type":""}]},{"expression":{"arguments":[{"name":"array_1","nodeType":"YulIdentifier","src":"5503:7:29"},{"name":"_1","nodeType":"YulIdentifier","src":"5512:2:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5496:6:29"},"nodeType":"YulFunctionCall","src":"5496:19:29"},"nodeType":"YulExpressionStatement","src":"5496:19:29"},{"body":{"nodeType":"YulBlock","src":"5563:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5572:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5575:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5565:6:29"},"nodeType":"YulFunctionCall","src":"5565:12:29"},"nodeType":"YulExpressionStatement","src":"5565:12:29"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"5538:6:29"},{"name":"_1","nodeType":"YulIdentifier","src":"5546:2:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5534:3:29"},"nodeType":"YulFunctionCall","src":"5534:15:29"},{"kind":"number","nodeType":"YulLiteral","src":"5551:4:29","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5530:3:29"},"nodeType":"YulFunctionCall","src":"5530:26:29"},{"name":"end","nodeType":"YulIdentifier","src":"5558:3:29"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5527:2:29"},"nodeType":"YulFunctionCall","src":"5527:35:29"},"nodeType":"YulIf","src":"5524:55:29"},{"expression":{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"5627:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"5635:4:29","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5623:3:29"},"nodeType":"YulFunctionCall","src":"5623:17:29"},{"arguments":[{"name":"array_1","nodeType":"YulIdentifier","src":"5646:7:29"},{"kind":"number","nodeType":"YulLiteral","src":"5655:4:29","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5642:3:29"},"nodeType":"YulFunctionCall","src":"5642:18:29"},{"name":"_1","nodeType":"YulIdentifier","src":"5662:2:29"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"5588:34:29"},"nodeType":"YulFunctionCall","src":"5588:77:29"},"nodeType":"YulExpressionStatement","src":"5588:77:29"},{"nodeType":"YulAssignment","src":"5674:16:29","value":{"name":"array_1","nodeType":"YulIdentifier","src":"5683:7:29"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"5674:5:29"}]}]},"name":"abi_decode_string_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"5292:6:29","type":""},{"name":"end","nodeType":"YulTypedName","src":"5300:3:29","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"5308:5:29","type":""}],"src":"5254:442:29"},{"body":{"nodeType":"YulBlock","src":"5819:444:29","statements":[{"body":{"nodeType":"YulBlock","src":"5865:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5874:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5877:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5867:6:29"},"nodeType":"YulFunctionCall","src":"5867:12:29"},"nodeType":"YulExpressionStatement","src":"5867:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"5840:7:29"},{"name":"headStart","nodeType":"YulIdentifier","src":"5849:9:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5836:3:29"},"nodeType":"YulFunctionCall","src":"5836:23:29"},{"kind":"number","nodeType":"YulLiteral","src":"5861:2:29","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"5832:3:29"},"nodeType":"YulFunctionCall","src":"5832:32:29"},"nodeType":"YulIf","src":"5829:52:29"},{"nodeType":"YulVariableDeclaration","src":"5890:30:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5910:9:29"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"5904:5:29"},"nodeType":"YulFunctionCall","src":"5904:16:29"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5894:6:29","type":""}]},{"nodeType":"YulVariableDeclaration","src":"5929:28:29","value":{"kind":"number","nodeType":"YulLiteral","src":"5939:18:29","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"5933:2:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"5984:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5993:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5996:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5986:6:29"},"nodeType":"YulFunctionCall","src":"5986:12:29"},"nodeType":"YulExpressionStatement","src":"5986:12:29"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"5972:6:29"},{"name":"_1","nodeType":"YulIdentifier","src":"5980:2:29"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5969:2:29"},"nodeType":"YulFunctionCall","src":"5969:14:29"},"nodeType":"YulIf","src":"5966:34:29"},{"nodeType":"YulAssignment","src":"6009:71:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6052:9:29"},{"name":"offset","nodeType":"YulIdentifier","src":"6063:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6048:3:29"},"nodeType":"YulFunctionCall","src":"6048:22:29"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"6072:7:29"}],"functionName":{"name":"abi_decode_string_fromMemory","nodeType":"YulIdentifier","src":"6019:28:29"},"nodeType":"YulFunctionCall","src":"6019:61:29"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"6009:6:29"}]},{"nodeType":"YulVariableDeclaration","src":"6089:41:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6115:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"6126:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6111:3:29"},"nodeType":"YulFunctionCall","src":"6111:18:29"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"6105:5:29"},"nodeType":"YulFunctionCall","src":"6105:25:29"},"variables":[{"name":"offset_1","nodeType":"YulTypedName","src":"6093:8:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"6159:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6168:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6171:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6161:6:29"},"nodeType":"YulFunctionCall","src":"6161:12:29"},"nodeType":"YulExpressionStatement","src":"6161:12:29"}]},"condition":{"arguments":[{"name":"offset_1","nodeType":"YulIdentifier","src":"6145:8:29"},{"name":"_1","nodeType":"YulIdentifier","src":"6155:2:29"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"6142:2:29"},"nodeType":"YulFunctionCall","src":"6142:16:29"},"nodeType":"YulIf","src":"6139:36:29"},{"nodeType":"YulAssignment","src":"6184:73:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6227:9:29"},{"name":"offset_1","nodeType":"YulIdentifier","src":"6238:8:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6223:3:29"},"nodeType":"YulFunctionCall","src":"6223:24:29"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"6249:7:29"}],"functionName":{"name":"abi_decode_string_fromMemory","nodeType":"YulIdentifier","src":"6194:28:29"},"nodeType":"YulFunctionCall","src":"6194:63:29"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"6184:6:29"}]}]},"name":"abi_decode_tuple_t_string_memory_ptrt_string_memory_ptr_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5777:9:29","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"5788:7:29","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"5800:6:29","type":""},{"name":"value1","nodeType":"YulTypedName","src":"5808:6:29","type":""}],"src":"5701:562:29"},{"body":{"nodeType":"YulBlock","src":"6407:150:29","statements":[{"nodeType":"YulVariableDeclaration","src":"6417:27:29","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"6437:6:29"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"6431:5:29"},"nodeType":"YulFunctionCall","src":"6431:13:29"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"6421:6:29","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"6492:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"6500:4:29","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6488:3:29"},"nodeType":"YulFunctionCall","src":"6488:17:29"},{"name":"pos","nodeType":"YulIdentifier","src":"6507:3:29"},{"name":"length","nodeType":"YulIdentifier","src":"6512:6:29"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"6453:34:29"},"nodeType":"YulFunctionCall","src":"6453:66:29"},"nodeType":"YulExpressionStatement","src":"6453:66:29"},{"nodeType":"YulAssignment","src":"6528:23:29","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"6539:3:29"},{"name":"length","nodeType":"YulIdentifier","src":"6544:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6535:3:29"},"nodeType":"YulFunctionCall","src":"6535:16:29"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"6528:3:29"}]}]},"name":"abi_encode_tuple_packed_t_string_memory_ptr__to_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"6383:3:29","type":""},{"name":"value0","nodeType":"YulTypedName","src":"6388:6:29","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"6399:3:29","type":""}],"src":"6268:289:29"},{"body":{"nodeType":"YulBlock","src":"6736:172:29","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6753:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"6764:2:29","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6746:6:29"},"nodeType":"YulFunctionCall","src":"6746:21:29"},"nodeType":"YulExpressionStatement","src":"6746:21:29"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6787:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"6798:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6783:3:29"},"nodeType":"YulFunctionCall","src":"6783:18:29"},{"kind":"number","nodeType":"YulLiteral","src":"6803:2:29","type":"","value":"22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6776:6:29"},"nodeType":"YulFunctionCall","src":"6776:30:29"},"nodeType":"YulExpressionStatement","src":"6776:30:29"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6826:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"6837:2:29","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6822:3:29"},"nodeType":"YulFunctionCall","src":"6822:18:29"},{"hexValue":"496e76616c696420617070726f76616c20747970652e","kind":"string","nodeType":"YulLiteral","src":"6842:24:29","type":"","value":"Invalid approval type."}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6815:6:29"},"nodeType":"YulFunctionCall","src":"6815:52:29"},"nodeType":"YulExpressionStatement","src":"6815:52:29"},{"nodeType":"YulAssignment","src":"6876:26:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6888:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"6899:2:29","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6884:3:29"},"nodeType":"YulFunctionCall","src":"6884:18:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"6876:4:29"}]}]},"name":"abi_encode_tuple_t_stringliteral_d3fa315f0692cefa5147859dc5bcffd7cd5202c8eef9347371d8c490e123f860__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6713:9:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"6727:4:29","type":""}],"src":"6562:346:29"},{"body":{"nodeType":"YulBlock","src":"7350:562:29","statements":[{"nodeType":"YulVariableDeclaration","src":"7360:27:29","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"7380:6:29"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"7374:5:29"},"nodeType":"YulFunctionCall","src":"7374:13:29"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"7364:6:29","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"7435:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"7443:4:29","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7431:3:29"},"nodeType":"YulFunctionCall","src":"7431:17:29"},{"name":"pos","nodeType":"YulIdentifier","src":"7450:3:29"},{"name":"length","nodeType":"YulIdentifier","src":"7455:6:29"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"7396:34:29"},"nodeType":"YulFunctionCall","src":"7396:66:29"},"nodeType":"YulExpressionStatement","src":"7396:66:29"},{"nodeType":"YulVariableDeclaration","src":"7471:29:29","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7488:3:29"},{"name":"length","nodeType":"YulIdentifier","src":"7493:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7484:3:29"},"nodeType":"YulFunctionCall","src":"7484:16:29"},"variables":[{"name":"end_1","nodeType":"YulTypedName","src":"7475:5:29","type":""}]},{"nodeType":"YulVariableDeclaration","src":"7509:13:29","value":{"hexValue":"2e","kind":"string","nodeType":"YulLiteral","src":"7519:3:29","type":"","value":"."},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"7513:2:29","type":""}]},{"expression":{"arguments":[{"name":"end_1","nodeType":"YulIdentifier","src":"7538:5:29"},{"name":"_1","nodeType":"YulIdentifier","src":"7545:2:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7531:6:29"},"nodeType":"YulFunctionCall","src":"7531:17:29"},"nodeType":"YulExpressionStatement","src":"7531:17:29"},{"nodeType":"YulVariableDeclaration","src":"7557:29:29","value":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"7579:6:29"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"7573:5:29"},"nodeType":"YulFunctionCall","src":"7573:13:29"},"variables":[{"name":"length_1","nodeType":"YulTypedName","src":"7561:8:29","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"7634:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"7642:4:29","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7630:3:29"},"nodeType":"YulFunctionCall","src":"7630:17:29"},{"arguments":[{"name":"end_1","nodeType":"YulIdentifier","src":"7653:5:29"},{"kind":"number","nodeType":"YulLiteral","src":"7660:1:29","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7649:3:29"},"nodeType":"YulFunctionCall","src":"7649:13:29"},{"name":"length_1","nodeType":"YulIdentifier","src":"7664:8:29"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"7595:34:29"},"nodeType":"YulFunctionCall","src":"7595:78:29"},"nodeType":"YulExpressionStatement","src":"7595:78:29"},{"nodeType":"YulVariableDeclaration","src":"7682:30:29","value":{"arguments":[{"name":"end_1","nodeType":"YulIdentifier","src":"7696:5:29"},{"name":"length_1","nodeType":"YulIdentifier","src":"7703:8:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7692:3:29"},"nodeType":"YulFunctionCall","src":"7692:20:29"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"7686:2:29","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"7732:2:29"},{"kind":"number","nodeType":"YulLiteral","src":"7736:1:29","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7728:3:29"},"nodeType":"YulFunctionCall","src":"7728:10:29"},{"name":"_1","nodeType":"YulIdentifier","src":"7740:2:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7721:6:29"},"nodeType":"YulFunctionCall","src":"7721:22:29"},"nodeType":"YulExpressionStatement","src":"7721:22:29"},{"nodeType":"YulVariableDeclaration","src":"7752:29:29","value":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"7774:6:29"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"7768:5:29"},"nodeType":"YulFunctionCall","src":"7768:13:29"},"variables":[{"name":"length_2","nodeType":"YulTypedName","src":"7756:8:29","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"7829:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"7837:4:29","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7825:3:29"},"nodeType":"YulFunctionCall","src":"7825:17:29"},{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"7848:2:29"},{"kind":"number","nodeType":"YulLiteral","src":"7852:1:29","type":"","value":"2"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7844:3:29"},"nodeType":"YulFunctionCall","src":"7844:10:29"},{"name":"length_2","nodeType":"YulIdentifier","src":"7856:8:29"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"7790:34:29"},"nodeType":"YulFunctionCall","src":"7790:75:29"},"nodeType":"YulExpressionStatement","src":"7790:75:29"},{"nodeType":"YulAssignment","src":"7874:32:29","value":{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"7889:2:29"},{"name":"length_2","nodeType":"YulIdentifier","src":"7893:8:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7885:3:29"},"nodeType":"YulFunctionCall","src":"7885:17:29"},{"kind":"number","nodeType":"YulLiteral","src":"7904:1:29","type":"","value":"2"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7881:3:29"},"nodeType":"YulFunctionCall","src":"7881:25:29"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"7874:3:29"}]}]},"name":"abi_encode_tuple_packed_t_string_memory_ptr_t_stringliteral_6f010af653ebe3cb07d297a4ef13366103d392ceffa68dd48232e6e9ff2187bf_t_string_memory_ptr_t_stringliteral_6f010af653ebe3cb07d297a4ef13366103d392ceffa68dd48232e6e9ff2187bf_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"7310:3:29","type":""},{"name":"value2","nodeType":"YulTypedName","src":"7315:6:29","type":""},{"name":"value1","nodeType":"YulTypedName","src":"7323:6:29","type":""},{"name":"value0","nodeType":"YulTypedName","src":"7331:6:29","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"7342:3:29","type":""}],"src":"6913:999:29"},{"body":{"nodeType":"YulBlock","src":"7949:152:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7966:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7969:77:29","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7959:6:29"},"nodeType":"YulFunctionCall","src":"7959:88:29"},"nodeType":"YulExpressionStatement","src":"7959:88:29"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8063:1:29","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"8066:4:29","type":"","value":"0x32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8056:6:29"},"nodeType":"YulFunctionCall","src":"8056:15:29"},"nodeType":"YulExpressionStatement","src":"8056:15:29"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8087:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"8090:4:29","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"8080:6:29"},"nodeType":"YulFunctionCall","src":"8080:15:29"},"nodeType":"YulExpressionStatement","src":"8080:15:29"}]},"name":"panic_error_0x32","nodeType":"YulFunctionDefinition","src":"7917:184:29"},{"body":{"nodeType":"YulBlock","src":"8210:223:29","statements":[{"nodeType":"YulVariableDeclaration","src":"8220:51:29","value":{"arguments":[{"name":"ptr_to_tail","nodeType":"YulIdentifier","src":"8259:11:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"8246:12:29"},"nodeType":"YulFunctionCall","src":"8246:25:29"},"variables":[{"name":"rel_offset_of_tail","nodeType":"YulTypedName","src":"8224:18:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"8361:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8370:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"8373:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"8363:6:29"},"nodeType":"YulFunctionCall","src":"8363:12:29"},"nodeType":"YulExpressionStatement","src":"8363:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"rel_offset_of_tail","nodeType":"YulIdentifier","src":"8294:18:29"},{"arguments":[{"arguments":[{"arguments":[],"functionName":{"name":"calldatasize","nodeType":"YulIdentifier","src":"8322:12:29"},"nodeType":"YulFunctionCall","src":"8322:14:29"},{"name":"base_ref","nodeType":"YulIdentifier","src":"8338:8:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"8318:3:29"},"nodeType":"YulFunctionCall","src":"8318:29:29"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8353:3:29","type":"","value":"318"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"8349:3:29"},"nodeType":"YulFunctionCall","src":"8349:8:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8314:3:29"},"nodeType":"YulFunctionCall","src":"8314:44:29"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"8290:3:29"},"nodeType":"YulFunctionCall","src":"8290:69:29"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"8283:6:29"},"nodeType":"YulFunctionCall","src":"8283:77:29"},"nodeType":"YulIf","src":"8280:97:29"},{"nodeType":"YulAssignment","src":"8386:41:29","value":{"arguments":[{"name":"base_ref","nodeType":"YulIdentifier","src":"8398:8:29"},{"name":"rel_offset_of_tail","nodeType":"YulIdentifier","src":"8408:18:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8394:3:29"},"nodeType":"YulFunctionCall","src":"8394:33:29"},"variableNames":[{"name":"addr","nodeType":"YulIdentifier","src":"8386:4:29"}]}]},"name":"access_calldata_tail_t_struct$_Attestation_$45_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"base_ref","nodeType":"YulTypedName","src":"8175:8:29","type":""},{"name":"ptr_to_tail","nodeType":"YulTypedName","src":"8185:11:29","type":""}],"returnVariables":[{"name":"addr","nodeType":"YulTypedName","src":"8201:4:29","type":""}],"src":"8106:327:29"},{"body":{"nodeType":"YulBlock","src":"8612:236:29","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8629:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"8640:2:29","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8622:6:29"},"nodeType":"YulFunctionCall","src":"8622:21:29"},"nodeType":"YulExpressionStatement","src":"8622:21:29"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8663:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"8674:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8659:3:29"},"nodeType":"YulFunctionCall","src":"8659:18:29"},{"kind":"number","nodeType":"YulLiteral","src":"8679:2:29","type":"","value":"46"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8652:6:29"},"nodeType":"YulFunctionCall","src":"8652:30:29"},"nodeType":"YulExpressionStatement","src":"8652:30:29"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8702:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"8713:2:29","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8698:3:29"},"nodeType":"YulFunctionCall","src":"8698:18:29"},{"hexValue":"496e697469616c697a61626c653a20636f6e747261637420697320616c726561","kind":"string","nodeType":"YulLiteral","src":"8718:34:29","type":"","value":"Initializable: contract is alrea"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8691:6:29"},"nodeType":"YulFunctionCall","src":"8691:62:29"},"nodeType":"YulExpressionStatement","src":"8691:62:29"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8773:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"8784:2:29","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8769:3:29"},"nodeType":"YulFunctionCall","src":"8769:18:29"},{"hexValue":"647920696e697469616c697a6564","kind":"string","nodeType":"YulLiteral","src":"8789:16:29","type":"","value":"dy initialized"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8762:6:29"},"nodeType":"YulFunctionCall","src":"8762:44:29"},"nodeType":"YulExpressionStatement","src":"8762:44:29"},{"nodeType":"YulAssignment","src":"8815:27:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8827:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"8838:3:29","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8823:3:29"},"nodeType":"YulFunctionCall","src":"8823:19:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"8815:4:29"}]}]},"name":"abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8589:9:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"8603:4:29","type":""}],"src":"8438:410:29"},{"body":{"nodeType":"YulBlock","src":"9045:66:29","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9062:3:29"},{"hexValue":"617070726f766564","kind":"string","nodeType":"YulLiteral","src":"9067:10:29","type":"","value":"approved"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9055:6:29"},"nodeType":"YulFunctionCall","src":"9055:23:29"},"nodeType":"YulExpressionStatement","src":"9055:23:29"},{"nodeType":"YulAssignment","src":"9087:18:29","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9098:3:29"},{"kind":"number","nodeType":"YulLiteral","src":"9103:1:29","type":"","value":"8"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9094:3:29"},"nodeType":"YulFunctionCall","src":"9094:11:29"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"9087:3:29"}]}]},"name":"abi_encode_tuple_packed_t_stringliteral_2b29265fc125740ae6bbc5035ae7af720b6932f4a3e44ba5ac02955c21ca9a05__to_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"9029:3:29","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"9037:3:29","type":""}],"src":"8853:258:29"},{"body":{"nodeType":"YulBlock","src":"9308:67:29","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9325:3:29"},{"hexValue":"636f6d706c65746564","kind":"string","nodeType":"YulLiteral","src":"9330:11:29","type":"","value":"completed"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9318:6:29"},"nodeType":"YulFunctionCall","src":"9318:24:29"},"nodeType":"YulExpressionStatement","src":"9318:24:29"},{"nodeType":"YulAssignment","src":"9351:18:29","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9362:3:29"},{"kind":"number","nodeType":"YulLiteral","src":"9367:1:29","type":"","value":"9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9358:3:29"},"nodeType":"YulFunctionCall","src":"9358:11:29"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"9351:3:29"}]}]},"name":"abi_encode_tuple_packed_t_stringliteral_6216ba39af4188a6d7c765710d7e6075007c3444b59a22a973d1b958c43e60bb__to_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"9292:3:29","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"9300:3:29","type":""}],"src":"9116:259:29"},{"body":{"nodeType":"YulBlock","src":"9572:66:29","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9589:3:29"},{"hexValue":"72656a6563746564","kind":"string","nodeType":"YulLiteral","src":"9594:10:29","type":"","value":"rejected"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9582:6:29"},"nodeType":"YulFunctionCall","src":"9582:23:29"},"nodeType":"YulExpressionStatement","src":"9582:23:29"},{"nodeType":"YulAssignment","src":"9614:18:29","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9625:3:29"},{"kind":"number","nodeType":"YulLiteral","src":"9630:1:29","type":"","value":"8"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9621:3:29"},"nodeType":"YulFunctionCall","src":"9621:11:29"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"9614:3:29"}]}]},"name":"abi_encode_tuple_packed_t_stringliteral_5e679716a01be890d854f2c1c5cb5336603215e65ff238044a5b11c586f61c1d__to_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"9556:3:29","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"9564:3:29","type":""}],"src":"9380:258:29"},{"body":{"nodeType":"YulBlock","src":"9750:87:29","statements":[{"nodeType":"YulAssignment","src":"9760:26:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9772:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"9783:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9768:3:29"},"nodeType":"YulFunctionCall","src":"9768:18:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"9760:4:29"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9802:9:29"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"9817:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"9825:4:29","type":"","value":"0xff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"9813:3:29"},"nodeType":"YulFunctionCall","src":"9813:17:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9795:6:29"},"nodeType":"YulFunctionCall","src":"9795:36:29"},"nodeType":"YulExpressionStatement","src":"9795:36:29"}]},"name":"abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9719:9:29","type":""},{"name":"value0","nodeType":"YulTypedName","src":"9730:6:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"9741:4:29","type":""}],"src":"9643:194:29"},{"body":{"nodeType":"YulBlock","src":"9923:103:29","statements":[{"body":{"nodeType":"YulBlock","src":"9969:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9978:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9981:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9971:6:29"},"nodeType":"YulFunctionCall","src":"9971:12:29"},"nodeType":"YulExpressionStatement","src":"9971:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"9944:7:29"},{"name":"headStart","nodeType":"YulIdentifier","src":"9953:9:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"9940:3:29"},"nodeType":"YulFunctionCall","src":"9940:23:29"},{"kind":"number","nodeType":"YulLiteral","src":"9965:2:29","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"9936:3:29"},"nodeType":"YulFunctionCall","src":"9936:32:29"},"nodeType":"YulIf","src":"9933:52:29"},{"nodeType":"YulAssignment","src":"9994:26:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10010:9:29"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"10004:5:29"},"nodeType":"YulFunctionCall","src":"10004:16:29"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"9994:6:29"}]}]},"name":"abi_decode_tuple_t_bytes32_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9889:9:29","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"9900:7:29","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"9912:6:29","type":""}],"src":"9842:184:29"},{"body":{"nodeType":"YulBlock","src":"10205:228:29","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10222:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"10233:2:29","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10215:6:29"},"nodeType":"YulFunctionCall","src":"10215:21:29"},"nodeType":"YulExpressionStatement","src":"10215:21:29"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10256:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"10267:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10252:3:29"},"nodeType":"YulFunctionCall","src":"10252:18:29"},{"kind":"number","nodeType":"YulLiteral","src":"10272:2:29","type":"","value":"38"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10245:6:29"},"nodeType":"YulFunctionCall","src":"10245:30:29"},"nodeType":"YulExpressionStatement","src":"10245:30:29"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10295:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"10306:2:29","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10291:3:29"},"nodeType":"YulFunctionCall","src":"10291:18:29"},{"hexValue":"4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061","kind":"string","nodeType":"YulLiteral","src":"10311:34:29","type":"","value":"Ownable: new owner is the zero a"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10284:6:29"},"nodeType":"YulFunctionCall","src":"10284:62:29"},"nodeType":"YulExpressionStatement","src":"10284:62:29"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10366:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"10377:2:29","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10362:3:29"},"nodeType":"YulFunctionCall","src":"10362:18:29"},{"hexValue":"646472657373","kind":"string","nodeType":"YulLiteral","src":"10382:8:29","type":"","value":"ddress"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10355:6:29"},"nodeType":"YulFunctionCall","src":"10355:36:29"},"nodeType":"YulExpressionStatement","src":"10355:36:29"},{"nodeType":"YulAssignment","src":"10400:27:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10412:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"10423:3:29","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10408:3:29"},"nodeType":"YulFunctionCall","src":"10408:19:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"10400:4:29"}]}]},"name":"abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"10182:9:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"10196:4:29","type":""}],"src":"10031:402:29"},{"body":{"nodeType":"YulBlock","src":"10612:160:29","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10629:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"10640:2:29","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10622:6:29"},"nodeType":"YulFunctionCall","src":"10622:21:29"},"nodeType":"YulExpressionStatement","src":"10622:21:29"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10663:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"10674:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10659:3:29"},"nodeType":"YulFunctionCall","src":"10659:18:29"},{"kind":"number","nodeType":"YulLiteral","src":"10679:2:29","type":"","value":"10"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10652:6:29"},"nodeType":"YulFunctionCall","src":"10652:30:29"},"nodeType":"YulExpressionStatement","src":"10652:30:29"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10702:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"10713:2:29","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10698:3:29"},"nodeType":"YulFunctionCall","src":"10698:18:29"},{"hexValue":"4e6f74206f776e65722e","kind":"string","nodeType":"YulLiteral","src":"10718:12:29","type":"","value":"Not owner."}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10691:6:29"},"nodeType":"YulFunctionCall","src":"10691:40:29"},"nodeType":"YulExpressionStatement","src":"10691:40:29"},{"nodeType":"YulAssignment","src":"10740:26:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10752:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"10763:2:29","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10748:3:29"},"nodeType":"YulFunctionCall","src":"10748:18:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"10740:4:29"}]}]},"name":"abi_encode_tuple_t_stringliteral_bf2878a0327c5efcb59586051281508822c0d430e7858d25ba3f27d805f4146d__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"10589:9:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"10603:4:29","type":""}],"src":"10438:334:29"},{"body":{"nodeType":"YulBlock","src":"10809:152:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10826:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"10829:77:29","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10819:6:29"},"nodeType":"YulFunctionCall","src":"10819:88:29"},"nodeType":"YulExpressionStatement","src":"10819:88:29"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10923:1:29","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"10926:4:29","type":"","value":"0x12"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10916:6:29"},"nodeType":"YulFunctionCall","src":"10916:15:29"},"nodeType":"YulExpressionStatement","src":"10916:15:29"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10947:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"10950:4:29","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"10940:6:29"},"nodeType":"YulFunctionCall","src":"10940:15:29"},"nodeType":"YulExpressionStatement","src":"10940:15:29"}]},"name":"panic_error_0x12","nodeType":"YulFunctionDefinition","src":"10777:184:29"},{"body":{"nodeType":"YulBlock","src":"11140:182:29","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11157:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"11168:2:29","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11150:6:29"},"nodeType":"YulFunctionCall","src":"11150:21:29"},"nodeType":"YulExpressionStatement","src":"11150:21:29"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11191:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"11202:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11187:3:29"},"nodeType":"YulFunctionCall","src":"11187:18:29"},{"kind":"number","nodeType":"YulLiteral","src":"11207:2:29","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11180:6:29"},"nodeType":"YulFunctionCall","src":"11180:30:29"},"nodeType":"YulExpressionStatement","src":"11180:30:29"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11230:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"11241:2:29","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11226:3:29"},"nodeType":"YulFunctionCall","src":"11226:18:29"},{"hexValue":"4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572","kind":"string","nodeType":"YulLiteral","src":"11246:34:29","type":"","value":"Ownable: caller is not the owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11219:6:29"},"nodeType":"YulFunctionCall","src":"11219:62:29"},"nodeType":"YulExpressionStatement","src":"11219:62:29"},{"nodeType":"YulAssignment","src":"11290:26:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11302:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"11313:2:29","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11298:3:29"},"nodeType":"YulFunctionCall","src":"11298:18:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"11290:4:29"}]}]},"name":"abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"11117:9:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"11131:4:29","type":""}],"src":"10966:356:29"},{"body":{"nodeType":"YulBlock","src":"11501:176:29","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11518:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"11529:2:29","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11511:6:29"},"nodeType":"YulFunctionCall","src":"11511:21:29"},"nodeType":"YulExpressionStatement","src":"11511:21:29"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11552:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"11563:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11548:3:29"},"nodeType":"YulFunctionCall","src":"11548:18:29"},{"kind":"number","nodeType":"YulLiteral","src":"11568:2:29","type":"","value":"26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11541:6:29"},"nodeType":"YulFunctionCall","src":"11541:30:29"},"nodeType":"YulExpressionStatement","src":"11541:30:29"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11591:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"11602:2:29","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11587:3:29"},"nodeType":"YulFunctionCall","src":"11587:18:29"},{"hexValue":"496e76616c6964207265666572726564206d696c6573746f6e65","kind":"string","nodeType":"YulLiteral","src":"11607:28:29","type":"","value":"Invalid referred milestone"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11580:6:29"},"nodeType":"YulFunctionCall","src":"11580:56:29"},"nodeType":"YulExpressionStatement","src":"11580:56:29"},{"nodeType":"YulAssignment","src":"11645:26:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11657:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"11668:2:29","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11653:3:29"},"nodeType":"YulFunctionCall","src":"11653:18:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"11645:4:29"}]}]},"name":"abi_encode_tuple_t_stringliteral_c8d92ba241a01d394399edff03dbdd829b53a5aee4d8b9ac9494e05c9df945d7__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"11478:9:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"11492:4:29","type":""}],"src":"11327:350:29"},{"body":{"nodeType":"YulBlock","src":"11776:427:29","statements":[{"nodeType":"YulVariableDeclaration","src":"11786:51:29","value":{"arguments":[{"name":"ptr_to_tail","nodeType":"YulIdentifier","src":"11825:11:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"11812:12:29"},"nodeType":"YulFunctionCall","src":"11812:25:29"},"variables":[{"name":"rel_offset_of_tail","nodeType":"YulTypedName","src":"11790:18:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"11926:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11935:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"11938:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"11928:6:29"},"nodeType":"YulFunctionCall","src":"11928:12:29"},"nodeType":"YulExpressionStatement","src":"11928:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"rel_offset_of_tail","nodeType":"YulIdentifier","src":"11860:18:29"},{"arguments":[{"arguments":[{"arguments":[],"functionName":{"name":"calldatasize","nodeType":"YulIdentifier","src":"11888:12:29"},"nodeType":"YulFunctionCall","src":"11888:14:29"},{"name":"base_ref","nodeType":"YulIdentifier","src":"11904:8:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"11884:3:29"},"nodeType":"YulFunctionCall","src":"11884:29:29"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11919:2:29","type":"","value":"30"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"11915:3:29"},"nodeType":"YulFunctionCall","src":"11915:7:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11880:3:29"},"nodeType":"YulFunctionCall","src":"11880:43:29"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"11856:3:29"},"nodeType":"YulFunctionCall","src":"11856:68:29"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"11849:6:29"},"nodeType":"YulFunctionCall","src":"11849:76:29"},"nodeType":"YulIf","src":"11846:96:29"},{"nodeType":"YulVariableDeclaration","src":"11951:47:29","value":{"arguments":[{"name":"base_ref","nodeType":"YulIdentifier","src":"11969:8:29"},{"name":"rel_offset_of_tail","nodeType":"YulIdentifier","src":"11979:18:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11965:3:29"},"nodeType":"YulFunctionCall","src":"11965:33:29"},"variables":[{"name":"addr_1","nodeType":"YulTypedName","src":"11955:6:29","type":""}]},{"nodeType":"YulAssignment","src":"12007:30:29","value":{"arguments":[{"name":"addr_1","nodeType":"YulIdentifier","src":"12030:6:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"12017:12:29"},"nodeType":"YulFunctionCall","src":"12017:20:29"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"12007:6:29"}]},{"body":{"nodeType":"YulBlock","src":"12080:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12089:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"12092:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"12082:6:29"},"nodeType":"YulFunctionCall","src":"12082:12:29"},"nodeType":"YulExpressionStatement","src":"12082:12:29"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"12052:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"12060:18:29","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"12049:2:29"},"nodeType":"YulFunctionCall","src":"12049:30:29"},"nodeType":"YulIf","src":"12046:50:29"},{"nodeType":"YulAssignment","src":"12105:25:29","value":{"arguments":[{"name":"addr_1","nodeType":"YulIdentifier","src":"12117:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"12125:4:29","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12113:3:29"},"nodeType":"YulFunctionCall","src":"12113:17:29"},"variableNames":[{"name":"addr","nodeType":"YulIdentifier","src":"12105:4:29"}]},{"body":{"nodeType":"YulBlock","src":"12181:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12190:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"12193:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"12183:6:29"},"nodeType":"YulFunctionCall","src":"12183:12:29"},"nodeType":"YulExpressionStatement","src":"12183:12:29"}]},"condition":{"arguments":[{"name":"addr","nodeType":"YulIdentifier","src":"12146:4:29"},{"arguments":[{"arguments":[],"functionName":{"name":"calldatasize","nodeType":"YulIdentifier","src":"12156:12:29"},"nodeType":"YulFunctionCall","src":"12156:14:29"},{"name":"length","nodeType":"YulIdentifier","src":"12172:6:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"12152:3:29"},"nodeType":"YulFunctionCall","src":"12152:27:29"}],"functionName":{"name":"sgt","nodeType":"YulIdentifier","src":"12142:3:29"},"nodeType":"YulFunctionCall","src":"12142:38:29"},"nodeType":"YulIf","src":"12139:58:29"}]},"name":"access_calldata_tail_t_bytes_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"base_ref","nodeType":"YulTypedName","src":"11733:8:29","type":""},{"name":"ptr_to_tail","nodeType":"YulTypedName","src":"11743:11:29","type":""}],"returnVariables":[{"name":"addr","nodeType":"YulTypedName","src":"11759:4:29","type":""},{"name":"length","nodeType":"YulTypedName","src":"11765:6:29","type":""}],"src":"11682:521:29"},{"body":{"nodeType":"YulBlock","src":"12267:116:29","statements":[{"nodeType":"YulAssignment","src":"12277:22:29","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"12292:6:29"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"12286:5:29"},"nodeType":"YulFunctionCall","src":"12286:13:29"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"12277:5:29"}]},{"body":{"nodeType":"YulBlock","src":"12361:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12370:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"12373:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"12363:6:29"},"nodeType":"YulFunctionCall","src":"12363:12:29"},"nodeType":"YulExpressionStatement","src":"12363:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"12321:5:29"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"12332:5:29"},{"kind":"number","nodeType":"YulLiteral","src":"12339:18:29","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"12328:3:29"},"nodeType":"YulFunctionCall","src":"12328:30:29"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"12318:2:29"},"nodeType":"YulFunctionCall","src":"12318:41:29"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"12311:6:29"},"nodeType":"YulFunctionCall","src":"12311:49:29"},"nodeType":"YulIf","src":"12308:69:29"}]},"name":"abi_decode_uint64_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"12246:6:29","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"12257:5:29","type":""}],"src":"12208:175:29"},{"body":{"nodeType":"YulBlock","src":"12448:98:29","statements":[{"nodeType":"YulAssignment","src":"12458:22:29","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"12473:6:29"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"12467:5:29"},"nodeType":"YulFunctionCall","src":"12467:13:29"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"12458:5:29"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"12534:5:29"}],"functionName":{"name":"validator_revert_contract_ICommunityResolver","nodeType":"YulIdentifier","src":"12489:44:29"},"nodeType":"YulFunctionCall","src":"12489:51:29"},"nodeType":"YulExpressionStatement","src":"12489:51:29"}]},"name":"abi_decode_address_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"12427:6:29","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"12438:5:29","type":""}],"src":"12388:158:29"},{"body":{"nodeType":"YulBlock","src":"12608:107:29","statements":[{"nodeType":"YulAssignment","src":"12618:22:29","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"12633:6:29"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"12627:5:29"},"nodeType":"YulFunctionCall","src":"12627:13:29"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"12618:5:29"}]},{"body":{"nodeType":"YulBlock","src":"12693:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12702:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"12705:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"12695:6:29"},"nodeType":"YulFunctionCall","src":"12695:12:29"},"nodeType":"YulExpressionStatement","src":"12695:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"12662:5:29"},{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"12683:5:29"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"12676:6:29"},"nodeType":"YulFunctionCall","src":"12676:13:29"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"12669:6:29"},"nodeType":"YulFunctionCall","src":"12669:21:29"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"12659:2:29"},"nodeType":"YulFunctionCall","src":"12659:32:29"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"12652:6:29"},"nodeType":"YulFunctionCall","src":"12652:40:29"},"nodeType":"YulIf","src":"12649:60:29"}]},"name":"abi_decode_bool_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"12587:6:29","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"12598:5:29","type":""}],"src":"12551:164:29"},{"body":{"nodeType":"YulBlock","src":"12828:1162:29","statements":[{"body":{"nodeType":"YulBlock","src":"12874:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12883:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"12886:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"12876:6:29"},"nodeType":"YulFunctionCall","src":"12876:12:29"},"nodeType":"YulExpressionStatement","src":"12876:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"12849:7:29"},{"name":"headStart","nodeType":"YulIdentifier","src":"12858:9:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"12845:3:29"},"nodeType":"YulFunctionCall","src":"12845:23:29"},{"kind":"number","nodeType":"YulLiteral","src":"12870:2:29","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"12841:3:29"},"nodeType":"YulFunctionCall","src":"12841:32:29"},"nodeType":"YulIf","src":"12838:52:29"},{"nodeType":"YulVariableDeclaration","src":"12899:30:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12919:9:29"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"12913:5:29"},"nodeType":"YulFunctionCall","src":"12913:16:29"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"12903:6:29","type":""}]},{"nodeType":"YulVariableDeclaration","src":"12938:28:29","value":{"kind":"number","nodeType":"YulLiteral","src":"12948:18:29","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"12942:2:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"12993:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13002:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"13005:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"12995:6:29"},"nodeType":"YulFunctionCall","src":"12995:12:29"},"nodeType":"YulExpressionStatement","src":"12995:12:29"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"12981:6:29"},{"name":"_1","nodeType":"YulIdentifier","src":"12989:2:29"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"12978:2:29"},"nodeType":"YulFunctionCall","src":"12978:14:29"},"nodeType":"YulIf","src":"12975:34:29"},{"nodeType":"YulVariableDeclaration","src":"13018:32:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13032:9:29"},{"name":"offset","nodeType":"YulIdentifier","src":"13043:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13028:3:29"},"nodeType":"YulFunctionCall","src":"13028:22:29"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"13022:2:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"13092:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13101:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"13104:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"13094:6:29"},"nodeType":"YulFunctionCall","src":"13094:12:29"},"nodeType":"YulExpressionStatement","src":"13094:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"13070:7:29"},{"name":"_2","nodeType":"YulIdentifier","src":"13079:2:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"13066:3:29"},"nodeType":"YulFunctionCall","src":"13066:16:29"},{"kind":"number","nodeType":"YulLiteral","src":"13084:6:29","type":"","value":"0x0140"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"13062:3:29"},"nodeType":"YulFunctionCall","src":"13062:29:29"},"nodeType":"YulIf","src":"13059:49:29"},{"nodeType":"YulVariableDeclaration","src":"13117:35:29","value":{"arguments":[],"functionName":{"name":"allocate_memory_2073","nodeType":"YulIdentifier","src":"13130:20:29"},"nodeType":"YulFunctionCall","src":"13130:22:29"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"13121:5:29","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"13168:5:29"},{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"13181:2:29"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"13175:5:29"},"nodeType":"YulFunctionCall","src":"13175:9:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13161:6:29"},"nodeType":"YulFunctionCall","src":"13161:24:29"},"nodeType":"YulExpressionStatement","src":"13161:24:29"},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"13205:5:29"},{"kind":"number","nodeType":"YulLiteral","src":"13212:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13201:3:29"},"nodeType":"YulFunctionCall","src":"13201:14:29"},{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"13227:2:29"},{"kind":"number","nodeType":"YulLiteral","src":"13231:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13223:3:29"},"nodeType":"YulFunctionCall","src":"13223:11:29"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"13217:5:29"},"nodeType":"YulFunctionCall","src":"13217:18:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13194:6:29"},"nodeType":"YulFunctionCall","src":"13194:42:29"},"nodeType":"YulExpressionStatement","src":"13194:42:29"},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"13256:5:29"},{"kind":"number","nodeType":"YulLiteral","src":"13263:2:29","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13252:3:29"},"nodeType":"YulFunctionCall","src":"13252:14:29"},{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"13301:2:29"},{"kind":"number","nodeType":"YulLiteral","src":"13305:2:29","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13297:3:29"},"nodeType":"YulFunctionCall","src":"13297:11:29"}],"functionName":{"name":"abi_decode_uint64_fromMemory","nodeType":"YulIdentifier","src":"13268:28:29"},"nodeType":"YulFunctionCall","src":"13268:41:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13245:6:29"},"nodeType":"YulFunctionCall","src":"13245:65:29"},"nodeType":"YulExpressionStatement","src":"13245:65:29"},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"13330:5:29"},{"kind":"number","nodeType":"YulLiteral","src":"13337:2:29","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13326:3:29"},"nodeType":"YulFunctionCall","src":"13326:14:29"},{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"13375:2:29"},{"kind":"number","nodeType":"YulLiteral","src":"13379:2:29","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13371:3:29"},"nodeType":"YulFunctionCall","src":"13371:11:29"}],"functionName":{"name":"abi_decode_uint64_fromMemory","nodeType":"YulIdentifier","src":"13342:28:29"},"nodeType":"YulFunctionCall","src":"13342:41:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13319:6:29"},"nodeType":"YulFunctionCall","src":"13319:65:29"},"nodeType":"YulExpressionStatement","src":"13319:65:29"},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"13404:5:29"},{"kind":"number","nodeType":"YulLiteral","src":"13411:3:29","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13400:3:29"},"nodeType":"YulFunctionCall","src":"13400:15:29"},{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"13450:2:29"},{"kind":"number","nodeType":"YulLiteral","src":"13454:3:29","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13446:3:29"},"nodeType":"YulFunctionCall","src":"13446:12:29"}],"functionName":{"name":"abi_decode_uint64_fromMemory","nodeType":"YulIdentifier","src":"13417:28:29"},"nodeType":"YulFunctionCall","src":"13417:42:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13393:6:29"},"nodeType":"YulFunctionCall","src":"13393:67:29"},"nodeType":"YulExpressionStatement","src":"13393:67:29"},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"13480:5:29"},{"kind":"number","nodeType":"YulLiteral","src":"13487:3:29","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13476:3:29"},"nodeType":"YulFunctionCall","src":"13476:15:29"},{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"13503:2:29"},{"kind":"number","nodeType":"YulLiteral","src":"13507:3:29","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13499:3:29"},"nodeType":"YulFunctionCall","src":"13499:12:29"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"13493:5:29"},"nodeType":"YulFunctionCall","src":"13493:19:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13469:6:29"},"nodeType":"YulFunctionCall","src":"13469:44:29"},"nodeType":"YulExpressionStatement","src":"13469:44:29"},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"13533:5:29"},{"kind":"number","nodeType":"YulLiteral","src":"13540:3:29","type":"","value":"192"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13529:3:29"},"nodeType":"YulFunctionCall","src":"13529:15:29"},{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"13580:2:29"},{"kind":"number","nodeType":"YulLiteral","src":"13584:3:29","type":"","value":"192"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13576:3:29"},"nodeType":"YulFunctionCall","src":"13576:12:29"}],"functionName":{"name":"abi_decode_address_fromMemory","nodeType":"YulIdentifier","src":"13546:29:29"},"nodeType":"YulFunctionCall","src":"13546:43:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13522:6:29"},"nodeType":"YulFunctionCall","src":"13522:68:29"},"nodeType":"YulExpressionStatement","src":"13522:68:29"},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"13610:5:29"},{"kind":"number","nodeType":"YulLiteral","src":"13617:3:29","type":"","value":"224"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13606:3:29"},"nodeType":"YulFunctionCall","src":"13606:15:29"},{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"13657:2:29"},{"kind":"number","nodeType":"YulLiteral","src":"13661:3:29","type":"","value":"224"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13653:3:29"},"nodeType":"YulFunctionCall","src":"13653:12:29"}],"functionName":{"name":"abi_decode_address_fromMemory","nodeType":"YulIdentifier","src":"13623:29:29"},"nodeType":"YulFunctionCall","src":"13623:43:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13599:6:29"},"nodeType":"YulFunctionCall","src":"13599:68:29"},"nodeType":"YulExpressionStatement","src":"13599:68:29"},{"nodeType":"YulVariableDeclaration","src":"13676:13:29","value":{"kind":"number","nodeType":"YulLiteral","src":"13686:3:29","type":"","value":"256"},"variables":[{"name":"_3","nodeType":"YulTypedName","src":"13680:2:29","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"13709:5:29"},{"name":"_3","nodeType":"YulIdentifier","src":"13716:2:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13705:3:29"},"nodeType":"YulFunctionCall","src":"13705:14:29"},{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"13752:2:29"},{"name":"_3","nodeType":"YulIdentifier","src":"13756:2:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13748:3:29"},"nodeType":"YulFunctionCall","src":"13748:11:29"}],"functionName":{"name":"abi_decode_bool_fromMemory","nodeType":"YulIdentifier","src":"13721:26:29"},"nodeType":"YulFunctionCall","src":"13721:39:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13698:6:29"},"nodeType":"YulFunctionCall","src":"13698:63:29"},"nodeType":"YulExpressionStatement","src":"13698:63:29"},{"nodeType":"YulVariableDeclaration","src":"13770:13:29","value":{"kind":"number","nodeType":"YulLiteral","src":"13780:3:29","type":"","value":"288"},"variables":[{"name":"_4","nodeType":"YulTypedName","src":"13774:2:29","type":""}]},{"nodeType":"YulVariableDeclaration","src":"13792:34:29","value":{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"13818:2:29"},{"name":"_4","nodeType":"YulIdentifier","src":"13822:2:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13814:3:29"},"nodeType":"YulFunctionCall","src":"13814:11:29"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"13808:5:29"},"nodeType":"YulFunctionCall","src":"13808:18:29"},"variables":[{"name":"offset_1","nodeType":"YulTypedName","src":"13796:8:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"13855:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13864:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"13867:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"13857:6:29"},"nodeType":"YulFunctionCall","src":"13857:12:29"},"nodeType":"YulExpressionStatement","src":"13857:12:29"}]},"condition":{"arguments":[{"name":"offset_1","nodeType":"YulIdentifier","src":"13841:8:29"},{"name":"_1","nodeType":"YulIdentifier","src":"13851:2:29"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"13838:2:29"},"nodeType":"YulFunctionCall","src":"13838:16:29"},"nodeType":"YulIf","src":"13835:36:29"},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"13891:5:29"},{"name":"_4","nodeType":"YulIdentifier","src":"13898:2:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13887:3:29"},"nodeType":"YulFunctionCall","src":"13887:14:29"},{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"13936:2:29"},{"name":"offset_1","nodeType":"YulIdentifier","src":"13940:8:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13932:3:29"},"nodeType":"YulFunctionCall","src":"13932:17:29"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"13951:7:29"}],"functionName":{"name":"abi_decode_string_fromMemory","nodeType":"YulIdentifier","src":"13903:28:29"},"nodeType":"YulFunctionCall","src":"13903:56:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13880:6:29"},"nodeType":"YulFunctionCall","src":"13880:80:29"},"nodeType":"YulExpressionStatement","src":"13880:80:29"},{"nodeType":"YulAssignment","src":"13969:15:29","value":{"name":"value","nodeType":"YulIdentifier","src":"13979:5:29"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"13969:6:29"}]}]},"name":"abi_decode_tuple_t_struct$_Attestation_$45_memory_ptr_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"12794:9:29","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"12805:7:29","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"12817:6:29","type":""}],"src":"12720:1270:29"},{"body":{"nodeType":"YulBlock","src":"14169:177:29","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14186:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"14197:2:29","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14179:6:29"},"nodeType":"YulFunctionCall","src":"14179:21:29"},"nodeType":"YulExpressionStatement","src":"14179:21:29"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14220:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"14231:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14216:3:29"},"nodeType":"YulFunctionCall","src":"14216:18:29"},{"kind":"number","nodeType":"YulLiteral","src":"14236:2:29","type":"","value":"27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14209:6:29"},"nodeType":"YulFunctionCall","src":"14209:30:29"},"nodeType":"YulExpressionStatement","src":"14209:30:29"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14259:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"14270:2:29","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14255:3:29"},"nodeType":"YulFunctionCall","src":"14255:18:29"},{"hexValue":"496e76616c6964206d696c6573746f6e65207265666572656e6365","kind":"string","nodeType":"YulLiteral","src":"14275:29:29","type":"","value":"Invalid milestone reference"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14248:6:29"},"nodeType":"YulFunctionCall","src":"14248:57:29"},"nodeType":"YulExpressionStatement","src":"14248:57:29"},{"nodeType":"YulAssignment","src":"14314:26:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14326:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"14337:2:29","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14322:3:29"},"nodeType":"YulFunctionCall","src":"14322:18:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"14314:4:29"}]}]},"name":"abi_encode_tuple_t_stringliteral_904dc0e9fab3e65a75e96a21689602e2df418289adcd3917bdf2ae7f9f8c078b__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"14146:9:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"14160:4:29","type":""}],"src":"13995:351:29"},{"body":{"nodeType":"YulBlock","src":"14525:226:29","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14542:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"14553:2:29","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14535:6:29"},"nodeType":"YulFunctionCall","src":"14535:21:29"},"nodeType":"YulExpressionStatement","src":"14535:21:29"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14576:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"14587:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14572:3:29"},"nodeType":"YulFunctionCall","src":"14572:18:29"},{"kind":"number","nodeType":"YulLiteral","src":"14592:2:29","type":"","value":"36"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14565:6:29"},"nodeType":"YulFunctionCall","src":"14565:30:29"},"nodeType":"YulExpressionStatement","src":"14565:30:29"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14615:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"14626:2:29","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14611:3:29"},"nodeType":"YulFunctionCall","src":"14611:18:29"},{"hexValue":"496e76616c6964206772616e74207265666572656e6365206f6e206d696c6573","kind":"string","nodeType":"YulLiteral","src":"14631:34:29","type":"","value":"Invalid grant reference on miles"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14604:6:29"},"nodeType":"YulFunctionCall","src":"14604:62:29"},"nodeType":"YulExpressionStatement","src":"14604:62:29"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14686:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"14697:2:29","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14682:3:29"},"nodeType":"YulFunctionCall","src":"14682:18:29"},{"hexValue":"746f6e65","kind":"string","nodeType":"YulLiteral","src":"14702:6:29","type":"","value":"tone"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14675:6:29"},"nodeType":"YulFunctionCall","src":"14675:34:29"},"nodeType":"YulExpressionStatement","src":"14675:34:29"},{"nodeType":"YulAssignment","src":"14718:27:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14730:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"14741:3:29","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14726:3:29"},"nodeType":"YulFunctionCall","src":"14726:19:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"14718:4:29"}]}]},"name":"abi_encode_tuple_t_stringliteral_097b7dfef69a49741fd5f77b6fb5b8e666d014c06d719bb64cca3fac9d4602b3__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"14502:9:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"14516:4:29","type":""}],"src":"14351:400:29"},{"body":{"nodeType":"YulBlock","src":"14930:173:29","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14947:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"14958:2:29","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14940:6:29"},"nodeType":"YulFunctionCall","src":"14940:21:29"},"nodeType":"YulExpressionStatement","src":"14940:21:29"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14981:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"14992:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14977:3:29"},"nodeType":"YulFunctionCall","src":"14977:18:29"},{"kind":"number","nodeType":"YulLiteral","src":"14997:2:29","type":"","value":"23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14970:6:29"},"nodeType":"YulFunctionCall","src":"14970:30:29"},"nodeType":"YulExpressionStatement","src":"14970:30:29"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15020:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"15031:2:29","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15016:3:29"},"nodeType":"YulFunctionCall","src":"15016:18:29"},{"hexValue":"496e76616c6964206772616e74207265666572656e6365","kind":"string","nodeType":"YulLiteral","src":"15036:25:29","type":"","value":"Invalid grant reference"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15009:6:29"},"nodeType":"YulFunctionCall","src":"15009:53:29"},"nodeType":"YulExpressionStatement","src":"15009:53:29"},{"nodeType":"YulAssignment","src":"15071:26:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15083:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"15094:2:29","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15079:3:29"},"nodeType":"YulFunctionCall","src":"15079:18:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"15071:4:29"}]}]},"name":"abi_encode_tuple_t_stringliteral_6d7436c5ac5ad34ac90d2a8c36871f55305b7c9e8280bed97bf6354cc8438858__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"14907:9:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"14921:4:29","type":""}],"src":"14756:347:29"},{"body":{"nodeType":"YulBlock","src":"15282:158:29","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15299:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"15310:2:29","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15292:6:29"},"nodeType":"YulFunctionCall","src":"15292:21:29"},"nodeType":"YulExpressionStatement","src":"15292:21:29"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15333:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"15344:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15329:3:29"},"nodeType":"YulFunctionCall","src":"15329:18:29"},{"kind":"number","nodeType":"YulLiteral","src":"15349:1:29","type":"","value":"9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15322:6:29"},"nodeType":"YulFunctionCall","src":"15322:29:29"},"nodeType":"YulExpressionStatement","src":"15322:29:29"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15371:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"15382:2:29","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15367:3:29"},"nodeType":"YulFunctionCall","src":"15367:18:29"},{"hexValue":"4e6f742061646d696e","kind":"string","nodeType":"YulLiteral","src":"15387:11:29","type":"","value":"Not admin"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15360:6:29"},"nodeType":"YulFunctionCall","src":"15360:39:29"},"nodeType":"YulExpressionStatement","src":"15360:39:29"},{"nodeType":"YulAssignment","src":"15408:26:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15420:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"15431:2:29","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15416:3:29"},"nodeType":"YulFunctionCall","src":"15416:18:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"15408:4:29"}]}]},"name":"abi_encode_tuple_t_stringliteral_fa7e120cf98867f00c0ac28b387a73caec64b93b1889065f7b4c5e5232c0bad6__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"15259:9:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"15273:4:29","type":""}],"src":"15108:332:29"},{"body":{"nodeType":"YulBlock","src":"15619:158:29","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15636:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"15647:2:29","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15629:6:29"},"nodeType":"YulFunctionCall","src":"15629:21:29"},"nodeType":"YulExpressionStatement","src":"15629:21:29"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15670:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"15681:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15666:3:29"},"nodeType":"YulFunctionCall","src":"15666:18:29"},{"kind":"number","nodeType":"YulLiteral","src":"15686:1:29","type":"","value":"9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15659:6:29"},"nodeType":"YulFunctionCall","src":"15659:29:29"},"nodeType":"YulExpressionStatement","src":"15659:29:29"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15708:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"15719:2:29","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15704:3:29"},"nodeType":"YulFunctionCall","src":"15704:18:29"},{"hexValue":"4e6f74206f776e6572","kind":"string","nodeType":"YulLiteral","src":"15724:11:29","type":"","value":"Not owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15697:6:29"},"nodeType":"YulFunctionCall","src":"15697:39:29"},"nodeType":"YulExpressionStatement","src":"15697:39:29"},{"nodeType":"YulAssignment","src":"15745:26:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15757:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"15768:2:29","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15753:3:29"},"nodeType":"YulFunctionCall","src":"15753:18:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"15745:4:29"}]}]},"name":"abi_encode_tuple_t_stringliteral_c266efca4f4ed37612271196433531dcbb4fca89a694d568d1e290e32feb1682__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"15596:9:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"15610:4:29","type":""}],"src":"15445:332:29"},{"body":{"nodeType":"YulBlock","src":"15956:177:29","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15973:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"15984:2:29","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15966:6:29"},"nodeType":"YulFunctionCall","src":"15966:21:29"},"nodeType":"YulExpressionStatement","src":"15966:21:29"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16007:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"16018:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16003:3:29"},"nodeType":"YulFunctionCall","src":"16003:18:29"},{"kind":"number","nodeType":"YulLiteral","src":"16023:2:29","type":"","value":"27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15996:6:29"},"nodeType":"YulFunctionCall","src":"15996:30:29"},"nodeType":"YulExpressionStatement","src":"15996:30:29"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16046:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"16057:2:29","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16042:3:29"},"nodeType":"YulFunctionCall","src":"16042:18:29"},{"hexValue":"496e76616c696420636f6d6d756e697479207265666572656e6365","kind":"string","nodeType":"YulLiteral","src":"16062:29:29","type":"","value":"Invalid community reference"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16035:6:29"},"nodeType":"YulFunctionCall","src":"16035:57:29"},"nodeType":"YulExpressionStatement","src":"16035:57:29"},{"nodeType":"YulAssignment","src":"16101:26:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16113:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"16124:2:29","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16109:3:29"},"nodeType":"YulFunctionCall","src":"16109:18:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"16101:4:29"}]}]},"name":"abi_encode_tuple_t_stringliteral_6280dcc46e5ffd6accac4e830af14125986da285d00557ee32e5749338ab89d7__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"15933:9:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"15947:4:29","type":""}],"src":"15782:351:29"},{"body":{"nodeType":"YulBlock","src":"16312:233:29","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16329:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"16340:2:29","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16322:6:29"},"nodeType":"YulFunctionCall","src":"16322:21:29"},"nodeType":"YulExpressionStatement","src":"16322:21:29"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16363:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"16374:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16359:3:29"},"nodeType":"YulFunctionCall","src":"16359:18:29"},{"kind":"number","nodeType":"YulLiteral","src":"16379:2:29","type":"","value":"43"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16352:6:29"},"nodeType":"YulFunctionCall","src":"16352:30:29"},"nodeType":"YulExpressionStatement","src":"16352:30:29"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16402:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"16413:2:29","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16398:3:29"},"nodeType":"YulFunctionCall","src":"16398:18:29"},{"hexValue":"496e697469616c697a61626c653a20636f6e7472616374206973206e6f742069","kind":"string","nodeType":"YulLiteral","src":"16418:34:29","type":"","value":"Initializable: contract is not i"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16391:6:29"},"nodeType":"YulFunctionCall","src":"16391:62:29"},"nodeType":"YulExpressionStatement","src":"16391:62:29"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16473:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"16484:2:29","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16469:3:29"},"nodeType":"YulFunctionCall","src":"16469:18:29"},{"hexValue":"6e697469616c697a696e67","kind":"string","nodeType":"YulLiteral","src":"16489:13:29","type":"","value":"nitializing"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16462:6:29"},"nodeType":"YulFunctionCall","src":"16462:41:29"},"nodeType":"YulExpressionStatement","src":"16462:41:29"},{"nodeType":"YulAssignment","src":"16512:27:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16524:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"16535:3:29","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16520:3:29"},"nodeType":"YulFunctionCall","src":"16520:19:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"16512:4:29"}]}]},"name":"abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"16289:9:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"16303:4:29","type":""}],"src":"16138:407:29"},{"body":{"nodeType":"YulBlock","src":"16679:168:29","statements":[{"nodeType":"YulAssignment","src":"16689:26:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16701:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"16712:2:29","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16697:3:29"},"nodeType":"YulFunctionCall","src":"16697:18:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"16689:4:29"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16731:9:29"},{"name":"value0","nodeType":"YulIdentifier","src":"16742:6:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16724:6:29"},"nodeType":"YulFunctionCall","src":"16724:25:29"},"nodeType":"YulExpressionStatement","src":"16724:25:29"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16769:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"16780:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16765:3:29"},"nodeType":"YulFunctionCall","src":"16765:18:29"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"16789:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"16797:42:29","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"16785:3:29"},"nodeType":"YulFunctionCall","src":"16785:55:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16758:6:29"},"nodeType":"YulFunctionCall","src":"16758:83:29"},"nodeType":"YulExpressionStatement","src":"16758:83:29"}]},"name":"abi_encode_tuple_t_bytes32_t_address__to_t_bytes32_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"16640:9:29","type":""},{"name":"value1","nodeType":"YulTypedName","src":"16651:6:29","type":""},{"name":"value0","nodeType":"YulTypedName","src":"16659:6:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"16670:4:29","type":""}],"src":"16550:297:29"},{"body":{"nodeType":"YulBlock","src":"16930:124:29","statements":[{"body":{"nodeType":"YulBlock","src":"16976:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"16985:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"16988:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"16978:6:29"},"nodeType":"YulFunctionCall","src":"16978:12:29"},"nodeType":"YulExpressionStatement","src":"16978:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"16951:7:29"},{"name":"headStart","nodeType":"YulIdentifier","src":"16960:9:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"16947:3:29"},"nodeType":"YulFunctionCall","src":"16947:23:29"},{"kind":"number","nodeType":"YulLiteral","src":"16972:2:29","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"16943:3:29"},"nodeType":"YulFunctionCall","src":"16943:32:29"},"nodeType":"YulIf","src":"16940:52:29"},{"nodeType":"YulAssignment","src":"17001:47:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17038:9:29"}],"functionName":{"name":"abi_decode_bool_fromMemory","nodeType":"YulIdentifier","src":"17011:26:29"},"nodeType":"YulFunctionCall","src":"17011:37:29"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"17001:6:29"}]}]},"name":"abi_decode_tuple_t_bool_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"16896:9:29","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"16907:7:29","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"16919:6:29","type":""}],"src":"16852:202:29"}]},"contents":"{\n    { }\n    function panic_error_0x41()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function allocate_memory_2073() -> memPtr\n    {\n        memPtr := mload(64)\n        let newFreePtr := add(memPtr, 0x0140)\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n    function allocate_memory(size) -> memPtr\n    {\n        memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(size, 31), not(31)))\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n    function array_allocation_size_bytes(length) -> size\n    {\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n        size := add(and(add(length, 31), not(31)), 0x20)\n    }\n    function abi_decode_tuple_t_bytes_memory_ptr(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        let _1 := add(headStart, offset)\n        if iszero(slt(add(_1, 0x1f), dataEnd)) { revert(0, 0) }\n        let _2 := calldataload(_1)\n        let array := allocate_memory(array_allocation_size_bytes(_2))\n        mstore(array, _2)\n        if gt(add(add(_1, _2), 32), dataEnd) { revert(0, 0) }\n        calldatacopy(add(array, 32), add(_1, 32), _2)\n        mstore(add(add(array, _2), 32), 0)\n        value0 := array\n    }\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function copy_memory_to_memory_with_cleanup(src, dst, length)\n    {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        let length := mload(value0)\n        mstore(add(headStart, 32), length)\n        copy_memory_to_memory_with_cleanup(add(value0, 32), add(headStart, 64), length)\n        tail := add(add(headStart, and(add(length, 31), not(31))), 64)\n    }\n    function abi_decode_array_struct_Attestation_calldata_dyn_calldata(offset, end) -> arrayPos, length\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        length := calldataload(offset)\n        if gt(length, 0xffffffffffffffff) { revert(0, 0) }\n        arrayPos := add(offset, 0x20)\n        if gt(add(add(offset, shl(5, length)), 0x20), end) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_array$_t_struct$_Attestation_$45_calldata_ptr_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let value0_1, value1_1 := abi_decode_array_struct_Attestation_calldata_dyn_calldata(add(headStart, offset), dataEnd)\n        value0 := value0_1\n        value1 := value1_1\n        let offset_1 := calldataload(add(headStart, 32))\n        if gt(offset_1, _1) { revert(0, 0) }\n        let value2_1, value3_1 := abi_decode_array_struct_Attestation_calldata_dyn_calldata(add(headStart, offset_1), dataEnd)\n        value2 := value2_1\n        value3 := value3_1\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function validator_revert_contract_ICommunityResolver(value)\n    {\n        if iszero(eq(value, and(value, 0xffffffffffffffffffffffffffffffffffffffff))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_contract$_ICommunityResolver_$5831(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_contract_ICommunityResolver(value)\n        value0 := value\n    }\n    function abi_decode_tuple_t_struct$_Attestation_$45_calldata_ptr(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        let _1 := add(headStart, offset)\n        if slt(sub(dataEnd, _1), 320) { revert(0, 0) }\n        value0 := _1\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_contract_ICommunityResolver(value)\n        value0 := value\n    }\n    function abi_decode_string_fromMemory(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        let _1 := mload(offset)\n        let array_1 := allocate_memory(array_allocation_size_bytes(_1))\n        mstore(array_1, _1)\n        if gt(add(add(offset, _1), 0x20), end) { revert(0, 0) }\n        copy_memory_to_memory_with_cleanup(add(offset, 0x20), add(array_1, 0x20), _1)\n        array := array_1\n    }\n    function abi_decode_tuple_t_string_memory_ptrt_string_memory_ptr_fromMemory(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let offset := mload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        value0 := abi_decode_string_fromMemory(add(headStart, offset), dataEnd)\n        let offset_1 := mload(add(headStart, 32))\n        if gt(offset_1, _1) { revert(0, 0) }\n        value1 := abi_decode_string_fromMemory(add(headStart, offset_1), dataEnd)\n    }\n    function abi_encode_tuple_packed_t_string_memory_ptr__to_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value0) -> end\n    {\n        let length := mload(value0)\n        copy_memory_to_memory_with_cleanup(add(value0, 0x20), pos, length)\n        end := add(pos, length)\n    }\n    function abi_encode_tuple_t_stringliteral_d3fa315f0692cefa5147859dc5bcffd7cd5202c8eef9347371d8c490e123f860__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 22)\n        mstore(add(headStart, 64), \"Invalid approval type.\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_packed_t_string_memory_ptr_t_stringliteral_6f010af653ebe3cb07d297a4ef13366103d392ceffa68dd48232e6e9ff2187bf_t_string_memory_ptr_t_stringliteral_6f010af653ebe3cb07d297a4ef13366103d392ceffa68dd48232e6e9ff2187bf_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value2, value1, value0) -> end\n    {\n        let length := mload(value0)\n        copy_memory_to_memory_with_cleanup(add(value0, 0x20), pos, length)\n        let end_1 := add(pos, length)\n        let _1 := \".\"\n        mstore(end_1, _1)\n        let length_1 := mload(value1)\n        copy_memory_to_memory_with_cleanup(add(value1, 0x20), add(end_1, 1), length_1)\n        let _2 := add(end_1, length_1)\n        mstore(add(_2, 1), _1)\n        let length_2 := mload(value2)\n        copy_memory_to_memory_with_cleanup(add(value2, 0x20), add(_2, 2), length_2)\n        end := add(add(_2, length_2), 2)\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n    function access_calldata_tail_t_struct$_Attestation_$45_calldata_ptr(base_ref, ptr_to_tail) -> addr\n    {\n        let rel_offset_of_tail := calldataload(ptr_to_tail)\n        if iszero(slt(rel_offset_of_tail, add(sub(calldatasize(), base_ref), not(318)))) { revert(0, 0) }\n        addr := add(base_ref, rel_offset_of_tail)\n    }\n    function abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 46)\n        mstore(add(headStart, 64), \"Initializable: contract is alrea\")\n        mstore(add(headStart, 96), \"dy initialized\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_packed_t_stringliteral_2b29265fc125740ae6bbc5035ae7af720b6932f4a3e44ba5ac02955c21ca9a05__to_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos) -> end\n    {\n        mstore(pos, \"approved\")\n        end := add(pos, 8)\n    }\n    function abi_encode_tuple_packed_t_stringliteral_6216ba39af4188a6d7c765710d7e6075007c3444b59a22a973d1b958c43e60bb__to_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos) -> end\n    {\n        mstore(pos, \"completed\")\n        end := add(pos, 9)\n    }\n    function abi_encode_tuple_packed_t_stringliteral_5e679716a01be890d854f2c1c5cb5336603215e65ff238044a5b11c586f61c1d__to_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos) -> end\n    {\n        mstore(pos, \"rejected\")\n        end := add(pos, 8)\n    }\n    function abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xff))\n    }\n    function abi_decode_tuple_t_bytes32_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := mload(headStart)\n    }\n    function abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"Ownable: new owner is the zero a\")\n        mstore(add(headStart, 96), \"ddress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_bf2878a0327c5efcb59586051281508822c0d430e7858d25ba3f27d805f4146d__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 10)\n        mstore(add(headStart, 64), \"Not owner.\")\n        tail := add(headStart, 96)\n    }\n    function panic_error_0x12()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x12)\n        revert(0, 0x24)\n    }\n    function abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 32)\n        mstore(add(headStart, 64), \"Ownable: caller is not the owner\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_c8d92ba241a01d394399edff03dbdd829b53a5aee4d8b9ac9494e05c9df945d7__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 26)\n        mstore(add(headStart, 64), \"Invalid referred milestone\")\n        tail := add(headStart, 96)\n    }\n    function access_calldata_tail_t_bytes_calldata_ptr(base_ref, ptr_to_tail) -> addr, length\n    {\n        let rel_offset_of_tail := calldataload(ptr_to_tail)\n        if iszero(slt(rel_offset_of_tail, add(sub(calldatasize(), base_ref), not(30)))) { revert(0, 0) }\n        let addr_1 := add(base_ref, rel_offset_of_tail)\n        length := calldataload(addr_1)\n        if gt(length, 0xffffffffffffffff) { revert(0, 0) }\n        addr := add(addr_1, 0x20)\n        if sgt(addr, sub(calldatasize(), length)) { revert(0, 0) }\n    }\n    function abi_decode_uint64_fromMemory(offset) -> value\n    {\n        value := mload(offset)\n        if iszero(eq(value, and(value, 0xffffffffffffffff))) { revert(0, 0) }\n    }\n    function abi_decode_address_fromMemory(offset) -> value\n    {\n        value := mload(offset)\n        validator_revert_contract_ICommunityResolver(value)\n    }\n    function abi_decode_bool_fromMemory(offset) -> value\n    {\n        value := mload(offset)\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_struct$_Attestation_$45_memory_ptr_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let offset := mload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let _2 := add(headStart, offset)\n        if slt(sub(dataEnd, _2), 0x0140) { revert(0, 0) }\n        let value := allocate_memory_2073()\n        mstore(value, mload(_2))\n        mstore(add(value, 32), mload(add(_2, 32)))\n        mstore(add(value, 64), abi_decode_uint64_fromMemory(add(_2, 64)))\n        mstore(add(value, 96), abi_decode_uint64_fromMemory(add(_2, 96)))\n        mstore(add(value, 128), abi_decode_uint64_fromMemory(add(_2, 128)))\n        mstore(add(value, 160), mload(add(_2, 160)))\n        mstore(add(value, 192), abi_decode_address_fromMemory(add(_2, 192)))\n        mstore(add(value, 224), abi_decode_address_fromMemory(add(_2, 224)))\n        let _3 := 256\n        mstore(add(value, _3), abi_decode_bool_fromMemory(add(_2, _3)))\n        let _4 := 288\n        let offset_1 := mload(add(_2, _4))\n        if gt(offset_1, _1) { revert(0, 0) }\n        mstore(add(value, _4), abi_decode_string_fromMemory(add(_2, offset_1), dataEnd))\n        value0 := value\n    }\n    function abi_encode_tuple_t_stringliteral_904dc0e9fab3e65a75e96a21689602e2df418289adcd3917bdf2ae7f9f8c078b__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 27)\n        mstore(add(headStart, 64), \"Invalid milestone reference\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_097b7dfef69a49741fd5f77b6fb5b8e666d014c06d719bb64cca3fac9d4602b3__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 36)\n        mstore(add(headStart, 64), \"Invalid grant reference on miles\")\n        mstore(add(headStart, 96), \"tone\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_6d7436c5ac5ad34ac90d2a8c36871f55305b7c9e8280bed97bf6354cc8438858__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 23)\n        mstore(add(headStart, 64), \"Invalid grant reference\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_fa7e120cf98867f00c0ac28b387a73caec64b93b1889065f7b4c5e5232c0bad6__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 9)\n        mstore(add(headStart, 64), \"Not admin\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_c266efca4f4ed37612271196433531dcbb4fca89a694d568d1e290e32feb1682__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 9)\n        mstore(add(headStart, 64), \"Not owner\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_6280dcc46e5ffd6accac4e830af14125986da285d00557ee32e5749338ab89d7__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 27)\n        mstore(add(headStart, 64), \"Invalid community reference\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 43)\n        mstore(add(headStart, 64), \"Initializable: contract is not i\")\n        mstore(add(headStart, 96), \"nitializing\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_bytes32_t_address__to_t_bytes32_t_address__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), and(value1, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_bool_fromMemory(headStart)\n    }\n}","id":29,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{"398":[{"length":32,"start":858}],"400":[{"length":32,"start":899}],"402":[{"length":32,"start":940}],"536":[{"length":32,"start":2625},{"length":32,"start":2911},{"length":32,"start":3252},{"length":32,"start":3816}]},"linkReferences":{},"object":"6080604052600436106100d65760003560e01c8063c4d66de81161007f578063e49617e111610059578063e49617e114610230578063e60c350514610243578063f2fde38b14610256578063f39f43e31461027657600080fd5b8063c4d66de8146101dc578063cd2c78b8146101fc578063ce46e0461461021c57600080fd5b806388e5b2d9116100b057806388e5b2d91461017e5780638da5cb5b146101a157806391db0b7e146101c957600080fd5b80634a47bb601461011457806354fd4d5014610147578063715018a61461016957600080fd5b3661010f576040517f1574f9f300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b005b600080fd5b34801561012057600080fd5b5061013461012f3660046112ba565b610296565b6040519081526020015b60405180910390f35b34801561015357600080fd5b5061015c610353565b60405161013e919061135e565b34801561017557600080fd5b5061010d6103f6565b61019161018c3660046113dd565b61040a565b604051901515815260200161013e565b3480156101ad57600080fd5b506033546040516001600160a01b03909116815260200161013e565b6101916101d73660046113dd565b6104b9565b3480156101e857600080fd5b5061010d6101f736600461145e565b610558565b34801561020857600080fd5b506101346102173660046112ba565b61077e565b34801561022857600080fd5b506000610191565b61019161023e36600461147b565b61079a565b61019161025136600461147b565b6107b0565b34801561026257600080fd5b5061010d61027136600461145e565b6107c4565b34801561028257600080fd5b5061010d61029136600461145e565b610854565b600080828060200190518101906102ad91906114fc565b509050806040516020016102c19190611560565b60405160208183030381529060405280519060200120915060675482141580156102ed57506068548214155b80156102fb57506069548214155b1561034d5760405162461bcd60e51b815260206004820152601660248201527f496e76616c696420617070726f76616c20747970652e0000000000000000000060448201526064015b60405180910390fd5b50919050565b606061037e7f00000000000000000000000000000000000000000000000000000000000000006108dd565b6103a77f00000000000000000000000000000000000000000000000000000000000000006108dd565b6103d07f00000000000000000000000000000000000000000000000000000000000000006108dd565b6040516020016103e29392919061157c565b604051602081830303815290604052905090565b6103fe61097d565b61040860006109d7565b565b6000610414610a36565b833460005b828110156104a9576000868683818110610435576104356115f2565b9050602002013590508281111561045f5760405163044044a560e21b815260040160405180910390fd5b61048c898984818110610474576104746115f2565b90506020028101906104869190611608565b50600190565b61049d5760009450505050506104b1565b90910390600101610419565b506001925050505b949350505050565b60006104c3610a36565b833460005b828110156104a95760008686838181106104e4576104e46115f2565b9050602002013590508281111561050e5760405163044044a560e21b815260040160405180910390fd5b61053b898984818110610523576105236115f2565b90506020028101906105359190611608565b82610a98565b61054c5760009450505050506104b1565b909103906001016104c8565b600054610100900460ff16158080156105785750600054600160ff909116105b806105925750303b158015610592575060005460ff166001145b6106045760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610344565b6000805460ff191660011790558015610627576000805461ff0019166101001790555b606580543373ffffffffffffffffffffffffffffffffffffffff1991821617909155606680549091166001600160a01b0384161790556040517f617070726f766564000000000000000000000000000000000000000000000000602082015260280160408051808303601f190181529082905280516020918201206067557f636f6d706c6574656400000000000000000000000000000000000000000000009082015260290160408051808303601f190181529082905280516020918201206068557f72656a65637465640000000000000000000000000000000000000000000000009082015260280160408051601f198184030181529190528051602090910120606955610734610fc0565b801561077a576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050565b600081806020019051810190610794919061161f565b92915050565b60006107a4610a36565b6001610794565b919050565b60006107ba610a36565b6107948234610a98565b6107cc61097d565b6001600160a01b0381166108485760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610344565b610851816109d7565b50565b6065546001600160a01b031633146108ae5760405162461bcd60e51b815260206004820152600a60248201527f4e6f74206f776e65722e000000000000000000000000000000000000000000006044820152606401610344565b6066805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b606060006108ea83611033565b600101905060008167ffffffffffffffff81111561090a5761090a611221565b6040519080825280601f01601f191660200182016040528015610934576020820181803683370190505b5090508181016020015b600019017f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a850494508461093e57509392505050565b6033546001600160a01b031633146104085760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610344565b603380546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610408576040517f4ca8886700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060a0830135610aeb5760405162461bcd60e51b815260206004820152601a60248201527f496e76616c6964207265666572726564206d696c6573746f6e650000000000006044820152606401610344565b6000610b38610afe610120860186611638565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061029692505050565b6040516328c44a9960e21b815260a086013560048201529091506000906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063a3112a6490602401600060405180830381865afa158015610ba6573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610bce91908101906116b2565b8051909150610c1f5760405162461bcd60e51b815260206004820152601b60248201527f496e76616c6964206d696c6573746f6e65207265666572656e636500000000006044820152606401610344565b60a0810151610c955760405162461bcd60e51b8152602060048201526024808201527f496e76616c6964206772616e74207265666572656e6365206f6e206d696c657360448201527f746f6e65000000000000000000000000000000000000000000000000000000006064820152608401610344565b60a08101516040516328c44a9960e21b81526000916001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169163a3112a6491610ceb9160040190815260200190565b600060405180830381865afa158015610d08573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610d3091908101906116b2565b8051909150610d815760405162461bcd60e51b815260206004820152601760248201527f496e76616c6964206772616e74207265666572656e63650000000000000000006044820152606401610344565b6000610d9182610120015161077e565b90506000610daf82610daa6101008b0160e08c0161145e565b611115565b90506068548503610e6c57610dcb610100890160e08a0161145e565b6001600160a01b03168460e001516001600160a01b03161480610e135750610dfa610100890160e08a0161145e565b6001600160a01b03168460c001516001600160a01b0316145b80610e1b5750805b610e675760405162461bcd60e51b815260206004820152600960248201527f4e6f742061646d696e00000000000000000000000000000000000000000000006044820152606401610344565b610fb2565b606954851480610e7d575060675485145b15610fb25780610ecf5760405162461bcd60e51b815260206004820152600960248201527f4e6f74206f776e657200000000000000000000000000000000000000000000006044820152606401610344565b6040516328c44a9960e21b8152600481018390526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063a3112a6490602401600060405180830381865afa158015610f37573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610f5f91908101906116b2565b8051909150610fb05760405162461bcd60e51b815260206004820152601b60248201527f496e76616c696420636f6d6d756e697479207265666572656e636500000000006044820152606401610344565b505b506001979650505050505050565b600054610100900460ff1661102b5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610344565b6104086111ad565b6000807a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000831061107c577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000830492506040015b6d04ee2d6d415b85acef810000000083106110a8576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc1000083106110c657662386f26fc10000830492506010015b6305f5e10083106110de576305f5e100830492506008015b61271083106110f257612710830492506004015b60648310611104576064830492506002015b600a83106107945760010192915050565b6066546040517fb75dbb8e000000000000000000000000000000000000000000000000000000008152600481018490526001600160a01b038381166024830152600092169063b75dbb8e906044016020604051808303816000875af1158015611182573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111a691906117a9565b9392505050565b600054610100900460ff166112185760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610344565b610408336109d7565b634e487b7160e01b600052604160045260246000fd5b604051610140810167ffffffffffffffff8111828210171561125b5761125b611221565b60405290565b604051601f8201601f1916810167ffffffffffffffff8111828210171561128a5761128a611221565b604052919050565b600067ffffffffffffffff8211156112ac576112ac611221565b50601f01601f191660200190565b6000602082840312156112cc57600080fd5b813567ffffffffffffffff8111156112e357600080fd5b8201601f810184136112f457600080fd5b803561130761130282611292565b611261565b81815285602083850101111561131c57600080fd5b81602084016020830137600091810160200191909152949350505050565b60005b8381101561135557818101518382015260200161133d565b50506000910152565b602081526000825180602084015261137d81604085016020870161133a565b601f01601f19169190910160400192915050565b60008083601f8401126113a357600080fd5b50813567ffffffffffffffff8111156113bb57600080fd5b6020830191508360208260051b85010111156113d657600080fd5b9250929050565b600080600080604085870312156113f357600080fd5b843567ffffffffffffffff8082111561140b57600080fd5b61141788838901611391565b9096509450602087013591508082111561143057600080fd5b5061143d87828801611391565b95989497509550505050565b6001600160a01b038116811461085157600080fd5b60006020828403121561147057600080fd5b81356111a681611449565b60006020828403121561148d57600080fd5b813567ffffffffffffffff8111156114a457600080fd5b820161014081850312156111a657600080fd5b600082601f8301126114c857600080fd5b81516114d661130282611292565b8181528460208386010111156114eb57600080fd5b6104b182602083016020870161133a565b6000806040838503121561150f57600080fd5b825167ffffffffffffffff8082111561152757600080fd5b611533868387016114b7565b9350602085015191508082111561154957600080fd5b50611556858286016114b7565b9150509250929050565b6000825161157281846020870161133a565b9190910192915050565b6000845161158e81846020890161133a565b80830190507f2e0000000000000000000000000000000000000000000000000000000000000080825285516115ca816001850160208a0161133a565b600192019182015283516115e581600284016020880161133a565b0160020195945050505050565b634e487b7160e01b600052603260045260246000fd5b6000823561013e1983360301811261157257600080fd5b60006020828403121561163157600080fd5b5051919050565b6000808335601e1984360301811261164f57600080fd5b83018035915067ffffffffffffffff82111561166a57600080fd5b6020019150368190038213156113d657600080fd5b805167ffffffffffffffff811681146107ab57600080fd5b80516107ab81611449565b805180151581146107ab57600080fd5b6000602082840312156116c457600080fd5b815167ffffffffffffffff808211156116dc57600080fd5b9083019061014082860312156116f157600080fd5b6116f9611237565b82518152602083015160208201526117136040840161167f565b60408201526117246060840161167f565b60608201526117356080840161167f565b608082015260a083015160a082015261175060c08401611697565b60c082015261176160e08401611697565b60e08201526101006117748185016116a2565b90820152610120838101518381111561178c57600080fd5b611798888287016114b7565b918301919091525095945050505050565b6000602082840312156117bb57600080fd5b6111a6826116a256fea2646970667358221220e8a725af563d355fab2b120b9cd88ca459effc5a57c902e8e2954f4b0c68f4f464736f6c63430008130033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0xD6 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xC4D66DE8 GT PUSH2 0x7F JUMPI DUP1 PUSH4 0xE49617E1 GT PUSH2 0x59 JUMPI DUP1 PUSH4 0xE49617E1 EQ PUSH2 0x230 JUMPI DUP1 PUSH4 0xE60C3505 EQ PUSH2 0x243 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x256 JUMPI DUP1 PUSH4 0xF39F43E3 EQ PUSH2 0x276 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xC4D66DE8 EQ PUSH2 0x1DC JUMPI DUP1 PUSH4 0xCD2C78B8 EQ PUSH2 0x1FC JUMPI DUP1 PUSH4 0xCE46E046 EQ PUSH2 0x21C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x88E5B2D9 GT PUSH2 0xB0 JUMPI DUP1 PUSH4 0x88E5B2D9 EQ PUSH2 0x17E JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x1A1 JUMPI DUP1 PUSH4 0x91DB0B7E EQ PUSH2 0x1C9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x4A47BB60 EQ PUSH2 0x114 JUMPI DUP1 PUSH4 0x54FD4D50 EQ PUSH2 0x147 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x169 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLDATASIZE PUSH2 0x10F JUMPI PUSH1 0x40 MLOAD PUSH32 0x1574F9F300000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST STOP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x120 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x134 PUSH2 0x12F CALLDATASIZE PUSH1 0x4 PUSH2 0x12BA JUMP JUMPDEST PUSH2 0x296 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x153 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x15C PUSH2 0x353 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x13E SWAP2 SWAP1 PUSH2 0x135E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x175 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x10D PUSH2 0x3F6 JUMP JUMPDEST PUSH2 0x191 PUSH2 0x18C CALLDATASIZE PUSH1 0x4 PUSH2 0x13DD JUMP JUMPDEST PUSH2 0x40A JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x13E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1AD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x33 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x13E JUMP JUMPDEST PUSH2 0x191 PUSH2 0x1D7 CALLDATASIZE PUSH1 0x4 PUSH2 0x13DD JUMP JUMPDEST PUSH2 0x4B9 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1E8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x10D PUSH2 0x1F7 CALLDATASIZE PUSH1 0x4 PUSH2 0x145E JUMP JUMPDEST PUSH2 0x558 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x208 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x134 PUSH2 0x217 CALLDATASIZE PUSH1 0x4 PUSH2 0x12BA JUMP JUMPDEST PUSH2 0x77E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x228 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x0 PUSH2 0x191 JUMP JUMPDEST PUSH2 0x191 PUSH2 0x23E CALLDATASIZE PUSH1 0x4 PUSH2 0x147B JUMP JUMPDEST PUSH2 0x79A JUMP JUMPDEST PUSH2 0x191 PUSH2 0x251 CALLDATASIZE PUSH1 0x4 PUSH2 0x147B JUMP JUMPDEST PUSH2 0x7B0 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x262 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x10D PUSH2 0x271 CALLDATASIZE PUSH1 0x4 PUSH2 0x145E JUMP JUMPDEST PUSH2 0x7C4 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x282 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x10D PUSH2 0x291 CALLDATASIZE PUSH1 0x4 PUSH2 0x145E JUMP JUMPDEST PUSH2 0x854 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x2AD SWAP2 SWAP1 PUSH2 0x14FC JUMP JUMPDEST POP SWAP1 POP DUP1 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x2C1 SWAP2 SWAP1 PUSH2 0x1560 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP2 POP PUSH1 0x67 SLOAD DUP3 EQ ISZERO DUP1 ISZERO PUSH2 0x2ED JUMPI POP PUSH1 0x68 SLOAD DUP3 EQ ISZERO JUMPDEST DUP1 ISZERO PUSH2 0x2FB JUMPI POP PUSH1 0x69 SLOAD DUP3 EQ ISZERO JUMPDEST ISZERO PUSH2 0x34D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E76616C696420617070726F76616C20747970652E00000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x37E PUSH32 0x0 PUSH2 0x8DD JUMP JUMPDEST PUSH2 0x3A7 PUSH32 0x0 PUSH2 0x8DD JUMP JUMPDEST PUSH2 0x3D0 PUSH32 0x0 PUSH2 0x8DD JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x3E2 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x157C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x3FE PUSH2 0x97D JUMP JUMPDEST PUSH2 0x408 PUSH1 0x0 PUSH2 0x9D7 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH2 0x414 PUSH2 0xA36 JUMP JUMPDEST DUP4 CALLVALUE PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x4A9 JUMPI PUSH1 0x0 DUP7 DUP7 DUP4 DUP2 DUP2 LT PUSH2 0x435 JUMPI PUSH2 0x435 PUSH2 0x15F2 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD SWAP1 POP DUP3 DUP2 GT ISZERO PUSH2 0x45F JUMPI PUSH1 0x40 MLOAD PUSH4 0x44044A5 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x48C DUP10 DUP10 DUP5 DUP2 DUP2 LT PUSH2 0x474 JUMPI PUSH2 0x474 PUSH2 0x15F2 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0x486 SWAP2 SWAP1 PUSH2 0x1608 JUMP JUMPDEST POP PUSH1 0x1 SWAP1 JUMP JUMPDEST PUSH2 0x49D JUMPI PUSH1 0x0 SWAP5 POP POP POP POP POP PUSH2 0x4B1 JUMP JUMPDEST SWAP1 SWAP2 SUB SWAP1 PUSH1 0x1 ADD PUSH2 0x419 JUMP JUMPDEST POP PUSH1 0x1 SWAP3 POP POP POP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4C3 PUSH2 0xA36 JUMP JUMPDEST DUP4 CALLVALUE PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x4A9 JUMPI PUSH1 0x0 DUP7 DUP7 DUP4 DUP2 DUP2 LT PUSH2 0x4E4 JUMPI PUSH2 0x4E4 PUSH2 0x15F2 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD SWAP1 POP DUP3 DUP2 GT ISZERO PUSH2 0x50E JUMPI PUSH1 0x40 MLOAD PUSH4 0x44044A5 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x53B DUP10 DUP10 DUP5 DUP2 DUP2 LT PUSH2 0x523 JUMPI PUSH2 0x523 PUSH2 0x15F2 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0x535 SWAP2 SWAP1 PUSH2 0x1608 JUMP JUMPDEST DUP3 PUSH2 0xA98 JUMP JUMPDEST PUSH2 0x54C JUMPI PUSH1 0x0 SWAP5 POP POP POP POP POP PUSH2 0x4B1 JUMP JUMPDEST SWAP1 SWAP2 SUB SWAP1 PUSH1 0x1 ADD PUSH2 0x4C8 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND ISZERO DUP1 DUP1 ISZERO PUSH2 0x578 JUMPI POP PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0xFF SWAP1 SWAP2 AND LT JUMPDEST DUP1 PUSH2 0x592 JUMPI POP ADDRESS EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x592 JUMPI POP PUSH1 0x0 SLOAD PUSH1 0xFF AND PUSH1 0x1 EQ JUMPDEST PUSH2 0x604 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E747261637420697320616C726561 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x647920696E697469616C697A6564000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x344 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE DUP1 ISZERO PUSH2 0x627 JUMPI PUSH1 0x0 DUP1 SLOAD PUSH2 0xFF00 NOT AND PUSH2 0x100 OR SWAP1 SSTORE JUMPDEST PUSH1 0x65 DUP1 SLOAD CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT SWAP2 DUP3 AND OR SWAP1 SWAP2 SSTORE PUSH1 0x66 DUP1 SLOAD SWAP1 SWAP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND OR SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH32 0x617070726F766564000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x28 ADD PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB PUSH1 0x1F NOT ADD DUP2 MSTORE SWAP1 DUP3 SWAP1 MSTORE DUP1 MLOAD PUSH1 0x20 SWAP2 DUP3 ADD KECCAK256 PUSH1 0x67 SSTORE PUSH32 0x636F6D706C657465640000000000000000000000000000000000000000000000 SWAP1 DUP3 ADD MSTORE PUSH1 0x29 ADD PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB PUSH1 0x1F NOT ADD DUP2 MSTORE SWAP1 DUP3 SWAP1 MSTORE DUP1 MLOAD PUSH1 0x20 SWAP2 DUP3 ADD KECCAK256 PUSH1 0x68 SSTORE PUSH32 0x72656A6563746564000000000000000000000000000000000000000000000000 SWAP1 DUP3 ADD MSTORE PUSH1 0x28 ADD PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD KECCAK256 PUSH1 0x69 SSTORE PUSH2 0x734 PUSH2 0xFC0 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x77A JUMPI PUSH1 0x0 DUP1 SLOAD PUSH2 0xFF00 NOT AND SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH1 0x1 DUP2 MSTORE PUSH32 0x7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x794 SWAP2 SWAP1 PUSH2 0x161F JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x7A4 PUSH2 0xA36 JUMP JUMPDEST PUSH1 0x1 PUSH2 0x794 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x7BA PUSH2 0xA36 JUMP JUMPDEST PUSH2 0x794 DUP3 CALLVALUE PUSH2 0xA98 JUMP JUMPDEST PUSH2 0x7CC PUSH2 0x97D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x848 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6464726573730000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x344 JUMP JUMPDEST PUSH2 0x851 DUP2 PUSH2 0x9D7 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x65 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x8AE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xA PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E6F74206F776E65722E00000000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x344 JUMP JUMPDEST PUSH1 0x66 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x8EA DUP4 PUSH2 0x1033 JUMP JUMPDEST PUSH1 0x1 ADD SWAP1 POP PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x90A JUMPI PUSH2 0x90A PUSH2 0x1221 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x934 JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP DUP2 DUP2 ADD PUSH1 0x20 ADD JUMPDEST PUSH1 0x0 NOT ADD PUSH32 0x3031323334353637383961626364656600000000000000000000000000000000 PUSH1 0xA DUP7 MOD BYTE DUP2 MSTORE8 PUSH1 0xA DUP6 DIV SWAP5 POP DUP5 PUSH2 0x93E JUMPI POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x33 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x408 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x344 JUMP JUMPDEST PUSH1 0x33 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 MLOAD SWAP2 AND SWAP2 SWAP1 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP JUMP JUMPDEST CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND EQ PUSH2 0x408 JUMPI PUSH1 0x40 MLOAD PUSH32 0x4CA8886700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0xA0 DUP4 ADD CALLDATALOAD PUSH2 0xAEB JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E76616C6964207265666572726564206D696C6573746F6E65000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x344 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB38 PUSH2 0xAFE PUSH2 0x120 DUP7 ADD DUP7 PUSH2 0x1638 JUMP JUMPDEST DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP PUSH2 0x296 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x28C44A99 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0xA0 DUP7 ADD CALLDATALOAD PUSH1 0x4 DUP3 ADD MSTORE SWAP1 SWAP2 POP PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND SWAP1 PUSH4 0xA3112A64 SWAP1 PUSH1 0x24 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xBA6 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0xBCE SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x16B2 JUMP JUMPDEST DUP1 MLOAD SWAP1 SWAP2 POP PUSH2 0xC1F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E76616C6964206D696C6573746F6E65207265666572656E63650000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x344 JUMP JUMPDEST PUSH1 0xA0 DUP2 ADD MLOAD PUSH2 0xC95 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x496E76616C6964206772616E74207265666572656E6365206F6E206D696C6573 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x746F6E6500000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x344 JUMP JUMPDEST PUSH1 0xA0 DUP2 ADD MLOAD PUSH1 0x40 MLOAD PUSH4 0x28C44A99 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x0 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND SWAP2 PUSH4 0xA3112A64 SWAP2 PUSH2 0xCEB SWAP2 PUSH1 0x4 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xD08 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0xD30 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x16B2 JUMP JUMPDEST DUP1 MLOAD SWAP1 SWAP2 POP PUSH2 0xD81 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E76616C6964206772616E74207265666572656E6365000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x344 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xD91 DUP3 PUSH2 0x120 ADD MLOAD PUSH2 0x77E JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xDAF DUP3 PUSH2 0xDAA PUSH2 0x100 DUP12 ADD PUSH1 0xE0 DUP13 ADD PUSH2 0x145E JUMP JUMPDEST PUSH2 0x1115 JUMP JUMPDEST SWAP1 POP PUSH1 0x68 SLOAD DUP6 SUB PUSH2 0xE6C JUMPI PUSH2 0xDCB PUSH2 0x100 DUP10 ADD PUSH1 0xE0 DUP11 ADD PUSH2 0x145E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0xE0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ DUP1 PUSH2 0xE13 JUMPI POP PUSH2 0xDFA PUSH2 0x100 DUP10 ADD PUSH1 0xE0 DUP11 ADD PUSH2 0x145E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0xC0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ JUMPDEST DUP1 PUSH2 0xE1B JUMPI POP DUP1 JUMPDEST PUSH2 0xE67 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x9 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E6F742061646D696E0000000000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x344 JUMP JUMPDEST PUSH2 0xFB2 JUMP JUMPDEST PUSH1 0x69 SLOAD DUP6 EQ DUP1 PUSH2 0xE7D JUMPI POP PUSH1 0x67 SLOAD DUP6 EQ JUMPDEST ISZERO PUSH2 0xFB2 JUMPI DUP1 PUSH2 0xECF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x9 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E6F74206F776E65720000000000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x344 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x28C44A99 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0xA3112A64 SWAP1 PUSH1 0x24 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xF37 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0xF5F SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x16B2 JUMP JUMPDEST DUP1 MLOAD SWAP1 SWAP2 POP PUSH2 0xFB0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E76616C696420636F6D6D756E697479207265666572656E63650000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x344 JUMP JUMPDEST POP JUMPDEST POP PUSH1 0x1 SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x102B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E7472616374206973206E6F742069 PUSH1 0x44 DUP3 ADD MSTORE PUSH11 0x6E697469616C697A696E67 PUSH1 0xA8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x344 JUMP JUMPDEST PUSH2 0x408 PUSH2 0x11AD JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP4 LT PUSH2 0x107C JUMPI PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP4 DIV SWAP3 POP PUSH1 0x40 ADD JUMPDEST PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 LT PUSH2 0x10A8 JUMPI PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 DIV SWAP3 POP PUSH1 0x20 ADD JUMPDEST PUSH7 0x2386F26FC10000 DUP4 LT PUSH2 0x10C6 JUMPI PUSH7 0x2386F26FC10000 DUP4 DIV SWAP3 POP PUSH1 0x10 ADD JUMPDEST PUSH4 0x5F5E100 DUP4 LT PUSH2 0x10DE JUMPI PUSH4 0x5F5E100 DUP4 DIV SWAP3 POP PUSH1 0x8 ADD JUMPDEST PUSH2 0x2710 DUP4 LT PUSH2 0x10F2 JUMPI PUSH2 0x2710 DUP4 DIV SWAP3 POP PUSH1 0x4 ADD JUMPDEST PUSH1 0x64 DUP4 LT PUSH2 0x1104 JUMPI PUSH1 0x64 DUP4 DIV SWAP3 POP PUSH1 0x2 ADD JUMPDEST PUSH1 0xA DUP4 LT PUSH2 0x794 JUMPI PUSH1 0x1 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x66 SLOAD PUSH1 0x40 MLOAD PUSH32 0xB75DBB8E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x24 DUP4 ADD MSTORE PUSH1 0x0 SWAP3 AND SWAP1 PUSH4 0xB75DBB8E SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1182 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x11A6 SWAP2 SWAP1 PUSH2 0x17A9 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1218 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E7472616374206973206E6F742069 PUSH1 0x44 DUP3 ADD MSTORE PUSH11 0x6E697469616C697A696E67 PUSH1 0xA8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x344 JUMP JUMPDEST PUSH2 0x408 CALLER PUSH2 0x9D7 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x140 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x125B JUMPI PUSH2 0x125B PUSH2 0x1221 JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x128A JUMPI PUSH2 0x128A PUSH2 0x1221 JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x12AC JUMPI PUSH2 0x12AC PUSH2 0x1221 JUMP JUMPDEST POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x12CC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x12E3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD PUSH1 0x1F DUP2 ADD DUP5 SGT PUSH2 0x12F4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH2 0x1307 PUSH2 0x1302 DUP3 PUSH2 0x1292 JUMP JUMPDEST PUSH2 0x1261 JUMP JUMPDEST DUP2 DUP2 MSTORE DUP6 PUSH1 0x20 DUP4 DUP6 ADD ADD GT ISZERO PUSH2 0x131C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 PUSH1 0x20 DUP5 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 SWAP2 DUP2 ADD PUSH1 0x20 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1355 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x133D JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x137D DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x133A JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x13A3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x13BB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP6 ADD ADD GT ISZERO PUSH2 0x13D6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x40 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x13F3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x140B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1417 DUP9 DUP4 DUP10 ADD PUSH2 0x1391 JUMP JUMPDEST SWAP1 SWAP7 POP SWAP5 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x1430 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x143D DUP8 DUP3 DUP9 ADD PUSH2 0x1391 JUMP JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP SWAP6 POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x851 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1470 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x11A6 DUP2 PUSH2 0x1449 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x148D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x14A4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD PUSH2 0x140 DUP2 DUP6 SUB SLT ISZERO PUSH2 0x11A6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x14C8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x14D6 PUSH2 0x1302 DUP3 PUSH2 0x1292 JUMP JUMPDEST DUP2 DUP2 MSTORE DUP5 PUSH1 0x20 DUP4 DUP7 ADD ADD GT ISZERO PUSH2 0x14EB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4B1 DUP3 PUSH1 0x20 DUP4 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x133A JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x150F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x1527 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1533 DUP7 DUP4 DUP8 ADD PUSH2 0x14B7 JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD MLOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x1549 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1556 DUP6 DUP3 DUP7 ADD PUSH2 0x14B7 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x1572 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x133A JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP5 MLOAD PUSH2 0x158E DUP2 DUP5 PUSH1 0x20 DUP10 ADD PUSH2 0x133A JUMP JUMPDEST DUP1 DUP4 ADD SWAP1 POP PUSH32 0x2E00000000000000000000000000000000000000000000000000000000000000 DUP1 DUP3 MSTORE DUP6 MLOAD PUSH2 0x15CA DUP2 PUSH1 0x1 DUP6 ADD PUSH1 0x20 DUP11 ADD PUSH2 0x133A JUMP JUMPDEST PUSH1 0x1 SWAP3 ADD SWAP2 DUP3 ADD MSTORE DUP4 MLOAD PUSH2 0x15E5 DUP2 PUSH1 0x2 DUP5 ADD PUSH1 0x20 DUP9 ADD PUSH2 0x133A JUMP JUMPDEST ADD PUSH1 0x2 ADD SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 CALLDATALOAD PUSH2 0x13E NOT DUP4 CALLDATASIZE SUB ADD DUP2 SLT PUSH2 0x1572 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1631 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 CALLDATALOAD PUSH1 0x1E NOT DUP5 CALLDATASIZE SUB ADD DUP2 SLT PUSH2 0x164F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 ADD DUP1 CALLDATALOAD SWAP2 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x166A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 ADD SWAP2 POP CALLDATASIZE DUP2 SWAP1 SUB DUP3 SGT ISZERO PUSH2 0x13D6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x7AB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 MLOAD PUSH2 0x7AB DUP2 PUSH2 0x1449 JUMP JUMPDEST DUP1 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x7AB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x16C4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x16DC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 DUP4 ADD SWAP1 PUSH2 0x140 DUP3 DUP7 SUB SLT ISZERO PUSH2 0x16F1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x16F9 PUSH2 0x1237 JUMP JUMPDEST DUP3 MLOAD DUP2 MSTORE PUSH1 0x20 DUP4 ADD MLOAD PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x1713 PUSH1 0x40 DUP5 ADD PUSH2 0x167F JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE PUSH2 0x1724 PUSH1 0x60 DUP5 ADD PUSH2 0x167F JUMP JUMPDEST PUSH1 0x60 DUP3 ADD MSTORE PUSH2 0x1735 PUSH1 0x80 DUP5 ADD PUSH2 0x167F JUMP JUMPDEST PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xA0 DUP4 ADD MLOAD PUSH1 0xA0 DUP3 ADD MSTORE PUSH2 0x1750 PUSH1 0xC0 DUP5 ADD PUSH2 0x1697 JUMP JUMPDEST PUSH1 0xC0 DUP3 ADD MSTORE PUSH2 0x1761 PUSH1 0xE0 DUP5 ADD PUSH2 0x1697 JUMP JUMPDEST PUSH1 0xE0 DUP3 ADD MSTORE PUSH2 0x100 PUSH2 0x1774 DUP2 DUP6 ADD PUSH2 0x16A2 JUMP JUMPDEST SWAP1 DUP3 ADD MSTORE PUSH2 0x120 DUP4 DUP2 ADD MLOAD DUP4 DUP2 GT ISZERO PUSH2 0x178C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1798 DUP9 DUP3 DUP8 ADD PUSH2 0x14B7 JUMP JUMPDEST SWAP2 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x17BB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x11A6 DUP3 PUSH2 0x16A2 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE8 0xA7 0x25 0xAF JUMP RETURNDATASIZE CALLDATALOAD 0x5F 0xAB 0x2B SLT SIGNEXTEND SWAP13 0xD8 DUP13 LOG4 MSIZE 0xEF 0xFC GAS JUMPI 0xC9 MUL 0xE8 0xE2 SWAP6 0x4F 0x4B 0xC PUSH9 0xF4F464736F6C634300 ADDMOD SGT STOP CALLER ","sourceMap":"565:3836:27:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1211:12:5;;;;;;;;;;;;;;1172:62;565:3836:27;;;;;2009:485;;;;;;;;;;-1:-1:-1;2009:485:27;;;;;:::i;:::-;;:::i;:::-;;;1756:25:29;;;1744:2;1729:18;2009:485:27;;;;;;;;867:234:3;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;2064:101:6:-;;;;;;;;;;;;;:::i;3130:1369:5:-;;;;;;:::i;:::-;;:::i;:::-;;;3852:14:29;;3845:22;3827:41;;3815:2;3800:18;3130:1369:5;3687:187:29;1441:85:6;;;;;;;;;;-1:-1:-1;1513:6:6;;1441:85;;-1:-1:-1;;;;;1513:6:6;;;4025:74:29;;4013:2;3998:18;1441:85:6;3879:226:29;1500:1370:5;;;;;;:::i;:::-;;:::i;984:362:27:-;;;;;;;;;;-1:-1:-1;984:362:27;;;;;:::i;:::-;;:::i;2590:154::-;;;;;;;;;;-1:-1:-1;2590:154:27;;;;;:::i;:::-;;:::i;994:85:5:-;;;;;;;;;;-1:-1:-1;1044:4:5;994:85;;2927:146;;;;;;:::i;:::-;;:::i;1297:::-;;;;;;:::i;:::-;;:::i;2314:198:6:-;;;;;;;;;;-1:-1:-1;2314:198:6;;;;;:::i;:::-;;:::i;1432:169:27:-;;;;;;;;;;-1:-1:-1;1432:169:27;;;;;:::i;:::-;;:::i;2009:485::-;2106:16;2135:19;2171:13;2160:43;;;;;;;;;;;;:::i;:::-;2134:69;;;2252:5;2235:23;;;;;;;;:::i;:::-;;;;;;;;;;;;;2225:34;;;;;;2214:45;;2299:12;;2287:8;:24;;:65;;;;;2339:13;;2327:8;:25;;2287:65;:105;;;;;2380:12;;2368:8;:24;;2287:105;2270:190;;;2417:32;;-1:-1:-1;;;2417:32:27;;6764:2:29;2417:32:27;;;6746:21:29;6803:2;6783:18;;;6776:30;6842:24;6822:18;;;6815:52;6884:18;;2417:32:27;;;;;;;;2270:190;2470:17;2009:485;;;:::o;867:234:3:-;909:13;994:24;1011:6;994:16;:24::i;:::-;1025;1042:6;1025:16;:24::i;:::-;1056:23;1073:5;1056:16;:23::i;:::-;977:103;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;934:160;;867:234;:::o;2064:101:6:-;1334:13;:11;:13::i;:::-;2128:30:::1;2155:1;2128:18;:30::i;:::-;2064:101::o:0;3130:1369:5:-;3271:4;908:10;:8;:10::i;:::-;3304:12;3756:9:::1;3287:14;3776:695;3800:6;3796:1;:10;3776:695;;;3933:13;3949:6;;3956:1;3949:9;;;;;;;:::i;:::-;;;;;;;3933:25;;3984:14;3976:5;:22;3972:87;;;4025:19;;-1:-1:-1::0;;;4025:19:5::1;;;;;;;;;;;3972:87;4181:32;4190:12;;4203:1;4190:15;;;;;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;-1:-1:-1::0;4388:4:27;;4236:163;4181:32:5::1;4176:84;;4240:5;4233:12;;;;;;;;4176:84;4423:23:::0;;::::1;::::0;1483:1:0;1479:5;3776:695:5::1;;;;4488:4;4481:11;;;;929:1;3130:1369:::0;;;;;;:::o;1500:1370::-;1641:4;908:10;:8;:10::i;:::-;1674:12;2126:9:::1;1657:14;2146:696;2170:6;2166:1;:10;2146:696;;;2303:13;2319:6;;2326:1;2319:9;;;;;;;:::i;:::-;;;;;;;2303:25;;2354:14;2346:5;:22;2342:87;;;2395:19;;-1:-1:-1::0;;;2395:19:5::1;;;;;;;;;;;2342:87;2552:32;2561:12;;2574:1;2561:15;;;;;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;2578:5;2552:8;:32::i;:::-;2547:84;;2611:5;2604:12;;;;;;;;2547:84;2794:23:::0;;::::1;::::0;1483:1:0;1479:5;2146:696:5::1;;984:362:27::0;3279:19:8;3302:13;;;;;;3301:14;;3347:34;;;;-1:-1:-1;3365:12:8;;3380:1;3365:12;;;;:16;3347:34;3346:108;;;-1:-1:-1;3426:4:8;1713:19:9;:23;;;3387:66:8;;-1:-1:-1;3436:12:8;;;;;:17;3387:66;3325:201;;;;-1:-1:-1;;;3325:201:8;;8640:2:29;3325:201:8;;;8622:21:29;8679:2;8659:18;;;8652:30;8718:34;8698:18;;;8691:62;8789:16;8769:18;;;8762:44;8823:19;;3325:201:8;8438:410:29;3325:201:8;3536:12;:16;;-1:-1:-1;;3536:16:8;3551:1;3536:16;;;3562:65;;;;3596:13;:20;;-1:-1:-1;;3596:20:8;;;;;3562:65;1062:6:27::1;:19:::0;;1071:10:::1;-1:-1:-1::0;;1062:19:27;;::::1;;::::0;;;1091:17:::1;:28:::0;;;;::::1;-1:-1:-1::0;;;;;1091:28:27;::::1;;::::0;;1154::::1;::::0;9067:10:29;1154:28:27::1;::::0;::::1;9055:23:29::0;9094:11;;1154:28:27::1;::::0;;;;::::1;-1:-1:-1::0;;1154:28:27;;;;;;;1144:39;;1154:28:::1;1144:39:::0;;::::1;::::0;1129:12:::1;:54:::0;9330:11:29;1219:29:27;;::::1;9318:24:29::0;9358:11;;1219:29:27::1;::::0;;;;::::1;-1:-1:-1::0;;1219:29:27;;;;;;;1209:40;;1219:29:::1;1209:40:::0;;::::1;::::0;1193:13:::1;:56:::0;9594:10:29;1284:28:27;;::::1;9582:23:29::0;9621:11;;1284:28:27::1;::::0;;-1:-1:-1;;1284:28:27;;::::1;::::0;;;;;;1274:39;;1284:28:::1;1274:39:::0;;::::1;::::0;1259:12:::1;:54:::0;1323:16:::1;:14;:16::i;:::-;3651:14:8::0;3647:99;;;3697:5;3681:21;;-1:-1:-1;;3681:21:8;;;3721:14;;-1:-1:-1;9795:36:29;;3721:14:8;;9783:2:29;9768:18;3721:14:8;;;;;;;3647:99;3269:483;984:362:27;:::o;2590:154::-;2679:7;2716:9;2705:32;;;;;;;;;;;;:::i;:::-;2698:39;2590:154;-1:-1:-1;;2590:154:27:o;2927:146:5:-;3011:4;908:10;:8;:10::i;:::-;4388:4:27;3034:32:5::1;4236:163:27::0;929:1:5::1;2927:146:::0;;;:::o;1297:::-;1381:4;908:10;:8;:10::i;:::-;1404:32:::1;1413:11;1426:9;1404:8;:32::i;2314:198:6:-:0;1334:13;:11;:13::i;:::-;-1:-1:-1;;;;;2402:22:6;::::1;2394:73;;;::::0;-1:-1:-1;;;2394:73:6;;10233:2:29;2394:73:6::1;::::0;::::1;10215:21:29::0;10272:2;10252:18;;;10245:30;10311:34;10291:18;;;10284:62;10382:8;10362:18;;;10355:36;10408:19;;2394:73:6::1;10031:402:29::0;2394:73:6::1;2477:28;2496:8;2477:18;:28::i;:::-;2314:198:::0;:::o;1432:169:27:-;1535:6;;-1:-1:-1;;;;;1535:6:27;1521:10;:20;1513:43;;;;-1:-1:-1;;;1513:43:27;;10640:2:29;1513:43:27;;;10622:21:29;10679:2;10659:18;;;10652:30;10718:12;10698:18;;;10691:40;10748:18;;1513:43:27;10438:334:29;1513:43:27;1566:17;:28;;-1:-1:-1;;1566:28:27;-1:-1:-1;;;;;1566:28:27;;;;;;;;;;1432:169::o;447:696:19:-;503:13;552:14;569:17;580:5;569:10;:17::i;:::-;589:1;569:21;552:38;;604:20;638:6;627:18;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;627:18:19;-1:-1:-1;604:41:19;-1:-1:-1;765:28:19;;;781:2;765:28;820:280;-1:-1:-1;;851:5:19;990:8;985:2;974:14;;969:30;851:5;956:44;1044:2;1035:11;;;-1:-1:-1;1064:21:19;820:280;1064:21;-1:-1:-1;1120:6:19;447:696;-1:-1:-1;;;447:696:19:o;1599:130:6:-;1513:6;;-1:-1:-1;;;;;1513:6:6;929:10:10;1662:23:6;1654:68;;;;-1:-1:-1;;;1654:68:6;;11168:2:29;1654:68:6;;;11150:21:29;;;11187:18;;;11180:30;11246:34;11226:18;;;11219:62;11298:18;;1654:68:6;10966:356:29;2666:187:6;2758:6;;;-1:-1:-1;;;;;2774:17:6;;;-1:-1:-1;;2774:17:6;;;;;;;2806:40;;2758:6;;;2774:17;2758:6;;2806:40;;2739:16;;2806:40;2729:124;2666:187;:::o;5977:128:5:-;6024:10;-1:-1:-1;;;;;6046:4:5;6024:27;;6020:79;;6074:14;;;;;;;;;;;;;;2750:1480:27;2870:4;2894:18;;;;2886:71;;;;-1:-1:-1;;;2886:71:27;;11529:2:29;2886:71:27;;;11511:21:29;11568:2;11548:18;;;11541:30;11607:28;11587:18;;;11580:56;11653:18;;2886:71:27;11327:350:29;2886:71:27;2967:16;2986:42;3011:16;;;;:11;:16;:::i;:::-;2986:42;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2986:24:27;;-1:-1:-1;;;2986:42:27:i;:::-;3070:39;;-1:-1:-1;;;3070:39:27;;3090:18;;;;3070:39;;;1756:25:29;2967:61:27;;-1:-1:-1;3039:28:27;;-1:-1:-1;;;;;3070:4:27;:19;;;;1729:18:29;;3070:39:27;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;3070:39:27;;;;;;;;;;;;:::i;:::-;3127:13;;3039:70;;-1:-1:-1;3119:67:27;;;;-1:-1:-1;;;3119:67:27;;14197:2:29;3119:67:27;;;14179:21:29;14236:2;14216:18;;;14209:30;14275:29;14255:18;;;14248:57;14322:18;;3119:67:27;13995:351:29;3119:67:27;3217:16;;;;3196:113;;;;-1:-1:-1;;;3196:113:27;;14553:2:29;3196:113:27;;;14535:21:29;14592:2;14572:18;;;14565:30;14631:34;14611:18;;;14604:62;14702:6;14682:18;;;14675:34;14726:19;;3196:113:27;14351:400:29;3196:113:27;3367:16;;;;3347:37;;-1:-1:-1;;;3347:37:27;;3320:24;;-1:-1:-1;;;;;3347:4:27;:19;;;;:37;;;;1756:25:29;;;1744:2;1729:18;;1610:177;3347:37:27;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;3347:37:27;;;;;;;;;;;;:::i;:::-;3402:9;;3320:64;;-1:-1:-1;3394:59:27;;;;-1:-1:-1;;;3394:59:27;;14958:2:29;3394:59:27;;;14940:21:29;14997:2;14977:18;;;14970:30;15036:25;15016:18;;;15009:53;15079:18;;3394:59:27;14756:347:29;3394:59:27;3463:20;3486:32;3507:5;:10;;;3486:20;:32::i;:::-;3463:55;-1:-1:-1;3529:19:27;3551:86;3463:55;3607:20;;;;;;;;:::i;:::-;3551:16;:86::i;:::-;3529:108;;3664:13;;3652:8;:25;3648:555;;3740:20;;;;;;;;:::i;:::-;-1:-1:-1;;;;;3718:42:27;:9;:18;;;-1:-1:-1;;;;;3718:42:27;;:109;;;-1:-1:-1;3807:20:27;;;;;;;;:::i;:::-;-1:-1:-1;;;;;3784:43:27;:9;:19;;;-1:-1:-1;;;;;3784:43:27;;3718:109;:147;;;;3851:14;3718:147;3693:215;;;;-1:-1:-1;;;3693:215:27;;15310:2:29;3693:215:27;;;15292:21:29;15349:1;15329:18;;;15322:29;15387:11;15367:18;;;15360:39;15416:18;;3693:215:27;15108:332:29;3693:215:27;3648:555;;;3941:12;;3929:8;:24;:52;;;;3969:12;;3957:8;:24;3929:52;3925:278;;;4005:14;3997:36;;;;-1:-1:-1;;;3997:36:27;;15647:2:29;3997:36:27;;;15629:21:29;15686:1;15666:18;;;15659:29;15724:11;15704:18;;;15697:39;15753:18;;3997:36:27;15445:332:29;3997:36:27;4078:33;;-1:-1:-1;;;4078:33:27;;;;;1756:25:29;;;4047:28:27;;4078:4;-1:-1:-1;;;;;4078:19:27;;;;1729:18:29;;4078:33:27;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;4078:33:27;;;;;;;;;;;;:::i;:::-;4133:13;;4047:64;;-1:-1:-1;4125:67:27;;;;-1:-1:-1;;;4125:67:27;;15984:2:29;4125:67:27;;;15966:21:29;16023:2;16003:18;;;15996:30;16062:29;16042:18;;;16035:57;16109:18;;4125:67:27;15782:351:29;4125:67:27;3983:220;3925:278;-1:-1:-1;4219:4:27;;2750:1480;-1:-1:-1;;;;;;;2750:1480:27:o;1003:95:6:-;5374:13:8;;;;;;;5366:69;;;;-1:-1:-1;;;5366:69:8;;16340:2:29;5366:69:8;;;16322:21:29;16379:2;16359:18;;;16352:30;16418:34;16398:18;;;16391:62;-1:-1:-1;;;16469:18:29;;;16462:41;16520:19;;5366:69:8;16138:407:29;5366:69:8;1065:26:6::1;:24;:26::i;10139:916:22:-:0;10192:7;;10276:8;10267:17;;10263:103;;10313:8;10304:17;;;-1:-1:-1;10349:2:22;10339:12;10263:103;10392:8;10383:5;:17;10379:103;;10429:8;10420:17;;;-1:-1:-1;10465:2:22;10455:12;10379:103;10508:8;10499:5;:17;10495:103;;10545:8;10536:17;;;-1:-1:-1;10581:2:22;10571:12;10495:103;10624:7;10615:5;:16;10611:100;;10660:7;10651:16;;;-1:-1:-1;10695:1:22;10685:11;10611:100;10737:7;10728:5;:16;10724:100;;10773:7;10764:16;;;-1:-1:-1;10808:1:22;10798:11;10724:100;10850:7;10841:5;:16;10837:100;;10886:7;10877:16;;;-1:-1:-1;10921:1:22;10911:11;10837:100;10963:7;10954:5;:16;10950:66;;11000:1;10990:11;11042:6;10139:916;-1:-1:-1;;10139:916:22:o;1713:176:27:-;1837:17;;:45;;;;;;;;16724:25:29;;;-1:-1:-1;;;;;16785:55:29;;;16765:18;;;16758:83;1814:4:27;;1837:17;;:25;;16697:18:29;;1837:45:27;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1830:52;1713:176;-1:-1:-1;;;1713:176:27:o;1104:111:6:-;5374:13:8;;;;;;;5366:69;;;;-1:-1:-1;;;5366:69:8;;16340:2:29;5366:69:8;;;16322:21:29;16379:2;16359:18;;;16352:30;16418:34;16398:18;;;16391:62;-1:-1:-1;;;16469:18:29;;;16462:41;16520:19;;5366:69:8;16138:407:29;5366:69:8;1176:32:6::1;929:10:10::0;1176:18:6::1;:32::i;14:184:29:-:0;-1:-1:-1;;;63:1:29;56:88;163:4;160:1;153:15;187:4;184:1;177:15;203:255;275:2;269:9;317:6;305:19;;354:18;339:34;;375:22;;;336:62;333:88;;;401:18;;:::i;:::-;437:2;430:22;203:255;:::o;463:275::-;534:2;528:9;599:2;580:13;;-1:-1:-1;;576:27:29;564:40;;634:18;619:34;;655:22;;;616:62;613:88;;;681:18;;:::i;:::-;717:2;710:22;463:275;;-1:-1:-1;463:275:29:o;743:186::-;791:4;824:18;816:6;813:30;810:56;;;846:18;;:::i;:::-;-1:-1:-1;912:2:29;891:15;-1:-1:-1;;887:29:29;918:4;883:40;;743:186::o;934:671::-;1002:6;1055:2;1043:9;1034:7;1030:23;1026:32;1023:52;;;1071:1;1068;1061:12;1023:52;1111:9;1098:23;1144:18;1136:6;1133:30;1130:50;;;1176:1;1173;1166:12;1130:50;1199:22;;1252:4;1244:13;;1240:27;-1:-1:-1;1230:55:29;;1281:1;1278;1271:12;1230:55;1317:2;1304:16;1342:48;1358:31;1386:2;1358:31;:::i;:::-;1342:48;:::i;:::-;1413:2;1406:5;1399:17;1453:7;1448:2;1443;1439;1435:11;1431:20;1428:33;1425:53;;;1474:1;1471;1464:12;1425:53;1529:2;1524;1520;1516:11;1511:2;1504:5;1500:14;1487:45;1573:1;1552:14;;;1568:2;1548:23;1541:34;;;;1556:5;934:671;-1:-1:-1;;;;934:671:29:o;1792:250::-;1877:1;1887:113;1901:6;1898:1;1895:13;1887:113;;;1977:11;;;1971:18;1958:11;;;1951:39;1923:2;1916:10;1887:113;;;-1:-1:-1;;2034:1:29;2016:16;;2009:27;1792:250::o;2047:396::-;2196:2;2185:9;2178:21;2159:4;2228:6;2222:13;2271:6;2266:2;2255:9;2251:18;2244:34;2287:79;2359:6;2354:2;2343:9;2339:18;2334:2;2326:6;2322:15;2287:79;:::i;:::-;2427:2;2406:15;-1:-1:-1;;2402:29:29;2387:45;;;;2434:2;2383:54;;2047:396;-1:-1:-1;;2047:396:29:o;2448:387::-;2531:8;2541:6;2595:3;2588:4;2580:6;2576:17;2572:27;2562:55;;2613:1;2610;2603:12;2562:55;-1:-1:-1;2636:20:29;;2679:18;2668:30;;2665:50;;;2711:1;2708;2701:12;2665:50;2748:4;2740:6;2736:17;2724:29;;2808:3;2801:4;2791:6;2788:1;2784:14;2776:6;2772:27;2768:38;2765:47;2762:67;;;2825:1;2822;2815:12;2762:67;2448:387;;;;;:::o;2840:842::-;2991:6;2999;3007;3015;3068:2;3056:9;3047:7;3043:23;3039:32;3036:52;;;3084:1;3081;3074:12;3036:52;3124:9;3111:23;3153:18;3194:2;3186:6;3183:14;3180:34;;;3210:1;3207;3200:12;3180:34;3249:90;3331:7;3322:6;3311:9;3307:22;3249:90;:::i;:::-;3358:8;;-1:-1:-1;3223:116:29;-1:-1:-1;3446:2:29;3431:18;;3418:32;;-1:-1:-1;3462:16:29;;;3459:36;;;3491:1;3488;3481:12;3459:36;;3530:92;3614:7;3603:8;3592:9;3588:24;3530:92;:::i;:::-;2840:842;;;;-1:-1:-1;3641:8:29;-1:-1:-1;;;;2840:842:29:o;4110:174::-;-1:-1:-1;;;;;4209:5:29;4205:54;4198:5;4195:65;4185:93;;4274:1;4271;4264:12;4289:294;4375:6;4428:2;4416:9;4407:7;4403:23;4399:32;4396:52;;;4444:1;4441;4434:12;4396:52;4483:9;4470:23;4502:51;4547:5;4502:51;:::i;4588:389::-;4676:6;4729:2;4717:9;4708:7;4704:23;4700:32;4697:52;;;4745:1;4742;4735:12;4697:52;4785:9;4772:23;4818:18;4810:6;4807:30;4804:50;;;4850:1;4847;4840:12;4804:50;4873:22;;4929:3;4911:16;;;4907:26;4904:46;;;4946:1;4943;4936:12;5254:442;5308:5;5361:3;5354:4;5346:6;5342:17;5338:27;5328:55;;5379:1;5376;5369:12;5328:55;5408:6;5402:13;5439:48;5455:31;5483:2;5455:31;:::i;5439:48::-;5512:2;5503:7;5496:19;5558:3;5551:4;5546:2;5538:6;5534:15;5530:26;5527:35;5524:55;;;5575:1;5572;5565:12;5524:55;5588:77;5662:2;5655:4;5646:7;5642:18;5635:4;5627:6;5623:17;5588:77;:::i;5701:562::-;5800:6;5808;5861:2;5849:9;5840:7;5836:23;5832:32;5829:52;;;5877:1;5874;5867:12;5829:52;5910:9;5904:16;5939:18;5980:2;5972:6;5969:14;5966:34;;;5996:1;5993;5986:12;5966:34;6019:61;6072:7;6063:6;6052:9;6048:22;6019:61;:::i;:::-;6009:71;;6126:2;6115:9;6111:18;6105:25;6089:41;;6155:2;6145:8;6142:16;6139:36;;;6171:1;6168;6161:12;6139:36;;6194:63;6249:7;6238:8;6227:9;6223:24;6194:63;:::i;:::-;6184:73;;;5701:562;;;;;:::o;6268:289::-;6399:3;6437:6;6431:13;6453:66;6512:6;6507:3;6500:4;6492:6;6488:17;6453:66;:::i;:::-;6535:16;;;;;6268:289;-1:-1:-1;;6268:289:29:o;6913:999::-;7342:3;7380:6;7374:13;7396:66;7455:6;7450:3;7443:4;7435:6;7431:17;7396:66;:::i;:::-;7493:6;7488:3;7484:16;7471:29;;7519:3;7545:2;7538:5;7531:17;7579:6;7573:13;7595:78;7664:8;7660:1;7653:5;7649:13;7642:4;7634:6;7630:17;7595:78;:::i;:::-;7736:1;7692:20;;7728:10;;;7721:22;7768:13;;7790:75;7768:13;7852:1;7844:10;;7837:4;7825:17;;7790:75;:::i;:::-;7885:17;7904:1;7881:25;;6913:999;-1:-1:-1;;;;;6913:999:29:o;7917:184::-;-1:-1:-1;;;7966:1:29;7959:88;8066:4;8063:1;8056:15;8090:4;8087:1;8080:15;8106:327;8201:4;8259:11;8246:25;8353:3;8349:8;8338;8322:14;8318:29;8314:44;8294:18;8290:69;8280:97;;8373:1;8370;8363:12;9842:184;9912:6;9965:2;9953:9;9944:7;9940:23;9936:32;9933:52;;;9981:1;9978;9971:12;9933:52;-1:-1:-1;10004:16:29;;9842:184;-1:-1:-1;9842:184:29:o;11682:521::-;11759:4;11765:6;11825:11;11812:25;11919:2;11915:7;11904:8;11888:14;11884:29;11880:43;11860:18;11856:68;11846:96;;11938:1;11935;11928:12;11846:96;11965:33;;12017:20;;;-1:-1:-1;12060:18:29;12049:30;;12046:50;;;12092:1;12089;12082:12;12046:50;12125:4;12113:17;;-1:-1:-1;12156:14:29;12152:27;;;12142:38;;12139:58;;;12193:1;12190;12183:12;12208:175;12286:13;;12339:18;12328:30;;12318:41;;12308:69;;12373:1;12370;12363:12;12388:158;12467:13;;12489:51;12467:13;12489:51;:::i;12551:164::-;12627:13;;12676;;12669:21;12659:32;;12649:60;;12705:1;12702;12695:12;12720:1270;12817:6;12870:2;12858:9;12849:7;12845:23;12841:32;12838:52;;;12886:1;12883;12876:12;12838:52;12919:9;12913:16;12948:18;12989:2;12981:6;12978:14;12975:34;;;13005:1;13002;12995:12;12975:34;13028:22;;;;13084:6;13066:16;;;13062:29;13059:49;;;13104:1;13101;13094:12;13059:49;13130:22;;:::i;:::-;13181:2;13175:9;13168:5;13161:24;13231:2;13227;13223:11;13217:18;13212:2;13205:5;13201:14;13194:42;13268:41;13305:2;13301;13297:11;13268:41;:::i;:::-;13263:2;13256:5;13252:14;13245:65;13342:41;13379:2;13375;13371:11;13342:41;:::i;:::-;13337:2;13330:5;13326:14;13319:65;13417:42;13454:3;13450:2;13446:12;13417:42;:::i;:::-;13411:3;13404:5;13400:15;13393:67;13507:3;13503:2;13499:12;13493:19;13487:3;13480:5;13476:15;13469:44;13546:43;13584:3;13580:2;13576:12;13546:43;:::i;:::-;13540:3;13533:5;13529:15;13522:68;13623:43;13661:3;13657:2;13653:12;13623:43;:::i;:::-;13617:3;13610:5;13606:15;13599:68;13686:3;13721:39;13756:2;13752;13748:11;13721:39;:::i;:::-;13705:14;;;13698:63;13780:3;13814:11;;;13808:18;13838:16;;;13835:36;;;13867:1;13864;13857:12;13835:36;13903:56;13951:7;13940:8;13936:2;13932:17;13903:56;:::i;:::-;13887:14;;;13880:80;;;;-1:-1:-1;13891:5:29;12720:1270;-1:-1:-1;;;;;12720:1270:29:o;16852:202::-;16919:6;16972:2;16960:9;16951:7;16947:23;16943:32;16940:52;;;16988:1;16985;16978:12;16940:52;17011:37;17038:9;17011:37;:::i"},"gasEstimates":{"creation":{"codeDepositCost":"1227600","executionCost":"infinite","totalCost":"infinite"},"external":{"attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))":"infinite","changeCommunityResolver(address)":"26781","getGrantCommunityUID(bytes)":"infinite","getMilestoneApprovalType(bytes)":"infinite","initialize(address)":"infinite","isPayable()":"265","multiAttest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])":"infinite","multiRevoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])":"infinite","owner()":"2346","renounceOwnership()":"infinite","revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))":"infinite","transferOwnership(address)":"infinite","version()":"infinite"},"internal":{"isCommunityAdmin(bytes32,address)":"infinite","onAttest(struct Attestation calldata,uint256)":"infinite","onRevoke(struct Attestation calldata,uint256)":"infinite"}},"methodIdentifiers":{"attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))":"e60c3505","changeCommunityResolver(address)":"f39f43e3","getGrantCommunityUID(bytes)":"cd2c78b8","getMilestoneApprovalType(bytes)":"4a47bb60","initialize(address)":"c4d66de8","isPayable()":"ce46e046","multiAttest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])":"91db0b7e","multiRevoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])":"88e5b2d9","owner()":"8da5cb5b","renounceOwnership()":"715018a6","revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))":"e49617e1","transferOwnership(address)":"f2fde38b","version()":"54fd4d50"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IEAS\",\"name\":\"eas\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AccessDenied\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientValue\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidEAS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotPayable\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"uid\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"schema\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"time\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"expirationTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"revocationTime\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"refUID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"attester\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"revocable\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct Attestation\",\"name\":\"attestation\",\"type\":\"tuple\"}],\"name\":\"attest\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ICommunityResolver\",\"name\":\"resolver\",\"type\":\"address\"}],\"name\":\"changeCommunityResolver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"grantData\",\"type\":\"bytes\"}],\"name\":\"getGrantCommunityUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"milestoneData\",\"type\":\"bytes\"}],\"name\":\"getMilestoneApprovalType\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"typeHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ICommunityResolver\",\"name\":\"resolver\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPayable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"uid\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"schema\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"time\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"expirationTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"revocationTime\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"refUID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"attester\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"revocable\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct Attestation[]\",\"name\":\"attestations\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"multiAttest\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"uid\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"schema\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"time\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"expirationTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"revocationTime\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"refUID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"attester\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"revocable\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct Attestation[]\",\"name\":\"attestations\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"multiRevoke\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"uid\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"schema\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"time\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"expirationTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"revocationTime\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"refUID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"attester\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"revocable\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct Attestation\",\"name\":\"attestation\",\"type\":\"tuple\"}],\"name\":\"revoke\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{\"attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))\":{\"details\":\"Processes an attestation and verifies whether it's valid.\",\"params\":{\"attestation\":\"The new attestation.\"},\"returns\":{\"_0\":\"Whether the attestation is valid.\"}},\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"getGrantCommunityUID(bytes)\":{\"returns\":{\"_0\":\"the referred community UID\"}},\"getMilestoneApprovalType(bytes)\":{\"returns\":{\"typeHash\":\"\\\"approved\\\" | \\\"rejected\\\" | \\\"completed\\\"\"}},\"isPayable()\":{\"details\":\"Returns whether the resolver supports ETH transfers.\"},\"multiAttest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])\":{\"details\":\"Processes multiple attestations and verifies whether they are valid.\",\"params\":{\"attestations\":\"The new attestations.\",\"values\":\"Explicit ETH amounts which were sent with each attestation.\"},\"returns\":{\"_0\":\"Whether all the attestations are valid.\"}},\"multiRevoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])\":{\"details\":\"Processes revocation of multiple attestation and verifies they can be revoked.\",\"params\":{\"attestations\":\"The existing attestations to be revoked.\",\"values\":\"Explicit ETH amounts which were sent with each revocation.\"},\"returns\":{\"_0\":\"Whether the attestations can be revoked.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))\":{\"details\":\"Processes an attestation revocation and verifies if it can be revoked.\",\"params\":{\"attestation\":\"The existing attestation to be revoked.\"},\"returns\":{\"_0\":\"Whether the attestation can be revoked.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"version()\":{\"returns\":{\"_0\":\"Semver contract version as a string.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"changeCommunityResolver(address)\":{\"notice\":\"Set the community resolver to check for admin privileges\"},\"getGrantCommunityUID(bytes)\":{\"notice\":\"Decodes the grant schema\"},\"getMilestoneApprovalType(bytes)\":{\"notice\":\"Decodes the milestone schema\"},\"version()\":{\"notice\":\"Returns the full semver contract version.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MilestoneStatusResolver.sol\":\"MilestoneStatusResolver\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@ethereum-attestation-service/eas-contracts/contracts/Common.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// A representation of an empty/uninitialized UID.\\nbytes32 constant EMPTY_UID = 0;\\n\\n// A zero expiration represents an non-expiring attestation.\\nuint64 constant NO_EXPIRATION_TIME = 0;\\n\\nerror AccessDenied();\\nerror InvalidEAS();\\nerror InvalidLength();\\nerror InvalidSignature();\\nerror NotFound();\\n\\n/**\\n * @dev A struct representing EIP712 signature data.\\n */\\nstruct EIP712Signature {\\n    uint8 v; // The recovery ID.\\n    bytes32 r; // The x-coordinate of the nonce R.\\n    bytes32 s; // The signature data.\\n}\\n\\n/**\\n * @dev A struct representing a single attestation.\\n */\\nstruct Attestation {\\n    bytes32 uid; // A unique identifier of the attestation.\\n    bytes32 schema; // The unique identifier of the schema.\\n    uint64 time; // The time when the attestation was created (Unix timestamp).\\n    uint64 expirationTime; // The time when the attestation expires (Unix timestamp).\\n    uint64 revocationTime; // The time when the attestation was revoked (Unix timestamp).\\n    bytes32 refUID; // The UID of the related attestation.\\n    address recipient; // The recipient of the attestation.\\n    address attester; // The attester/sender of the attestation.\\n    bool revocable; // Whether the attestation is revocable.\\n    bytes data; // Custom attestation data.\\n}\\n\\n/**\\n * @dev A helper function to work with unchecked iterators in loops.\\n */\\nfunction uncheckedInc(uint256 i) pure returns (uint256 j) {\\n    unchecked {\\n        j = i + 1;\\n    }\\n}\\n\",\"keccak256\":\"0x4bab9ec76bdb009e9fb505c45a679d39c9e80771eb13ed901029a1068025752a\",\"license\":\"MIT\"},\"@ethereum-attestation-service/eas-contracts/contracts/IEAS.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { ISchemaRegistry } from \\\"./ISchemaRegistry.sol\\\";\\nimport { Attestation, EIP712Signature } from \\\"./Common.sol\\\";\\n\\n/**\\n * @dev A struct representing the arguments of the attestation request.\\n */\\nstruct AttestationRequestData {\\n    address recipient; // The recipient of the attestation.\\n    uint64 expirationTime; // The time when the attestation expires (Unix timestamp).\\n    bool revocable; // Whether the attestation is revocable.\\n    bytes32 refUID; // The UID of the related attestation.\\n    bytes data; // Custom attestation data.\\n    uint256 value; // An explicit ETH amount to send to the resolver. This is important to prevent accidental user errors.\\n}\\n\\n/**\\n * @dev A struct representing the full arguments of the attestation request.\\n */\\nstruct AttestationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    AttestationRequestData data; // The arguments of the attestation request.\\n}\\n\\n/**\\n * @dev A struct representing the full arguments of the full delegated attestation request.\\n */\\nstruct DelegatedAttestationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    AttestationRequestData data; // The arguments of the attestation request.\\n    EIP712Signature signature; // The EIP712 signature data.\\n    address attester; // The attesting account.\\n}\\n\\n/**\\n * @dev A struct representing the full arguments of the multi attestation request.\\n */\\nstruct MultiAttestationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    AttestationRequestData[] data; // The arguments of the attestation request.\\n}\\n\\n/**\\n * @dev A struct representing the full arguments of the delegated multi attestation request.\\n */\\nstruct MultiDelegatedAttestationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    AttestationRequestData[] data; // The arguments of the attestation requests.\\n    EIP712Signature[] signatures; // The EIP712 signatures data. Please note that the signatures are assumed to be signed with increasing nonces.\\n    address attester; // The attesting account.\\n}\\n\\n/**\\n * @dev A struct representing the arguments of the revocation request.\\n */\\nstruct RevocationRequestData {\\n    bytes32 uid; // The UID of the attestation to revoke.\\n    uint256 value; // An explicit ETH amount to send to the resolver. This is important to prevent accidental user errors.\\n}\\n\\n/**\\n * @dev A struct representing the full arguments of the revocation request.\\n */\\nstruct RevocationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    RevocationRequestData data; // The arguments of the revocation request.\\n}\\n\\n/**\\n * @dev A struct representing the arguments of the full delegated revocation request.\\n */\\nstruct DelegatedRevocationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    RevocationRequestData data; // The arguments of the revocation request.\\n    EIP712Signature signature; // The EIP712 signature data.\\n    address revoker; // The revoking account.\\n}\\n\\n/**\\n * @dev A struct representing the full arguments of the multi revocation request.\\n */\\nstruct MultiRevocationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    RevocationRequestData[] data; // The arguments of the revocation request.\\n}\\n\\n/**\\n * @dev A struct representing the full arguments of the delegated multi revocation request.\\n */\\nstruct MultiDelegatedRevocationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    RevocationRequestData[] data; // The arguments of the revocation requests.\\n    EIP712Signature[] signatures; // The EIP712 signatures data. Please note that the signatures are assumed to be signed with increasing nonces.\\n    address revoker; // The revoking account.\\n}\\n\\n/**\\n * @title EAS - Ethereum Attestation Service interface.\\n */\\ninterface IEAS {\\n    /**\\n     * @dev Emitted when an attestation has been made.\\n     *\\n     * @param recipient The recipient of the attestation.\\n     * @param attester The attesting account.\\n     * @param uid The UID the revoked attestation.\\n     * @param schema The UID of the schema.\\n     */\\n    event Attested(address indexed recipient, address indexed attester, bytes32 uid, bytes32 indexed schema);\\n\\n    /**\\n     * @dev Emitted when an attestation has been revoked.\\n     *\\n     * @param recipient The recipient of the attestation.\\n     * @param attester The attesting account.\\n     * @param schema The UID of the schema.\\n     * @param uid The UID the revoked attestation.\\n     */\\n    event Revoked(address indexed recipient, address indexed attester, bytes32 uid, bytes32 indexed schema);\\n\\n    /**\\n     * @dev Emitted when a data has been timestamped.\\n     *\\n     * @param data The data.\\n     * @param timestamp The timestamp.\\n     */\\n    event Timestamped(bytes32 indexed data, uint64 indexed timestamp);\\n\\n    /**\\n     * @dev Emitted when a data has been revoked.\\n     *\\n     * @param revoker The address of the revoker.\\n     * @param data The data.\\n     * @param timestamp The timestamp.\\n     */\\n    event RevokedOffchain(address indexed revoker, bytes32 indexed data, uint64 indexed timestamp);\\n\\n    /**\\n     * @dev Returns the address of the global schema registry.\\n     *\\n     * @return The address of the global schema registry.\\n     */\\n    function getSchemaRegistry() external view returns (ISchemaRegistry);\\n\\n    /**\\n     * @dev Attests to a specific schema.\\n     *\\n     * @param request The arguments of the attestation request.\\n     *\\n     * Example:\\n     *\\n     * attest({\\n     *     schema: \\\"0facc36681cbe2456019c1b0d1e7bedd6d1d40f6f324bf3dd3a4cef2999200a0\\\",\\n     *     data: {\\n     *         recipient: \\\"0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf\\\",\\n     *         expirationTime: 0,\\n     *         revocable: true,\\n     *         refUID: \\\"0x0000000000000000000000000000000000000000000000000000000000000000\\\",\\n     *         data: \\\"0xF00D\\\",\\n     *         value: 0\\n     *     }\\n     * })\\n     *\\n     * @return The UID of the new attestation.\\n     */\\n    function attest(AttestationRequest calldata request) external payable returns (bytes32);\\n\\n    /**\\n     * @dev Attests to a specific schema via the provided EIP712 signature.\\n     *\\n     * @param delegatedRequest The arguments of the delegated attestation request.\\n     *\\n     * Example:\\n     *\\n     * attestByDelegation({\\n     *     schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n     *     data: {\\n     *         recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',\\n     *         expirationTime: 1673891048,\\n     *         revocable: true,\\n     *         refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\\n     *         data: '0x1234',\\n     *         value: 0\\n     *     },\\n     *     signature: {\\n     *         v: 28,\\n     *         r: '0x148c...b25b',\\n     *         s: '0x5a72...be22'\\n     *     },\\n     *     attester: '0xc5E8740aD971409492b1A63Db8d83025e0Fc427e'\\n     * })\\n     *\\n     * @return The UID of the new attestation.\\n     */\\n    function attestByDelegation(\\n        DelegatedAttestationRequest calldata delegatedRequest\\n    ) external payable returns (bytes32);\\n\\n    /**\\n     * @dev Attests to multiple schemas.\\n     *\\n     * @param multiRequests The arguments of the multi attestation requests. The requests should be grouped by distinct\\n     * schema ids to benefit from the best batching optimization.\\n     *\\n     * Example:\\n     *\\n     * multiAttest([{\\n     *     schema: '0x33e9094830a5cba5554d1954310e4fbed2ef5f859ec1404619adea4207f391fd',\\n     *     data: [{\\n     *         recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',\\n     *         expirationTime: 1673891048,\\n     *         revocable: true,\\n     *         refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\\n     *         data: '0x1234',\\n     *         value: 1000\\n     *     },\\n     *     {\\n     *         recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',\\n     *         expirationTime: 0,\\n     *         revocable: false,\\n     *         refUID: '0x480df4a039efc31b11bfdf491b383ca138b6bde160988222a2a3509c02cee174',\\n     *         data: '0x00',\\n     *         value: 0\\n     *     }],\\n     * },\\n     * {\\n     *     schema: '0x5ac273ce41e3c8bfa383efe7c03e54c5f0bff29c9f11ef6ffa930fc84ca32425',\\n     *     data: [{\\n     *         recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',\\n     *         expirationTime: 0,\\n     *         revocable: true,\\n     *         refUID: '0x75bf2ed8dca25a8190c50c52db136664de25b2449535839008ccfdab469b214f',\\n     *         data: '0x12345678',\\n     *         value: 0\\n     *     },\\n     * }])\\n     *\\n     * @return The UIDs of the new attestations.\\n     */\\n    function multiAttest(MultiAttestationRequest[] calldata multiRequests) external payable returns (bytes32[] memory);\\n\\n    /**\\n     * @dev Attests to multiple schemas using via provided EIP712 signatures.\\n     *\\n     * @param multiDelegatedRequests The arguments of the delegated multi attestation requests. The requests should be\\n     * grouped by distinct schema ids to benefit from the best batching optimization.\\n     *\\n     * Example:\\n     *\\n     * multiAttestByDelegation([{\\n     *     schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n     *     data: [{\\n     *         recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',\\n     *         expirationTime: 1673891048,\\n     *         revocable: true,\\n     *         refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\\n     *         data: '0x1234',\\n     *         value: 0\\n     *     },\\n     *     {\\n     *         recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',\\n     *         expirationTime: 0,\\n     *         revocable: false,\\n     *         refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\\n     *         data: '0x00',\\n     *         value: 0\\n     *     }],\\n     *     signatures: [{\\n     *         v: 28,\\n     *         r: '0x148c...b25b',\\n     *         s: '0x5a72...be22'\\n     *     },\\n     *     {\\n     *         v: 28,\\n     *         r: '0x487s...67bb',\\n     *         s: '0x12ad...2366'\\n     *     }],\\n     *     attester: '0x1D86495b2A7B524D747d2839b3C645Bed32e8CF4'\\n     * }])\\n     *\\n     * @return The UIDs of the new attestations.\\n     */\\n    function multiAttestByDelegation(\\n        MultiDelegatedAttestationRequest[] calldata multiDelegatedRequests\\n    ) external payable returns (bytes32[] memory);\\n\\n    /**\\n     * @dev Revokes an existing attestation to a specific schema.\\n     *\\n     * Example:\\n     *\\n     * revoke({\\n     *     schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n     *     data: {\\n     *         uid: '0x101032e487642ee04ee17049f99a70590c735b8614079fc9275f9dd57c00966d',\\n     *         value: 0\\n     *     }\\n     * })\\n     *\\n     * @param request The arguments of the revocation request.\\n     */\\n    function revoke(RevocationRequest calldata request) external payable;\\n\\n    /**\\n     * @dev Revokes an existing attestation to a specific schema via the provided EIP712 signature.\\n     *\\n     * Example:\\n     *\\n     * revokeByDelegation({\\n     *     schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n     *     data: {\\n     *         uid: '0xcbbc12102578c642a0f7b34fe7111e41afa25683b6cd7b5a14caf90fa14d24ba',\\n     *         value: 0\\n     *     },\\n     *     signature: {\\n     *         v: 27,\\n     *         r: '0xb593...7142',\\n     *         s: '0x0f5b...2cce'\\n     *     },\\n     *     revoker: '0x244934dd3e31bE2c81f84ECf0b3E6329F5381992'\\n     * })\\n     *\\n     * @param delegatedRequest The arguments of the delegated revocation request.\\n     */\\n    function revokeByDelegation(DelegatedRevocationRequest calldata delegatedRequest) external payable;\\n\\n    /**\\n     * @dev Revokes existing attestations to multiple schemas.\\n     *\\n     * @param multiRequests The arguments of the multi revocation requests. The requests should be grouped by distinct\\n     * schema ids to benefit from the best batching optimization.\\n     *\\n     * Example:\\n     *\\n     * multiRevoke([{\\n     *     schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n     *     data: [{\\n     *         uid: '0x211296a1ca0d7f9f2cfebf0daaa575bea9b20e968d81aef4e743d699c6ac4b25',\\n     *         value: 1000\\n     *     },\\n     *     {\\n     *         uid: '0xe160ac1bd3606a287b4d53d5d1d6da5895f65b4b4bab6d93aaf5046e48167ade',\\n     *         value: 0\\n     *     }],\\n     * },\\n     * {\\n     *     schema: '0x5ac273ce41e3c8bfa383efe7c03e54c5f0bff29c9f11ef6ffa930fc84ca32425',\\n     *     data: [{\\n     *         uid: '0x053d42abce1fd7c8fcddfae21845ad34dae287b2c326220b03ba241bc5a8f019',\\n     *         value: 0\\n     *     },\\n     * }])\\n     */\\n    function multiRevoke(MultiRevocationRequest[] calldata multiRequests) external payable;\\n\\n    /**\\n     * @dev Revokes existing attestations to multiple schemas via provided EIP712 signatures.\\n     *\\n     * @param multiDelegatedRequests The arguments of the delegated multi revocation attestation requests. The requests should be\\n     * grouped by distinct schema ids to benefit from the best batching optimization.\\n     *\\n     * Example:\\n     *\\n     * multiRevokeByDelegation([{\\n     *     schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n     *     data: [{\\n     *         uid: '0x211296a1ca0d7f9f2cfebf0daaa575bea9b20e968d81aef4e743d699c6ac4b25',\\n     *         value: 1000\\n     *     },\\n     *     {\\n     *         uid: '0xe160ac1bd3606a287b4d53d5d1d6da5895f65b4b4bab6d93aaf5046e48167ade',\\n     *         value: 0\\n     *     }],\\n     *     signatures: [{\\n     *         v: 28,\\n     *         r: '0x148c...b25b',\\n     *         s: '0x5a72...be22'\\n     *     },\\n     *     {\\n     *         v: 28,\\n     *         r: '0x487s...67bb',\\n     *         s: '0x12ad...2366'\\n     *     }],\\n     *     revoker: '0x244934dd3e31bE2c81f84ECf0b3E6329F5381992'\\n     * }])\\n     *\\n     */\\n    function multiRevokeByDelegation(\\n        MultiDelegatedRevocationRequest[] calldata multiDelegatedRequests\\n    ) external payable;\\n\\n    /**\\n     * @dev Timestamps the specified bytes32 data.\\n     *\\n     * @param data The data to timestamp.\\n     *\\n     * @return The timestamp the data was timestamped with.\\n     */\\n    function timestamp(bytes32 data) external returns (uint64);\\n\\n    /**\\n     * @dev Timestamps the specified multiple bytes32 data.\\n     *\\n     * @param data The data to timestamp.\\n     *\\n     * @return The timestamp the data was timestamped with.\\n     */\\n    function multiTimestamp(bytes32[] calldata data) external returns (uint64);\\n\\n    /**\\n     * @dev Revokes the specified bytes32 data.\\n     *\\n     * @param data The data to timestamp.\\n     *\\n     * @return The timestamp the data was revoked with.\\n     */\\n    function revokeOffchain(bytes32 data) external returns (uint64);\\n\\n    /**\\n     * @dev Revokes the specified multiple bytes32 data.\\n     *\\n     * @param data The data to timestamp.\\n     *\\n     * @return The timestamp the data was revoked with.\\n     */\\n    function multiRevokeOffchain(bytes32[] calldata data) external returns (uint64);\\n\\n    /**\\n     * @dev Returns an existing attestation by UID.\\n     *\\n     * @param uid The UID of the attestation to retrieve.\\n     *\\n     * @return The attestation data members.\\n     */\\n    function getAttestation(bytes32 uid) external view returns (Attestation memory);\\n\\n    /**\\n     * @dev Checks whether an attestation exists.\\n     *\\n     * @param uid The UID of the attestation to retrieve.\\n     *\\n     * @return Whether an attestation exists.\\n     */\\n    function isAttestationValid(bytes32 uid) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the timestamp that the specified data was timestamped with.\\n     *\\n     * @param data The data to query.\\n     *\\n     * @return The timestamp the data was timestamped with.\\n     */\\n    function getTimestamp(bytes32 data) external view returns (uint64);\\n\\n    /**\\n     * @dev Returns the timestamp that the specified data was timestamped with.\\n     *\\n     * @param data The data to query.\\n     *\\n     * @return The timestamp the data was timestamped with.\\n     */\\n    function getRevokeOffchain(address revoker, bytes32 data) external view returns (uint64);\\n}\\n\",\"keccak256\":\"0xd530be686226f3c8d7b02bb59797901620f64749a02228539afc8b082a1ee036\",\"license\":\"MIT\"},\"@ethereum-attestation-service/eas-contracts/contracts/ISchemaRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { ISchemaResolver } from \\\"./resolver/ISchemaResolver.sol\\\";\\n\\n/**\\n * @title A struct representing a record for a submitted schema.\\n */\\nstruct SchemaRecord {\\n    bytes32 uid; // The unique identifier of the schema.\\n    ISchemaResolver resolver; // Optional schema resolver.\\n    bool revocable; // Whether the schema allows revocations explicitly.\\n    string schema; // Custom specification of the schema (e.g., an ABI).\\n}\\n\\n/**\\n * @title The global schema registry interface.\\n */\\ninterface ISchemaRegistry {\\n    /**\\n     * @dev Emitted when a new schema has been registered\\n     *\\n     * @param uid The schema UID.\\n     * @param registerer The address of the account used to register the schema.\\n     */\\n    event Registered(bytes32 indexed uid, address registerer);\\n\\n    /**\\n     * @dev Submits and reserves a new schema\\n     *\\n     * @param schema The schema data schema.\\n     * @param resolver An optional schema resolver.\\n     * @param revocable Whether the schema allows revocations explicitly.\\n     *\\n     * @return The UID of the new schema.\\n     */\\n    function register(string calldata schema, ISchemaResolver resolver, bool revocable) external returns (bytes32);\\n\\n    /**\\n     * @dev Returns an existing schema by UID\\n     *\\n     * @param uid The UID of the schema to retrieve.\\n     *\\n     * @return The schema data members.\\n     */\\n    function getSchema(bytes32 uid) external view returns (SchemaRecord memory);\\n}\\n\",\"keccak256\":\"0xef47e449dd02bd034e26b1dea505ce533906f8462fc674c938ed0e872a68d640\",\"license\":\"MIT\"},\"@ethereum-attestation-service/eas-contracts/contracts/Semver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\nimport { Strings } from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\n/**\\n * @dev A simple contract for managing contract versions.\\n */\\ncontract Semver {\\n    // Contract's major version number.\\n    uint256 private immutable _major;\\n\\n    // Contract's minor version number.\\n    uint256 private immutable _minor;\\n\\n    // Contract's patch version number.\\n    uint256 private immutable _path;\\n\\n    /**\\n     * @param major Major version number.\\n     * @param minor Minor version number.\\n     * @param patch Patch version number.\\n     */\\n    constructor(uint256 major, uint256 minor, uint256 patch) {\\n        _major = major;\\n        _minor = minor;\\n        _path = patch;\\n    }\\n\\n    /**\\n     * @notice Returns the full semver contract version.\\n     *\\n     * @return Semver contract version as a string.\\n     */\\n    function version() external view returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(Strings.toString(_major), \\\".\\\", Strings.toString(_minor), \\\".\\\", Strings.toString(_path))\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0xdd3bfff2af5b5cea194f5a771080d13ad458040825b148e0d7eb65f6e3a2a7c7\",\"license\":\"MIT\"},\"@ethereum-attestation-service/eas-contracts/contracts/resolver/ISchemaResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { Attestation } from \\\"../Common.sol\\\";\\n\\n/**\\n * @title The interface of an optional schema resolver.\\n */\\ninterface ISchemaResolver {\\n    /**\\n     * @dev Returns whether the resolver supports ETH transfers.\\n     */\\n    function isPayable() external pure returns (bool);\\n\\n    /**\\n     * @dev Processes an attestation and verifies whether it's valid.\\n     *\\n     * @param attestation The new attestation.\\n     *\\n     * @return Whether the attestation is valid.\\n     */\\n    function attest(Attestation calldata attestation) external payable returns (bool);\\n\\n    /**\\n     * @dev Processes multiple attestations and verifies whether they are valid.\\n     *\\n     * @param attestations The new attestations.\\n     * @param values Explicit ETH amounts which were sent with each attestation.\\n     *\\n     * @return Whether all the attestations are valid.\\n     */\\n    function multiAttest(\\n        Attestation[] calldata attestations,\\n        uint256[] calldata values\\n    ) external payable returns (bool);\\n\\n    /**\\n     * @dev Processes an attestation revocation and verifies if it can be revoked.\\n     *\\n     * @param attestation The existing attestation to be revoked.\\n     *\\n     * @return Whether the attestation can be revoked.\\n     */\\n    function revoke(Attestation calldata attestation) external payable returns (bool);\\n\\n    /**\\n     * @dev Processes revocation of multiple attestation and verifies they can be revoked.\\n     *\\n     * @param attestations The existing attestations to be revoked.\\n     * @param values Explicit ETH amounts which were sent with each revocation.\\n     *\\n     * @return Whether the attestations can be revoked.\\n     */\\n    function multiRevoke(\\n        Attestation[] calldata attestations,\\n        uint256[] calldata values\\n    ) external payable returns (bool);\\n}\\n\",\"keccak256\":\"0xc628c6540da258f76192eaa34c21699c9cbcc4a4029d7ee04e88dc9c18c981fd\",\"license\":\"MIT\"},\"@ethereum-attestation-service/eas-contracts/contracts/resolver/SchemaResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\nimport { IEAS, Attestation } from \\\"../IEAS.sol\\\";\\nimport { InvalidEAS, uncheckedInc } from \\\"../Common.sol\\\";\\nimport { Semver } from \\\"../Semver.sol\\\";\\n\\nimport { ISchemaResolver } from \\\"./ISchemaResolver.sol\\\";\\n\\n/**\\n * @title A base resolver contract\\n */\\nabstract contract SchemaResolver is ISchemaResolver, Semver {\\n    error AccessDenied();\\n    error InsufficientValue();\\n    error NotPayable();\\n\\n    // The global EAS contract.\\n    IEAS internal immutable _eas;\\n\\n    /**\\n     * @dev Creates a new resolver.\\n     *\\n     * @param eas The address of the global EAS contract.\\n     */\\n    constructor(IEAS eas) Semver(1, 0, 0) {\\n        if (address(eas) == address(0)) {\\n            revert InvalidEAS();\\n        }\\n\\n        _eas = eas;\\n    }\\n\\n    /**\\n     * @dev Ensures that only the EAS contract can make this call.\\n     */\\n    modifier onlyEAS() {\\n        _onlyEAS();\\n\\n        _;\\n    }\\n\\n    /**\\n     * @inheritdoc ISchemaResolver\\n     */\\n    function isPayable() public pure virtual returns (bool) {\\n        return false;\\n    }\\n\\n    /**\\n     * @dev ETH callback.\\n     */\\n    receive() external payable virtual {\\n        if (!isPayable()) {\\n            revert NotPayable();\\n        }\\n    }\\n\\n    /**\\n     * @inheritdoc ISchemaResolver\\n     */\\n    function attest(Attestation calldata attestation) external payable onlyEAS returns (bool) {\\n        return onAttest(attestation, msg.value);\\n    }\\n\\n    /**\\n     * @inheritdoc ISchemaResolver\\n     */\\n    function multiAttest(\\n        Attestation[] calldata attestations,\\n        uint256[] calldata values\\n    ) external payable onlyEAS returns (bool) {\\n        uint256 length = attestations.length;\\n\\n        // We are keeping track of the remaining ETH amount that can be sent to resolvers and will keep deducting\\n        // from it to verify that there isn't any attempt to send too much ETH to resolvers. Please note that unless\\n        // some ETH was stuck in the contract by accident (which shouldn't happen in normal conditions), it won't be\\n        // possible to send too much ETH anyway.\\n        uint256 remainingValue = msg.value;\\n\\n        for (uint256 i = 0; i < length; i = uncheckedInc(i)) {\\n            // Ensure that the attester/revoker doesn't try to spend more than available.\\n            uint256 value = values[i];\\n            if (value > remainingValue) {\\n                revert InsufficientValue();\\n            }\\n\\n            // Forward the attestation to the underlying resolver and revert in case it isn't approved.\\n            if (!onAttest(attestations[i], value)) {\\n                return false;\\n            }\\n\\n            unchecked {\\n                // Subtract the ETH amount, that was provided to this attestation, from the global remaining ETH amount.\\n                remainingValue -= value;\\n            }\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @inheritdoc ISchemaResolver\\n     */\\n    function revoke(Attestation calldata attestation) external payable onlyEAS returns (bool) {\\n        return onRevoke(attestation, msg.value);\\n    }\\n\\n    /**\\n     * @inheritdoc ISchemaResolver\\n     */\\n    function multiRevoke(\\n        Attestation[] calldata attestations,\\n        uint256[] calldata values\\n    ) external payable onlyEAS returns (bool) {\\n        uint256 length = attestations.length;\\n\\n        // We are keeping track of the remaining ETH amount that can be sent to resolvers and will keep deducting\\n        // from it to verify that there isn't any attempt to send too much ETH to resolvers. Please note that unless\\n        // some ETH was stuck in the contract by accident (which shouldn't happen in normal conditions), it won't be\\n        // possible to send too much ETH anyway.\\n        uint256 remainingValue = msg.value;\\n\\n        for (uint256 i = 0; i < length; i = uncheckedInc(i)) {\\n            // Ensure that the attester/revoker doesn't try to spend more than available.\\n            uint256 value = values[i];\\n            if (value > remainingValue) {\\n                revert InsufficientValue();\\n            }\\n\\n            // Forward the revocation to the underlying resolver and revert in case it isn't approved.\\n            if (!onRevoke(attestations[i], value)) {\\n                return false;\\n            }\\n\\n            unchecked {\\n                // Subtract the ETH amount, that was provided to this attestation, from the global remaining ETH amount.\\n                remainingValue -= value;\\n            }\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev A resolver callback that should be implemented by child contracts.\\n     *\\n     * @param attestation The new attestation.\\n     * @param value An explicit ETH amount that was sent to the resolver. Please note that this value is verified in\\n     * both attest() and multiAttest() callbacks EAS-only callbacks and that in case of multi attestations, it'll\\n     * usually hold that msg.value != value, since msg.value aggregated the sent ETH amounts for all the attestations\\n     * in the batch.\\n     *\\n     * @return Whether the attestation is valid.\\n     */\\n    function onAttest(Attestation calldata attestation, uint256 value) internal virtual returns (bool);\\n\\n    /**\\n     * @dev Processes an attestation revocation and verifies if it can be revoked.\\n     *\\n     * @param attestation The existing attestation to be revoked.\\n     * @param value An explicit ETH amount that was sent to the resolver. Please note that this value is verified in\\n     * both revoke() and multiRevoke() callbacks EAS-only callbacks and that in case of multi attestations, it'll\\n     * usually hold that msg.value != value, since msg.value aggregated the sent ETH amounts for all the attestations\\n     * in the batch.\\n     *\\n     * @return Whether the attestation can be revoked.\\n     */\\n    function onRevoke(Attestation calldata attestation, uint256 value) internal virtual returns (bool);\\n\\n    /**\\n     * @dev Ensures that only the EAS contract can make this call.\\n     */\\n    function _onlyEAS() private view {\\n        if (msg.sender != address(_eas)) {\\n            revert AccessDenied();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8bac9997f3c6b2e9a165342e35c1263d1942ce55a98ecbe0aa6ec84fcb6538d7\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x4075622496acc77fd6d4de4cc30a8577a744d5c75afad33fdeacf1704d6eda98\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/ICommunityResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.19;\\r\\n\\r\\nimport {ISchemaResolver} from \\\"@ethereum-attestation-service/eas-contracts/contracts/resolver/ISchemaResolver.sol\\\";\\r\\n\\r\\ninterface ICommunityResolver is ISchemaResolver {\\r\\n    function isAdmin(bytes32 communityUID, address addr) external returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0xac3da8fd583300ed75ec80ae1118adfcced241220b19ecc30083a277fc57e46b\",\"license\":\"MIT\"},\"contracts/MilestoneStatusResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nimport {SchemaResolver} from \\\"@ethereum-attestation-service/eas-contracts/contracts/resolver/SchemaResolver.sol\\\";\\nimport {IEAS} from \\\"@ethereum-attestation-service/eas-contracts/contracts/IEAS.sol\\\";\\nimport {ICommunityResolver} from \\\"./ICommunityResolver.sol\\\";\\nimport {Attestation} from \\\"@ethereum-attestation-service/eas-contracts/contracts/Common.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\ncontract MilestoneStatusResolver is\\n    SchemaResolver,\\n    Initializable,\\n    OwnableUpgradeable\\n{\\n    address private _owner;\\n    ICommunityResolver communityResolver;\\n\\n    bytes32 private approvedHash;\\n    bytes32 private completedHash;\\n    bytes32 private rejectedHash;\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor(IEAS eas) SchemaResolver(eas) {\\n        _disableInitializers();\\n    }\\n\\n    function initialize(ICommunityResolver resolver) public initializer {\\n        _owner = msg.sender;\\n        communityResolver = resolver;\\n        approvedHash = keccak256(abi.encodePacked(\\\"approved\\\"));\\n        completedHash = keccak256(abi.encodePacked(\\\"completed\\\"));\\n        rejectedHash = keccak256(abi.encodePacked(\\\"rejected\\\"));\\n        __Ownable_init();\\n    }\\n\\n    /**\\n     * Set the community resolver to check for admin privileges\\n     */\\n    function changeCommunityResolver(ICommunityResolver resolver) external {\\n        require(msg.sender == _owner, \\\"Not owner.\\\");\\n        communityResolver = resolver;\\n    }\\n\\n    /**\\n     * Calls community resolver whitelist to check if address is\\n     * a community admin\\n     */\\n    function isCommunityAdmin(\\n        bytes32 communityUID,\\n        address addr\\n    ) private returns (bool) {\\n        return communityResolver.isAdmin(communityUID, addr);\\n    }\\n\\n    /**\\n     * Decodes the milestone schema\\n     * @return typeHash \\\"approved\\\" | \\\"rejected\\\" | \\\"completed\\\"\\n     */\\n    function getMilestoneApprovalType(\\n        bytes memory milestoneData\\n    ) public view returns (bytes32 typeHash) {\\n        (string memory type_, ) = abi.decode(milestoneData, (string, string));\\n\\n        typeHash = keccak256(abi.encodePacked(type_));\\n\\n        if (\\n            typeHash != approvedHash &&\\n            typeHash != completedHash &&\\n            typeHash != rejectedHash\\n        ) {\\n            revert(\\\"Invalid approval type.\\\");\\n        }\\n\\n        return (typeHash);\\n    }\\n\\n    /**\\n     * Decodes the grant schema\\n     * @return the referred community UID\\n     */\\n    function getGrantCommunityUID(\\n        bytes memory grantData\\n    ) public pure returns (bytes32) {\\n        return abi.decode(grantData, (bytes32));\\n    }\\n\\n    function onAttest(\\n        Attestation calldata attestation,\\n        uint256 /*value*/\\n    ) internal override returns (bool) {\\n        require(attestation.refUID != bytes32(0), \\\"Invalid referred milestone\\\");\\n        bytes32 typeHash = getMilestoneApprovalType(attestation.data);\\n\\n        Attestation memory milestone = _eas.getAttestation(attestation.refUID);\\n        require(milestone.uid != bytes32(0), \\\"Invalid milestone reference\\\");\\n        require(\\n            milestone.refUID != bytes32(0),\\n            \\\"Invalid grant reference on milestone\\\"\\n        );\\n\\n        Attestation memory grant = _eas.getAttestation(milestone.refUID);\\n        require(grant.uid != bytes32(0), \\\"Invalid grant reference\\\");\\n        bytes32 communityUID = getGrantCommunityUID(grant.data);\\n\\n        bool communityAdmin = isCommunityAdmin(\\n            communityUID,\\n            attestation.attester\\n        );\\n\\n        if (typeHash == completedHash) {\\n            require(\\n                milestone.attester == attestation.attester ||\\n                    milestone.recipient == attestation.attester ||\\n                    communityAdmin,\\n                \\\"Not admin\\\"\\n            );\\n        } else if (typeHash == rejectedHash || typeHash == approvedHash) {\\n            require(communityAdmin, \\\"Not owner\\\");\\n            Attestation memory community = _eas.getAttestation(communityUID);\\n            require(community.uid != bytes32(0), \\\"Invalid community reference\\\");\\n        }\\n        return true;\\n    }\\n\\n    function onRevoke(\\n        Attestation calldata /*attestation*/,\\n        uint256 /*value*/\\n    ) internal pure override returns (bool) {\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0x2659e7ab9c70380ac0dc6dd4270913cafecd8972e51992b93aa92fb07ba484dd\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":983,"contract":"contracts/MilestoneStatusResolver.sol:MilestoneStatusResolver","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":986,"contract":"contracts/MilestoneStatusResolver.sol:MilestoneStatusResolver","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":1516,"contract":"contracts/MilestoneStatusResolver.sol:MilestoneStatusResolver","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"},{"astId":830,"contract":"contracts/MilestoneStatusResolver.sol:MilestoneStatusResolver","label":"_owner","offset":0,"slot":"51","type":"t_address"},{"astId":950,"contract":"contracts/MilestoneStatusResolver.sol:MilestoneStatusResolver","label":"__gap","offset":0,"slot":"52","type":"t_array(t_uint256)49_storage"},{"astId":5851,"contract":"contracts/MilestoneStatusResolver.sol:MilestoneStatusResolver","label":"_owner","offset":0,"slot":"101","type":"t_address"},{"astId":5854,"contract":"contracts/MilestoneStatusResolver.sol:MilestoneStatusResolver","label":"communityResolver","offset":0,"slot":"102","type":"t_contract(ICommunityResolver)5831"},{"astId":5856,"contract":"contracts/MilestoneStatusResolver.sol:MilestoneStatusResolver","label":"approvedHash","offset":0,"slot":"103","type":"t_bytes32"},{"astId":5858,"contract":"contracts/MilestoneStatusResolver.sol:MilestoneStatusResolver","label":"completedHash","offset":0,"slot":"104","type":"t_bytes32"},{"astId":5860,"contract":"contracts/MilestoneStatusResolver.sol:MilestoneStatusResolver","label":"rejectedHash","offset":0,"slot":"105","type":"t_bytes32"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_uint256)49_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[49]","numberOfBytes":"1568"},"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_contract(ICommunityResolver)5831":{"encoding":"inplace","label":"contract ICommunityResolver","numberOfBytes":"20"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{"changeCommunityResolver(address)":{"notice":"Set the community resolver to check for admin privileges"},"getGrantCommunityUID(bytes)":{"notice":"Decodes the grant schema"},"getMilestoneApprovalType(bytes)":{"notice":"Decodes the milestone schema"},"version()":{"notice":"Returns the full semver contract version."}},"version":1}}},"contracts/ReferrerResolver.sol":{"ReferrerResolver":{"abi":[{"inputs":[{"internalType":"contract IEAS","name":"eas","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"AccessDenied","type":"error"},{"inputs":[],"name":"InsufficientValue","type":"error"},{"inputs":[],"name":"InvalidEAS","type":"error"},{"inputs":[],"name":"NotPayable","type":"error"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"bytes32","name":"schema","type":"bytes32"},{"internalType":"uint64","name":"time","type":"uint64"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"uint64","name":"revocationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Attestation","name":"attestation","type":"tuple"}],"name":"attest","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"initialize","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"isPayable","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"pure","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"bytes32","name":"schema","type":"bytes32"},{"internalType":"uint64","name":"time","type":"uint64"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"uint64","name":"revocationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Attestation[]","name":"attestations","type":"tuple[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"}],"name":"multiAttest","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"payable","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"bytes32","name":"schema","type":"bytes32"},{"internalType":"uint64","name":"time","type":"uint64"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"uint64","name":"revocationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Attestation[]","name":"attestations","type":"tuple[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"}],"name":"multiRevoke","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"bytes32","name":"schema","type":"bytes32"},{"internalType":"uint64","name":"time","type":"uint64"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"uint64","name":"revocationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Attestation","name":"attestation","type":"tuple"}],"name":"revoke","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"version","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"stateMutability":"payable","type":"receive"}],"devdoc":{"events":{"Initialized(uint8)":{"details":"Triggered when the contract has been initialized or reinitialized."}},"kind":"dev","methods":{"attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))":{"details":"Processes an attestation and verifies whether it's valid.","params":{"attestation":"The new attestation."},"returns":{"_0":"Whether the attestation is valid."}},"constructor":{"custom:oz-upgrades-unsafe-allow":"constructor"},"isPayable()":{"details":"Returns whether the resolver supports ETH transfers."},"multiAttest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])":{"details":"Processes multiple attestations and verifies whether they are valid.","params":{"attestations":"The new attestations.","values":"Explicit ETH amounts which were sent with each attestation."},"returns":{"_0":"Whether all the attestations are valid."}},"multiRevoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])":{"details":"Processes revocation of multiple attestation and verifies they can be revoked.","params":{"attestations":"The existing attestations to be revoked.","values":"Explicit ETH amounts which were sent with each revocation."},"returns":{"_0":"Whether the attestations can be revoked."}},"owner()":{"details":"Returns the address of the current owner."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."},"revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))":{"details":"Processes an attestation revocation and verifies if it can be revoked.","params":{"attestation":"The existing attestation to be revoked."},"returns":{"_0":"Whether the attestation can be revoked."}},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."},"version()":{"returns":{"_0":"Semver contract version as a string."}}},"version":1},"evm":{"bytecode":{"functionDebugData":{"@_425":{"entryPoint":null,"id":425,"parameterSlots":3,"returnSlots":0},"@_567":{"entryPoint":null,"id":567,"parameterSlots":1,"returnSlots":0},"@_6226":{"entryPoint":null,"id":6226,"parameterSlots":1,"returnSlots":0},"@_disableInitializers_1126":{"entryPoint":129,"id":1126,"parameterSlots":0,"returnSlots":0},"abi_decode_tuple_t_contract$_IEAS_$346_fromMemory":{"entryPoint":320,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:915:29","statements":[{"nodeType":"YulBlock","src":"6:3:29","statements":[]},{"body":{"nodeType":"YulBlock","src":"107:209:29","statements":[{"body":{"nodeType":"YulBlock","src":"153:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"162:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"165:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"155:6:29"},"nodeType":"YulFunctionCall","src":"155:12:29"},"nodeType":"YulExpressionStatement","src":"155:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"128:7:29"},{"name":"headStart","nodeType":"YulIdentifier","src":"137:9:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"124:3:29"},"nodeType":"YulFunctionCall","src":"124:23:29"},{"kind":"number","nodeType":"YulLiteral","src":"149:2:29","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"120:3:29"},"nodeType":"YulFunctionCall","src":"120:32:29"},"nodeType":"YulIf","src":"117:52:29"},{"nodeType":"YulVariableDeclaration","src":"178:29:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"197:9:29"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"191:5:29"},"nodeType":"YulFunctionCall","src":"191:16:29"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"182:5:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"270:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"279:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"282:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"272:6:29"},"nodeType":"YulFunctionCall","src":"272:12:29"},"nodeType":"YulExpressionStatement","src":"272:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"229:5:29"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"240:5:29"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"255:3:29","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"260:1:29","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"251:3:29"},"nodeType":"YulFunctionCall","src":"251:11:29"},{"kind":"number","nodeType":"YulLiteral","src":"264:1:29","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"247:3:29"},"nodeType":"YulFunctionCall","src":"247:19:29"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"236:3:29"},"nodeType":"YulFunctionCall","src":"236:31:29"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"226:2:29"},"nodeType":"YulFunctionCall","src":"226:42:29"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"219:6:29"},"nodeType":"YulFunctionCall","src":"219:50:29"},"nodeType":"YulIf","src":"216:70:29"},{"nodeType":"YulAssignment","src":"295:15:29","value":{"name":"value","nodeType":"YulIdentifier","src":"305:5:29"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"295:6:29"}]}]},"name":"abi_decode_tuple_t_contract$_IEAS_$346_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"73:9:29","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"84:7:29","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"96:6:29","type":""}],"src":"14:302:29"},{"body":{"nodeType":"YulBlock","src":"495:229:29","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"512:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"523:2:29","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"505:6:29"},"nodeType":"YulFunctionCall","src":"505:21:29"},"nodeType":"YulExpressionStatement","src":"505:21:29"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"546:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"557:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"542:3:29"},"nodeType":"YulFunctionCall","src":"542:18:29"},{"kind":"number","nodeType":"YulLiteral","src":"562:2:29","type":"","value":"39"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"535:6:29"},"nodeType":"YulFunctionCall","src":"535:30:29"},"nodeType":"YulExpressionStatement","src":"535:30:29"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"585:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"596:2:29","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"581:3:29"},"nodeType":"YulFunctionCall","src":"581:18:29"},{"hexValue":"496e697469616c697a61626c653a20636f6e747261637420697320696e697469","kind":"string","nodeType":"YulLiteral","src":"601:34:29","type":"","value":"Initializable: contract is initi"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"574:6:29"},"nodeType":"YulFunctionCall","src":"574:62:29"},"nodeType":"YulExpressionStatement","src":"574:62:29"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"656:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"667:2:29","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"652:3:29"},"nodeType":"YulFunctionCall","src":"652:18:29"},{"hexValue":"616c697a696e67","kind":"string","nodeType":"YulLiteral","src":"672:9:29","type":"","value":"alizing"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"645:6:29"},"nodeType":"YulFunctionCall","src":"645:37:29"},"nodeType":"YulExpressionStatement","src":"645:37:29"},{"nodeType":"YulAssignment","src":"691:27:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"703:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"714:3:29","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"699:3:29"},"nodeType":"YulFunctionCall","src":"699:19:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"691:4:29"}]}]},"name":"abi_encode_tuple_t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"472:9:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"486:4:29","type":""}],"src":"321:403:29"},{"body":{"nodeType":"YulBlock","src":"826:87:29","statements":[{"nodeType":"YulAssignment","src":"836:26:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"848:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"859:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"844:3:29"},"nodeType":"YulFunctionCall","src":"844:18:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"836:4:29"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"878:9:29"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"893:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"901:4:29","type":"","value":"0xff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"889:3:29"},"nodeType":"YulFunctionCall","src":"889:17:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"871:6:29"},"nodeType":"YulFunctionCall","src":"871:36:29"},"nodeType":"YulExpressionStatement","src":"871:36:29"}]},"name":"abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"795:9:29","type":""},{"name":"value0","nodeType":"YulTypedName","src":"806:6:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"817:4:29","type":""}],"src":"729:184:29"}]},"contents":"{\n    { }\n    function abi_decode_tuple_t_contract$_IEAS_$346_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 39)\n        mstore(add(headStart, 64), \"Initializable: contract is initi\")\n        mstore(add(headStart, 96), \"alizing\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xff))\n    }\n}","id":29,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"","opcodes":"PUSH2 0x100 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH2 0x116F CODESIZE SUB DUP1 PUSH2 0x116F DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH2 0x30 SWAP2 PUSH2 0x140 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x80 MSTORE PUSH1 0x0 PUSH1 0xA0 DUP2 SWAP1 MSTORE PUSH1 0xC0 MSTORE DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x67 JUMPI PUSH1 0x40 MLOAD PUSH4 0x41BC07FF PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0xE0 MSTORE PUSH2 0x7B PUSH2 0x81 JUMP JUMPDEST POP PUSH2 0x170 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0xED JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x27 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E747261637420697320696E697469 PUSH1 0x44 DUP3 ADD MSTORE PUSH7 0x616C697A696E67 PUSH1 0xC8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 SLOAD PUSH1 0xFF SWAP1 DUP2 AND EQ PUSH2 0x13E JUMPI PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0xFF SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH32 0x7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x152 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x169 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x80 MLOAD PUSH1 0xA0 MLOAD PUSH1 0xC0 MLOAD PUSH1 0xE0 MLOAD PUSH2 0xFBF PUSH2 0x1B0 PUSH1 0x0 CODECOPY PUSH1 0x0 DUP2 DUP2 PUSH2 0x7D6 ADD MSTORE PUSH2 0x86E ADD MSTORE PUSH1 0x0 PUSH2 0x259 ADD MSTORE PUSH1 0x0 PUSH2 0x230 ADD MSTORE PUSH1 0x0 PUSH2 0x207 ADD MSTORE PUSH2 0xFBF PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0xB5 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x91DB0B7E GT PUSH2 0x69 JUMPI DUP1 PUSH4 0xE49617E1 GT PUSH2 0x4E JUMPI DUP1 PUSH4 0xE49617E1 EQ PUSH2 0x1BA JUMPI DUP1 PUSH4 0xE60C3505 EQ PUSH2 0x1CD JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x1E0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x91DB0B7E EQ PUSH2 0x193 JUMPI DUP1 PUSH4 0xCE46E046 EQ PUSH2 0x1A6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x8129FC1C GT PUSH2 0x9A JUMPI DUP1 PUSH4 0x8129FC1C EQ PUSH2 0x133 JUMPI DUP1 PUSH4 0x88E5B2D9 EQ PUSH2 0x148 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x16B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x54FD4D50 EQ PUSH2 0xF3 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x11E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLDATASIZE PUSH2 0xEE JUMPI PUSH1 0x40 MLOAD PUSH32 0x1574F9F300000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST STOP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xFF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x108 PUSH2 0x200 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x115 SWAP2 SWAP1 PUSH2 0xB8A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x12A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xEC PUSH2 0x2A3 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x13F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xEC PUSH2 0x2B7 JUMP JUMPDEST PUSH2 0x15B PUSH2 0x156 CALLDATASIZE PUSH1 0x4 PUSH2 0xC09 JUMP JUMPDEST PUSH2 0x3FB JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x115 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x177 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x33 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x115 JUMP JUMPDEST PUSH2 0x15B PUSH2 0x1A1 CALLDATASIZE PUSH1 0x4 PUSH2 0xC09 JUMP JUMPDEST PUSH2 0x4AA JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1B2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x0 PUSH2 0x15B JUMP JUMPDEST PUSH2 0x15B PUSH2 0x1C8 CALLDATASIZE PUSH1 0x4 PUSH2 0xC75 JUMP JUMPDEST PUSH2 0x549 JUMP JUMPDEST PUSH2 0x15B PUSH2 0x1DB CALLDATASIZE PUSH1 0x4 PUSH2 0xC75 JUMP JUMPDEST PUSH2 0x55E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1EC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xEC PUSH2 0x1FB CALLDATASIZE PUSH1 0x4 PUSH2 0xCCD JUMP JUMPDEST PUSH2 0x572 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x22B PUSH32 0x0 PUSH2 0x5FF JUMP JUMPDEST PUSH2 0x254 PUSH32 0x0 PUSH2 0x5FF JUMP JUMPDEST PUSH2 0x27D PUSH32 0x0 PUSH2 0x5FF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x28F SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xCEA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x2AB PUSH2 0x69F JUMP JUMPDEST PUSH2 0x2B5 PUSH1 0x0 PUSH2 0x6F9 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND ISZERO DUP1 DUP1 ISZERO PUSH2 0x2D7 JUMPI POP PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0xFF SWAP1 SWAP2 AND LT JUMPDEST DUP1 PUSH2 0x2F1 JUMPI POP ADDRESS EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2F1 JUMPI POP PUSH1 0x0 SLOAD PUSH1 0xFF AND PUSH1 0x1 EQ JUMPDEST PUSH2 0x368 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E747261637420697320616C726561 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x647920696E697469616C697A6564000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE DUP1 ISZERO PUSH2 0x38B JUMPI PUSH1 0x0 DUP1 SLOAD PUSH2 0xFF00 NOT AND PUSH2 0x100 OR SWAP1 SSTORE JUMPDEST PUSH1 0x65 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND CALLER OR SWAP1 SSTORE PUSH2 0x3B2 PUSH2 0x758 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x3F8 JUMPI PUSH1 0x0 DUP1 SLOAD PUSH2 0xFF00 NOT AND SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH1 0x1 DUP2 MSTORE PUSH32 0x7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x405 PUSH2 0x7CB JUMP JUMPDEST DUP4 CALLVALUE PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x49A JUMPI PUSH1 0x0 DUP7 DUP7 DUP4 DUP2 DUP2 LT PUSH2 0x426 JUMPI PUSH2 0x426 PUSH2 0xD60 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD SWAP1 POP DUP3 DUP2 GT ISZERO PUSH2 0x450 JUMPI PUSH1 0x40 MLOAD PUSH4 0x44044A5 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x47D DUP10 DUP10 DUP5 DUP2 DUP2 LT PUSH2 0x465 JUMPI PUSH2 0x465 PUSH2 0xD60 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0x477 SWAP2 SWAP1 PUSH2 0xD76 JUMP JUMPDEST POP PUSH1 0x1 SWAP1 JUMP JUMPDEST PUSH2 0x48E JUMPI PUSH1 0x0 SWAP5 POP POP POP POP POP PUSH2 0x4A2 JUMP JUMPDEST SWAP1 SWAP2 SUB SWAP1 PUSH1 0x1 ADD PUSH2 0x40A JUMP JUMPDEST POP PUSH1 0x1 SWAP3 POP POP POP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4B4 PUSH2 0x7CB JUMP JUMPDEST DUP4 CALLVALUE PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x49A JUMPI PUSH1 0x0 DUP7 DUP7 DUP4 DUP2 DUP2 LT PUSH2 0x4D5 JUMPI PUSH2 0x4D5 PUSH2 0xD60 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD SWAP1 POP DUP3 DUP2 GT ISZERO PUSH2 0x4FF JUMPI PUSH1 0x40 MLOAD PUSH4 0x44044A5 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x52C DUP10 DUP10 DUP5 DUP2 DUP2 LT PUSH2 0x514 JUMPI PUSH2 0x514 PUSH2 0xD60 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0x526 SWAP2 SWAP1 PUSH2 0xD76 JUMP JUMPDEST DUP3 PUSH2 0x82D JUMP JUMPDEST PUSH2 0x53D JUMPI PUSH1 0x0 SWAP5 POP POP POP POP POP PUSH2 0x4A2 JUMP JUMPDEST SWAP1 SWAP2 SUB SWAP1 PUSH1 0x1 ADD PUSH2 0x4B9 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x553 PUSH2 0x7CB JUMP JUMPDEST PUSH1 0x1 JUMPDEST SWAP1 POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x568 PUSH2 0x7CB JUMP JUMPDEST PUSH2 0x556 DUP3 CALLVALUE PUSH2 0x82D JUMP JUMPDEST PUSH2 0x57A PUSH2 0x69F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x5F6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6464726573730000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x35F JUMP JUMPDEST PUSH2 0x3F8 DUP2 PUSH2 0x6F9 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x60C DUP4 PUSH2 0xA0F JUMP JUMPDEST PUSH1 0x1 ADD SWAP1 POP PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x62C JUMPI PUSH2 0x62C PUSH2 0xD97 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x656 JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP DUP2 DUP2 ADD PUSH1 0x20 ADD JUMPDEST PUSH1 0x0 NOT ADD PUSH32 0x3031323334353637383961626364656600000000000000000000000000000000 PUSH1 0xA DUP7 MOD BYTE DUP2 MSTORE8 PUSH1 0xA DUP6 DIV SWAP5 POP DUP5 PUSH2 0x660 JUMPI POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x33 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x2B5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x35F JUMP JUMPDEST PUSH1 0x33 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 MLOAD SWAP2 AND SWAP2 SWAP1 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x7C3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E7472616374206973206E6F742069 PUSH1 0x44 DUP3 ADD MSTORE PUSH11 0x6E697469616C697A696E67 PUSH1 0xA8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x35F JUMP JUMPDEST PUSH2 0x2B5 PUSH2 0xAF2 JUMP JUMPDEST CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND EQ PUSH2 0x2B5 JUMPI PUSH1 0x40 MLOAD PUSH32 0x4CA8886700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0xA0 DUP4 ADD CALLDATALOAD ISZERO PUSH2 0xA06 JUMPI PUSH1 0x40 MLOAD PUSH32 0xA3112A6400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0xA0 DUP5 ADD CALLDATALOAD PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x0 SWAP1 PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0xA3112A64 SWAP1 PUSH1 0x24 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x8BD JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x8E5 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0xE92 JUMP JUMPDEST DUP1 MLOAD SWAP1 SWAP2 POP PUSH2 0x936 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5265666572726564206174746573746174696F6E206E6F742076616C69642E00 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x35F JUMP JUMPDEST PUSH2 0x947 PUSH2 0x100 DUP6 ADD PUSH1 0xE0 DUP7 ADD PUSH2 0xCCD JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0xE0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ DUP1 PUSH2 0x98F JUMPI POP PUSH2 0x976 PUSH2 0x100 DUP6 ADD PUSH1 0xE0 DUP7 ADD PUSH2 0xCCD JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0xC0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ JUMPDEST DUP1 PUSH2 0x9B8 JUMPI POP PUSH2 0x9A6 PUSH2 0x100 DUP6 ADD PUSH1 0xE0 DUP7 ADD PUSH2 0xCCD JUMP JUMPDEST PUSH1 0x65 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND SWAP2 AND EQ JUMPDEST PUSH2 0xA04 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x9 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E6F74206F776E65720000000000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x35F JUMP JUMPDEST POP JUMPDEST POP PUSH1 0x1 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP4 LT PUSH2 0xA58 JUMPI PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP4 DIV SWAP3 POP PUSH1 0x40 ADD JUMPDEST PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 LT PUSH2 0xA84 JUMPI PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 DIV SWAP3 POP PUSH1 0x20 ADD JUMPDEST PUSH7 0x2386F26FC10000 DUP4 LT PUSH2 0xAA2 JUMPI PUSH7 0x2386F26FC10000 DUP4 DIV SWAP3 POP PUSH1 0x10 ADD JUMPDEST PUSH4 0x5F5E100 DUP4 LT PUSH2 0xABA JUMPI PUSH4 0x5F5E100 DUP4 DIV SWAP3 POP PUSH1 0x8 ADD JUMPDEST PUSH2 0x2710 DUP4 LT PUSH2 0xACE JUMPI PUSH2 0x2710 DUP4 DIV SWAP3 POP PUSH1 0x4 ADD JUMPDEST PUSH1 0x64 DUP4 LT PUSH2 0xAE0 JUMPI PUSH1 0x64 DUP4 DIV SWAP3 POP PUSH1 0x2 ADD JUMPDEST PUSH1 0xA DUP4 LT PUSH2 0xAEC JUMPI PUSH1 0x1 ADD JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0xB5D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E7472616374206973206E6F742069 PUSH1 0x44 DUP3 ADD MSTORE PUSH11 0x6E697469616C697A696E67 PUSH1 0xA8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x35F JUMP JUMPDEST PUSH2 0x2B5 CALLER PUSH2 0x6F9 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xB81 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0xB69 JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0xBA9 DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0xB66 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0xBCF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xBE7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP6 ADD ADD GT ISZERO PUSH2 0xC02 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x40 DUP6 DUP8 SUB SLT ISZERO PUSH2 0xC1F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0xC37 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xC43 DUP9 DUP4 DUP10 ADD PUSH2 0xBBD JUMP JUMPDEST SWAP1 SWAP7 POP SWAP5 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0xC5C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xC69 DUP8 DUP3 DUP9 ADD PUSH2 0xBBD JUMP JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP SWAP6 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xC87 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xC9E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD PUSH2 0x140 DUP2 DUP6 SUB SLT ISZERO PUSH2 0xCB1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x3F8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xCDF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0xCB1 DUP2 PUSH2 0xCB8 JUMP JUMPDEST PUSH1 0x0 DUP5 MLOAD PUSH2 0xCFC DUP2 DUP5 PUSH1 0x20 DUP10 ADD PUSH2 0xB66 JUMP JUMPDEST DUP1 DUP4 ADD SWAP1 POP PUSH32 0x2E00000000000000000000000000000000000000000000000000000000000000 DUP1 DUP3 MSTORE DUP6 MLOAD PUSH2 0xD38 DUP2 PUSH1 0x1 DUP6 ADD PUSH1 0x20 DUP11 ADD PUSH2 0xB66 JUMP JUMPDEST PUSH1 0x1 SWAP3 ADD SWAP2 DUP3 ADD MSTORE DUP4 MLOAD PUSH2 0xD53 DUP2 PUSH1 0x2 DUP5 ADD PUSH1 0x20 DUP9 ADD PUSH2 0xB66 JUMP JUMPDEST ADD PUSH1 0x2 ADD SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 CALLDATALOAD PUSH2 0x13E NOT DUP4 CALLDATASIZE SUB ADD DUP2 SLT PUSH2 0xD8D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x140 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0xDD1 JUMPI PUSH2 0xDD1 PUSH2 0xD97 JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP1 JUMP JUMPDEST DUP1 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x559 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 MLOAD PUSH2 0x559 DUP2 PUSH2 0xCB8 JUMP JUMPDEST DUP1 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x559 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xE1B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0xE36 JUMPI PUSH2 0xE36 PUSH2 0xD97 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP4 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP3 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH2 0xE5E JUMPI PUSH2 0xE5E PUSH2 0xD97 JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP4 DUP2 MSTORE DUP7 PUSH1 0x20 DUP6 DUP9 ADD ADD GT ISZERO PUSH2 0xE77 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xE88 DUP5 PUSH1 0x20 DUP4 ADD PUSH1 0x20 DUP10 ADD PUSH2 0xB66 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xEA4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0xEBC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 DUP4 ADD SWAP1 PUSH2 0x140 DUP3 DUP7 SUB SLT ISZERO PUSH2 0xED1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xED9 PUSH2 0xDAD JUMP JUMPDEST DUP3 MLOAD DUP2 MSTORE PUSH1 0x20 DUP4 ADD MLOAD PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0xEF3 PUSH1 0x40 DUP5 ADD PUSH2 0xDD7 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE PUSH2 0xF04 PUSH1 0x60 DUP5 ADD PUSH2 0xDD7 JUMP JUMPDEST PUSH1 0x60 DUP3 ADD MSTORE PUSH2 0xF15 PUSH1 0x80 DUP5 ADD PUSH2 0xDD7 JUMP JUMPDEST PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xA0 DUP4 ADD MLOAD PUSH1 0xA0 DUP3 ADD MSTORE PUSH2 0xF30 PUSH1 0xC0 DUP5 ADD PUSH2 0xDEF JUMP JUMPDEST PUSH1 0xC0 DUP3 ADD MSTORE PUSH2 0xF41 PUSH1 0xE0 DUP5 ADD PUSH2 0xDEF JUMP JUMPDEST PUSH1 0xE0 DUP3 ADD MSTORE PUSH2 0x100 PUSH2 0xF54 DUP2 DUP6 ADD PUSH2 0xDFA JUMP JUMPDEST SWAP1 DUP3 ADD MSTORE PUSH2 0x120 DUP4 DUP2 ADD MLOAD DUP4 DUP2 GT ISZERO PUSH2 0xF6C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xF78 DUP9 DUP3 DUP8 ADD PUSH2 0xE0A JUMP JUMPDEST SWAP2 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE POP SWAP6 SWAP5 POP POP POP POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH7 0x2F3FB7BE6F33C6 0xED 0x4C 0xB8 0xAF 0xB4 ADDRESS 0xD2 JUMPDEST EQ CALLDATALOAD DUP1 DUP5 0xCB 0x4A 0x4F EXTCODECOPY 0xA7 MUL 0x2F 0xE PUSH12 0x50A5A064736F6C6343000813 STOP CALLER ","sourceMap":"504:1141:28:-:0;;;671:81;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;668:1:5;661:14:3;;671:1:5;685:14:3;;;;709:13;;708:3:28;-1:-1:-1;;;;;691:26:5;::::1;687:76;;740:12;;-1:-1:-1::0;;;740:12:5::1;;;;;;;;;;;687:76;-1:-1:-1::0;;;;;773:10:5::1;;::::0;723:22:28::1;:20;:22::i;:::-;671:81:::0;504:1141;;5939:280:8;6007:13;;;;;;;6006:14;5998:66;;;;-1:-1:-1;;;5998:66:8;;523:2:29;5998:66:8;;;505:21:29;562:2;542:18;;;535:30;601:34;581:18;;;574:62;-1:-1:-1;;;652:18:29;;;645:37;699:19;;5998:66:8;;;;;;;;6078:12;;6094:15;6078:12;;;:31;6074:139;;6125:12;:30;;-1:-1:-1;;6125:30:8;6140:15;6125:30;;;;;;6174:28;;871:36:29;;;6174:28:8;;859:2:29;844:18;6174:28:8;;;;;;;6074:139;5939:280::o;14:302:29:-;96:6;149:2;137:9;128:7;124:23;120:32;117:52;;;165:1;162;155:12;117:52;191:16;;-1:-1:-1;;;;;236:31:29;;226:42;;216:70;;282:1;279;272:12;216:70;305:5;14:302;-1:-1:-1;;;14:302:29:o;729:184::-;504:1141:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@_597":{"entryPoint":null,"id":597,"parameterSlots":0,"returnSlots":0},"@__Ownable_init_846":{"entryPoint":1880,"id":846,"parameterSlots":0,"returnSlots":0},"@__Ownable_init_unchained_857":{"entryPoint":2802,"id":857,"parameterSlots":0,"returnSlots":0},"@_checkOwner_888":{"entryPoint":1695,"id":888,"parameterSlots":0,"returnSlots":0},"@_msgSender_1502":{"entryPoint":null,"id":1502,"parameterSlots":0,"returnSlots":1},"@_onlyEAS_818":{"entryPoint":1995,"id":818,"parameterSlots":0,"returnSlots":0},"@_transferOwnership_945":{"entryPoint":1785,"id":945,"parameterSlots":1,"returnSlots":0},"@attest_615":{"entryPoint":1374,"id":615,"parameterSlots":1,"returnSlots":1},"@initialize_6240":{"entryPoint":695,"id":6240,"parameterSlots":0,"returnSlots":0},"@isContract_1163":{"entryPoint":null,"id":1163,"parameterSlots":1,"returnSlots":1},"@isPayable_584":{"entryPoint":null,"id":584,"parameterSlots":0,"returnSlots":1},"@log10_4746":{"entryPoint":2575,"id":4746,"parameterSlots":1,"returnSlots":1},"@multiAttest_688":{"entryPoint":1194,"id":688,"parameterSlots":4,"returnSlots":1},"@multiRevoke_779":{"entryPoint":1019,"id":779,"parameterSlots":4,"returnSlots":1},"@onAttest_6303":{"entryPoint":2093,"id":6303,"parameterSlots":2,"returnSlots":1},"@onRevoke_6317":{"entryPoint":null,"id":6317,"parameterSlots":2,"returnSlots":1},"@owner_874":{"entryPoint":null,"id":874,"parameterSlots":0,"returnSlots":1},"@renounceOwnership_902":{"entryPoint":675,"id":902,"parameterSlots":0,"returnSlots":0},"@revoke_706":{"entryPoint":1353,"id":706,"parameterSlots":1,"returnSlots":1},"@toString_3837":{"entryPoint":1535,"id":3837,"parameterSlots":1,"returnSlots":1},"@transferOwnership_925":{"entryPoint":1394,"id":925,"parameterSlots":1,"returnSlots":0},"@uncheckedInc_61":{"entryPoint":null,"id":61,"parameterSlots":1,"returnSlots":1},"@version_453":{"entryPoint":512,"id":453,"parameterSlots":0,"returnSlots":1},"abi_decode_address_fromMemory":{"entryPoint":3567,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_array_struct_Attestation_calldata_dyn_calldata":{"entryPoint":3005,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_bool_fromMemory":{"entryPoint":3578,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_bytes_fromMemory":{"entryPoint":3594,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":3277,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_array$_t_struct$_Attestation_$45_calldata_ptr_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr":{"entryPoint":3081,"id":null,"parameterSlots":2,"returnSlots":4},"abi_decode_tuple_t_struct$_Attestation_$45_calldata_ptr":{"entryPoint":3189,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_struct$_Attestation_$45_memory_ptr_fromMemory":{"entryPoint":3730,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_uint64_fromMemory":{"entryPoint":3543,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_packed_t_string_memory_ptr_t_stringliteral_6f010af653ebe3cb07d297a4ef13366103d392ceffa68dd48232e6e9ff2187bf_t_string_memory_ptr_t_stringliteral_6f010af653ebe3cb07d297a4ef13366103d392ceffa68dd48232e6e9ff2187bf_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":3306,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":2954,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_c266efca4f4ed37612271196433531dcbb4fca89a694d568d1e290e32feb1682__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_f304c73ad664b98fadff16b5d10bf8a01088a1758e54be0253cb4027e74e7f2a__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"access_calldata_tail_t_struct$_Attestation_$45_calldata_ptr":{"entryPoint":3446,"id":null,"parameterSlots":2,"returnSlots":1},"allocate_memory":{"entryPoint":3501,"id":null,"parameterSlots":0,"returnSlots":1},"copy_memory_to_memory_with_cleanup":{"entryPoint":2918,"id":null,"parameterSlots":3,"returnSlots":0},"panic_error_0x12":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x32":{"entryPoint":3424,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":3479,"id":null,"parameterSlots":0,"returnSlots":0},"validator_revert_address":{"entryPoint":3256,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:10429:29","statements":[{"nodeType":"YulBlock","src":"6:3:29","statements":[]},{"body":{"nodeType":"YulBlock","src":"80:184:29","statements":[{"nodeType":"YulVariableDeclaration","src":"90:10:29","value":{"kind":"number","nodeType":"YulLiteral","src":"99:1:29","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"94:1:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"159:63:29","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"184:3:29"},{"name":"i","nodeType":"YulIdentifier","src":"189:1:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"180:3:29"},"nodeType":"YulFunctionCall","src":"180:11:29"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"203:3:29"},{"name":"i","nodeType":"YulIdentifier","src":"208:1:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"199:3:29"},"nodeType":"YulFunctionCall","src":"199:11:29"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"193:5:29"},"nodeType":"YulFunctionCall","src":"193:18:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"173:6:29"},"nodeType":"YulFunctionCall","src":"173:39:29"},"nodeType":"YulExpressionStatement","src":"173:39:29"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"120:1:29"},{"name":"length","nodeType":"YulIdentifier","src":"123:6:29"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"117:2:29"},"nodeType":"YulFunctionCall","src":"117:13:29"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"131:19:29","statements":[{"nodeType":"YulAssignment","src":"133:15:29","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"142:1:29"},{"kind":"number","nodeType":"YulLiteral","src":"145:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"138:3:29"},"nodeType":"YulFunctionCall","src":"138:10:29"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"133:1:29"}]}]},"pre":{"nodeType":"YulBlock","src":"113:3:29","statements":[]},"src":"109:113:29"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"242:3:29"},{"name":"length","nodeType":"YulIdentifier","src":"247:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"238:3:29"},"nodeType":"YulFunctionCall","src":"238:16:29"},{"kind":"number","nodeType":"YulLiteral","src":"256:1:29","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"231:6:29"},"nodeType":"YulFunctionCall","src":"231:27:29"},"nodeType":"YulExpressionStatement","src":"231:27:29"}]},"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"58:3:29","type":""},{"name":"dst","nodeType":"YulTypedName","src":"63:3:29","type":""},{"name":"length","nodeType":"YulTypedName","src":"68:6:29","type":""}],"src":"14:250:29"},{"body":{"nodeType":"YulBlock","src":"390:275:29","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"407:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"418:2:29","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"400:6:29"},"nodeType":"YulFunctionCall","src":"400:21:29"},"nodeType":"YulExpressionStatement","src":"400:21:29"},{"nodeType":"YulVariableDeclaration","src":"430:27:29","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"450:6:29"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"444:5:29"},"nodeType":"YulFunctionCall","src":"444:13:29"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"434:6:29","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"477:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"488:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"473:3:29"},"nodeType":"YulFunctionCall","src":"473:18:29"},{"name":"length","nodeType":"YulIdentifier","src":"493:6:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"466:6:29"},"nodeType":"YulFunctionCall","src":"466:34:29"},"nodeType":"YulExpressionStatement","src":"466:34:29"},{"expression":{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"548:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"556:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"544:3:29"},"nodeType":"YulFunctionCall","src":"544:15:29"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"565:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"576:2:29","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"561:3:29"},"nodeType":"YulFunctionCall","src":"561:18:29"},{"name":"length","nodeType":"YulIdentifier","src":"581:6:29"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"509:34:29"},"nodeType":"YulFunctionCall","src":"509:79:29"},"nodeType":"YulExpressionStatement","src":"509:79:29"},{"nodeType":"YulAssignment","src":"597:62:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"613:9:29"},{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"632:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"640:2:29","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"628:3:29"},"nodeType":"YulFunctionCall","src":"628:15:29"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"649:2:29","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"645:3:29"},"nodeType":"YulFunctionCall","src":"645:7:29"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"624:3:29"},"nodeType":"YulFunctionCall","src":"624:29:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"609:3:29"},"nodeType":"YulFunctionCall","src":"609:45:29"},{"kind":"number","nodeType":"YulLiteral","src":"656:2:29","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"605:3:29"},"nodeType":"YulFunctionCall","src":"605:54:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"597:4:29"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"359:9:29","type":""},{"name":"value0","nodeType":"YulTypedName","src":"370:6:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"381:4:29","type":""}],"src":"269:396:29"},{"body":{"nodeType":"YulBlock","src":"774:283:29","statements":[{"body":{"nodeType":"YulBlock","src":"823:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"832:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"835:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"825:6:29"},"nodeType":"YulFunctionCall","src":"825:12:29"},"nodeType":"YulExpressionStatement","src":"825:12:29"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"802:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"810:4:29","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"798:3:29"},"nodeType":"YulFunctionCall","src":"798:17:29"},{"name":"end","nodeType":"YulIdentifier","src":"817:3:29"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"794:3:29"},"nodeType":"YulFunctionCall","src":"794:27:29"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"787:6:29"},"nodeType":"YulFunctionCall","src":"787:35:29"},"nodeType":"YulIf","src":"784:55:29"},{"nodeType":"YulAssignment","src":"848:30:29","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"871:6:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"858:12:29"},"nodeType":"YulFunctionCall","src":"858:20:29"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"848:6:29"}]},{"body":{"nodeType":"YulBlock","src":"921:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"930:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"933:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"923:6:29"},"nodeType":"YulFunctionCall","src":"923:12:29"},"nodeType":"YulExpressionStatement","src":"923:12:29"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"893:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"901:18:29","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"890:2:29"},"nodeType":"YulFunctionCall","src":"890:30:29"},"nodeType":"YulIf","src":"887:50:29"},{"nodeType":"YulAssignment","src":"946:29:29","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"962:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"970:4:29","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"958:3:29"},"nodeType":"YulFunctionCall","src":"958:17:29"},"variableNames":[{"name":"arrayPos","nodeType":"YulIdentifier","src":"946:8:29"}]},{"body":{"nodeType":"YulBlock","src":"1035:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1044:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1047:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1037:6:29"},"nodeType":"YulFunctionCall","src":"1037:12:29"},"nodeType":"YulExpressionStatement","src":"1037:12:29"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"998:6:29"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1010:1:29","type":"","value":"5"},{"name":"length","nodeType":"YulIdentifier","src":"1013:6:29"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1006:3:29"},"nodeType":"YulFunctionCall","src":"1006:14:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"994:3:29"},"nodeType":"YulFunctionCall","src":"994:27:29"},{"kind":"number","nodeType":"YulLiteral","src":"1023:4:29","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"990:3:29"},"nodeType":"YulFunctionCall","src":"990:38:29"},{"name":"end","nodeType":"YulIdentifier","src":"1030:3:29"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"987:2:29"},"nodeType":"YulFunctionCall","src":"987:47:29"},"nodeType":"YulIf","src":"984:67:29"}]},"name":"abi_decode_array_struct_Attestation_calldata_dyn_calldata","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"737:6:29","type":""},{"name":"end","nodeType":"YulTypedName","src":"745:3:29","type":""}],"returnVariables":[{"name":"arrayPos","nodeType":"YulTypedName","src":"753:8:29","type":""},{"name":"length","nodeType":"YulTypedName","src":"763:6:29","type":""}],"src":"670:387:29"},{"body":{"nodeType":"YulBlock","src":"1248:656:29","statements":[{"body":{"nodeType":"YulBlock","src":"1294:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1303:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1306:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1296:6:29"},"nodeType":"YulFunctionCall","src":"1296:12:29"},"nodeType":"YulExpressionStatement","src":"1296:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1269:7:29"},{"name":"headStart","nodeType":"YulIdentifier","src":"1278:9:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1265:3:29"},"nodeType":"YulFunctionCall","src":"1265:23:29"},{"kind":"number","nodeType":"YulLiteral","src":"1290:2:29","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1261:3:29"},"nodeType":"YulFunctionCall","src":"1261:32:29"},"nodeType":"YulIf","src":"1258:52:29"},{"nodeType":"YulVariableDeclaration","src":"1319:37:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1346:9:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1333:12:29"},"nodeType":"YulFunctionCall","src":"1333:23:29"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"1323:6:29","type":""}]},{"nodeType":"YulVariableDeclaration","src":"1365:28:29","value":{"kind":"number","nodeType":"YulLiteral","src":"1375:18:29","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"1369:2:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"1420:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1429:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1432:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1422:6:29"},"nodeType":"YulFunctionCall","src":"1422:12:29"},"nodeType":"YulExpressionStatement","src":"1422:12:29"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1408:6:29"},{"name":"_1","nodeType":"YulIdentifier","src":"1416:2:29"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1405:2:29"},"nodeType":"YulFunctionCall","src":"1405:14:29"},"nodeType":"YulIf","src":"1402:34:29"},{"nodeType":"YulVariableDeclaration","src":"1445:116:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1533:9:29"},{"name":"offset","nodeType":"YulIdentifier","src":"1544:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1529:3:29"},"nodeType":"YulFunctionCall","src":"1529:22:29"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1553:7:29"}],"functionName":{"name":"abi_decode_array_struct_Attestation_calldata_dyn_calldata","nodeType":"YulIdentifier","src":"1471:57:29"},"nodeType":"YulFunctionCall","src":"1471:90:29"},"variables":[{"name":"value0_1","nodeType":"YulTypedName","src":"1449:8:29","type":""},{"name":"value1_1","nodeType":"YulTypedName","src":"1459:8:29","type":""}]},{"nodeType":"YulAssignment","src":"1570:18:29","value":{"name":"value0_1","nodeType":"YulIdentifier","src":"1580:8:29"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1570:6:29"}]},{"nodeType":"YulAssignment","src":"1597:18:29","value":{"name":"value1_1","nodeType":"YulIdentifier","src":"1607:8:29"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"1597:6:29"}]},{"nodeType":"YulVariableDeclaration","src":"1624:48:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1657:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"1668:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1653:3:29"},"nodeType":"YulFunctionCall","src":"1653:18:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1640:12:29"},"nodeType":"YulFunctionCall","src":"1640:32:29"},"variables":[{"name":"offset_1","nodeType":"YulTypedName","src":"1628:8:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"1701:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1710:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1713:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1703:6:29"},"nodeType":"YulFunctionCall","src":"1703:12:29"},"nodeType":"YulExpressionStatement","src":"1703:12:29"}]},"condition":{"arguments":[{"name":"offset_1","nodeType":"YulIdentifier","src":"1687:8:29"},{"name":"_1","nodeType":"YulIdentifier","src":"1697:2:29"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1684:2:29"},"nodeType":"YulFunctionCall","src":"1684:16:29"},"nodeType":"YulIf","src":"1681:36:29"},{"nodeType":"YulVariableDeclaration","src":"1726:118:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1814:9:29"},{"name":"offset_1","nodeType":"YulIdentifier","src":"1825:8:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1810:3:29"},"nodeType":"YulFunctionCall","src":"1810:24:29"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1836:7:29"}],"functionName":{"name":"abi_decode_array_struct_Attestation_calldata_dyn_calldata","nodeType":"YulIdentifier","src":"1752:57:29"},"nodeType":"YulFunctionCall","src":"1752:92:29"},"variables":[{"name":"value2_1","nodeType":"YulTypedName","src":"1730:8:29","type":""},{"name":"value3_1","nodeType":"YulTypedName","src":"1740:8:29","type":""}]},{"nodeType":"YulAssignment","src":"1853:18:29","value":{"name":"value2_1","nodeType":"YulIdentifier","src":"1863:8:29"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"1853:6:29"}]},{"nodeType":"YulAssignment","src":"1880:18:29","value":{"name":"value3_1","nodeType":"YulIdentifier","src":"1890:8:29"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"1880:6:29"}]}]},"name":"abi_decode_tuple_t_array$_t_struct$_Attestation_$45_calldata_ptr_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1190:9:29","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1201:7:29","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1213:6:29","type":""},{"name":"value1","nodeType":"YulTypedName","src":"1221:6:29","type":""},{"name":"value2","nodeType":"YulTypedName","src":"1229:6:29","type":""},{"name":"value3","nodeType":"YulTypedName","src":"1237:6:29","type":""}],"src":"1062:842:29"},{"body":{"nodeType":"YulBlock","src":"2004:92:29","statements":[{"nodeType":"YulAssignment","src":"2014:26:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2026:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"2037:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2022:3:29"},"nodeType":"YulFunctionCall","src":"2022:18:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2014:4:29"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2056:9:29"},{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"2081:6:29"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2074:6:29"},"nodeType":"YulFunctionCall","src":"2074:14:29"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2067:6:29"},"nodeType":"YulFunctionCall","src":"2067:22:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2049:6:29"},"nodeType":"YulFunctionCall","src":"2049:41:29"},"nodeType":"YulExpressionStatement","src":"2049:41:29"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1973:9:29","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1984:6:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1995:4:29","type":""}],"src":"1909:187:29"},{"body":{"nodeType":"YulBlock","src":"2202:125:29","statements":[{"nodeType":"YulAssignment","src":"2212:26:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2224:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"2235:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2220:3:29"},"nodeType":"YulFunctionCall","src":"2220:18:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2212:4:29"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2254:9:29"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"2269:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"2277:42:29","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2265:3:29"},"nodeType":"YulFunctionCall","src":"2265:55:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2247:6:29"},"nodeType":"YulFunctionCall","src":"2247:74:29"},"nodeType":"YulExpressionStatement","src":"2247:74:29"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2171:9:29","type":""},{"name":"value0","nodeType":"YulTypedName","src":"2182:6:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2193:4:29","type":""}],"src":"2101:226:29"},{"body":{"nodeType":"YulBlock","src":"2431:290:29","statements":[{"body":{"nodeType":"YulBlock","src":"2477:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2486:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2489:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2479:6:29"},"nodeType":"YulFunctionCall","src":"2479:12:29"},"nodeType":"YulExpressionStatement","src":"2479:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2452:7:29"},{"name":"headStart","nodeType":"YulIdentifier","src":"2461:9:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2448:3:29"},"nodeType":"YulFunctionCall","src":"2448:23:29"},{"kind":"number","nodeType":"YulLiteral","src":"2473:2:29","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2444:3:29"},"nodeType":"YulFunctionCall","src":"2444:32:29"},"nodeType":"YulIf","src":"2441:52:29"},{"nodeType":"YulVariableDeclaration","src":"2502:37:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2529:9:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2516:12:29"},"nodeType":"YulFunctionCall","src":"2516:23:29"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"2506:6:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"2582:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2591:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2594:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2584:6:29"},"nodeType":"YulFunctionCall","src":"2584:12:29"},"nodeType":"YulExpressionStatement","src":"2584:12:29"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2554:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"2562:18:29","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2551:2:29"},"nodeType":"YulFunctionCall","src":"2551:30:29"},"nodeType":"YulIf","src":"2548:50:29"},{"nodeType":"YulVariableDeclaration","src":"2607:32:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2621:9:29"},{"name":"offset","nodeType":"YulIdentifier","src":"2632:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2617:3:29"},"nodeType":"YulFunctionCall","src":"2617:22:29"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"2611:2:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"2678:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2687:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2690:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2680:6:29"},"nodeType":"YulFunctionCall","src":"2680:12:29"},"nodeType":"YulExpressionStatement","src":"2680:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2659:7:29"},{"name":"_1","nodeType":"YulIdentifier","src":"2668:2:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2655:3:29"},"nodeType":"YulFunctionCall","src":"2655:16:29"},{"kind":"number","nodeType":"YulLiteral","src":"2673:3:29","type":"","value":"320"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2651:3:29"},"nodeType":"YulFunctionCall","src":"2651:26:29"},"nodeType":"YulIf","src":"2648:46:29"},{"nodeType":"YulAssignment","src":"2703:12:29","value":{"name":"_1","nodeType":"YulIdentifier","src":"2713:2:29"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2703:6:29"}]}]},"name":"abi_decode_tuple_t_struct$_Attestation_$45_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2397:9:29","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2408:7:29","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2420:6:29","type":""}],"src":"2332:389:29"},{"body":{"nodeType":"YulBlock","src":"2771:109:29","statements":[{"body":{"nodeType":"YulBlock","src":"2858:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2867:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2870:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2860:6:29"},"nodeType":"YulFunctionCall","src":"2860:12:29"},"nodeType":"YulExpressionStatement","src":"2860:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2794:5:29"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2805:5:29"},{"kind":"number","nodeType":"YulLiteral","src":"2812:42:29","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2801:3:29"},"nodeType":"YulFunctionCall","src":"2801:54:29"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"2791:2:29"},"nodeType":"YulFunctionCall","src":"2791:65:29"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2784:6:29"},"nodeType":"YulFunctionCall","src":"2784:73:29"},"nodeType":"YulIf","src":"2781:93:29"}]},"name":"validator_revert_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2760:5:29","type":""}],"src":"2726:154:29"},{"body":{"nodeType":"YulBlock","src":"2955:177:29","statements":[{"body":{"nodeType":"YulBlock","src":"3001:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3010:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3013:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3003:6:29"},"nodeType":"YulFunctionCall","src":"3003:12:29"},"nodeType":"YulExpressionStatement","src":"3003:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2976:7:29"},{"name":"headStart","nodeType":"YulIdentifier","src":"2985:9:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2972:3:29"},"nodeType":"YulFunctionCall","src":"2972:23:29"},{"kind":"number","nodeType":"YulLiteral","src":"2997:2:29","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2968:3:29"},"nodeType":"YulFunctionCall","src":"2968:32:29"},"nodeType":"YulIf","src":"2965:52:29"},{"nodeType":"YulVariableDeclaration","src":"3026:36:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3052:9:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3039:12:29"},"nodeType":"YulFunctionCall","src":"3039:23:29"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"3030:5:29","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3096:5:29"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"3071:24:29"},"nodeType":"YulFunctionCall","src":"3071:31:29"},"nodeType":"YulExpressionStatement","src":"3071:31:29"},{"nodeType":"YulAssignment","src":"3111:15:29","value":{"name":"value","nodeType":"YulIdentifier","src":"3121:5:29"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3111:6:29"}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2921:9:29","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2932:7:29","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2944:6:29","type":""}],"src":"2885:247:29"},{"body":{"nodeType":"YulBlock","src":"3574:562:29","statements":[{"nodeType":"YulVariableDeclaration","src":"3584:27:29","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"3604:6:29"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3598:5:29"},"nodeType":"YulFunctionCall","src":"3598:13:29"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"3588:6:29","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"3659:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"3667:4:29","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3655:3:29"},"nodeType":"YulFunctionCall","src":"3655:17:29"},{"name":"pos","nodeType":"YulIdentifier","src":"3674:3:29"},{"name":"length","nodeType":"YulIdentifier","src":"3679:6:29"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"3620:34:29"},"nodeType":"YulFunctionCall","src":"3620:66:29"},"nodeType":"YulExpressionStatement","src":"3620:66:29"},{"nodeType":"YulVariableDeclaration","src":"3695:29:29","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"3712:3:29"},{"name":"length","nodeType":"YulIdentifier","src":"3717:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3708:3:29"},"nodeType":"YulFunctionCall","src":"3708:16:29"},"variables":[{"name":"end_1","nodeType":"YulTypedName","src":"3699:5:29","type":""}]},{"nodeType":"YulVariableDeclaration","src":"3733:13:29","value":{"hexValue":"2e","kind":"string","nodeType":"YulLiteral","src":"3743:3:29","type":"","value":"."},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"3737:2:29","type":""}]},{"expression":{"arguments":[{"name":"end_1","nodeType":"YulIdentifier","src":"3762:5:29"},{"name":"_1","nodeType":"YulIdentifier","src":"3769:2:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3755:6:29"},"nodeType":"YulFunctionCall","src":"3755:17:29"},"nodeType":"YulExpressionStatement","src":"3755:17:29"},{"nodeType":"YulVariableDeclaration","src":"3781:29:29","value":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"3803:6:29"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3797:5:29"},"nodeType":"YulFunctionCall","src":"3797:13:29"},"variables":[{"name":"length_1","nodeType":"YulTypedName","src":"3785:8:29","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"3858:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"3866:4:29","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3854:3:29"},"nodeType":"YulFunctionCall","src":"3854:17:29"},{"arguments":[{"name":"end_1","nodeType":"YulIdentifier","src":"3877:5:29"},{"kind":"number","nodeType":"YulLiteral","src":"3884:1:29","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3873:3:29"},"nodeType":"YulFunctionCall","src":"3873:13:29"},{"name":"length_1","nodeType":"YulIdentifier","src":"3888:8:29"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"3819:34:29"},"nodeType":"YulFunctionCall","src":"3819:78:29"},"nodeType":"YulExpressionStatement","src":"3819:78:29"},{"nodeType":"YulVariableDeclaration","src":"3906:30:29","value":{"arguments":[{"name":"end_1","nodeType":"YulIdentifier","src":"3920:5:29"},{"name":"length_1","nodeType":"YulIdentifier","src":"3927:8:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3916:3:29"},"nodeType":"YulFunctionCall","src":"3916:20:29"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"3910:2:29","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"3956:2:29"},{"kind":"number","nodeType":"YulLiteral","src":"3960:1:29","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3952:3:29"},"nodeType":"YulFunctionCall","src":"3952:10:29"},{"name":"_1","nodeType":"YulIdentifier","src":"3964:2:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3945:6:29"},"nodeType":"YulFunctionCall","src":"3945:22:29"},"nodeType":"YulExpressionStatement","src":"3945:22:29"},{"nodeType":"YulVariableDeclaration","src":"3976:29:29","value":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"3998:6:29"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3992:5:29"},"nodeType":"YulFunctionCall","src":"3992:13:29"},"variables":[{"name":"length_2","nodeType":"YulTypedName","src":"3980:8:29","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"4053:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"4061:4:29","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4049:3:29"},"nodeType":"YulFunctionCall","src":"4049:17:29"},{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"4072:2:29"},{"kind":"number","nodeType":"YulLiteral","src":"4076:1:29","type":"","value":"2"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4068:3:29"},"nodeType":"YulFunctionCall","src":"4068:10:29"},{"name":"length_2","nodeType":"YulIdentifier","src":"4080:8:29"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"4014:34:29"},"nodeType":"YulFunctionCall","src":"4014:75:29"},"nodeType":"YulExpressionStatement","src":"4014:75:29"},{"nodeType":"YulAssignment","src":"4098:32:29","value":{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"4113:2:29"},{"name":"length_2","nodeType":"YulIdentifier","src":"4117:8:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4109:3:29"},"nodeType":"YulFunctionCall","src":"4109:17:29"},{"kind":"number","nodeType":"YulLiteral","src":"4128:1:29","type":"","value":"2"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4105:3:29"},"nodeType":"YulFunctionCall","src":"4105:25:29"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"4098:3:29"}]}]},"name":"abi_encode_tuple_packed_t_string_memory_ptr_t_stringliteral_6f010af653ebe3cb07d297a4ef13366103d392ceffa68dd48232e6e9ff2187bf_t_string_memory_ptr_t_stringliteral_6f010af653ebe3cb07d297a4ef13366103d392ceffa68dd48232e6e9ff2187bf_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"3534:3:29","type":""},{"name":"value2","nodeType":"YulTypedName","src":"3539:6:29","type":""},{"name":"value1","nodeType":"YulTypedName","src":"3547:6:29","type":""},{"name":"value0","nodeType":"YulTypedName","src":"3555:6:29","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"3566:3:29","type":""}],"src":"3137:999:29"},{"body":{"nodeType":"YulBlock","src":"4315:236:29","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4332:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"4343:2:29","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4325:6:29"},"nodeType":"YulFunctionCall","src":"4325:21:29"},"nodeType":"YulExpressionStatement","src":"4325:21:29"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4366:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"4377:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4362:3:29"},"nodeType":"YulFunctionCall","src":"4362:18:29"},{"kind":"number","nodeType":"YulLiteral","src":"4382:2:29","type":"","value":"46"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4355:6:29"},"nodeType":"YulFunctionCall","src":"4355:30:29"},"nodeType":"YulExpressionStatement","src":"4355:30:29"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4405:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"4416:2:29","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4401:3:29"},"nodeType":"YulFunctionCall","src":"4401:18:29"},{"hexValue":"496e697469616c697a61626c653a20636f6e747261637420697320616c726561","kind":"string","nodeType":"YulLiteral","src":"4421:34:29","type":"","value":"Initializable: contract is alrea"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4394:6:29"},"nodeType":"YulFunctionCall","src":"4394:62:29"},"nodeType":"YulExpressionStatement","src":"4394:62:29"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4476:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"4487:2:29","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4472:3:29"},"nodeType":"YulFunctionCall","src":"4472:18:29"},{"hexValue":"647920696e697469616c697a6564","kind":"string","nodeType":"YulLiteral","src":"4492:16:29","type":"","value":"dy initialized"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4465:6:29"},"nodeType":"YulFunctionCall","src":"4465:44:29"},"nodeType":"YulExpressionStatement","src":"4465:44:29"},{"nodeType":"YulAssignment","src":"4518:27:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4530:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"4541:3:29","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4526:3:29"},"nodeType":"YulFunctionCall","src":"4526:19:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4518:4:29"}]}]},"name":"abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4292:9:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4306:4:29","type":""}],"src":"4141:410:29"},{"body":{"nodeType":"YulBlock","src":"4663:87:29","statements":[{"nodeType":"YulAssignment","src":"4673:26:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4685:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"4696:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4681:3:29"},"nodeType":"YulFunctionCall","src":"4681:18:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4673:4:29"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4715:9:29"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"4730:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"4738:4:29","type":"","value":"0xff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4726:3:29"},"nodeType":"YulFunctionCall","src":"4726:17:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4708:6:29"},"nodeType":"YulFunctionCall","src":"4708:36:29"},"nodeType":"YulExpressionStatement","src":"4708:36:29"}]},"name":"abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4632:9:29","type":""},{"name":"value0","nodeType":"YulTypedName","src":"4643:6:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4654:4:29","type":""}],"src":"4556:194:29"},{"body":{"nodeType":"YulBlock","src":"4787:152:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4804:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4807:77:29","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4797:6:29"},"nodeType":"YulFunctionCall","src":"4797:88:29"},"nodeType":"YulExpressionStatement","src":"4797:88:29"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4901:1:29","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"4904:4:29","type":"","value":"0x32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4894:6:29"},"nodeType":"YulFunctionCall","src":"4894:15:29"},"nodeType":"YulExpressionStatement","src":"4894:15:29"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4925:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4928:4:29","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4918:6:29"},"nodeType":"YulFunctionCall","src":"4918:15:29"},"nodeType":"YulExpressionStatement","src":"4918:15:29"}]},"name":"panic_error_0x32","nodeType":"YulFunctionDefinition","src":"4755:184:29"},{"body":{"nodeType":"YulBlock","src":"5048:223:29","statements":[{"nodeType":"YulVariableDeclaration","src":"5058:51:29","value":{"arguments":[{"name":"ptr_to_tail","nodeType":"YulIdentifier","src":"5097:11:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5084:12:29"},"nodeType":"YulFunctionCall","src":"5084:25:29"},"variables":[{"name":"rel_offset_of_tail","nodeType":"YulTypedName","src":"5062:18:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"5199:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5208:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5211:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5201:6:29"},"nodeType":"YulFunctionCall","src":"5201:12:29"},"nodeType":"YulExpressionStatement","src":"5201:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"rel_offset_of_tail","nodeType":"YulIdentifier","src":"5132:18:29"},{"arguments":[{"arguments":[{"arguments":[],"functionName":{"name":"calldatasize","nodeType":"YulIdentifier","src":"5160:12:29"},"nodeType":"YulFunctionCall","src":"5160:14:29"},{"name":"base_ref","nodeType":"YulIdentifier","src":"5176:8:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5156:3:29"},"nodeType":"YulFunctionCall","src":"5156:29:29"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5191:3:29","type":"","value":"318"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"5187:3:29"},"nodeType":"YulFunctionCall","src":"5187:8:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5152:3:29"},"nodeType":"YulFunctionCall","src":"5152:44:29"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"5128:3:29"},"nodeType":"YulFunctionCall","src":"5128:69:29"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"5121:6:29"},"nodeType":"YulFunctionCall","src":"5121:77:29"},"nodeType":"YulIf","src":"5118:97:29"},{"nodeType":"YulAssignment","src":"5224:41:29","value":{"arguments":[{"name":"base_ref","nodeType":"YulIdentifier","src":"5236:8:29"},{"name":"rel_offset_of_tail","nodeType":"YulIdentifier","src":"5246:18:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5232:3:29"},"nodeType":"YulFunctionCall","src":"5232:33:29"},"variableNames":[{"name":"addr","nodeType":"YulIdentifier","src":"5224:4:29"}]}]},"name":"access_calldata_tail_t_struct$_Attestation_$45_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"base_ref","nodeType":"YulTypedName","src":"5013:8:29","type":""},{"name":"ptr_to_tail","nodeType":"YulTypedName","src":"5023:11:29","type":""}],"returnVariables":[{"name":"addr","nodeType":"YulTypedName","src":"5039:4:29","type":""}],"src":"4944:327:29"},{"body":{"nodeType":"YulBlock","src":"5450:228:29","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5467:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"5478:2:29","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5460:6:29"},"nodeType":"YulFunctionCall","src":"5460:21:29"},"nodeType":"YulExpressionStatement","src":"5460:21:29"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5501:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"5512:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5497:3:29"},"nodeType":"YulFunctionCall","src":"5497:18:29"},{"kind":"number","nodeType":"YulLiteral","src":"5517:2:29","type":"","value":"38"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5490:6:29"},"nodeType":"YulFunctionCall","src":"5490:30:29"},"nodeType":"YulExpressionStatement","src":"5490:30:29"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5540:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"5551:2:29","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5536:3:29"},"nodeType":"YulFunctionCall","src":"5536:18:29"},{"hexValue":"4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061","kind":"string","nodeType":"YulLiteral","src":"5556:34:29","type":"","value":"Ownable: new owner is the zero a"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5529:6:29"},"nodeType":"YulFunctionCall","src":"5529:62:29"},"nodeType":"YulExpressionStatement","src":"5529:62:29"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5611:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"5622:2:29","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5607:3:29"},"nodeType":"YulFunctionCall","src":"5607:18:29"},{"hexValue":"646472657373","kind":"string","nodeType":"YulLiteral","src":"5627:8:29","type":"","value":"ddress"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5600:6:29"},"nodeType":"YulFunctionCall","src":"5600:36:29"},"nodeType":"YulExpressionStatement","src":"5600:36:29"},{"nodeType":"YulAssignment","src":"5645:27:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5657:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"5668:3:29","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5653:3:29"},"nodeType":"YulFunctionCall","src":"5653:19:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"5645:4:29"}]}]},"name":"abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5427:9:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"5441:4:29","type":""}],"src":"5276:402:29"},{"body":{"nodeType":"YulBlock","src":"5715:152:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5732:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5735:77:29","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5725:6:29"},"nodeType":"YulFunctionCall","src":"5725:88:29"},"nodeType":"YulExpressionStatement","src":"5725:88:29"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5829:1:29","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"5832:4:29","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5822:6:29"},"nodeType":"YulFunctionCall","src":"5822:15:29"},"nodeType":"YulExpressionStatement","src":"5822:15:29"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5853:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5856:4:29","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5846:6:29"},"nodeType":"YulFunctionCall","src":"5846:15:29"},"nodeType":"YulExpressionStatement","src":"5846:15:29"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"5683:184:29"},{"body":{"nodeType":"YulBlock","src":"5904:152:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5921:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5924:77:29","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5914:6:29"},"nodeType":"YulFunctionCall","src":"5914:88:29"},"nodeType":"YulExpressionStatement","src":"5914:88:29"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6018:1:29","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"6021:4:29","type":"","value":"0x12"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6011:6:29"},"nodeType":"YulFunctionCall","src":"6011:15:29"},"nodeType":"YulExpressionStatement","src":"6011:15:29"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6042:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6045:4:29","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6035:6:29"},"nodeType":"YulFunctionCall","src":"6035:15:29"},"nodeType":"YulExpressionStatement","src":"6035:15:29"}]},"name":"panic_error_0x12","nodeType":"YulFunctionDefinition","src":"5872:184:29"},{"body":{"nodeType":"YulBlock","src":"6235:182:29","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6252:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"6263:2:29","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6245:6:29"},"nodeType":"YulFunctionCall","src":"6245:21:29"},"nodeType":"YulExpressionStatement","src":"6245:21:29"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6286:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"6297:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6282:3:29"},"nodeType":"YulFunctionCall","src":"6282:18:29"},{"kind":"number","nodeType":"YulLiteral","src":"6302:2:29","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6275:6:29"},"nodeType":"YulFunctionCall","src":"6275:30:29"},"nodeType":"YulExpressionStatement","src":"6275:30:29"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6325:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"6336:2:29","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6321:3:29"},"nodeType":"YulFunctionCall","src":"6321:18:29"},{"hexValue":"4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572","kind":"string","nodeType":"YulLiteral","src":"6341:34:29","type":"","value":"Ownable: caller is not the owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6314:6:29"},"nodeType":"YulFunctionCall","src":"6314:62:29"},"nodeType":"YulExpressionStatement","src":"6314:62:29"},{"nodeType":"YulAssignment","src":"6385:26:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6397:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"6408:2:29","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6393:3:29"},"nodeType":"YulFunctionCall","src":"6393:18:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"6385:4:29"}]}]},"name":"abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6212:9:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"6226:4:29","type":""}],"src":"6061:356:29"},{"body":{"nodeType":"YulBlock","src":"6596:233:29","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6613:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"6624:2:29","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6606:6:29"},"nodeType":"YulFunctionCall","src":"6606:21:29"},"nodeType":"YulExpressionStatement","src":"6606:21:29"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6647:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"6658:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6643:3:29"},"nodeType":"YulFunctionCall","src":"6643:18:29"},{"kind":"number","nodeType":"YulLiteral","src":"6663:2:29","type":"","value":"43"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6636:6:29"},"nodeType":"YulFunctionCall","src":"6636:30:29"},"nodeType":"YulExpressionStatement","src":"6636:30:29"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6686:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"6697:2:29","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6682:3:29"},"nodeType":"YulFunctionCall","src":"6682:18:29"},{"hexValue":"496e697469616c697a61626c653a20636f6e7472616374206973206e6f742069","kind":"string","nodeType":"YulLiteral","src":"6702:34:29","type":"","value":"Initializable: contract is not i"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6675:6:29"},"nodeType":"YulFunctionCall","src":"6675:62:29"},"nodeType":"YulExpressionStatement","src":"6675:62:29"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6757:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"6768:2:29","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6753:3:29"},"nodeType":"YulFunctionCall","src":"6753:18:29"},{"hexValue":"6e697469616c697a696e67","kind":"string","nodeType":"YulLiteral","src":"6773:13:29","type":"","value":"nitializing"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6746:6:29"},"nodeType":"YulFunctionCall","src":"6746:41:29"},"nodeType":"YulExpressionStatement","src":"6746:41:29"},{"nodeType":"YulAssignment","src":"6796:27:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6808:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"6819:3:29","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6804:3:29"},"nodeType":"YulFunctionCall","src":"6804:19:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"6796:4:29"}]}]},"name":"abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6573:9:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"6587:4:29","type":""}],"src":"6422:407:29"},{"body":{"nodeType":"YulBlock","src":"6935:76:29","statements":[{"nodeType":"YulAssignment","src":"6945:26:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6957:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"6968:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6953:3:29"},"nodeType":"YulFunctionCall","src":"6953:18:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"6945:4:29"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6987:9:29"},{"name":"value0","nodeType":"YulIdentifier","src":"6998:6:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6980:6:29"},"nodeType":"YulFunctionCall","src":"6980:25:29"},"nodeType":"YulExpressionStatement","src":"6980:25:29"}]},"name":"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6904:9:29","type":""},{"name":"value0","nodeType":"YulTypedName","src":"6915:6:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"6926:4:29","type":""}],"src":"6834:177:29"},{"body":{"nodeType":"YulBlock","src":"7057:209:29","statements":[{"nodeType":"YulAssignment","src":"7067:19:29","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7083:2:29","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"7077:5:29"},"nodeType":"YulFunctionCall","src":"7077:9:29"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"7067:6:29"}]},{"nodeType":"YulVariableDeclaration","src":"7095:37:29","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"7117:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"7125:6:29","type":"","value":"0x0140"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7113:3:29"},"nodeType":"YulFunctionCall","src":"7113:19:29"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"7099:10:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"7207:22:29","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"7209:16:29"},"nodeType":"YulFunctionCall","src":"7209:18:29"},"nodeType":"YulExpressionStatement","src":"7209:18:29"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"7150:10:29"},{"kind":"number","nodeType":"YulLiteral","src":"7162:18:29","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"7147:2:29"},"nodeType":"YulFunctionCall","src":"7147:34:29"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"7186:10:29"},{"name":"memPtr","nodeType":"YulIdentifier","src":"7198:6:29"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"7183:2:29"},"nodeType":"YulFunctionCall","src":"7183:22:29"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"7144:2:29"},"nodeType":"YulFunctionCall","src":"7144:62:29"},"nodeType":"YulIf","src":"7141:88:29"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7245:2:29","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"7249:10:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7238:6:29"},"nodeType":"YulFunctionCall","src":"7238:22:29"},"nodeType":"YulExpressionStatement","src":"7238:22:29"}]},"name":"allocate_memory","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"7046:6:29","type":""}],"src":"7016:250:29"},{"body":{"nodeType":"YulBlock","src":"7330:116:29","statements":[{"nodeType":"YulAssignment","src":"7340:22:29","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"7355:6:29"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"7349:5:29"},"nodeType":"YulFunctionCall","src":"7349:13:29"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"7340:5:29"}]},{"body":{"nodeType":"YulBlock","src":"7424:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7433:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7436:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7426:6:29"},"nodeType":"YulFunctionCall","src":"7426:12:29"},"nodeType":"YulExpressionStatement","src":"7426:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7384:5:29"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7395:5:29"},{"kind":"number","nodeType":"YulLiteral","src":"7402:18:29","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"7391:3:29"},"nodeType":"YulFunctionCall","src":"7391:30:29"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"7381:2:29"},"nodeType":"YulFunctionCall","src":"7381:41:29"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"7374:6:29"},"nodeType":"YulFunctionCall","src":"7374:49:29"},"nodeType":"YulIf","src":"7371:69:29"}]},"name":"abi_decode_uint64_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"7309:6:29","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"7320:5:29","type":""}],"src":"7271:175:29"},{"body":{"nodeType":"YulBlock","src":"7511:78:29","statements":[{"nodeType":"YulAssignment","src":"7521:22:29","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"7536:6:29"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"7530:5:29"},"nodeType":"YulFunctionCall","src":"7530:13:29"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"7521:5:29"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7577:5:29"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"7552:24:29"},"nodeType":"YulFunctionCall","src":"7552:31:29"},"nodeType":"YulExpressionStatement","src":"7552:31:29"}]},"name":"abi_decode_address_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"7490:6:29","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"7501:5:29","type":""}],"src":"7451:138:29"},{"body":{"nodeType":"YulBlock","src":"7651:107:29","statements":[{"nodeType":"YulAssignment","src":"7661:22:29","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"7676:6:29"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"7670:5:29"},"nodeType":"YulFunctionCall","src":"7670:13:29"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"7661:5:29"}]},{"body":{"nodeType":"YulBlock","src":"7736:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7745:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7748:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7738:6:29"},"nodeType":"YulFunctionCall","src":"7738:12:29"},"nodeType":"YulExpressionStatement","src":"7738:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7705:5:29"},{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7726:5:29"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"7719:6:29"},"nodeType":"YulFunctionCall","src":"7719:13:29"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"7712:6:29"},"nodeType":"YulFunctionCall","src":"7712:21:29"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"7702:2:29"},"nodeType":"YulFunctionCall","src":"7702:32:29"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"7695:6:29"},"nodeType":"YulFunctionCall","src":"7695:40:29"},"nodeType":"YulIf","src":"7692:60:29"}]},"name":"abi_decode_bool_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"7630:6:29","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"7641:5:29","type":""}],"src":"7594:164:29"},{"body":{"nodeType":"YulBlock","src":"7826:635:29","statements":[{"body":{"nodeType":"YulBlock","src":"7875:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7884:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7887:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7877:6:29"},"nodeType":"YulFunctionCall","src":"7877:12:29"},"nodeType":"YulExpressionStatement","src":"7877:12:29"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"7854:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"7862:4:29","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7850:3:29"},"nodeType":"YulFunctionCall","src":"7850:17:29"},{"name":"end","nodeType":"YulIdentifier","src":"7869:3:29"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"7846:3:29"},"nodeType":"YulFunctionCall","src":"7846:27:29"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"7839:6:29"},"nodeType":"YulFunctionCall","src":"7839:35:29"},"nodeType":"YulIf","src":"7836:55:29"},{"nodeType":"YulVariableDeclaration","src":"7900:23:29","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"7916:6:29"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"7910:5:29"},"nodeType":"YulFunctionCall","src":"7910:13:29"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"7904:2:29","type":""}]},{"nodeType":"YulVariableDeclaration","src":"7932:28:29","value":{"kind":"number","nodeType":"YulLiteral","src":"7942:18:29","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"7936:2:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"7983:22:29","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"7985:16:29"},"nodeType":"YulFunctionCall","src":"7985:18:29"},"nodeType":"YulExpressionStatement","src":"7985:18:29"}]},"condition":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"7975:2:29"},{"name":"_2","nodeType":"YulIdentifier","src":"7979:2:29"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"7972:2:29"},"nodeType":"YulFunctionCall","src":"7972:10:29"},"nodeType":"YulIf","src":"7969:36:29"},{"nodeType":"YulVariableDeclaration","src":"8014:17:29","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8028:2:29","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"8024:3:29"},"nodeType":"YulFunctionCall","src":"8024:7:29"},"variables":[{"name":"_3","nodeType":"YulTypedName","src":"8018:2:29","type":""}]},{"nodeType":"YulVariableDeclaration","src":"8040:23:29","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8060:2:29","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"8054:5:29"},"nodeType":"YulFunctionCall","src":"8054:9:29"},"variables":[{"name":"memPtr","nodeType":"YulTypedName","src":"8044:6:29","type":""}]},{"nodeType":"YulVariableDeclaration","src":"8072:71:29","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"8094:6:29"},{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"8118:2:29"},{"kind":"number","nodeType":"YulLiteral","src":"8122:4:29","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8114:3:29"},"nodeType":"YulFunctionCall","src":"8114:13:29"},{"name":"_3","nodeType":"YulIdentifier","src":"8129:2:29"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"8110:3:29"},"nodeType":"YulFunctionCall","src":"8110:22:29"},{"kind":"number","nodeType":"YulLiteral","src":"8134:2:29","type":"","value":"63"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8106:3:29"},"nodeType":"YulFunctionCall","src":"8106:31:29"},{"name":"_3","nodeType":"YulIdentifier","src":"8139:2:29"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"8102:3:29"},"nodeType":"YulFunctionCall","src":"8102:40:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8090:3:29"},"nodeType":"YulFunctionCall","src":"8090:53:29"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"8076:10:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"8202:22:29","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"8204:16:29"},"nodeType":"YulFunctionCall","src":"8204:18:29"},"nodeType":"YulExpressionStatement","src":"8204:18:29"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"8161:10:29"},{"name":"_2","nodeType":"YulIdentifier","src":"8173:2:29"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"8158:2:29"},"nodeType":"YulFunctionCall","src":"8158:18:29"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"8181:10:29"},{"name":"memPtr","nodeType":"YulIdentifier","src":"8193:6:29"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"8178:2:29"},"nodeType":"YulFunctionCall","src":"8178:22:29"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"8155:2:29"},"nodeType":"YulFunctionCall","src":"8155:46:29"},"nodeType":"YulIf","src":"8152:72:29"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8240:2:29","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"8244:10:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8233:6:29"},"nodeType":"YulFunctionCall","src":"8233:22:29"},"nodeType":"YulExpressionStatement","src":"8233:22:29"},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"8271:6:29"},{"name":"_1","nodeType":"YulIdentifier","src":"8279:2:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8264:6:29"},"nodeType":"YulFunctionCall","src":"8264:18:29"},"nodeType":"YulExpressionStatement","src":"8264:18:29"},{"body":{"nodeType":"YulBlock","src":"8330:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8339:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"8342:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"8332:6:29"},"nodeType":"YulFunctionCall","src":"8332:12:29"},"nodeType":"YulExpressionStatement","src":"8332:12:29"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"8305:6:29"},{"name":"_1","nodeType":"YulIdentifier","src":"8313:2:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8301:3:29"},"nodeType":"YulFunctionCall","src":"8301:15:29"},{"kind":"number","nodeType":"YulLiteral","src":"8318:4:29","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8297:3:29"},"nodeType":"YulFunctionCall","src":"8297:26:29"},{"name":"end","nodeType":"YulIdentifier","src":"8325:3:29"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"8294:2:29"},"nodeType":"YulFunctionCall","src":"8294:35:29"},"nodeType":"YulIf","src":"8291:55:29"},{"expression":{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"8394:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"8402:4:29","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8390:3:29"},"nodeType":"YulFunctionCall","src":"8390:17:29"},{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"8413:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"8421:4:29","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8409:3:29"},"nodeType":"YulFunctionCall","src":"8409:17:29"},{"name":"_1","nodeType":"YulIdentifier","src":"8428:2:29"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"8355:34:29"},"nodeType":"YulFunctionCall","src":"8355:76:29"},"nodeType":"YulExpressionStatement","src":"8355:76:29"},{"nodeType":"YulAssignment","src":"8440:15:29","value":{"name":"memPtr","nodeType":"YulIdentifier","src":"8449:6:29"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"8440:5:29"}]}]},"name":"abi_decode_bytes_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"7800:6:29","type":""},{"name":"end","nodeType":"YulTypedName","src":"7808:3:29","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"7816:5:29","type":""}],"src":"7763:698:29"},{"body":{"nodeType":"YulBlock","src":"8574:1156:29","statements":[{"body":{"nodeType":"YulBlock","src":"8620:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8629:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"8632:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"8622:6:29"},"nodeType":"YulFunctionCall","src":"8622:12:29"},"nodeType":"YulExpressionStatement","src":"8622:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"8595:7:29"},{"name":"headStart","nodeType":"YulIdentifier","src":"8604:9:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"8591:3:29"},"nodeType":"YulFunctionCall","src":"8591:23:29"},{"kind":"number","nodeType":"YulLiteral","src":"8616:2:29","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"8587:3:29"},"nodeType":"YulFunctionCall","src":"8587:32:29"},"nodeType":"YulIf","src":"8584:52:29"},{"nodeType":"YulVariableDeclaration","src":"8645:30:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8665:9:29"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"8659:5:29"},"nodeType":"YulFunctionCall","src":"8659:16:29"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"8649:6:29","type":""}]},{"nodeType":"YulVariableDeclaration","src":"8684:28:29","value":{"kind":"number","nodeType":"YulLiteral","src":"8694:18:29","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"8688:2:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"8739:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8748:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"8751:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"8741:6:29"},"nodeType":"YulFunctionCall","src":"8741:12:29"},"nodeType":"YulExpressionStatement","src":"8741:12:29"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"8727:6:29"},{"name":"_1","nodeType":"YulIdentifier","src":"8735:2:29"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"8724:2:29"},"nodeType":"YulFunctionCall","src":"8724:14:29"},"nodeType":"YulIf","src":"8721:34:29"},{"nodeType":"YulVariableDeclaration","src":"8764:32:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8778:9:29"},{"name":"offset","nodeType":"YulIdentifier","src":"8789:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8774:3:29"},"nodeType":"YulFunctionCall","src":"8774:22:29"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"8768:2:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"8838:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8847:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"8850:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"8840:6:29"},"nodeType":"YulFunctionCall","src":"8840:12:29"},"nodeType":"YulExpressionStatement","src":"8840:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"8816:7:29"},{"name":"_2","nodeType":"YulIdentifier","src":"8825:2:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"8812:3:29"},"nodeType":"YulFunctionCall","src":"8812:16:29"},{"kind":"number","nodeType":"YulLiteral","src":"8830:6:29","type":"","value":"0x0140"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"8808:3:29"},"nodeType":"YulFunctionCall","src":"8808:29:29"},"nodeType":"YulIf","src":"8805:49:29"},{"nodeType":"YulVariableDeclaration","src":"8863:30:29","value":{"arguments":[],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"8876:15:29"},"nodeType":"YulFunctionCall","src":"8876:17:29"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"8867:5:29","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"8909:5:29"},{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"8922:2:29"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"8916:5:29"},"nodeType":"YulFunctionCall","src":"8916:9:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8902:6:29"},"nodeType":"YulFunctionCall","src":"8902:24:29"},"nodeType":"YulExpressionStatement","src":"8902:24:29"},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"8946:5:29"},{"kind":"number","nodeType":"YulLiteral","src":"8953:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8942:3:29"},"nodeType":"YulFunctionCall","src":"8942:14:29"},{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"8968:2:29"},{"kind":"number","nodeType":"YulLiteral","src":"8972:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8964:3:29"},"nodeType":"YulFunctionCall","src":"8964:11:29"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"8958:5:29"},"nodeType":"YulFunctionCall","src":"8958:18:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8935:6:29"},"nodeType":"YulFunctionCall","src":"8935:42:29"},"nodeType":"YulExpressionStatement","src":"8935:42:29"},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"8997:5:29"},{"kind":"number","nodeType":"YulLiteral","src":"9004:2:29","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8993:3:29"},"nodeType":"YulFunctionCall","src":"8993:14:29"},{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"9042:2:29"},{"kind":"number","nodeType":"YulLiteral","src":"9046:2:29","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9038:3:29"},"nodeType":"YulFunctionCall","src":"9038:11:29"}],"functionName":{"name":"abi_decode_uint64_fromMemory","nodeType":"YulIdentifier","src":"9009:28:29"},"nodeType":"YulFunctionCall","src":"9009:41:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8986:6:29"},"nodeType":"YulFunctionCall","src":"8986:65:29"},"nodeType":"YulExpressionStatement","src":"8986:65:29"},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"9071:5:29"},{"kind":"number","nodeType":"YulLiteral","src":"9078:2:29","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9067:3:29"},"nodeType":"YulFunctionCall","src":"9067:14:29"},{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"9116:2:29"},{"kind":"number","nodeType":"YulLiteral","src":"9120:2:29","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9112:3:29"},"nodeType":"YulFunctionCall","src":"9112:11:29"}],"functionName":{"name":"abi_decode_uint64_fromMemory","nodeType":"YulIdentifier","src":"9083:28:29"},"nodeType":"YulFunctionCall","src":"9083:41:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9060:6:29"},"nodeType":"YulFunctionCall","src":"9060:65:29"},"nodeType":"YulExpressionStatement","src":"9060:65:29"},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"9145:5:29"},{"kind":"number","nodeType":"YulLiteral","src":"9152:3:29","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9141:3:29"},"nodeType":"YulFunctionCall","src":"9141:15:29"},{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"9191:2:29"},{"kind":"number","nodeType":"YulLiteral","src":"9195:3:29","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9187:3:29"},"nodeType":"YulFunctionCall","src":"9187:12:29"}],"functionName":{"name":"abi_decode_uint64_fromMemory","nodeType":"YulIdentifier","src":"9158:28:29"},"nodeType":"YulFunctionCall","src":"9158:42:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9134:6:29"},"nodeType":"YulFunctionCall","src":"9134:67:29"},"nodeType":"YulExpressionStatement","src":"9134:67:29"},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"9221:5:29"},{"kind":"number","nodeType":"YulLiteral","src":"9228:3:29","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9217:3:29"},"nodeType":"YulFunctionCall","src":"9217:15:29"},{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"9244:2:29"},{"kind":"number","nodeType":"YulLiteral","src":"9248:3:29","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9240:3:29"},"nodeType":"YulFunctionCall","src":"9240:12:29"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"9234:5:29"},"nodeType":"YulFunctionCall","src":"9234:19:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9210:6:29"},"nodeType":"YulFunctionCall","src":"9210:44:29"},"nodeType":"YulExpressionStatement","src":"9210:44:29"},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"9274:5:29"},{"kind":"number","nodeType":"YulLiteral","src":"9281:3:29","type":"","value":"192"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9270:3:29"},"nodeType":"YulFunctionCall","src":"9270:15:29"},{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"9321:2:29"},{"kind":"number","nodeType":"YulLiteral","src":"9325:3:29","type":"","value":"192"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9317:3:29"},"nodeType":"YulFunctionCall","src":"9317:12:29"}],"functionName":{"name":"abi_decode_address_fromMemory","nodeType":"YulIdentifier","src":"9287:29:29"},"nodeType":"YulFunctionCall","src":"9287:43:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9263:6:29"},"nodeType":"YulFunctionCall","src":"9263:68:29"},"nodeType":"YulExpressionStatement","src":"9263:68:29"},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"9351:5:29"},{"kind":"number","nodeType":"YulLiteral","src":"9358:3:29","type":"","value":"224"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9347:3:29"},"nodeType":"YulFunctionCall","src":"9347:15:29"},{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"9398:2:29"},{"kind":"number","nodeType":"YulLiteral","src":"9402:3:29","type":"","value":"224"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9394:3:29"},"nodeType":"YulFunctionCall","src":"9394:12:29"}],"functionName":{"name":"abi_decode_address_fromMemory","nodeType":"YulIdentifier","src":"9364:29:29"},"nodeType":"YulFunctionCall","src":"9364:43:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9340:6:29"},"nodeType":"YulFunctionCall","src":"9340:68:29"},"nodeType":"YulExpressionStatement","src":"9340:68:29"},{"nodeType":"YulVariableDeclaration","src":"9417:13:29","value":{"kind":"number","nodeType":"YulLiteral","src":"9427:3:29","type":"","value":"256"},"variables":[{"name":"_3","nodeType":"YulTypedName","src":"9421:2:29","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"9450:5:29"},{"name":"_3","nodeType":"YulIdentifier","src":"9457:2:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9446:3:29"},"nodeType":"YulFunctionCall","src":"9446:14:29"},{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"9493:2:29"},{"name":"_3","nodeType":"YulIdentifier","src":"9497:2:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9489:3:29"},"nodeType":"YulFunctionCall","src":"9489:11:29"}],"functionName":{"name":"abi_decode_bool_fromMemory","nodeType":"YulIdentifier","src":"9462:26:29"},"nodeType":"YulFunctionCall","src":"9462:39:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9439:6:29"},"nodeType":"YulFunctionCall","src":"9439:63:29"},"nodeType":"YulExpressionStatement","src":"9439:63:29"},{"nodeType":"YulVariableDeclaration","src":"9511:13:29","value":{"kind":"number","nodeType":"YulLiteral","src":"9521:3:29","type":"","value":"288"},"variables":[{"name":"_4","nodeType":"YulTypedName","src":"9515:2:29","type":""}]},{"nodeType":"YulVariableDeclaration","src":"9533:34:29","value":{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"9559:2:29"},{"name":"_4","nodeType":"YulIdentifier","src":"9563:2:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9555:3:29"},"nodeType":"YulFunctionCall","src":"9555:11:29"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"9549:5:29"},"nodeType":"YulFunctionCall","src":"9549:18:29"},"variables":[{"name":"offset_1","nodeType":"YulTypedName","src":"9537:8:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"9596:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9605:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9608:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9598:6:29"},"nodeType":"YulFunctionCall","src":"9598:12:29"},"nodeType":"YulExpressionStatement","src":"9598:12:29"}]},"condition":{"arguments":[{"name":"offset_1","nodeType":"YulIdentifier","src":"9582:8:29"},{"name":"_1","nodeType":"YulIdentifier","src":"9592:2:29"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"9579:2:29"},"nodeType":"YulFunctionCall","src":"9579:16:29"},"nodeType":"YulIf","src":"9576:36:29"},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"9632:5:29"},{"name":"_4","nodeType":"YulIdentifier","src":"9639:2:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9628:3:29"},"nodeType":"YulFunctionCall","src":"9628:14:29"},{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"9676:2:29"},{"name":"offset_1","nodeType":"YulIdentifier","src":"9680:8:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9672:3:29"},"nodeType":"YulFunctionCall","src":"9672:17:29"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"9691:7:29"}],"functionName":{"name":"abi_decode_bytes_fromMemory","nodeType":"YulIdentifier","src":"9644:27:29"},"nodeType":"YulFunctionCall","src":"9644:55:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9621:6:29"},"nodeType":"YulFunctionCall","src":"9621:79:29"},"nodeType":"YulExpressionStatement","src":"9621:79:29"},{"nodeType":"YulAssignment","src":"9709:15:29","value":{"name":"value","nodeType":"YulIdentifier","src":"9719:5:29"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"9709:6:29"}]}]},"name":"abi_decode_tuple_t_struct$_Attestation_$45_memory_ptr_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8540:9:29","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"8551:7:29","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"8563:6:29","type":""}],"src":"8466:1264:29"},{"body":{"nodeType":"YulBlock","src":"9909:181:29","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9926:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"9937:2:29","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9919:6:29"},"nodeType":"YulFunctionCall","src":"9919:21:29"},"nodeType":"YulExpressionStatement","src":"9919:21:29"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9960:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"9971:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9956:3:29"},"nodeType":"YulFunctionCall","src":"9956:18:29"},{"kind":"number","nodeType":"YulLiteral","src":"9976:2:29","type":"","value":"31"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9949:6:29"},"nodeType":"YulFunctionCall","src":"9949:30:29"},"nodeType":"YulExpressionStatement","src":"9949:30:29"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9999:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"10010:2:29","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9995:3:29"},"nodeType":"YulFunctionCall","src":"9995:18:29"},{"hexValue":"5265666572726564206174746573746174696f6e206e6f742076616c69642e","kind":"string","nodeType":"YulLiteral","src":"10015:33:29","type":"","value":"Referred attestation not valid."}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9988:6:29"},"nodeType":"YulFunctionCall","src":"9988:61:29"},"nodeType":"YulExpressionStatement","src":"9988:61:29"},{"nodeType":"YulAssignment","src":"10058:26:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10070:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"10081:2:29","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10066:3:29"},"nodeType":"YulFunctionCall","src":"10066:18:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"10058:4:29"}]}]},"name":"abi_encode_tuple_t_stringliteral_f304c73ad664b98fadff16b5d10bf8a01088a1758e54be0253cb4027e74e7f2a__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9886:9:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"9900:4:29","type":""}],"src":"9735:355:29"},{"body":{"nodeType":"YulBlock","src":"10269:158:29","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10286:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"10297:2:29","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10279:6:29"},"nodeType":"YulFunctionCall","src":"10279:21:29"},"nodeType":"YulExpressionStatement","src":"10279:21:29"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10320:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"10331:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10316:3:29"},"nodeType":"YulFunctionCall","src":"10316:18:29"},{"kind":"number","nodeType":"YulLiteral","src":"10336:1:29","type":"","value":"9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10309:6:29"},"nodeType":"YulFunctionCall","src":"10309:29:29"},"nodeType":"YulExpressionStatement","src":"10309:29:29"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10358:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"10369:2:29","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10354:3:29"},"nodeType":"YulFunctionCall","src":"10354:18:29"},{"hexValue":"4e6f74206f776e6572","kind":"string","nodeType":"YulLiteral","src":"10374:11:29","type":"","value":"Not owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10347:6:29"},"nodeType":"YulFunctionCall","src":"10347:39:29"},"nodeType":"YulExpressionStatement","src":"10347:39:29"},{"nodeType":"YulAssignment","src":"10395:26:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10407:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"10418:2:29","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10403:3:29"},"nodeType":"YulFunctionCall","src":"10403:18:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"10395:4:29"}]}]},"name":"abi_encode_tuple_t_stringliteral_c266efca4f4ed37612271196433531dcbb4fca89a694d568d1e290e32feb1682__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"10246:9:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"10260:4:29","type":""}],"src":"10095:332:29"}]},"contents":"{\n    { }\n    function copy_memory_to_memory_with_cleanup(src, dst, length)\n    {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        let length := mload(value0)\n        mstore(add(headStart, 32), length)\n        copy_memory_to_memory_with_cleanup(add(value0, 32), add(headStart, 64), length)\n        tail := add(add(headStart, and(add(length, 31), not(31))), 64)\n    }\n    function abi_decode_array_struct_Attestation_calldata_dyn_calldata(offset, end) -> arrayPos, length\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        length := calldataload(offset)\n        if gt(length, 0xffffffffffffffff) { revert(0, 0) }\n        arrayPos := add(offset, 0x20)\n        if gt(add(add(offset, shl(5, length)), 0x20), end) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_array$_t_struct$_Attestation_$45_calldata_ptr_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let value0_1, value1_1 := abi_decode_array_struct_Attestation_calldata_dyn_calldata(add(headStart, offset), dataEnd)\n        value0 := value0_1\n        value1 := value1_1\n        let offset_1 := calldataload(add(headStart, 32))\n        if gt(offset_1, _1) { revert(0, 0) }\n        let value2_1, value3_1 := abi_decode_array_struct_Attestation_calldata_dyn_calldata(add(headStart, offset_1), dataEnd)\n        value2 := value2_1\n        value3 := value3_1\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_decode_tuple_t_struct$_Attestation_$45_calldata_ptr(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        let _1 := add(headStart, offset)\n        if slt(sub(dataEnd, _1), 320) { revert(0, 0) }\n        value0 := _1\n    }\n    function validator_revert_address(value)\n    {\n        if iszero(eq(value, and(value, 0xffffffffffffffffffffffffffffffffffffffff))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n    }\n    function abi_encode_tuple_packed_t_string_memory_ptr_t_stringliteral_6f010af653ebe3cb07d297a4ef13366103d392ceffa68dd48232e6e9ff2187bf_t_string_memory_ptr_t_stringliteral_6f010af653ebe3cb07d297a4ef13366103d392ceffa68dd48232e6e9ff2187bf_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value2, value1, value0) -> end\n    {\n        let length := mload(value0)\n        copy_memory_to_memory_with_cleanup(add(value0, 0x20), pos, length)\n        let end_1 := add(pos, length)\n        let _1 := \".\"\n        mstore(end_1, _1)\n        let length_1 := mload(value1)\n        copy_memory_to_memory_with_cleanup(add(value1, 0x20), add(end_1, 1), length_1)\n        let _2 := add(end_1, length_1)\n        mstore(add(_2, 1), _1)\n        let length_2 := mload(value2)\n        copy_memory_to_memory_with_cleanup(add(value2, 0x20), add(_2, 2), length_2)\n        end := add(add(_2, length_2), 2)\n    }\n    function abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 46)\n        mstore(add(headStart, 64), \"Initializable: contract is alrea\")\n        mstore(add(headStart, 96), \"dy initialized\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xff))\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n    function access_calldata_tail_t_struct$_Attestation_$45_calldata_ptr(base_ref, ptr_to_tail) -> addr\n    {\n        let rel_offset_of_tail := calldataload(ptr_to_tail)\n        if iszero(slt(rel_offset_of_tail, add(sub(calldatasize(), base_ref), not(318)))) { revert(0, 0) }\n        addr := add(base_ref, rel_offset_of_tail)\n    }\n    function abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"Ownable: new owner is the zero a\")\n        mstore(add(headStart, 96), \"ddress\")\n        tail := add(headStart, 128)\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function panic_error_0x12()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x12)\n        revert(0, 0x24)\n    }\n    function abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 32)\n        mstore(add(headStart, 64), \"Ownable: caller is not the owner\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 43)\n        mstore(add(headStart, 64), \"Initializable: contract is not i\")\n        mstore(add(headStart, 96), \"nitializing\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function allocate_memory() -> memPtr\n    {\n        memPtr := mload(64)\n        let newFreePtr := add(memPtr, 0x0140)\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n    function abi_decode_uint64_fromMemory(offset) -> value\n    {\n        value := mload(offset)\n        if iszero(eq(value, and(value, 0xffffffffffffffff))) { revert(0, 0) }\n    }\n    function abi_decode_address_fromMemory(offset) -> value\n    {\n        value := mload(offset)\n        validator_revert_address(value)\n    }\n    function abi_decode_bool_fromMemory(offset) -> value\n    {\n        value := mload(offset)\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n    }\n    function abi_decode_bytes_fromMemory(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        let _1 := mload(offset)\n        let _2 := 0xffffffffffffffff\n        if gt(_1, _2) { panic_error_0x41() }\n        let _3 := not(31)\n        let memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(and(add(_1, 0x1f), _3), 63), _3))\n        if or(gt(newFreePtr, _2), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n        mstore(memPtr, _1)\n        if gt(add(add(offset, _1), 0x20), end) { revert(0, 0) }\n        copy_memory_to_memory_with_cleanup(add(offset, 0x20), add(memPtr, 0x20), _1)\n        array := memPtr\n    }\n    function abi_decode_tuple_t_struct$_Attestation_$45_memory_ptr_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let offset := mload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let _2 := add(headStart, offset)\n        if slt(sub(dataEnd, _2), 0x0140) { revert(0, 0) }\n        let value := allocate_memory()\n        mstore(value, mload(_2))\n        mstore(add(value, 32), mload(add(_2, 32)))\n        mstore(add(value, 64), abi_decode_uint64_fromMemory(add(_2, 64)))\n        mstore(add(value, 96), abi_decode_uint64_fromMemory(add(_2, 96)))\n        mstore(add(value, 128), abi_decode_uint64_fromMemory(add(_2, 128)))\n        mstore(add(value, 160), mload(add(_2, 160)))\n        mstore(add(value, 192), abi_decode_address_fromMemory(add(_2, 192)))\n        mstore(add(value, 224), abi_decode_address_fromMemory(add(_2, 224)))\n        let _3 := 256\n        mstore(add(value, _3), abi_decode_bool_fromMemory(add(_2, _3)))\n        let _4 := 288\n        let offset_1 := mload(add(_2, _4))\n        if gt(offset_1, _1) { revert(0, 0) }\n        mstore(add(value, _4), abi_decode_bytes_fromMemory(add(_2, offset_1), dataEnd))\n        value0 := value\n    }\n    function abi_encode_tuple_t_stringliteral_f304c73ad664b98fadff16b5d10bf8a01088a1758e54be0253cb4027e74e7f2a__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 31)\n        mstore(add(headStart, 64), \"Referred attestation not valid.\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_c266efca4f4ed37612271196433531dcbb4fca89a694d568d1e290e32feb1682__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 9)\n        mstore(add(headStart, 64), \"Not owner\")\n        tail := add(headStart, 96)\n    }\n}","id":29,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{"398":[{"length":32,"start":519}],"400":[{"length":32,"start":560}],"402":[{"length":32,"start":601}],"536":[{"length":32,"start":2006},{"length":32,"start":2158}]},"linkReferences":{},"object":"","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0xB5 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x91DB0B7E GT PUSH2 0x69 JUMPI DUP1 PUSH4 0xE49617E1 GT PUSH2 0x4E JUMPI DUP1 PUSH4 0xE49617E1 EQ PUSH2 0x1BA JUMPI DUP1 PUSH4 0xE60C3505 EQ PUSH2 0x1CD JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x1E0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x91DB0B7E EQ PUSH2 0x193 JUMPI DUP1 PUSH4 0xCE46E046 EQ PUSH2 0x1A6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x8129FC1C GT PUSH2 0x9A JUMPI DUP1 PUSH4 0x8129FC1C EQ PUSH2 0x133 JUMPI DUP1 PUSH4 0x88E5B2D9 EQ PUSH2 0x148 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x16B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x54FD4D50 EQ PUSH2 0xF3 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x11E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLDATASIZE PUSH2 0xEE JUMPI PUSH1 0x40 MLOAD PUSH32 0x1574F9F300000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST STOP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xFF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x108 PUSH2 0x200 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x115 SWAP2 SWAP1 PUSH2 0xB8A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x12A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xEC PUSH2 0x2A3 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x13F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xEC PUSH2 0x2B7 JUMP JUMPDEST PUSH2 0x15B PUSH2 0x156 CALLDATASIZE PUSH1 0x4 PUSH2 0xC09 JUMP JUMPDEST PUSH2 0x3FB JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x115 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x177 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x33 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x115 JUMP JUMPDEST PUSH2 0x15B PUSH2 0x1A1 CALLDATASIZE PUSH1 0x4 PUSH2 0xC09 JUMP JUMPDEST PUSH2 0x4AA JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1B2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x0 PUSH2 0x15B JUMP JUMPDEST PUSH2 0x15B PUSH2 0x1C8 CALLDATASIZE PUSH1 0x4 PUSH2 0xC75 JUMP JUMPDEST PUSH2 0x549 JUMP JUMPDEST PUSH2 0x15B PUSH2 0x1DB CALLDATASIZE PUSH1 0x4 PUSH2 0xC75 JUMP JUMPDEST PUSH2 0x55E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1EC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xEC PUSH2 0x1FB CALLDATASIZE PUSH1 0x4 PUSH2 0xCCD JUMP JUMPDEST PUSH2 0x572 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x22B PUSH32 0x0 PUSH2 0x5FF JUMP JUMPDEST PUSH2 0x254 PUSH32 0x0 PUSH2 0x5FF JUMP JUMPDEST PUSH2 0x27D PUSH32 0x0 PUSH2 0x5FF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x28F SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xCEA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x2AB PUSH2 0x69F JUMP JUMPDEST PUSH2 0x2B5 PUSH1 0x0 PUSH2 0x6F9 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND ISZERO DUP1 DUP1 ISZERO PUSH2 0x2D7 JUMPI POP PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0xFF SWAP1 SWAP2 AND LT JUMPDEST DUP1 PUSH2 0x2F1 JUMPI POP ADDRESS EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2F1 JUMPI POP PUSH1 0x0 SLOAD PUSH1 0xFF AND PUSH1 0x1 EQ JUMPDEST PUSH2 0x368 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E747261637420697320616C726561 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x647920696E697469616C697A6564000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE DUP1 ISZERO PUSH2 0x38B JUMPI PUSH1 0x0 DUP1 SLOAD PUSH2 0xFF00 NOT AND PUSH2 0x100 OR SWAP1 SSTORE JUMPDEST PUSH1 0x65 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND CALLER OR SWAP1 SSTORE PUSH2 0x3B2 PUSH2 0x758 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x3F8 JUMPI PUSH1 0x0 DUP1 SLOAD PUSH2 0xFF00 NOT AND SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH1 0x1 DUP2 MSTORE PUSH32 0x7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x405 PUSH2 0x7CB JUMP JUMPDEST DUP4 CALLVALUE PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x49A JUMPI PUSH1 0x0 DUP7 DUP7 DUP4 DUP2 DUP2 LT PUSH2 0x426 JUMPI PUSH2 0x426 PUSH2 0xD60 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD SWAP1 POP DUP3 DUP2 GT ISZERO PUSH2 0x450 JUMPI PUSH1 0x40 MLOAD PUSH4 0x44044A5 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x47D DUP10 DUP10 DUP5 DUP2 DUP2 LT PUSH2 0x465 JUMPI PUSH2 0x465 PUSH2 0xD60 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0x477 SWAP2 SWAP1 PUSH2 0xD76 JUMP JUMPDEST POP PUSH1 0x1 SWAP1 JUMP JUMPDEST PUSH2 0x48E JUMPI PUSH1 0x0 SWAP5 POP POP POP POP POP PUSH2 0x4A2 JUMP JUMPDEST SWAP1 SWAP2 SUB SWAP1 PUSH1 0x1 ADD PUSH2 0x40A JUMP JUMPDEST POP PUSH1 0x1 SWAP3 POP POP POP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4B4 PUSH2 0x7CB JUMP JUMPDEST DUP4 CALLVALUE PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x49A JUMPI PUSH1 0x0 DUP7 DUP7 DUP4 DUP2 DUP2 LT PUSH2 0x4D5 JUMPI PUSH2 0x4D5 PUSH2 0xD60 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD SWAP1 POP DUP3 DUP2 GT ISZERO PUSH2 0x4FF JUMPI PUSH1 0x40 MLOAD PUSH4 0x44044A5 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x52C DUP10 DUP10 DUP5 DUP2 DUP2 LT PUSH2 0x514 JUMPI PUSH2 0x514 PUSH2 0xD60 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0x526 SWAP2 SWAP1 PUSH2 0xD76 JUMP JUMPDEST DUP3 PUSH2 0x82D JUMP JUMPDEST PUSH2 0x53D JUMPI PUSH1 0x0 SWAP5 POP POP POP POP POP PUSH2 0x4A2 JUMP JUMPDEST SWAP1 SWAP2 SUB SWAP1 PUSH1 0x1 ADD PUSH2 0x4B9 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x553 PUSH2 0x7CB JUMP JUMPDEST PUSH1 0x1 JUMPDEST SWAP1 POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x568 PUSH2 0x7CB JUMP JUMPDEST PUSH2 0x556 DUP3 CALLVALUE PUSH2 0x82D JUMP JUMPDEST PUSH2 0x57A PUSH2 0x69F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x5F6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6464726573730000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x35F JUMP JUMPDEST PUSH2 0x3F8 DUP2 PUSH2 0x6F9 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x60C DUP4 PUSH2 0xA0F JUMP JUMPDEST PUSH1 0x1 ADD SWAP1 POP PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x62C JUMPI PUSH2 0x62C PUSH2 0xD97 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x656 JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP DUP2 DUP2 ADD PUSH1 0x20 ADD JUMPDEST PUSH1 0x0 NOT ADD PUSH32 0x3031323334353637383961626364656600000000000000000000000000000000 PUSH1 0xA DUP7 MOD BYTE DUP2 MSTORE8 PUSH1 0xA DUP6 DIV SWAP5 POP DUP5 PUSH2 0x660 JUMPI POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x33 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x2B5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x35F JUMP JUMPDEST PUSH1 0x33 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 MLOAD SWAP2 AND SWAP2 SWAP1 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x7C3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E7472616374206973206E6F742069 PUSH1 0x44 DUP3 ADD MSTORE PUSH11 0x6E697469616C697A696E67 PUSH1 0xA8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x35F JUMP JUMPDEST PUSH2 0x2B5 PUSH2 0xAF2 JUMP JUMPDEST CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND EQ PUSH2 0x2B5 JUMPI PUSH1 0x40 MLOAD PUSH32 0x4CA8886700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0xA0 DUP4 ADD CALLDATALOAD ISZERO PUSH2 0xA06 JUMPI PUSH1 0x40 MLOAD PUSH32 0xA3112A6400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0xA0 DUP5 ADD CALLDATALOAD PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x0 SWAP1 PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0xA3112A64 SWAP1 PUSH1 0x24 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x8BD JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x8E5 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0xE92 JUMP JUMPDEST DUP1 MLOAD SWAP1 SWAP2 POP PUSH2 0x936 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5265666572726564206174746573746174696F6E206E6F742076616C69642E00 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x35F JUMP JUMPDEST PUSH2 0x947 PUSH2 0x100 DUP6 ADD PUSH1 0xE0 DUP7 ADD PUSH2 0xCCD JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0xE0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ DUP1 PUSH2 0x98F JUMPI POP PUSH2 0x976 PUSH2 0x100 DUP6 ADD PUSH1 0xE0 DUP7 ADD PUSH2 0xCCD JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0xC0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ JUMPDEST DUP1 PUSH2 0x9B8 JUMPI POP PUSH2 0x9A6 PUSH2 0x100 DUP6 ADD PUSH1 0xE0 DUP7 ADD PUSH2 0xCCD JUMP JUMPDEST PUSH1 0x65 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND SWAP2 AND EQ JUMPDEST PUSH2 0xA04 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x9 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E6F74206F776E65720000000000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x35F JUMP JUMPDEST POP JUMPDEST POP PUSH1 0x1 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP4 LT PUSH2 0xA58 JUMPI PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP4 DIV SWAP3 POP PUSH1 0x40 ADD JUMPDEST PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 LT PUSH2 0xA84 JUMPI PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 DIV SWAP3 POP PUSH1 0x20 ADD JUMPDEST PUSH7 0x2386F26FC10000 DUP4 LT PUSH2 0xAA2 JUMPI PUSH7 0x2386F26FC10000 DUP4 DIV SWAP3 POP PUSH1 0x10 ADD JUMPDEST PUSH4 0x5F5E100 DUP4 LT PUSH2 0xABA JUMPI PUSH4 0x5F5E100 DUP4 DIV SWAP3 POP PUSH1 0x8 ADD JUMPDEST PUSH2 0x2710 DUP4 LT PUSH2 0xACE JUMPI PUSH2 0x2710 DUP4 DIV SWAP3 POP PUSH1 0x4 ADD JUMPDEST PUSH1 0x64 DUP4 LT PUSH2 0xAE0 JUMPI PUSH1 0x64 DUP4 DIV SWAP3 POP PUSH1 0x2 ADD JUMPDEST PUSH1 0xA DUP4 LT PUSH2 0xAEC JUMPI PUSH1 0x1 ADD JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0xB5D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E7472616374206973206E6F742069 PUSH1 0x44 DUP3 ADD MSTORE PUSH11 0x6E697469616C697A696E67 PUSH1 0xA8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x35F JUMP JUMPDEST PUSH2 0x2B5 CALLER PUSH2 0x6F9 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xB81 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0xB69 JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0xBA9 DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0xB66 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0xBCF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xBE7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP6 ADD ADD GT ISZERO PUSH2 0xC02 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x40 DUP6 DUP8 SUB SLT ISZERO PUSH2 0xC1F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0xC37 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xC43 DUP9 DUP4 DUP10 ADD PUSH2 0xBBD JUMP JUMPDEST SWAP1 SWAP7 POP SWAP5 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0xC5C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xC69 DUP8 DUP3 DUP9 ADD PUSH2 0xBBD JUMP JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP SWAP6 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xC87 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xC9E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD PUSH2 0x140 DUP2 DUP6 SUB SLT ISZERO PUSH2 0xCB1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x3F8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xCDF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0xCB1 DUP2 PUSH2 0xCB8 JUMP JUMPDEST PUSH1 0x0 DUP5 MLOAD PUSH2 0xCFC DUP2 DUP5 PUSH1 0x20 DUP10 ADD PUSH2 0xB66 JUMP JUMPDEST DUP1 DUP4 ADD SWAP1 POP PUSH32 0x2E00000000000000000000000000000000000000000000000000000000000000 DUP1 DUP3 MSTORE DUP6 MLOAD PUSH2 0xD38 DUP2 PUSH1 0x1 DUP6 ADD PUSH1 0x20 DUP11 ADD PUSH2 0xB66 JUMP JUMPDEST PUSH1 0x1 SWAP3 ADD SWAP2 DUP3 ADD MSTORE DUP4 MLOAD PUSH2 0xD53 DUP2 PUSH1 0x2 DUP5 ADD PUSH1 0x20 DUP9 ADD PUSH2 0xB66 JUMP JUMPDEST ADD PUSH1 0x2 ADD SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 CALLDATALOAD PUSH2 0x13E NOT DUP4 CALLDATASIZE SUB ADD DUP2 SLT PUSH2 0xD8D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x140 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0xDD1 JUMPI PUSH2 0xDD1 PUSH2 0xD97 JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP1 JUMP JUMPDEST DUP1 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x559 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 MLOAD PUSH2 0x559 DUP2 PUSH2 0xCB8 JUMP JUMPDEST DUP1 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x559 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xE1B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0xE36 JUMPI PUSH2 0xE36 PUSH2 0xD97 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP4 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP3 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH2 0xE5E JUMPI PUSH2 0xE5E PUSH2 0xD97 JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP4 DUP2 MSTORE DUP7 PUSH1 0x20 DUP6 DUP9 ADD ADD GT ISZERO PUSH2 0xE77 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xE88 DUP5 PUSH1 0x20 DUP4 ADD PUSH1 0x20 DUP10 ADD PUSH2 0xB66 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xEA4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0xEBC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 DUP4 ADD SWAP1 PUSH2 0x140 DUP3 DUP7 SUB SLT ISZERO PUSH2 0xED1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xED9 PUSH2 0xDAD JUMP JUMPDEST DUP3 MLOAD DUP2 MSTORE PUSH1 0x20 DUP4 ADD MLOAD PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0xEF3 PUSH1 0x40 DUP5 ADD PUSH2 0xDD7 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE PUSH2 0xF04 PUSH1 0x60 DUP5 ADD PUSH2 0xDD7 JUMP JUMPDEST PUSH1 0x60 DUP3 ADD MSTORE PUSH2 0xF15 PUSH1 0x80 DUP5 ADD PUSH2 0xDD7 JUMP JUMPDEST PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xA0 DUP4 ADD MLOAD PUSH1 0xA0 DUP3 ADD MSTORE PUSH2 0xF30 PUSH1 0xC0 DUP5 ADD PUSH2 0xDEF JUMP JUMPDEST PUSH1 0xC0 DUP3 ADD MSTORE PUSH2 0xF41 PUSH1 0xE0 DUP5 ADD PUSH2 0xDEF JUMP JUMPDEST PUSH1 0xE0 DUP3 ADD MSTORE PUSH2 0x100 PUSH2 0xF54 DUP2 DUP6 ADD PUSH2 0xDFA JUMP JUMPDEST SWAP1 DUP3 ADD MSTORE PUSH2 0x120 DUP4 DUP2 ADD MLOAD DUP4 DUP2 GT ISZERO PUSH2 0xF6C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xF78 DUP9 DUP3 DUP8 ADD PUSH2 0xE0A JUMP JUMPDEST SWAP2 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE POP SWAP6 SWAP5 POP POP POP POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH7 0x2F3FB7BE6F33C6 0xED 0x4C 0xB8 0xAF 0xB4 ADDRESS 0xD2 JUMPDEST EQ CALLDATALOAD DUP1 DUP5 0xCB 0x4A 0x4F EXTCODECOPY 0xA7 MUL 0x2F 0xE PUSH12 0x50A5A064736F6C6343000813 STOP CALLER ","sourceMap":"504:1141:28:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1211:12:5;;;;;;;;;;;;;;1172:62;504:1141:28;;;;;867:234:3;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2064:101:6;;;;;;;;;;;;;:::i;758:103:28:-;;;;;;;;;;;;;:::i;3130:1369:5:-;;;;;;:::i;:::-;;:::i;:::-;;;2074:14:29;;2067:22;2049:41;;2037:2;2022:18;3130:1369:5;1909:187:29;1441:85:6;;;;;;;;;;-1:-1:-1;1513:6:6;;1441:85;;-1:-1:-1;;;;;1513:6:6;;;2247:74:29;;2235:2;2220:18;1441:85:6;2101:226:29;1500:1370:5;;;;;;:::i;:::-;;:::i;994:85::-;;;;;;;;;;-1:-1:-1;1044:4:5;994:85;;2927:146;;;;;;:::i;:::-;;:::i;1297:::-;;;;;;:::i;:::-;;:::i;2314:198:6:-;;;;;;;;;;-1:-1:-1;2314:198:6;;;;;:::i;:::-;;:::i;867:234:3:-;909:13;994:24;1011:6;994:16;:24::i;:::-;1025;1042:6;1025:16;:24::i;:::-;1056:23;1073:5;1056:16;:23::i;:::-;977:103;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;934:160;;867:234;:::o;2064:101:6:-;1334:13;:11;:13::i;:::-;2128:30:::1;2155:1;2128:18;:30::i;:::-;2064:101::o:0;758:103:28:-;3279:19:8;3302:13;;;;;;3301:14;;3347:34;;;;-1:-1:-1;3365:12:8;;3380:1;3365:12;;;;:16;3347:34;3346:108;;;-1:-1:-1;3426:4:8;1713:19:9;:23;;;3387:66:8;;-1:-1:-1;3436:12:8;;;;;:17;3387:66;3325:201;;;;-1:-1:-1;;;3325:201:8;;4343:2:29;3325:201:8;;;4325:21:29;4382:2;4362:18;;;4355:30;4421:34;4401:18;;;4394:62;4492:16;4472:18;;;4465:44;4526:19;;3325:201:8;;;;;;;;;3536:12;:16;;-1:-1:-1;;3536:16:8;3551:1;3536:16;;;3562:65;;;;3596:13;:20;;-1:-1:-1;;3596:20:8;;;;;3562:65;809:6:28::1;:19:::0;;-1:-1:-1;;809:19:28::1;818:10;809:19;::::0;;838:16:::1;:14;:16::i;:::-;3651:14:8::0;3647:99;;;3697:5;3681:21;;-1:-1:-1;;3681:21:8;;;3721:14;;-1:-1:-1;4708:36:29;;3721:14:8;;4696:2:29;4681:18;3721:14:8;;;;;;;3647:99;3269:483;758:103:28:o;3130:1369:5:-;3271:4;908:10;:8;:10::i;:::-;3304:12;3756:9:::1;3287:14;3776:695;3800:6;3796:1;:10;3776:695;;;3933:13;3949:6;;3956:1;3949:9;;;;;;;:::i;:::-;;;;;;;3933:25;;3984:14;3976:5;:22;3972:87;;;4025:19;;-1:-1:-1::0;;;4025:19:5::1;;;;;;;;;;;3972:87;4181:32;4190:12;;4203:1;4190:15;;;;;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;-1:-1:-1::0;1632:4:28;;1480:163;4181:32:5::1;4176:84;;4240:5;4233:12;;;;;;;;4176:84;4423:23:::0;;::::1;::::0;1483:1:0;1479:5;3776:695:5::1;;;;4488:4;4481:11;;;;929:1;3130:1369:::0;;;;;;:::o;1500:1370::-;1641:4;908:10;:8;:10::i;:::-;1674:12;2126:9:::1;1657:14;2146:696;2170:6;2166:1;:10;2146:696;;;2303:13;2319:6;;2326:1;2319:9;;;;;;;:::i;:::-;;;;;;;2303:25;;2354:14;2346:5;:22;2342:87;;;2395:19;;-1:-1:-1::0;;;2395:19:5::1;;;;;;;;;;;2342:87;2552:32;2561:12;;2574:1;2561:15;;;;;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;2578:5;2552:8;:32::i;:::-;2547:84;;2611:5;2604:12;;;;;;;;2547:84;2794:23:::0;;::::1;::::0;1483:1:0;1479:5;2146:696:5::1;;2927:146:::0;3011:4;908:10;:8;:10::i;:::-;1632:4:28;3034:32:5::1;3027:39;;929:1;2927:146:::0;;;:::o;1297:::-;1381:4;908:10;:8;:10::i;:::-;1404:32:::1;1413:11;1426:9;1404:8;:32::i;2314:198:6:-:0;1334:13;:11;:13::i;:::-;-1:-1:-1;;;;;2402:22:6;::::1;2394:73;;;::::0;-1:-1:-1;;;2394:73:6;;5478:2:29;2394:73:6::1;::::0;::::1;5460:21:29::0;5517:2;5497:18;;;5490:30;5556:34;5536:18;;;5529:62;5627:8;5607:18;;;5600:36;5653:19;;2394:73:6::1;5276:402:29::0;2394:73:6::1;2477:28;2496:8;2477:18;:28::i;447:696:19:-:0;503:13;552:14;569:17;580:5;569:10;:17::i;:::-;589:1;569:21;552:38;;604:20;638:6;627:18;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;627:18:19;-1:-1:-1;604:41:19;-1:-1:-1;765:28:19;;;781:2;765:28;820:280;-1:-1:-1;;851:5:19;990:8;985:2;974:14;;969:30;851:5;956:44;1044:2;1035:11;;;-1:-1:-1;1064:21:19;820:280;1064:21;-1:-1:-1;1120:6:19;447:696;-1:-1:-1;;;447:696:19:o;1599:130:6:-;1513:6;;-1:-1:-1;;;;;1513:6:6;929:10:10;1662:23:6;1654:68;;;;-1:-1:-1;;;1654:68:6;;6263:2:29;1654:68:6;;;6245:21:29;;;6282:18;;;6275:30;6341:34;6321:18;;;6314:62;6393:18;;1654:68:6;6061:356:29;2666:187:6;2758:6;;;-1:-1:-1;;;;;2774:17:6;;;-1:-1:-1;;2774:17:6;;;;;;;2806:40;;2758:6;;;2774:17;2758:6;;2806:40;;2739:16;;2806:40;2729:124;2666:187;:::o;1003:95::-;5374:13:8;;;;;;;5366:69;;;;-1:-1:-1;;;5366:69:8;;6624:2:29;5366:69:8;;;6606:21:29;6663:2;6643:18;;;6636:30;6702:34;6682:18;;;6675:62;-1:-1:-1;;;6753:18:29;;;6746:41;6804:19;;5366:69:8;6422:407:29;5366:69:8;1065:26:6::1;:24;:26::i;5977:128:5:-:0;6024:10;-1:-1:-1;;;;;6046:4:5;6024:27;;6020:79;;6074:14;;;;;;;;;;;;;;867:607:28;992:4;1012:18;;;;:32;1008:439;;1085:39;;;;;1105:18;;;;1085:39;;;6980:25:29;1060:22:28;;1085:4;-1:-1:-1;;;;;1085:19:28;;;;6953:18:29;;1085:39:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1085:39:28;;;;;;;;;;;;:::i;:::-;1146:7;;1060:64;;-1:-1:-1;1138:65:28;;;;-1:-1:-1;;;1138:65:28;;9937:2:29;1138:65:28;;;9919:21:29;9976:2;9956:18;;;9949:30;10015:33;9995:18;;;9988:61;10066:18;;1138:65:28;9735:355:29;1138:65:28;1258:20;;;;;;;;:::i;:::-;-1:-1:-1;;;;;1242:36:28;:3;:12;;;-1:-1:-1;;;;;1242:36:28;;:97;;;-1:-1:-1;1319:20:28;;;;;;;;:::i;:::-;-1:-1:-1;;;;;1302:37:28;:3;:13;;;-1:-1:-1;;;;;1302:37:28;;1242:97;:151;;;-1:-1:-1;1373:20:28;;;;;;;;:::i;:::-;1363:6;;-1:-1:-1;;;;;1363:6:28;;;:30;;;1242:151;1217:219;;;;-1:-1:-1;;;1217:219:28;;10297:2:29;1217:219:28;;;10279:21:29;10336:1;10316:18;;;10309:29;10374:11;10354:18;;;10347:39;10403:18;;1217:219:28;10095:332:29;1217:219:28;1046:401;1008:439;-1:-1:-1;1463:4:28;867:607;;;;:::o;10139:916:22:-;10192:7;;10276:8;10267:17;;10263:103;;10313:8;10304:17;;;-1:-1:-1;10349:2:22;10339:12;10263:103;10392:8;10383:5;:17;10379:103;;10429:8;10420:17;;;-1:-1:-1;10465:2:22;10455:12;10379:103;10508:8;10499:5;:17;10495:103;;10545:8;10536:17;;;-1:-1:-1;10581:2:22;10571:12;10495:103;10624:7;10615:5;:16;10611:100;;10660:7;10651:16;;;-1:-1:-1;10695:1:22;10685:11;10611:100;10737:7;10728:5;:16;10724:100;;10773:7;10764:16;;;-1:-1:-1;10808:1:22;10798:11;10724:100;10850:7;10841:5;:16;10837:100;;10886:7;10877:16;;;-1:-1:-1;10921:1:22;10911:11;10837:100;10963:7;10954:5;:16;10950:66;;11000:1;10990:11;10950:66;11042:6;10139:916;-1:-1:-1;;10139:916:22:o;1104:111:6:-;5374:13:8;;;;;;;5366:69;;;;-1:-1:-1;;;5366:69:8;;6624:2:29;5366:69:8;;;6606:21:29;6663:2;6643:18;;;6636:30;6702:34;6682:18;;;6675:62;-1:-1:-1;;;6753:18:29;;;6746:41;6804:19;;5366:69:8;6422:407:29;5366:69:8;1176:32:6::1;929:10:10::0;1176:18:6::1;:32::i;14:250:29:-:0;99:1;109:113;123:6;120:1;117:13;109:113;;;199:11;;;193:18;180:11;;;173:39;145:2;138:10;109:113;;;-1:-1:-1;;256:1:29;238:16;;231:27;14:250::o;269:396::-;418:2;407:9;400:21;381:4;450:6;444:13;493:6;488:2;477:9;473:18;466:34;509:79;581:6;576:2;565:9;561:18;556:2;548:6;544:15;509:79;:::i;:::-;649:2;628:15;-1:-1:-1;;624:29:29;609:45;;;;656:2;605:54;;269:396;-1:-1:-1;;269:396:29:o;670:387::-;753:8;763:6;817:3;810:4;802:6;798:17;794:27;784:55;;835:1;832;825:12;784:55;-1:-1:-1;858:20:29;;901:18;890:30;;887:50;;;933:1;930;923:12;887:50;970:4;962:6;958:17;946:29;;1030:3;1023:4;1013:6;1010:1;1006:14;998:6;994:27;990:38;987:47;984:67;;;1047:1;1044;1037:12;984:67;670:387;;;;;:::o;1062:842::-;1213:6;1221;1229;1237;1290:2;1278:9;1269:7;1265:23;1261:32;1258:52;;;1306:1;1303;1296:12;1258:52;1346:9;1333:23;1375:18;1416:2;1408:6;1405:14;1402:34;;;1432:1;1429;1422:12;1402:34;1471:90;1553:7;1544:6;1533:9;1529:22;1471:90;:::i;:::-;1580:8;;-1:-1:-1;1445:116:29;-1:-1:-1;1668:2:29;1653:18;;1640:32;;-1:-1:-1;1684:16:29;;;1681:36;;;1713:1;1710;1703:12;1681:36;;1752:92;1836:7;1825:8;1814:9;1810:24;1752:92;:::i;:::-;1062:842;;;;-1:-1:-1;1863:8:29;-1:-1:-1;;;;1062:842:29:o;2332:389::-;2420:6;2473:2;2461:9;2452:7;2448:23;2444:32;2441:52;;;2489:1;2486;2479:12;2441:52;2529:9;2516:23;2562:18;2554:6;2551:30;2548:50;;;2594:1;2591;2584:12;2548:50;2617:22;;2673:3;2655:16;;;2651:26;2648:46;;;2690:1;2687;2680:12;2648:46;2713:2;2332:389;-1:-1:-1;;;2332:389:29:o;2726:154::-;-1:-1:-1;;;;;2805:5:29;2801:54;2794:5;2791:65;2781:93;;2870:1;2867;2860:12;2885:247;2944:6;2997:2;2985:9;2976:7;2972:23;2968:32;2965:52;;;3013:1;3010;3003:12;2965:52;3052:9;3039:23;3071:31;3096:5;3071:31;:::i;3137:999::-;3566:3;3604:6;3598:13;3620:66;3679:6;3674:3;3667:4;3659:6;3655:17;3620:66;:::i;:::-;3717:6;3712:3;3708:16;3695:29;;3743:3;3769:2;3762:5;3755:17;3803:6;3797:13;3819:78;3888:8;3884:1;3877:5;3873:13;3866:4;3858:6;3854:17;3819:78;:::i;:::-;3960:1;3916:20;;3952:10;;;3945:22;3992:13;;4014:75;3992:13;4076:1;4068:10;;4061:4;4049:17;;4014:75;:::i;:::-;4109:17;4128:1;4105:25;;3137:999;-1:-1:-1;;;;;3137:999:29:o;4755:184::-;-1:-1:-1;;;4804:1:29;4797:88;4904:4;4901:1;4894:15;4928:4;4925:1;4918:15;4944:327;5039:4;5097:11;5084:25;5191:3;5187:8;5176;5160:14;5156:29;5152:44;5132:18;5128:69;5118:97;;5211:1;5208;5201:12;5118:97;5232:33;;;;;4944:327;-1:-1:-1;;4944:327:29:o;5683:184::-;-1:-1:-1;;;5732:1:29;5725:88;5832:4;5829:1;5822:15;5856:4;5853:1;5846:15;7016:250;7083:2;7077:9;7125:6;7113:19;;7162:18;7147:34;;7183:22;;;7144:62;7141:88;;;7209:18;;:::i;:::-;7245:2;7238:22;7016:250;:::o;7271:175::-;7349:13;;7402:18;7391:30;;7381:41;;7371:69;;7436:1;7433;7426:12;7451:138;7530:13;;7552:31;7530:13;7552:31;:::i;7594:164::-;7670:13;;7719;;7712:21;7702:32;;7692:60;;7748:1;7745;7738:12;7763:698;7816:5;7869:3;7862:4;7854:6;7850:17;7846:27;7836:55;;7887:1;7884;7877:12;7836:55;7916:6;7910:13;7942:18;7979:2;7975;7972:10;7969:36;;;7985:18;;:::i;:::-;8060:2;8054:9;8028:2;8114:13;;-1:-1:-1;;8110:22:29;;;8134:2;8106:31;8102:40;8090:53;;;8158:18;;;8178:22;;;8155:46;8152:72;;;8204:18;;:::i;:::-;8244:10;8240:2;8233:22;8279:2;8271:6;8264:18;8325:3;8318:4;8313:2;8305:6;8301:15;8297:26;8294:35;8291:55;;;8342:1;8339;8332:12;8291:55;8355:76;8428:2;8421:4;8413:6;8409:17;8402:4;8394:6;8390:17;8355:76;:::i;:::-;8449:6;7763:698;-1:-1:-1;;;;;;7763:698:29:o;8466:1264::-;8563:6;8616:2;8604:9;8595:7;8591:23;8587:32;8584:52;;;8632:1;8629;8622:12;8584:52;8665:9;8659:16;8694:18;8735:2;8727:6;8724:14;8721:34;;;8751:1;8748;8741:12;8721:34;8774:22;;;;8830:6;8812:16;;;8808:29;8805:49;;;8850:1;8847;8840:12;8805:49;8876:17;;:::i;:::-;8922:2;8916:9;8909:5;8902:24;8972:2;8968;8964:11;8958:18;8953:2;8946:5;8942:14;8935:42;9009:41;9046:2;9042;9038:11;9009:41;:::i;:::-;9004:2;8997:5;8993:14;8986:65;9083:41;9120:2;9116;9112:11;9083:41;:::i;:::-;9078:2;9071:5;9067:14;9060:65;9158:42;9195:3;9191:2;9187:12;9158:42;:::i;:::-;9152:3;9145:5;9141:15;9134:67;9248:3;9244:2;9240:12;9234:19;9228:3;9221:5;9217:15;9210:44;9287:43;9325:3;9321:2;9317:12;9287:43;:::i;:::-;9281:3;9274:5;9270:15;9263:68;9364:43;9402:3;9398:2;9394:12;9364:43;:::i;:::-;9358:3;9351:5;9347:15;9340:68;9427:3;9462:39;9497:2;9493;9489:11;9462:39;:::i;:::-;9446:14;;;9439:63;9521:3;9555:11;;;9549:18;9579:16;;;9576:36;;;9608:1;9605;9598:12;9576:36;9644:55;9691:7;9680:8;9676:2;9672:17;9644:55;:::i;:::-;9628:14;;;9621:79;;;;-1:-1:-1;9632:5:29;8466:1264;-1:-1:-1;;;;;8466:1264:29:o"},"gasEstimates":{"creation":{"codeDepositCost":"806200","executionCost":"infinite","totalCost":"infinite"},"external":{"attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))":"infinite","initialize()":"infinite","isPayable()":"243","multiAttest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])":"infinite","multiRevoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])":"infinite","owner()":"2368","renounceOwnership()":"infinite","revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))":"infinite","transferOwnership(address)":"infinite","version()":"infinite"},"internal":{"onAttest(struct Attestation calldata,uint256)":"infinite","onRevoke(struct Attestation calldata,uint256)":"infinite"}},"methodIdentifiers":{"attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))":"e60c3505","initialize()":"8129fc1c","isPayable()":"ce46e046","multiAttest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])":"91db0b7e","multiRevoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])":"88e5b2d9","owner()":"8da5cb5b","renounceOwnership()":"715018a6","revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))":"e49617e1","transferOwnership(address)":"f2fde38b","version()":"54fd4d50"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IEAS\",\"name\":\"eas\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AccessDenied\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientValue\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidEAS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotPayable\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"uid\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"schema\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"time\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"expirationTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"revocationTime\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"refUID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"attester\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"revocable\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct Attestation\",\"name\":\"attestation\",\"type\":\"tuple\"}],\"name\":\"attest\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPayable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"uid\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"schema\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"time\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"expirationTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"revocationTime\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"refUID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"attester\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"revocable\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct Attestation[]\",\"name\":\"attestations\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"multiAttest\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"uid\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"schema\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"time\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"expirationTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"revocationTime\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"refUID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"attester\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"revocable\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct Attestation[]\",\"name\":\"attestations\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"multiRevoke\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"uid\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"schema\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"time\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"expirationTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"revocationTime\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"refUID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"attester\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"revocable\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct Attestation\",\"name\":\"attestation\",\"type\":\"tuple\"}],\"name\":\"revoke\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{\"attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))\":{\"details\":\"Processes an attestation and verifies whether it's valid.\",\"params\":{\"attestation\":\"The new attestation.\"},\"returns\":{\"_0\":\"Whether the attestation is valid.\"}},\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"isPayable()\":{\"details\":\"Returns whether the resolver supports ETH transfers.\"},\"multiAttest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])\":{\"details\":\"Processes multiple attestations and verifies whether they are valid.\",\"params\":{\"attestations\":\"The new attestations.\",\"values\":\"Explicit ETH amounts which were sent with each attestation.\"},\"returns\":{\"_0\":\"Whether all the attestations are valid.\"}},\"multiRevoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])\":{\"details\":\"Processes revocation of multiple attestation and verifies they can be revoked.\",\"params\":{\"attestations\":\"The existing attestations to be revoked.\",\"values\":\"Explicit ETH amounts which were sent with each revocation.\"},\"returns\":{\"_0\":\"Whether the attestations can be revoked.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))\":{\"details\":\"Processes an attestation revocation and verifies if it can be revoked.\",\"params\":{\"attestation\":\"The existing attestation to be revoked.\"},\"returns\":{\"_0\":\"Whether the attestation can be revoked.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"version()\":{\"returns\":{\"_0\":\"Semver contract version as a string.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"version()\":{\"notice\":\"Returns the full semver contract version.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ReferrerResolver.sol\":\"ReferrerResolver\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@ethereum-attestation-service/eas-contracts/contracts/Common.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// A representation of an empty/uninitialized UID.\\nbytes32 constant EMPTY_UID = 0;\\n\\n// A zero expiration represents an non-expiring attestation.\\nuint64 constant NO_EXPIRATION_TIME = 0;\\n\\nerror AccessDenied();\\nerror InvalidEAS();\\nerror InvalidLength();\\nerror InvalidSignature();\\nerror NotFound();\\n\\n/**\\n * @dev A struct representing EIP712 signature data.\\n */\\nstruct EIP712Signature {\\n    uint8 v; // The recovery ID.\\n    bytes32 r; // The x-coordinate of the nonce R.\\n    bytes32 s; // The signature data.\\n}\\n\\n/**\\n * @dev A struct representing a single attestation.\\n */\\nstruct Attestation {\\n    bytes32 uid; // A unique identifier of the attestation.\\n    bytes32 schema; // The unique identifier of the schema.\\n    uint64 time; // The time when the attestation was created (Unix timestamp).\\n    uint64 expirationTime; // The time when the attestation expires (Unix timestamp).\\n    uint64 revocationTime; // The time when the attestation was revoked (Unix timestamp).\\n    bytes32 refUID; // The UID of the related attestation.\\n    address recipient; // The recipient of the attestation.\\n    address attester; // The attester/sender of the attestation.\\n    bool revocable; // Whether the attestation is revocable.\\n    bytes data; // Custom attestation data.\\n}\\n\\n/**\\n * @dev A helper function to work with unchecked iterators in loops.\\n */\\nfunction uncheckedInc(uint256 i) pure returns (uint256 j) {\\n    unchecked {\\n        j = i + 1;\\n    }\\n}\\n\",\"keccak256\":\"0x4bab9ec76bdb009e9fb505c45a679d39c9e80771eb13ed901029a1068025752a\",\"license\":\"MIT\"},\"@ethereum-attestation-service/eas-contracts/contracts/IEAS.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { ISchemaRegistry } from \\\"./ISchemaRegistry.sol\\\";\\nimport { Attestation, EIP712Signature } from \\\"./Common.sol\\\";\\n\\n/**\\n * @dev A struct representing the arguments of the attestation request.\\n */\\nstruct AttestationRequestData {\\n    address recipient; // The recipient of the attestation.\\n    uint64 expirationTime; // The time when the attestation expires (Unix timestamp).\\n    bool revocable; // Whether the attestation is revocable.\\n    bytes32 refUID; // The UID of the related attestation.\\n    bytes data; // Custom attestation data.\\n    uint256 value; // An explicit ETH amount to send to the resolver. This is important to prevent accidental user errors.\\n}\\n\\n/**\\n * @dev A struct representing the full arguments of the attestation request.\\n */\\nstruct AttestationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    AttestationRequestData data; // The arguments of the attestation request.\\n}\\n\\n/**\\n * @dev A struct representing the full arguments of the full delegated attestation request.\\n */\\nstruct DelegatedAttestationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    AttestationRequestData data; // The arguments of the attestation request.\\n    EIP712Signature signature; // The EIP712 signature data.\\n    address attester; // The attesting account.\\n}\\n\\n/**\\n * @dev A struct representing the full arguments of the multi attestation request.\\n */\\nstruct MultiAttestationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    AttestationRequestData[] data; // The arguments of the attestation request.\\n}\\n\\n/**\\n * @dev A struct representing the full arguments of the delegated multi attestation request.\\n */\\nstruct MultiDelegatedAttestationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    AttestationRequestData[] data; // The arguments of the attestation requests.\\n    EIP712Signature[] signatures; // The EIP712 signatures data. Please note that the signatures are assumed to be signed with increasing nonces.\\n    address attester; // The attesting account.\\n}\\n\\n/**\\n * @dev A struct representing the arguments of the revocation request.\\n */\\nstruct RevocationRequestData {\\n    bytes32 uid; // The UID of the attestation to revoke.\\n    uint256 value; // An explicit ETH amount to send to the resolver. This is important to prevent accidental user errors.\\n}\\n\\n/**\\n * @dev A struct representing the full arguments of the revocation request.\\n */\\nstruct RevocationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    RevocationRequestData data; // The arguments of the revocation request.\\n}\\n\\n/**\\n * @dev A struct representing the arguments of the full delegated revocation request.\\n */\\nstruct DelegatedRevocationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    RevocationRequestData data; // The arguments of the revocation request.\\n    EIP712Signature signature; // The EIP712 signature data.\\n    address revoker; // The revoking account.\\n}\\n\\n/**\\n * @dev A struct representing the full arguments of the multi revocation request.\\n */\\nstruct MultiRevocationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    RevocationRequestData[] data; // The arguments of the revocation request.\\n}\\n\\n/**\\n * @dev A struct representing the full arguments of the delegated multi revocation request.\\n */\\nstruct MultiDelegatedRevocationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    RevocationRequestData[] data; // The arguments of the revocation requests.\\n    EIP712Signature[] signatures; // The EIP712 signatures data. Please note that the signatures are assumed to be signed with increasing nonces.\\n    address revoker; // The revoking account.\\n}\\n\\n/**\\n * @title EAS - Ethereum Attestation Service interface.\\n */\\ninterface IEAS {\\n    /**\\n     * @dev Emitted when an attestation has been made.\\n     *\\n     * @param recipient The recipient of the attestation.\\n     * @param attester The attesting account.\\n     * @param uid The UID the revoked attestation.\\n     * @param schema The UID of the schema.\\n     */\\n    event Attested(address indexed recipient, address indexed attester, bytes32 uid, bytes32 indexed schema);\\n\\n    /**\\n     * @dev Emitted when an attestation has been revoked.\\n     *\\n     * @param recipient The recipient of the attestation.\\n     * @param attester The attesting account.\\n     * @param schema The UID of the schema.\\n     * @param uid The UID the revoked attestation.\\n     */\\n    event Revoked(address indexed recipient, address indexed attester, bytes32 uid, bytes32 indexed schema);\\n\\n    /**\\n     * @dev Emitted when a data has been timestamped.\\n     *\\n     * @param data The data.\\n     * @param timestamp The timestamp.\\n     */\\n    event Timestamped(bytes32 indexed data, uint64 indexed timestamp);\\n\\n    /**\\n     * @dev Emitted when a data has been revoked.\\n     *\\n     * @param revoker The address of the revoker.\\n     * @param data The data.\\n     * @param timestamp The timestamp.\\n     */\\n    event RevokedOffchain(address indexed revoker, bytes32 indexed data, uint64 indexed timestamp);\\n\\n    /**\\n     * @dev Returns the address of the global schema registry.\\n     *\\n     * @return The address of the global schema registry.\\n     */\\n    function getSchemaRegistry() external view returns (ISchemaRegistry);\\n\\n    /**\\n     * @dev Attests to a specific schema.\\n     *\\n     * @param request The arguments of the attestation request.\\n     *\\n     * Example:\\n     *\\n     * attest({\\n     *     schema: \\\"0facc36681cbe2456019c1b0d1e7bedd6d1d40f6f324bf3dd3a4cef2999200a0\\\",\\n     *     data: {\\n     *         recipient: \\\"0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf\\\",\\n     *         expirationTime: 0,\\n     *         revocable: true,\\n     *         refUID: \\\"0x0000000000000000000000000000000000000000000000000000000000000000\\\",\\n     *         data: \\\"0xF00D\\\",\\n     *         value: 0\\n     *     }\\n     * })\\n     *\\n     * @return The UID of the new attestation.\\n     */\\n    function attest(AttestationRequest calldata request) external payable returns (bytes32);\\n\\n    /**\\n     * @dev Attests to a specific schema via the provided EIP712 signature.\\n     *\\n     * @param delegatedRequest The arguments of the delegated attestation request.\\n     *\\n     * Example:\\n     *\\n     * attestByDelegation({\\n     *     schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n     *     data: {\\n     *         recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',\\n     *         expirationTime: 1673891048,\\n     *         revocable: true,\\n     *         refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\\n     *         data: '0x1234',\\n     *         value: 0\\n     *     },\\n     *     signature: {\\n     *         v: 28,\\n     *         r: '0x148c...b25b',\\n     *         s: '0x5a72...be22'\\n     *     },\\n     *     attester: '0xc5E8740aD971409492b1A63Db8d83025e0Fc427e'\\n     * })\\n     *\\n     * @return The UID of the new attestation.\\n     */\\n    function attestByDelegation(\\n        DelegatedAttestationRequest calldata delegatedRequest\\n    ) external payable returns (bytes32);\\n\\n    /**\\n     * @dev Attests to multiple schemas.\\n     *\\n     * @param multiRequests The arguments of the multi attestation requests. The requests should be grouped by distinct\\n     * schema ids to benefit from the best batching optimization.\\n     *\\n     * Example:\\n     *\\n     * multiAttest([{\\n     *     schema: '0x33e9094830a5cba5554d1954310e4fbed2ef5f859ec1404619adea4207f391fd',\\n     *     data: [{\\n     *         recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',\\n     *         expirationTime: 1673891048,\\n     *         revocable: true,\\n     *         refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\\n     *         data: '0x1234',\\n     *         value: 1000\\n     *     },\\n     *     {\\n     *         recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',\\n     *         expirationTime: 0,\\n     *         revocable: false,\\n     *         refUID: '0x480df4a039efc31b11bfdf491b383ca138b6bde160988222a2a3509c02cee174',\\n     *         data: '0x00',\\n     *         value: 0\\n     *     }],\\n     * },\\n     * {\\n     *     schema: '0x5ac273ce41e3c8bfa383efe7c03e54c5f0bff29c9f11ef6ffa930fc84ca32425',\\n     *     data: [{\\n     *         recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',\\n     *         expirationTime: 0,\\n     *         revocable: true,\\n     *         refUID: '0x75bf2ed8dca25a8190c50c52db136664de25b2449535839008ccfdab469b214f',\\n     *         data: '0x12345678',\\n     *         value: 0\\n     *     },\\n     * }])\\n     *\\n     * @return The UIDs of the new attestations.\\n     */\\n    function multiAttest(MultiAttestationRequest[] calldata multiRequests) external payable returns (bytes32[] memory);\\n\\n    /**\\n     * @dev Attests to multiple schemas using via provided EIP712 signatures.\\n     *\\n     * @param multiDelegatedRequests The arguments of the delegated multi attestation requests. The requests should be\\n     * grouped by distinct schema ids to benefit from the best batching optimization.\\n     *\\n     * Example:\\n     *\\n     * multiAttestByDelegation([{\\n     *     schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n     *     data: [{\\n     *         recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',\\n     *         expirationTime: 1673891048,\\n     *         revocable: true,\\n     *         refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\\n     *         data: '0x1234',\\n     *         value: 0\\n     *     },\\n     *     {\\n     *         recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',\\n     *         expirationTime: 0,\\n     *         revocable: false,\\n     *         refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\\n     *         data: '0x00',\\n     *         value: 0\\n     *     }],\\n     *     signatures: [{\\n     *         v: 28,\\n     *         r: '0x148c...b25b',\\n     *         s: '0x5a72...be22'\\n     *     },\\n     *     {\\n     *         v: 28,\\n     *         r: '0x487s...67bb',\\n     *         s: '0x12ad...2366'\\n     *     }],\\n     *     attester: '0x1D86495b2A7B524D747d2839b3C645Bed32e8CF4'\\n     * }])\\n     *\\n     * @return The UIDs of the new attestations.\\n     */\\n    function multiAttestByDelegation(\\n        MultiDelegatedAttestationRequest[] calldata multiDelegatedRequests\\n    ) external payable returns (bytes32[] memory);\\n\\n    /**\\n     * @dev Revokes an existing attestation to a specific schema.\\n     *\\n     * Example:\\n     *\\n     * revoke({\\n     *     schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n     *     data: {\\n     *         uid: '0x101032e487642ee04ee17049f99a70590c735b8614079fc9275f9dd57c00966d',\\n     *         value: 0\\n     *     }\\n     * })\\n     *\\n     * @param request The arguments of the revocation request.\\n     */\\n    function revoke(RevocationRequest calldata request) external payable;\\n\\n    /**\\n     * @dev Revokes an existing attestation to a specific schema via the provided EIP712 signature.\\n     *\\n     * Example:\\n     *\\n     * revokeByDelegation({\\n     *     schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n     *     data: {\\n     *         uid: '0xcbbc12102578c642a0f7b34fe7111e41afa25683b6cd7b5a14caf90fa14d24ba',\\n     *         value: 0\\n     *     },\\n     *     signature: {\\n     *         v: 27,\\n     *         r: '0xb593...7142',\\n     *         s: '0x0f5b...2cce'\\n     *     },\\n     *     revoker: '0x244934dd3e31bE2c81f84ECf0b3E6329F5381992'\\n     * })\\n     *\\n     * @param delegatedRequest The arguments of the delegated revocation request.\\n     */\\n    function revokeByDelegation(DelegatedRevocationRequest calldata delegatedRequest) external payable;\\n\\n    /**\\n     * @dev Revokes existing attestations to multiple schemas.\\n     *\\n     * @param multiRequests The arguments of the multi revocation requests. The requests should be grouped by distinct\\n     * schema ids to benefit from the best batching optimization.\\n     *\\n     * Example:\\n     *\\n     * multiRevoke([{\\n     *     schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n     *     data: [{\\n     *         uid: '0x211296a1ca0d7f9f2cfebf0daaa575bea9b20e968d81aef4e743d699c6ac4b25',\\n     *         value: 1000\\n     *     },\\n     *     {\\n     *         uid: '0xe160ac1bd3606a287b4d53d5d1d6da5895f65b4b4bab6d93aaf5046e48167ade',\\n     *         value: 0\\n     *     }],\\n     * },\\n     * {\\n     *     schema: '0x5ac273ce41e3c8bfa383efe7c03e54c5f0bff29c9f11ef6ffa930fc84ca32425',\\n     *     data: [{\\n     *         uid: '0x053d42abce1fd7c8fcddfae21845ad34dae287b2c326220b03ba241bc5a8f019',\\n     *         value: 0\\n     *     },\\n     * }])\\n     */\\n    function multiRevoke(MultiRevocationRequest[] calldata multiRequests) external payable;\\n\\n    /**\\n     * @dev Revokes existing attestations to multiple schemas via provided EIP712 signatures.\\n     *\\n     * @param multiDelegatedRequests The arguments of the delegated multi revocation attestation requests. The requests should be\\n     * grouped by distinct schema ids to benefit from the best batching optimization.\\n     *\\n     * Example:\\n     *\\n     * multiRevokeByDelegation([{\\n     *     schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n     *     data: [{\\n     *         uid: '0x211296a1ca0d7f9f2cfebf0daaa575bea9b20e968d81aef4e743d699c6ac4b25',\\n     *         value: 1000\\n     *     },\\n     *     {\\n     *         uid: '0xe160ac1bd3606a287b4d53d5d1d6da5895f65b4b4bab6d93aaf5046e48167ade',\\n     *         value: 0\\n     *     }],\\n     *     signatures: [{\\n     *         v: 28,\\n     *         r: '0x148c...b25b',\\n     *         s: '0x5a72...be22'\\n     *     },\\n     *     {\\n     *         v: 28,\\n     *         r: '0x487s...67bb',\\n     *         s: '0x12ad...2366'\\n     *     }],\\n     *     revoker: '0x244934dd3e31bE2c81f84ECf0b3E6329F5381992'\\n     * }])\\n     *\\n     */\\n    function multiRevokeByDelegation(\\n        MultiDelegatedRevocationRequest[] calldata multiDelegatedRequests\\n    ) external payable;\\n\\n    /**\\n     * @dev Timestamps the specified bytes32 data.\\n     *\\n     * @param data The data to timestamp.\\n     *\\n     * @return The timestamp the data was timestamped with.\\n     */\\n    function timestamp(bytes32 data) external returns (uint64);\\n\\n    /**\\n     * @dev Timestamps the specified multiple bytes32 data.\\n     *\\n     * @param data The data to timestamp.\\n     *\\n     * @return The timestamp the data was timestamped with.\\n     */\\n    function multiTimestamp(bytes32[] calldata data) external returns (uint64);\\n\\n    /**\\n     * @dev Revokes the specified bytes32 data.\\n     *\\n     * @param data The data to timestamp.\\n     *\\n     * @return The timestamp the data was revoked with.\\n     */\\n    function revokeOffchain(bytes32 data) external returns (uint64);\\n\\n    /**\\n     * @dev Revokes the specified multiple bytes32 data.\\n     *\\n     * @param data The data to timestamp.\\n     *\\n     * @return The timestamp the data was revoked with.\\n     */\\n    function multiRevokeOffchain(bytes32[] calldata data) external returns (uint64);\\n\\n    /**\\n     * @dev Returns an existing attestation by UID.\\n     *\\n     * @param uid The UID of the attestation to retrieve.\\n     *\\n     * @return The attestation data members.\\n     */\\n    function getAttestation(bytes32 uid) external view returns (Attestation memory);\\n\\n    /**\\n     * @dev Checks whether an attestation exists.\\n     *\\n     * @param uid The UID of the attestation to retrieve.\\n     *\\n     * @return Whether an attestation exists.\\n     */\\n    function isAttestationValid(bytes32 uid) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the timestamp that the specified data was timestamped with.\\n     *\\n     * @param data The data to query.\\n     *\\n     * @return The timestamp the data was timestamped with.\\n     */\\n    function getTimestamp(bytes32 data) external view returns (uint64);\\n\\n    /**\\n     * @dev Returns the timestamp that the specified data was timestamped with.\\n     *\\n     * @param data The data to query.\\n     *\\n     * @return The timestamp the data was timestamped with.\\n     */\\n    function getRevokeOffchain(address revoker, bytes32 data) external view returns (uint64);\\n}\\n\",\"keccak256\":\"0xd530be686226f3c8d7b02bb59797901620f64749a02228539afc8b082a1ee036\",\"license\":\"MIT\"},\"@ethereum-attestation-service/eas-contracts/contracts/ISchemaRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { ISchemaResolver } from \\\"./resolver/ISchemaResolver.sol\\\";\\n\\n/**\\n * @title A struct representing a record for a submitted schema.\\n */\\nstruct SchemaRecord {\\n    bytes32 uid; // The unique identifier of the schema.\\n    ISchemaResolver resolver; // Optional schema resolver.\\n    bool revocable; // Whether the schema allows revocations explicitly.\\n    string schema; // Custom specification of the schema (e.g., an ABI).\\n}\\n\\n/**\\n * @title The global schema registry interface.\\n */\\ninterface ISchemaRegistry {\\n    /**\\n     * @dev Emitted when a new schema has been registered\\n     *\\n     * @param uid The schema UID.\\n     * @param registerer The address of the account used to register the schema.\\n     */\\n    event Registered(bytes32 indexed uid, address registerer);\\n\\n    /**\\n     * @dev Submits and reserves a new schema\\n     *\\n     * @param schema The schema data schema.\\n     * @param resolver An optional schema resolver.\\n     * @param revocable Whether the schema allows revocations explicitly.\\n     *\\n     * @return The UID of the new schema.\\n     */\\n    function register(string calldata schema, ISchemaResolver resolver, bool revocable) external returns (bytes32);\\n\\n    /**\\n     * @dev Returns an existing schema by UID\\n     *\\n     * @param uid The UID of the schema to retrieve.\\n     *\\n     * @return The schema data members.\\n     */\\n    function getSchema(bytes32 uid) external view returns (SchemaRecord memory);\\n}\\n\",\"keccak256\":\"0xef47e449dd02bd034e26b1dea505ce533906f8462fc674c938ed0e872a68d640\",\"license\":\"MIT\"},\"@ethereum-attestation-service/eas-contracts/contracts/Semver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\nimport { Strings } from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\n/**\\n * @dev A simple contract for managing contract versions.\\n */\\ncontract Semver {\\n    // Contract's major version number.\\n    uint256 private immutable _major;\\n\\n    // Contract's minor version number.\\n    uint256 private immutable _minor;\\n\\n    // Contract's patch version number.\\n    uint256 private immutable _path;\\n\\n    /**\\n     * @param major Major version number.\\n     * @param minor Minor version number.\\n     * @param patch Patch version number.\\n     */\\n    constructor(uint256 major, uint256 minor, uint256 patch) {\\n        _major = major;\\n        _minor = minor;\\n        _path = patch;\\n    }\\n\\n    /**\\n     * @notice Returns the full semver contract version.\\n     *\\n     * @return Semver contract version as a string.\\n     */\\n    function version() external view returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(Strings.toString(_major), \\\".\\\", Strings.toString(_minor), \\\".\\\", Strings.toString(_path))\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0xdd3bfff2af5b5cea194f5a771080d13ad458040825b148e0d7eb65f6e3a2a7c7\",\"license\":\"MIT\"},\"@ethereum-attestation-service/eas-contracts/contracts/resolver/ISchemaResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { Attestation } from \\\"../Common.sol\\\";\\n\\n/**\\n * @title The interface of an optional schema resolver.\\n */\\ninterface ISchemaResolver {\\n    /**\\n     * @dev Returns whether the resolver supports ETH transfers.\\n     */\\n    function isPayable() external pure returns (bool);\\n\\n    /**\\n     * @dev Processes an attestation and verifies whether it's valid.\\n     *\\n     * @param attestation The new attestation.\\n     *\\n     * @return Whether the attestation is valid.\\n     */\\n    function attest(Attestation calldata attestation) external payable returns (bool);\\n\\n    /**\\n     * @dev Processes multiple attestations and verifies whether they are valid.\\n     *\\n     * @param attestations The new attestations.\\n     * @param values Explicit ETH amounts which were sent with each attestation.\\n     *\\n     * @return Whether all the attestations are valid.\\n     */\\n    function multiAttest(\\n        Attestation[] calldata attestations,\\n        uint256[] calldata values\\n    ) external payable returns (bool);\\n\\n    /**\\n     * @dev Processes an attestation revocation and verifies if it can be revoked.\\n     *\\n     * @param attestation The existing attestation to be revoked.\\n     *\\n     * @return Whether the attestation can be revoked.\\n     */\\n    function revoke(Attestation calldata attestation) external payable returns (bool);\\n\\n    /**\\n     * @dev Processes revocation of multiple attestation and verifies they can be revoked.\\n     *\\n     * @param attestations The existing attestations to be revoked.\\n     * @param values Explicit ETH amounts which were sent with each revocation.\\n     *\\n     * @return Whether the attestations can be revoked.\\n     */\\n    function multiRevoke(\\n        Attestation[] calldata attestations,\\n        uint256[] calldata values\\n    ) external payable returns (bool);\\n}\\n\",\"keccak256\":\"0xc628c6540da258f76192eaa34c21699c9cbcc4a4029d7ee04e88dc9c18c981fd\",\"license\":\"MIT\"},\"@ethereum-attestation-service/eas-contracts/contracts/resolver/SchemaResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\nimport { IEAS, Attestation } from \\\"../IEAS.sol\\\";\\nimport { InvalidEAS, uncheckedInc } from \\\"../Common.sol\\\";\\nimport { Semver } from \\\"../Semver.sol\\\";\\n\\nimport { ISchemaResolver } from \\\"./ISchemaResolver.sol\\\";\\n\\n/**\\n * @title A base resolver contract\\n */\\nabstract contract SchemaResolver is ISchemaResolver, Semver {\\n    error AccessDenied();\\n    error InsufficientValue();\\n    error NotPayable();\\n\\n    // The global EAS contract.\\n    IEAS internal immutable _eas;\\n\\n    /**\\n     * @dev Creates a new resolver.\\n     *\\n     * @param eas The address of the global EAS contract.\\n     */\\n    constructor(IEAS eas) Semver(1, 0, 0) {\\n        if (address(eas) == address(0)) {\\n            revert InvalidEAS();\\n        }\\n\\n        _eas = eas;\\n    }\\n\\n    /**\\n     * @dev Ensures that only the EAS contract can make this call.\\n     */\\n    modifier onlyEAS() {\\n        _onlyEAS();\\n\\n        _;\\n    }\\n\\n    /**\\n     * @inheritdoc ISchemaResolver\\n     */\\n    function isPayable() public pure virtual returns (bool) {\\n        return false;\\n    }\\n\\n    /**\\n     * @dev ETH callback.\\n     */\\n    receive() external payable virtual {\\n        if (!isPayable()) {\\n            revert NotPayable();\\n        }\\n    }\\n\\n    /**\\n     * @inheritdoc ISchemaResolver\\n     */\\n    function attest(Attestation calldata attestation) external payable onlyEAS returns (bool) {\\n        return onAttest(attestation, msg.value);\\n    }\\n\\n    /**\\n     * @inheritdoc ISchemaResolver\\n     */\\n    function multiAttest(\\n        Attestation[] calldata attestations,\\n        uint256[] calldata values\\n    ) external payable onlyEAS returns (bool) {\\n        uint256 length = attestations.length;\\n\\n        // We are keeping track of the remaining ETH amount that can be sent to resolvers and will keep deducting\\n        // from it to verify that there isn't any attempt to send too much ETH to resolvers. Please note that unless\\n        // some ETH was stuck in the contract by accident (which shouldn't happen in normal conditions), it won't be\\n        // possible to send too much ETH anyway.\\n        uint256 remainingValue = msg.value;\\n\\n        for (uint256 i = 0; i < length; i = uncheckedInc(i)) {\\n            // Ensure that the attester/revoker doesn't try to spend more than available.\\n            uint256 value = values[i];\\n            if (value > remainingValue) {\\n                revert InsufficientValue();\\n            }\\n\\n            // Forward the attestation to the underlying resolver and revert in case it isn't approved.\\n            if (!onAttest(attestations[i], value)) {\\n                return false;\\n            }\\n\\n            unchecked {\\n                // Subtract the ETH amount, that was provided to this attestation, from the global remaining ETH amount.\\n                remainingValue -= value;\\n            }\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @inheritdoc ISchemaResolver\\n     */\\n    function revoke(Attestation calldata attestation) external payable onlyEAS returns (bool) {\\n        return onRevoke(attestation, msg.value);\\n    }\\n\\n    /**\\n     * @inheritdoc ISchemaResolver\\n     */\\n    function multiRevoke(\\n        Attestation[] calldata attestations,\\n        uint256[] calldata values\\n    ) external payable onlyEAS returns (bool) {\\n        uint256 length = attestations.length;\\n\\n        // We are keeping track of the remaining ETH amount that can be sent to resolvers and will keep deducting\\n        // from it to verify that there isn't any attempt to send too much ETH to resolvers. Please note that unless\\n        // some ETH was stuck in the contract by accident (which shouldn't happen in normal conditions), it won't be\\n        // possible to send too much ETH anyway.\\n        uint256 remainingValue = msg.value;\\n\\n        for (uint256 i = 0; i < length; i = uncheckedInc(i)) {\\n            // Ensure that the attester/revoker doesn't try to spend more than available.\\n            uint256 value = values[i];\\n            if (value > remainingValue) {\\n                revert InsufficientValue();\\n            }\\n\\n            // Forward the revocation to the underlying resolver and revert in case it isn't approved.\\n            if (!onRevoke(attestations[i], value)) {\\n                return false;\\n            }\\n\\n            unchecked {\\n                // Subtract the ETH amount, that was provided to this attestation, from the global remaining ETH amount.\\n                remainingValue -= value;\\n            }\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev A resolver callback that should be implemented by child contracts.\\n     *\\n     * @param attestation The new attestation.\\n     * @param value An explicit ETH amount that was sent to the resolver. Please note that this value is verified in\\n     * both attest() and multiAttest() callbacks EAS-only callbacks and that in case of multi attestations, it'll\\n     * usually hold that msg.value != value, since msg.value aggregated the sent ETH amounts for all the attestations\\n     * in the batch.\\n     *\\n     * @return Whether the attestation is valid.\\n     */\\n    function onAttest(Attestation calldata attestation, uint256 value) internal virtual returns (bool);\\n\\n    /**\\n     * @dev Processes an attestation revocation and verifies if it can be revoked.\\n     *\\n     * @param attestation The existing attestation to be revoked.\\n     * @param value An explicit ETH amount that was sent to the resolver. Please note that this value is verified in\\n     * both revoke() and multiRevoke() callbacks EAS-only callbacks and that in case of multi attestations, it'll\\n     * usually hold that msg.value != value, since msg.value aggregated the sent ETH amounts for all the attestations\\n     * in the batch.\\n     *\\n     * @return Whether the attestation can be revoked.\\n     */\\n    function onRevoke(Attestation calldata attestation, uint256 value) internal virtual returns (bool);\\n\\n    /**\\n     * @dev Ensures that only the EAS contract can make this call.\\n     */\\n    function _onlyEAS() private view {\\n        if (msg.sender != address(_eas)) {\\n            revert AccessDenied();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8bac9997f3c6b2e9a165342e35c1263d1942ce55a98ecbe0aa6ec84fcb6538d7\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x4075622496acc77fd6d4de4cc30a8577a744d5c75afad33fdeacf1704d6eda98\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/ReferrerResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nimport {SchemaResolver} from \\\"@ethereum-attestation-service/eas-contracts/contracts/resolver/SchemaResolver.sol\\\";\\nimport {IEAS} from \\\"@ethereum-attestation-service/eas-contracts/contracts/IEAS.sol\\\";\\nimport {Attestation} from \\\"@ethereum-attestation-service/eas-contracts/contracts/Common.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\ncontract ReferrerResolver is SchemaResolver, Initializable, OwnableUpgradeable {\\n    address private _owner;\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor(IEAS eas) SchemaResolver(eas) {\\n        _disableInitializers();\\n    }\\n\\n    function initialize() public initializer {\\n        _owner = msg.sender;\\n        __Ownable_init();\\n    }\\n\\n    function onAttest(\\n        Attestation calldata attestation,\\n        uint256 /*value*/\\n    ) internal view override returns (bool) {\\n        if (attestation.refUID != bytes32(0)) {\\n            Attestation memory ref = _eas.getAttestation(attestation.refUID);\\n            require(ref.uid != bytes32(0), \\\"Referred attestation not valid.\\\");\\n            require(\\n                ref.attester == attestation.attester ||\\n                    ref.recipient == attestation.attester ||\\n                    _owner == attestation.attester,\\n                \\\"Not owner\\\"\\n            );\\n        }\\n        return true;\\n    }\\n\\n    function onRevoke(\\n        Attestation calldata /*attestation*/,\\n        uint256 /*value*/\\n    ) internal pure override returns (bool) {\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0x2142b413a029a7913f87e577cdbba8aa0e9425b126ae81e2c634bf0f82efe1fa\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":983,"contract":"contracts/ReferrerResolver.sol:ReferrerResolver","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":986,"contract":"contracts/ReferrerResolver.sol:ReferrerResolver","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":1516,"contract":"contracts/ReferrerResolver.sol:ReferrerResolver","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"},{"astId":830,"contract":"contracts/ReferrerResolver.sol:ReferrerResolver","label":"_owner","offset":0,"slot":"51","type":"t_address"},{"astId":950,"contract":"contracts/ReferrerResolver.sol:ReferrerResolver","label":"__gap","offset":0,"slot":"52","type":"t_array(t_uint256)49_storage"},{"astId":6212,"contract":"contracts/ReferrerResolver.sol:ReferrerResolver","label":"_owner","offset":0,"slot":"101","type":"t_address"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_uint256)49_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[49]","numberOfBytes":"1568"},"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{"version()":{"notice":"Returns the full semver contract version."}},"version":1}}}}}}