{"id":"4a364ec080bad3bad18ec3f5893248af","_format":"hh-sol-build-info-1","solcVersion":"0.8.19","solcLongVersion":"0.8.19+commit.7dd6d404","input":{"language":"Solidity","sources":{"@ethereum-attestation-service/eas-contracts/contracts/Common.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n// A representation of an empty/uninitialized UID.\nbytes32 constant EMPTY_UID = 0;\n\n// A zero expiration represents an non-expiring attestation.\nuint64 constant NO_EXPIRATION_TIME = 0;\n\nerror AccessDenied();\nerror InvalidEAS();\nerror InvalidLength();\nerror InvalidSignature();\nerror NotFound();\n\n/**\n * @dev A struct representing EIP712 signature data.\n */\nstruct EIP712Signature {\n    uint8 v; // The recovery ID.\n    bytes32 r; // The x-coordinate of the nonce R.\n    bytes32 s; // The signature data.\n}\n\n/**\n * @dev A struct representing a single attestation.\n */\nstruct Attestation {\n    bytes32 uid; // A unique identifier of the attestation.\n    bytes32 schema; // The unique identifier of the schema.\n    uint64 time; // The time when the attestation was created (Unix timestamp).\n    uint64 expirationTime; // The time when the attestation expires (Unix timestamp).\n    uint64 revocationTime; // The time when the attestation was revoked (Unix timestamp).\n    bytes32 refUID; // The UID of the related attestation.\n    address recipient; // The recipient of the attestation.\n    address attester; // The attester/sender of the attestation.\n    bool revocable; // Whether the attestation is revocable.\n    bytes data; // Custom attestation data.\n}\n\n/**\n * @dev A helper function to work with unchecked iterators in loops.\n */\nfunction uncheckedInc(uint256 i) pure returns (uint256 j) {\n    unchecked {\n        j = i + 1;\n    }\n}\n"},"@ethereum-attestation-service/eas-contracts/contracts/IEAS.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport { ISchemaRegistry } from \"./ISchemaRegistry.sol\";\nimport { Attestation, EIP712Signature } from \"./Common.sol\";\n\n/**\n * @dev A struct representing the arguments of the attestation request.\n */\nstruct AttestationRequestData {\n    address recipient; // The recipient of the attestation.\n    uint64 expirationTime; // The time when the attestation expires (Unix timestamp).\n    bool revocable; // Whether the attestation is revocable.\n    bytes32 refUID; // The UID of the related attestation.\n    bytes data; // Custom attestation data.\n    uint256 value; // An explicit ETH amount to send to the resolver. This is important to prevent accidental user errors.\n}\n\n/**\n * @dev A struct representing the full arguments of the attestation request.\n */\nstruct AttestationRequest {\n    bytes32 schema; // The unique identifier of the schema.\n    AttestationRequestData data; // The arguments of the attestation request.\n}\n\n/**\n * @dev A struct representing the full arguments of the full delegated attestation request.\n */\nstruct DelegatedAttestationRequest {\n    bytes32 schema; // The unique identifier of the schema.\n    AttestationRequestData data; // The arguments of the attestation request.\n    EIP712Signature signature; // The EIP712 signature data.\n    address attester; // The attesting account.\n}\n\n/**\n * @dev A struct representing the full arguments of the multi attestation request.\n */\nstruct MultiAttestationRequest {\n    bytes32 schema; // The unique identifier of the schema.\n    AttestationRequestData[] data; // The arguments of the attestation request.\n}\n\n/**\n * @dev A struct representing the full arguments of the delegated multi attestation request.\n */\nstruct MultiDelegatedAttestationRequest {\n    bytes32 schema; // The unique identifier of the schema.\n    AttestationRequestData[] data; // The arguments of the attestation requests.\n    EIP712Signature[] signatures; // The EIP712 signatures data. Please note that the signatures are assumed to be signed with increasing nonces.\n    address attester; // The attesting account.\n}\n\n/**\n * @dev A struct representing the arguments of the revocation request.\n */\nstruct RevocationRequestData {\n    bytes32 uid; // The UID of the attestation to revoke.\n    uint256 value; // An explicit ETH amount to send to the resolver. This is important to prevent accidental user errors.\n}\n\n/**\n * @dev A struct representing the full arguments of the revocation request.\n */\nstruct RevocationRequest {\n    bytes32 schema; // The unique identifier of the schema.\n    RevocationRequestData data; // The arguments of the revocation request.\n}\n\n/**\n * @dev A struct representing the arguments of the full delegated revocation request.\n */\nstruct DelegatedRevocationRequest {\n    bytes32 schema; // The unique identifier of the schema.\n    RevocationRequestData data; // The arguments of the revocation request.\n    EIP712Signature signature; // The EIP712 signature data.\n    address revoker; // The revoking account.\n}\n\n/**\n * @dev A struct representing the full arguments of the multi revocation request.\n */\nstruct MultiRevocationRequest {\n    bytes32 schema; // The unique identifier of the schema.\n    RevocationRequestData[] data; // The arguments of the revocation request.\n}\n\n/**\n * @dev A struct representing the full arguments of the delegated multi revocation request.\n */\nstruct MultiDelegatedRevocationRequest {\n    bytes32 schema; // The unique identifier of the schema.\n    RevocationRequestData[] data; // The arguments of the revocation requests.\n    EIP712Signature[] signatures; // The EIP712 signatures data. Please note that the signatures are assumed to be signed with increasing nonces.\n    address revoker; // The revoking account.\n}\n\n/**\n * @title EAS - Ethereum Attestation Service interface.\n */\ninterface IEAS {\n    /**\n     * @dev Emitted when an attestation has been made.\n     *\n     * @param recipient The recipient of the attestation.\n     * @param attester The attesting account.\n     * @param uid The UID the revoked attestation.\n     * @param schema The UID of the schema.\n     */\n    event Attested(address indexed recipient, address indexed attester, bytes32 uid, bytes32 indexed schema);\n\n    /**\n     * @dev Emitted when an attestation has been revoked.\n     *\n     * @param recipient The recipient of the attestation.\n     * @param attester The attesting account.\n     * @param schema The UID of the schema.\n     * @param uid The UID the revoked attestation.\n     */\n    event Revoked(address indexed recipient, address indexed attester, bytes32 uid, bytes32 indexed schema);\n\n    /**\n     * @dev Emitted when a data has been timestamped.\n     *\n     * @param data The data.\n     * @param timestamp The timestamp.\n     */\n    event Timestamped(bytes32 indexed data, uint64 indexed timestamp);\n\n    /**\n     * @dev Emitted when a data has been revoked.\n     *\n     * @param revoker The address of the revoker.\n     * @param data The data.\n     * @param timestamp The timestamp.\n     */\n    event RevokedOffchain(address indexed revoker, bytes32 indexed data, uint64 indexed timestamp);\n\n    /**\n     * @dev Returns the address of the global schema registry.\n     *\n     * @return The address of the global schema registry.\n     */\n    function getSchemaRegistry() external view returns (ISchemaRegistry);\n\n    /**\n     * @dev Attests to a specific schema.\n     *\n     * @param request The arguments of the attestation request.\n     *\n     * Example:\n     *\n     * attest({\n     *     schema: \"0facc36681cbe2456019c1b0d1e7bedd6d1d40f6f324bf3dd3a4cef2999200a0\",\n     *     data: {\n     *         recipient: \"0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf\",\n     *         expirationTime: 0,\n     *         revocable: true,\n     *         refUID: \"0x0000000000000000000000000000000000000000000000000000000000000000\",\n     *         data: \"0xF00D\",\n     *         value: 0\n     *     }\n     * })\n     *\n     * @return The UID of the new attestation.\n     */\n    function attest(AttestationRequest calldata request) external payable returns (bytes32);\n\n    /**\n     * @dev Attests to a specific schema via the provided EIP712 signature.\n     *\n     * @param delegatedRequest The arguments of the delegated attestation request.\n     *\n     * Example:\n     *\n     * attestByDelegation({\n     *     schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\n     *     data: {\n     *         recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',\n     *         expirationTime: 1673891048,\n     *         revocable: true,\n     *         refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\n     *         data: '0x1234',\n     *         value: 0\n     *     },\n     *     signature: {\n     *         v: 28,\n     *         r: '0x148c...b25b',\n     *         s: '0x5a72...be22'\n     *     },\n     *     attester: '0xc5E8740aD971409492b1A63Db8d83025e0Fc427e'\n     * })\n     *\n     * @return The UID of the new attestation.\n     */\n    function attestByDelegation(\n        DelegatedAttestationRequest calldata delegatedRequest\n    ) external payable returns (bytes32);\n\n    /**\n     * @dev Attests to multiple schemas.\n     *\n     * @param multiRequests The arguments of the multi attestation requests. The requests should be grouped by distinct\n     * schema ids to benefit from the best batching optimization.\n     *\n     * Example:\n     *\n     * multiAttest([{\n     *     schema: '0x33e9094830a5cba5554d1954310e4fbed2ef5f859ec1404619adea4207f391fd',\n     *     data: [{\n     *         recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',\n     *         expirationTime: 1673891048,\n     *         revocable: true,\n     *         refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\n     *         data: '0x1234',\n     *         value: 1000\n     *     },\n     *     {\n     *         recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',\n     *         expirationTime: 0,\n     *         revocable: false,\n     *         refUID: '0x480df4a039efc31b11bfdf491b383ca138b6bde160988222a2a3509c02cee174',\n     *         data: '0x00',\n     *         value: 0\n     *     }],\n     * },\n     * {\n     *     schema: '0x5ac273ce41e3c8bfa383efe7c03e54c5f0bff29c9f11ef6ffa930fc84ca32425',\n     *     data: [{\n     *         recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',\n     *         expirationTime: 0,\n     *         revocable: true,\n     *         refUID: '0x75bf2ed8dca25a8190c50c52db136664de25b2449535839008ccfdab469b214f',\n     *         data: '0x12345678',\n     *         value: 0\n     *     },\n     * }])\n     *\n     * @return The UIDs of the new attestations.\n     */\n    function multiAttest(MultiAttestationRequest[] calldata multiRequests) external payable returns (bytes32[] memory);\n\n    /**\n     * @dev Attests to multiple schemas using via provided EIP712 signatures.\n     *\n     * @param multiDelegatedRequests The arguments of the delegated multi attestation requests. The requests should be\n     * grouped by distinct schema ids to benefit from the best batching optimization.\n     *\n     * Example:\n     *\n     * multiAttestByDelegation([{\n     *     schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\n     *     data: [{\n     *         recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',\n     *         expirationTime: 1673891048,\n     *         revocable: true,\n     *         refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\n     *         data: '0x1234',\n     *         value: 0\n     *     },\n     *     {\n     *         recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',\n     *         expirationTime: 0,\n     *         revocable: false,\n     *         refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\n     *         data: '0x00',\n     *         value: 0\n     *     }],\n     *     signatures: [{\n     *         v: 28,\n     *         r: '0x148c...b25b',\n     *         s: '0x5a72...be22'\n     *     },\n     *     {\n     *         v: 28,\n     *         r: '0x487s...67bb',\n     *         s: '0x12ad...2366'\n     *     }],\n     *     attester: '0x1D86495b2A7B524D747d2839b3C645Bed32e8CF4'\n     * }])\n     *\n     * @return The UIDs of the new attestations.\n     */\n    function multiAttestByDelegation(\n        MultiDelegatedAttestationRequest[] calldata multiDelegatedRequests\n    ) external payable returns (bytes32[] memory);\n\n    /**\n     * @dev Revokes an existing attestation to a specific schema.\n     *\n     * Example:\n     *\n     * revoke({\n     *     schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\n     *     data: {\n     *         uid: '0x101032e487642ee04ee17049f99a70590c735b8614079fc9275f9dd57c00966d',\n     *         value: 0\n     *     }\n     * })\n     *\n     * @param request The arguments of the revocation request.\n     */\n    function revoke(RevocationRequest calldata request) external payable;\n\n    /**\n     * @dev Revokes an existing attestation to a specific schema via the provided EIP712 signature.\n     *\n     * Example:\n     *\n     * revokeByDelegation({\n     *     schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\n     *     data: {\n     *         uid: '0xcbbc12102578c642a0f7b34fe7111e41afa25683b6cd7b5a14caf90fa14d24ba',\n     *         value: 0\n     *     },\n     *     signature: {\n     *         v: 27,\n     *         r: '0xb593...7142',\n     *         s: '0x0f5b...2cce'\n     *     },\n     *     revoker: '0x244934dd3e31bE2c81f84ECf0b3E6329F5381992'\n     * })\n     *\n     * @param delegatedRequest The arguments of the delegated revocation request.\n     */\n    function revokeByDelegation(DelegatedRevocationRequest calldata delegatedRequest) external payable;\n\n    /**\n     * @dev Revokes existing attestations to multiple schemas.\n     *\n     * @param multiRequests The arguments of the multi revocation requests. The requests should be grouped by distinct\n     * schema ids to benefit from the best batching optimization.\n     *\n     * Example:\n     *\n     * multiRevoke([{\n     *     schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\n     *     data: [{\n     *         uid: '0x211296a1ca0d7f9f2cfebf0daaa575bea9b20e968d81aef4e743d699c6ac4b25',\n     *         value: 1000\n     *     },\n     *     {\n     *         uid: '0xe160ac1bd3606a287b4d53d5d1d6da5895f65b4b4bab6d93aaf5046e48167ade',\n     *         value: 0\n     *     }],\n     * },\n     * {\n     *     schema: '0x5ac273ce41e3c8bfa383efe7c03e54c5f0bff29c9f11ef6ffa930fc84ca32425',\n     *     data: [{\n     *         uid: '0x053d42abce1fd7c8fcddfae21845ad34dae287b2c326220b03ba241bc5a8f019',\n     *         value: 0\n     *     },\n     * }])\n     */\n    function multiRevoke(MultiRevocationRequest[] calldata multiRequests) external payable;\n\n    /**\n     * @dev Revokes existing attestations to multiple schemas via provided EIP712 signatures.\n     *\n     * @param multiDelegatedRequests The arguments of the delegated multi revocation attestation requests. The requests should be\n     * grouped by distinct schema ids to benefit from the best batching optimization.\n     *\n     * Example:\n     *\n     * multiRevokeByDelegation([{\n     *     schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\n     *     data: [{\n     *         uid: '0x211296a1ca0d7f9f2cfebf0daaa575bea9b20e968d81aef4e743d699c6ac4b25',\n     *         value: 1000\n     *     },\n     *     {\n     *         uid: '0xe160ac1bd3606a287b4d53d5d1d6da5895f65b4b4bab6d93aaf5046e48167ade',\n     *         value: 0\n     *     }],\n     *     signatures: [{\n     *         v: 28,\n     *         r: '0x148c...b25b',\n     *         s: '0x5a72...be22'\n     *     },\n     *     {\n     *         v: 28,\n     *         r: '0x487s...67bb',\n     *         s: '0x12ad...2366'\n     *     }],\n     *     revoker: '0x244934dd3e31bE2c81f84ECf0b3E6329F5381992'\n     * }])\n     *\n     */\n    function multiRevokeByDelegation(\n        MultiDelegatedRevocationRequest[] calldata multiDelegatedRequests\n    ) external payable;\n\n    /**\n     * @dev Timestamps the specified bytes32 data.\n     *\n     * @param data The data to timestamp.\n     *\n     * @return The timestamp the data was timestamped with.\n     */\n    function timestamp(bytes32 data) external returns (uint64);\n\n    /**\n     * @dev Timestamps the specified multiple bytes32 data.\n     *\n     * @param data The data to timestamp.\n     *\n     * @return The timestamp the data was timestamped with.\n     */\n    function multiTimestamp(bytes32[] calldata data) external returns (uint64);\n\n    /**\n     * @dev Revokes the specified bytes32 data.\n     *\n     * @param data The data to timestamp.\n     *\n     * @return The timestamp the data was revoked with.\n     */\n    function revokeOffchain(bytes32 data) external returns (uint64);\n\n    /**\n     * @dev Revokes the specified multiple bytes32 data.\n     *\n     * @param data The data to timestamp.\n     *\n     * @return The timestamp the data was revoked with.\n     */\n    function multiRevokeOffchain(bytes32[] calldata data) external returns (uint64);\n\n    /**\n     * @dev Returns an existing attestation by UID.\n     *\n     * @param uid The UID of the attestation to retrieve.\n     *\n     * @return The attestation data members.\n     */\n    function getAttestation(bytes32 uid) external view returns (Attestation memory);\n\n    /**\n     * @dev Checks whether an attestation exists.\n     *\n     * @param uid The UID of the attestation to retrieve.\n     *\n     * @return Whether an attestation exists.\n     */\n    function isAttestationValid(bytes32 uid) external view returns (bool);\n\n    /**\n     * @dev Returns the timestamp that the specified data was timestamped with.\n     *\n     * @param data The data to query.\n     *\n     * @return The timestamp the data was timestamped with.\n     */\n    function getTimestamp(bytes32 data) external view returns (uint64);\n\n    /**\n     * @dev Returns the timestamp that the specified data was timestamped with.\n     *\n     * @param data The data to query.\n     *\n     * @return The timestamp the data was timestamped with.\n     */\n    function getRevokeOffchain(address revoker, bytes32 data) external view returns (uint64);\n}\n"},"@ethereum-attestation-service/eas-contracts/contracts/ISchemaRegistry.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport { ISchemaResolver } from \"./resolver/ISchemaResolver.sol\";\n\n/**\n * @title A struct representing a record for a submitted schema.\n */\nstruct SchemaRecord {\n    bytes32 uid; // The unique identifier of the schema.\n    ISchemaResolver resolver; // Optional schema resolver.\n    bool revocable; // Whether the schema allows revocations explicitly.\n    string schema; // Custom specification of the schema (e.g., an ABI).\n}\n\n/**\n * @title The global schema registry interface.\n */\ninterface ISchemaRegistry {\n    /**\n     * @dev Emitted when a new schema has been registered\n     *\n     * @param uid The schema UID.\n     * @param registerer The address of the account used to register the schema.\n     */\n    event Registered(bytes32 indexed uid, address registerer);\n\n    /**\n     * @dev Submits and reserves a new schema\n     *\n     * @param schema The schema data schema.\n     * @param resolver An optional schema resolver.\n     * @param revocable Whether the schema allows revocations explicitly.\n     *\n     * @return The UID of the new schema.\n     */\n    function register(string calldata schema, ISchemaResolver resolver, bool revocable) external returns (bytes32);\n\n    /**\n     * @dev Returns an existing schema by UID\n     *\n     * @param uid The UID of the schema to retrieve.\n     *\n     * @return The schema data members.\n     */\n    function getSchema(bytes32 uid) external view returns (SchemaRecord memory);\n}\n"},"@ethereum-attestation-service/eas-contracts/contracts/resolver/ISchemaResolver.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport { Attestation } from \"../Common.sol\";\n\n/**\n * @title The interface of an optional schema resolver.\n */\ninterface ISchemaResolver {\n    /**\n     * @dev Returns whether the resolver supports ETH transfers.\n     */\n    function isPayable() external pure returns (bool);\n\n    /**\n     * @dev Processes an attestation and verifies whether it's valid.\n     *\n     * @param attestation The new attestation.\n     *\n     * @return Whether the attestation is valid.\n     */\n    function attest(Attestation calldata attestation) external payable returns (bool);\n\n    /**\n     * @dev Processes multiple attestations and verifies whether they are valid.\n     *\n     * @param attestations The new attestations.\n     * @param values Explicit ETH amounts which were sent with each attestation.\n     *\n     * @return Whether all the attestations are valid.\n     */\n    function multiAttest(\n        Attestation[] calldata attestations,\n        uint256[] calldata values\n    ) external payable returns (bool);\n\n    /**\n     * @dev Processes an attestation revocation and verifies if it can be revoked.\n     *\n     * @param attestation The existing attestation to be revoked.\n     *\n     * @return Whether the attestation can be revoked.\n     */\n    function revoke(Attestation calldata attestation) external payable returns (bool);\n\n    /**\n     * @dev Processes revocation of multiple attestation and verifies they can be revoked.\n     *\n     * @param attestations The existing attestations to be revoked.\n     * @param values Explicit ETH amounts which were sent with each revocation.\n     *\n     * @return Whether the attestations can be revoked.\n     */\n    function multiRevoke(\n        Attestation[] calldata attestations,\n        uint256[] calldata values\n    ) external payable returns (bool);\n}\n"},"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"},"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```solidity\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n *\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n     * constructor.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized != type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint8) {\n        return _initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _initializing;\n    }\n}\n"},"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"},"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"},"contracts/Gap.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.19;\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport {IEAS, AttestationRequest, AttestationRequestData, MultiAttestationRequest} from \"@ethereum-attestation-service/eas-contracts/contracts/IEAS.sol\";\n\ncontract Gap is Initializable, OwnableUpgradeable {\n    IEAS public eas;\n\n    struct AttestationRequestNode {\n        bytes32 uid;\n        MultiAttestationRequest multiRequest;\n        uint refIdx;\n    }\n\n    function initialize(address easAddr) public initializer {\n        eas = IEAS(easAddr);\n        __Ownable_init();\n    }\n\n    function multiSequentialAttest(AttestationRequestNode[] calldata requestNodes) public {\n        bytes32[][] memory totalUids = new bytes32[][](requestNodes.length);\n        for(uint256 i = 0; i < requestNodes.length; i++) {\n            MultiAttestationRequest memory request = requestNodes[i].multiRequest;\n            if (i > 0) {\n                for(uint256 j = 0; j < request.data.length; j++) {\n                    AttestationRequestData memory data = request.data[j];\n                    data.refUID = totalUids[requestNodes[i].refIdx][0];\n                    request.data[j] = data;\n                }\n            }\n            MultiAttestationRequest[] memory requests = new MultiAttestationRequest[](1);\n            requests[0] = request;\n            totalUids[i] = eas.multiAttest(requests);\n        }\n    }\n\n/*\n\n    function multiSequentialAttest(MultiAttestationRequest[] calldata multiRequests) external {\n        bytes32[][] memory totalUids = new bytes32[][](multiRequests.length);\n\n        for (uint256 i = 0; i < multiRequests.length; i++) {\n            MultiAttestationRequest[] memory requests = new MultiAttestationRequest[](1);\n            requests[0] = multiRequests[i];\n            if (i > 0) {\n                for(uint256 j = 0; j < requests[0].data.length; j++) {\n                    AttestationRequestData memory data = requests[0].data[j];\n                    data.refUID = totalUids[i-1][0];\n                    requests[0].data[j] = data;\n                }\n            }\n            totalUids[i] = eas.multiAttest(requests);\n        }\n    }\n    */\n}"}},"settings":{"optimizer":{"enabled":true,"runs":1000},"outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata","storageLayout","devdoc","userdoc","evm.gasEstimates"],"":["ast"]}},"metadata":{"useLiteralContent":true}}},"output":{"sources":{"@ethereum-attestation-service/eas-contracts/contracts/Common.sol":{"ast":{"absolutePath":"@ethereum-attestation-service/eas-contracts/contracts/Common.sol","exportedSymbols":{"AccessDenied":[9],"Attestation":[45],"EIP712Signature":[24],"EMPTY_UID":[4],"InvalidEAS":[11],"InvalidLength":[13],"InvalidSignature":[15],"NO_EXPIRATION_TIME":[7],"NotFound":[17],"uncheckedInc":[61]},"id":62,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"33:23:0"},{"constant":true,"id":4,"mutability":"constant","name":"EMPTY_UID","nameLocation":"126:9:0","nodeType":"VariableDeclaration","scope":62,"src":"109:30:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2,"name":"bytes32","nodeType":"ElementaryTypeName","src":"109:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"hexValue":"30","id":3,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"138:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"visibility":"internal"},{"constant":true,"id":7,"mutability":"constant","name":"NO_EXPIRATION_TIME","nameLocation":"219:18:0","nodeType":"VariableDeclaration","scope":62,"src":"203:38:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":5,"name":"uint64","nodeType":"ElementaryTypeName","src":"203:6:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"value":{"hexValue":"30","id":6,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"240:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"visibility":"internal"},{"errorSelector":"4ca88867","id":9,"name":"AccessDenied","nameLocation":"250:12:0","nodeType":"ErrorDefinition","parameters":{"id":8,"nodeType":"ParameterList","parameters":[],"src":"262:2:0"},"src":"244:21:0"},{"errorSelector":"83780ffe","id":11,"name":"InvalidEAS","nameLocation":"272:10:0","nodeType":"ErrorDefinition","parameters":{"id":10,"nodeType":"ParameterList","parameters":[],"src":"282:2:0"},"src":"266:19:0"},{"errorSelector":"947d5a84","id":13,"name":"InvalidLength","nameLocation":"292:13:0","nodeType":"ErrorDefinition","parameters":{"id":12,"nodeType":"ParameterList","parameters":[],"src":"305:2:0"},"src":"286:22:0"},{"errorSelector":"8baa579f","id":15,"name":"InvalidSignature","nameLocation":"315:16:0","nodeType":"ErrorDefinition","parameters":{"id":14,"nodeType":"ParameterList","parameters":[],"src":"331:2:0"},"src":"309:25:0"},{"errorSelector":"c5723b51","id":17,"name":"NotFound","nameLocation":"341:8:0","nodeType":"ErrorDefinition","parameters":{"id":16,"nodeType":"ParameterList","parameters":[],"src":"349:2:0"},"src":"335:17:0"},{"canonicalName":"EIP712Signature","id":24,"members":[{"constant":false,"id":19,"mutability":"mutable","name":"v","nameLocation":"450:1:0","nodeType":"VariableDeclaration","scope":24,"src":"444:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":18,"name":"uint8","nodeType":"ElementaryTypeName","src":"444:5:0","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":21,"mutability":"mutable","name":"r","nameLocation":"485:1:0","nodeType":"VariableDeclaration","scope":24,"src":"477:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":20,"name":"bytes32","nodeType":"ElementaryTypeName","src":"477:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":23,"mutability":"mutable","name":"s","nameLocation":"536:1:0","nodeType":"VariableDeclaration","scope":24,"src":"528:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":22,"name":"bytes32","nodeType":"ElementaryTypeName","src":"528:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"name":"EIP712Signature","nameLocation":"422:15:0","nodeType":"StructDefinition","scope":62,"src":"415:148:0","visibility":"public"},{"canonicalName":"Attestation","id":45,"members":[{"constant":false,"id":26,"mutability":"mutable","name":"uid","nameLocation":"658:3:0","nodeType":"VariableDeclaration","scope":45,"src":"650:11:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":25,"name":"bytes32","nodeType":"ElementaryTypeName","src":"650:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":28,"mutability":"mutable","name":"schema","nameLocation":"718:6:0","nodeType":"VariableDeclaration","scope":45,"src":"710:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":27,"name":"bytes32","nodeType":"ElementaryTypeName","src":"710:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":30,"mutability":"mutable","name":"time","nameLocation":"777:4:0","nodeType":"VariableDeclaration","scope":45,"src":"770:11:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":29,"name":"uint64","nodeType":"ElementaryTypeName","src":"770:6:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":32,"mutability":"mutable","name":"expirationTime","nameLocation":"857:14:0","nodeType":"VariableDeclaration","scope":45,"src":"850:21:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":31,"name":"uint64","nodeType":"ElementaryTypeName","src":"850:6:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":34,"mutability":"mutable","name":"revocationTime","nameLocation":"943:14:0","nodeType":"VariableDeclaration","scope":45,"src":"936:21:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":33,"name":"uint64","nodeType":"ElementaryTypeName","src":"936:6:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":36,"mutability":"mutable","name":"refUID","nameLocation":"1034:6:0","nodeType":"VariableDeclaration","scope":45,"src":"1026:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":35,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1026:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":38,"mutability":"mutable","name":"recipient","nameLocation":"1093:9:0","nodeType":"VariableDeclaration","scope":45,"src":"1085:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":37,"name":"address","nodeType":"ElementaryTypeName","src":"1085:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":40,"mutability":"mutable","name":"attester","nameLocation":"1153:8:0","nodeType":"VariableDeclaration","scope":45,"src":"1145:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":39,"name":"address","nodeType":"ElementaryTypeName","src":"1145:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":42,"mutability":"mutable","name":"revocable","nameLocation":"1215:9:0","nodeType":"VariableDeclaration","scope":45,"src":"1210:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":41,"name":"bool","nodeType":"ElementaryTypeName","src":"1210:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":44,"mutability":"mutable","name":"data","nameLocation":"1277:4:0","nodeType":"VariableDeclaration","scope":45,"src":"1271:10:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":43,"name":"bytes","nodeType":"ElementaryTypeName","src":"1271:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"name":"Attestation","nameLocation":"632:11:0","nodeType":"StructDefinition","scope":62,"src":"625:687:0","visibility":"public"},{"body":{"id":60,"nodeType":"Block","src":"1449:44:0","statements":[{"id":59,"nodeType":"UncheckedBlock","src":"1455:36:0","statements":[{"expression":{"id":57,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":53,"name":"j","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":51,"src":"1475:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":56,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":54,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":48,"src":"1479:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":55,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1483:1:0","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1479:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1475:9:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":58,"nodeType":"ExpressionStatement","src":"1475:9:0"}]}]},"documentation":{"id":46,"nodeType":"StructuredDocumentation","src":"1314:76:0","text":" @dev A helper function to work with unchecked iterators in loops."},"id":61,"implemented":true,"kind":"freeFunction","modifiers":[],"name":"uncheckedInc","nameLocation":"1400:12:0","nodeType":"FunctionDefinition","parameters":{"id":49,"nodeType":"ParameterList","parameters":[{"constant":false,"id":48,"mutability":"mutable","name":"i","nameLocation":"1421:1:0","nodeType":"VariableDeclaration","scope":61,"src":"1413:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":47,"name":"uint256","nodeType":"ElementaryTypeName","src":"1413:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1412:11:0"},"returnParameters":{"id":52,"nodeType":"ParameterList","parameters":[{"constant":false,"id":51,"mutability":"mutable","name":"j","nameLocation":"1446:1:0","nodeType":"VariableDeclaration","scope":61,"src":"1438:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":50,"name":"uint256","nodeType":"ElementaryTypeName","src":"1438:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1437:11:0"},"scope":62,"src":"1391:102:0","stateMutability":"pure","virtual":false,"visibility":"internal"}],"src":"33:1461:0"},"id":0},"@ethereum-attestation-service/eas-contracts/contracts/IEAS.sol":{"ast":{"absolutePath":"@ethereum-attestation-service/eas-contracts/contracts/IEAS.sol","exportedSymbols":{"Attestation":[45],"AttestationRequest":[87],"AttestationRequestData":[81],"DelegatedAttestationRequest":[98],"DelegatedRevocationRequest":[140],"EIP712Signature":[24],"IEAS":[346],"ISchemaRegistry":[391],"MultiAttestationRequest":[105],"MultiDelegatedAttestationRequest":[118],"MultiDelegatedRevocationRequest":[160],"MultiRevocationRequest":[147],"RevocationRequest":[129],"RevocationRequestData":[123]},"id":347,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":63,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"33:23:1"},{"absolutePath":"@ethereum-attestation-service/eas-contracts/contracts/ISchemaRegistry.sol","file":"./ISchemaRegistry.sol","id":65,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":347,"sourceUnit":392,"src":"58:56:1","symbolAliases":[{"foreign":{"id":64,"name":"ISchemaRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":391,"src":"67:15:1","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@ethereum-attestation-service/eas-contracts/contracts/Common.sol","file":"./Common.sol","id":68,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":347,"sourceUnit":62,"src":"115:60:1","symbolAliases":[{"foreign":{"id":66,"name":"Attestation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":45,"src":"124:11:1","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":67,"name":"EIP712Signature","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":24,"src":"137:15:1","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"canonicalName":"AttestationRequestData","id":81,"members":[{"constant":false,"id":70,"mutability":"mutable","name":"recipient","nameLocation":"301:9:1","nodeType":"VariableDeclaration","scope":81,"src":"293:17:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":69,"name":"address","nodeType":"ElementaryTypeName","src":"293:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":72,"mutability":"mutable","name":"expirationTime","nameLocation":"360:14:1","nodeType":"VariableDeclaration","scope":81,"src":"353:21:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":71,"name":"uint64","nodeType":"ElementaryTypeName","src":"353:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":74,"mutability":"mutable","name":"revocable","nameLocation":"444:9:1","nodeType":"VariableDeclaration","scope":81,"src":"439:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":73,"name":"bool","nodeType":"ElementaryTypeName","src":"439:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":76,"mutability":"mutable","name":"refUID","nameLocation":"508:6:1","nodeType":"VariableDeclaration","scope":81,"src":"500:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":75,"name":"bytes32","nodeType":"ElementaryTypeName","src":"500:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":78,"mutability":"mutable","name":"data","nameLocation":"565:4:1","nodeType":"VariableDeclaration","scope":81,"src":"559:10:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":77,"name":"bytes","nodeType":"ElementaryTypeName","src":"559:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":80,"mutability":"mutable","name":"value","nameLocation":"611:5:1","nodeType":"VariableDeclaration","scope":81,"src":"603:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":79,"name":"uint256","nodeType":"ElementaryTypeName","src":"603:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"AttestationRequestData","nameLocation":"264:22:1","nodeType":"StructDefinition","scope":347,"src":"257:466:1","visibility":"public"},{"canonicalName":"AttestationRequest","id":87,"members":[{"constant":false,"id":83,"mutability":"mutable","name":"schema","nameLocation":"850:6:1","nodeType":"VariableDeclaration","scope":87,"src":"842:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":82,"name":"bytes32","nodeType":"ElementaryTypeName","src":"842:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":86,"mutability":"mutable","name":"data","nameLocation":"925:4:1","nodeType":"VariableDeclaration","scope":87,"src":"902:27:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_AttestationRequestData_$81_storage_ptr","typeString":"struct AttestationRequestData"},"typeName":{"id":85,"nodeType":"UserDefinedTypeName","pathNode":{"id":84,"name":"AttestationRequestData","nameLocations":["902:22:1"],"nodeType":"IdentifierPath","referencedDeclaration":81,"src":"902:22:1"},"referencedDeclaration":81,"src":"902:22:1","typeDescriptions":{"typeIdentifier":"t_struct$_AttestationRequestData_$81_storage_ptr","typeString":"struct AttestationRequestData"}},"visibility":"internal"}],"name":"AttestationRequest","nameLocation":"817:18:1","nodeType":"StructDefinition","scope":347,"src":"810:167:1","visibility":"public"},{"canonicalName":"DelegatedAttestationRequest","id":98,"members":[{"constant":false,"id":89,"mutability":"mutable","name":"schema","nameLocation":"1128:6:1","nodeType":"VariableDeclaration","scope":98,"src":"1120:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":88,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1120:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":92,"mutability":"mutable","name":"data","nameLocation":"1203:4:1","nodeType":"VariableDeclaration","scope":98,"src":"1180:27:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_AttestationRequestData_$81_storage_ptr","typeString":"struct AttestationRequestData"},"typeName":{"id":91,"nodeType":"UserDefinedTypeName","pathNode":{"id":90,"name":"AttestationRequestData","nameLocations":["1180:22:1"],"nodeType":"IdentifierPath","referencedDeclaration":81,"src":"1180:22:1"},"referencedDeclaration":81,"src":"1180:22:1","typeDescriptions":{"typeIdentifier":"t_struct$_AttestationRequestData_$81_storage_ptr","typeString":"struct AttestationRequestData"}},"visibility":"internal"},{"constant":false,"id":95,"mutability":"mutable","name":"signature","nameLocation":"1274:9:1","nodeType":"VariableDeclaration","scope":98,"src":"1258:25:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_EIP712Signature_$24_storage_ptr","typeString":"struct EIP712Signature"},"typeName":{"id":94,"nodeType":"UserDefinedTypeName","pathNode":{"id":93,"name":"EIP712Signature","nameLocations":["1258:15:1"],"nodeType":"IdentifierPath","referencedDeclaration":24,"src":"1258:15:1"},"referencedDeclaration":24,"src":"1258:15:1","typeDescriptions":{"typeIdentifier":"t_struct$_EIP712Signature_$24_storage_ptr","typeString":"struct EIP712Signature"}},"visibility":"internal"},{"constant":false,"id":97,"mutability":"mutable","name":"attester","nameLocation":"1327:8:1","nodeType":"VariableDeclaration","scope":98,"src":"1319:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":96,"name":"address","nodeType":"ElementaryTypeName","src":"1319:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"name":"DelegatedAttestationRequest","nameLocation":"1086:27:1","nodeType":"StructDefinition","scope":347,"src":"1079:285:1","visibility":"public"},{"canonicalName":"MultiAttestationRequest","id":105,"members":[{"constant":false,"id":100,"mutability":"mutable","name":"schema","nameLocation":"1502:6:1","nodeType":"VariableDeclaration","scope":105,"src":"1494:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":99,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1494:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":104,"mutability":"mutable","name":"data","nameLocation":"1579:4:1","nodeType":"VariableDeclaration","scope":105,"src":"1554:29:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_AttestationRequestData_$81_storage_$dyn_storage_ptr","typeString":"struct AttestationRequestData[]"},"typeName":{"baseType":{"id":102,"nodeType":"UserDefinedTypeName","pathNode":{"id":101,"name":"AttestationRequestData","nameLocations":["1554:22:1"],"nodeType":"IdentifierPath","referencedDeclaration":81,"src":"1554:22:1"},"referencedDeclaration":81,"src":"1554:22:1","typeDescriptions":{"typeIdentifier":"t_struct$_AttestationRequestData_$81_storage_ptr","typeString":"struct AttestationRequestData"}},"id":103,"nodeType":"ArrayTypeName","src":"1554:24:1","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_AttestationRequestData_$81_storage_$dyn_storage_ptr","typeString":"struct AttestationRequestData[]"}},"visibility":"internal"}],"name":"MultiAttestationRequest","nameLocation":"1464:23:1","nodeType":"StructDefinition","scope":347,"src":"1457:174:1","visibility":"public"},{"canonicalName":"MultiDelegatedAttestationRequest","id":118,"members":[{"constant":false,"id":107,"mutability":"mutable","name":"schema","nameLocation":"1788:6:1","nodeType":"VariableDeclaration","scope":118,"src":"1780:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":106,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1780:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":111,"mutability":"mutable","name":"data","nameLocation":"1865:4:1","nodeType":"VariableDeclaration","scope":118,"src":"1840:29:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_AttestationRequestData_$81_storage_$dyn_storage_ptr","typeString":"struct AttestationRequestData[]"},"typeName":{"baseType":{"id":109,"nodeType":"UserDefinedTypeName","pathNode":{"id":108,"name":"AttestationRequestData","nameLocations":["1840:22:1"],"nodeType":"IdentifierPath","referencedDeclaration":81,"src":"1840:22:1"},"referencedDeclaration":81,"src":"1840:22:1","typeDescriptions":{"typeIdentifier":"t_struct$_AttestationRequestData_$81_storage_ptr","typeString":"struct AttestationRequestData"}},"id":110,"nodeType":"ArrayTypeName","src":"1840:24:1","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_AttestationRequestData_$81_storage_$dyn_storage_ptr","typeString":"struct AttestationRequestData[]"}},"visibility":"internal"},{"constant":false,"id":115,"mutability":"mutable","name":"signatures","nameLocation":"1939:10:1","nodeType":"VariableDeclaration","scope":118,"src":"1921:28:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_EIP712Signature_$24_storage_$dyn_storage_ptr","typeString":"struct EIP712Signature[]"},"typeName":{"baseType":{"id":113,"nodeType":"UserDefinedTypeName","pathNode":{"id":112,"name":"EIP712Signature","nameLocations":["1921:15:1"],"nodeType":"IdentifierPath","referencedDeclaration":24,"src":"1921:15:1"},"referencedDeclaration":24,"src":"1921:15:1","typeDescriptions":{"typeIdentifier":"t_struct$_EIP712Signature_$24_storage_ptr","typeString":"struct EIP712Signature"}},"id":114,"nodeType":"ArrayTypeName","src":"1921:17:1","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_EIP712Signature_$24_storage_$dyn_storage_ptr","typeString":"struct EIP712Signature[]"}},"visibility":"internal"},{"constant":false,"id":117,"mutability":"mutable","name":"attester","nameLocation":"2075:8:1","nodeType":"VariableDeclaration","scope":118,"src":"2067:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":116,"name":"address","nodeType":"ElementaryTypeName","src":"2067:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"name":"MultiDelegatedAttestationRequest","nameLocation":"1741:32:1","nodeType":"StructDefinition","scope":347,"src":"1734:378:1","visibility":"public"},{"canonicalName":"RevocationRequestData","id":123,"members":[{"constant":false,"id":120,"mutability":"mutable","name":"uid","nameLocation":"2236:3:1","nodeType":"VariableDeclaration","scope":123,"src":"2228:11:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":119,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2228:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":122,"mutability":"mutable","name":"value","nameLocation":"2294:5:1","nodeType":"VariableDeclaration","scope":123,"src":"2286:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":121,"name":"uint256","nodeType":"ElementaryTypeName","src":"2286:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"RevocationRequestData","nameLocation":"2200:21:1","nodeType":"StructDefinition","scope":347,"src":"2193:213:1","visibility":"public"},{"canonicalName":"RevocationRequest","id":129,"members":[{"constant":false,"id":125,"mutability":"mutable","name":"schema","nameLocation":"2531:6:1","nodeType":"VariableDeclaration","scope":129,"src":"2523:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":124,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2523:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":128,"mutability":"mutable","name":"data","nameLocation":"2605:4:1","nodeType":"VariableDeclaration","scope":129,"src":"2583:26:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_RevocationRequestData_$123_storage_ptr","typeString":"struct RevocationRequestData"},"typeName":{"id":127,"nodeType":"UserDefinedTypeName","pathNode":{"id":126,"name":"RevocationRequestData","nameLocations":["2583:21:1"],"nodeType":"IdentifierPath","referencedDeclaration":123,"src":"2583:21:1"},"referencedDeclaration":123,"src":"2583:21:1","typeDescriptions":{"typeIdentifier":"t_struct$_RevocationRequestData_$123_storage_ptr","typeString":"struct RevocationRequestData"}},"visibility":"internal"}],"name":"RevocationRequest","nameLocation":"2499:17:1","nodeType":"StructDefinition","scope":347,"src":"2492:164:1","visibility":"public"},{"canonicalName":"DelegatedRevocationRequest","id":140,"members":[{"constant":false,"id":131,"mutability":"mutable","name":"schema","nameLocation":"2800:6:1","nodeType":"VariableDeclaration","scope":140,"src":"2792:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":130,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2792:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":134,"mutability":"mutable","name":"data","nameLocation":"2874:4:1","nodeType":"VariableDeclaration","scope":140,"src":"2852:26:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_RevocationRequestData_$123_storage_ptr","typeString":"struct RevocationRequestData"},"typeName":{"id":133,"nodeType":"UserDefinedTypeName","pathNode":{"id":132,"name":"RevocationRequestData","nameLocations":["2852:21:1"],"nodeType":"IdentifierPath","referencedDeclaration":123,"src":"2852:21:1"},"referencedDeclaration":123,"src":"2852:21:1","typeDescriptions":{"typeIdentifier":"t_struct$_RevocationRequestData_$123_storage_ptr","typeString":"struct RevocationRequestData"}},"visibility":"internal"},{"constant":false,"id":137,"mutability":"mutable","name":"signature","nameLocation":"2944:9:1","nodeType":"VariableDeclaration","scope":140,"src":"2928:25:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_EIP712Signature_$24_storage_ptr","typeString":"struct EIP712Signature"},"typeName":{"id":136,"nodeType":"UserDefinedTypeName","pathNode":{"id":135,"name":"EIP712Signature","nameLocations":["2928:15:1"],"nodeType":"IdentifierPath","referencedDeclaration":24,"src":"2928:15:1"},"referencedDeclaration":24,"src":"2928:15:1","typeDescriptions":{"typeIdentifier":"t_struct$_EIP712Signature_$24_storage_ptr","typeString":"struct EIP712Signature"}},"visibility":"internal"},{"constant":false,"id":139,"mutability":"mutable","name":"revoker","nameLocation":"2997:7:1","nodeType":"VariableDeclaration","scope":140,"src":"2989:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":138,"name":"address","nodeType":"ElementaryTypeName","src":"2989:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"name":"DelegatedRevocationRequest","nameLocation":"2759:26:1","nodeType":"StructDefinition","scope":347,"src":"2752:280:1","visibility":"public"},{"canonicalName":"MultiRevocationRequest","id":147,"members":[{"constant":false,"id":142,"mutability":"mutable","name":"schema","nameLocation":"3168:6:1","nodeType":"VariableDeclaration","scope":147,"src":"3160:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":141,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3160:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":146,"mutability":"mutable","name":"data","nameLocation":"3244:4:1","nodeType":"VariableDeclaration","scope":147,"src":"3220:28:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_RevocationRequestData_$123_storage_$dyn_storage_ptr","typeString":"struct RevocationRequestData[]"},"typeName":{"baseType":{"id":144,"nodeType":"UserDefinedTypeName","pathNode":{"id":143,"name":"RevocationRequestData","nameLocations":["3220:21:1"],"nodeType":"IdentifierPath","referencedDeclaration":123,"src":"3220:21:1"},"referencedDeclaration":123,"src":"3220:21:1","typeDescriptions":{"typeIdentifier":"t_struct$_RevocationRequestData_$123_storage_ptr","typeString":"struct RevocationRequestData"}},"id":145,"nodeType":"ArrayTypeName","src":"3220:23:1","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_RevocationRequestData_$123_storage_$dyn_storage_ptr","typeString":"struct RevocationRequestData[]"}},"visibility":"internal"}],"name":"MultiRevocationRequest","nameLocation":"3131:22:1","nodeType":"StructDefinition","scope":347,"src":"3124:171:1","visibility":"public"},{"canonicalName":"MultiDelegatedRevocationRequest","id":160,"members":[{"constant":false,"id":149,"mutability":"mutable","name":"schema","nameLocation":"3450:6:1","nodeType":"VariableDeclaration","scope":160,"src":"3442:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":148,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3442:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":153,"mutability":"mutable","name":"data","nameLocation":"3526:4:1","nodeType":"VariableDeclaration","scope":160,"src":"3502:28:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_RevocationRequestData_$123_storage_$dyn_storage_ptr","typeString":"struct RevocationRequestData[]"},"typeName":{"baseType":{"id":151,"nodeType":"UserDefinedTypeName","pathNode":{"id":150,"name":"RevocationRequestData","nameLocations":["3502:21:1"],"nodeType":"IdentifierPath","referencedDeclaration":123,"src":"3502:21:1"},"referencedDeclaration":123,"src":"3502:21:1","typeDescriptions":{"typeIdentifier":"t_struct$_RevocationRequestData_$123_storage_ptr","typeString":"struct RevocationRequestData"}},"id":152,"nodeType":"ArrayTypeName","src":"3502:23:1","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_RevocationRequestData_$123_storage_$dyn_storage_ptr","typeString":"struct RevocationRequestData[]"}},"visibility":"internal"},{"constant":false,"id":157,"mutability":"mutable","name":"signatures","nameLocation":"3599:10:1","nodeType":"VariableDeclaration","scope":160,"src":"3581:28:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_EIP712Signature_$24_storage_$dyn_storage_ptr","typeString":"struct EIP712Signature[]"},"typeName":{"baseType":{"id":155,"nodeType":"UserDefinedTypeName","pathNode":{"id":154,"name":"EIP712Signature","nameLocations":["3581:15:1"],"nodeType":"IdentifierPath","referencedDeclaration":24,"src":"3581:15:1"},"referencedDeclaration":24,"src":"3581:15:1","typeDescriptions":{"typeIdentifier":"t_struct$_EIP712Signature_$24_storage_ptr","typeString":"struct EIP712Signature"}},"id":156,"nodeType":"ArrayTypeName","src":"3581:17:1","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_EIP712Signature_$24_storage_$dyn_storage_ptr","typeString":"struct EIP712Signature[]"}},"visibility":"internal"},{"constant":false,"id":159,"mutability":"mutable","name":"revoker","nameLocation":"3735:7:1","nodeType":"VariableDeclaration","scope":160,"src":"3727:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":158,"name":"address","nodeType":"ElementaryTypeName","src":"3727:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"name":"MultiDelegatedRevocationRequest","nameLocation":"3404:31:1","nodeType":"StructDefinition","scope":347,"src":"3397:373:1","visibility":"public"},{"abstract":false,"baseContracts":[],"canonicalName":"IEAS","contractDependencies":[],"contractKind":"interface","documentation":{"id":161,"nodeType":"StructuredDocumentation","src":"3772:63:1","text":" @title EAS - Ethereum Attestation Service interface."},"fullyImplemented":false,"id":346,"linearizedBaseContracts":[346],"name":"IEAS","nameLocation":"3846:4:1","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":162,"nodeType":"StructuredDocumentation","src":"3857:272:1","text":" @dev Emitted when an attestation has been made.\n @param recipient The recipient of the attestation.\n @param attester The attesting account.\n @param uid The UID the revoked attestation.\n @param schema The UID of the schema."},"eventSelector":"8bf46bf4cfd674fa735a3d63ec1c9ad4153f033c290341f3a588b75685141b35","id":172,"name":"Attested","nameLocation":"4140:8:1","nodeType":"EventDefinition","parameters":{"id":171,"nodeType":"ParameterList","parameters":[{"constant":false,"id":164,"indexed":true,"mutability":"mutable","name":"recipient","nameLocation":"4165:9:1","nodeType":"VariableDeclaration","scope":172,"src":"4149:25:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":163,"name":"address","nodeType":"ElementaryTypeName","src":"4149:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":166,"indexed":true,"mutability":"mutable","name":"attester","nameLocation":"4192:8:1","nodeType":"VariableDeclaration","scope":172,"src":"4176:24:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":165,"name":"address","nodeType":"ElementaryTypeName","src":"4176:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":168,"indexed":false,"mutability":"mutable","name":"uid","nameLocation":"4210:3:1","nodeType":"VariableDeclaration","scope":172,"src":"4202:11:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":167,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4202:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":170,"indexed":true,"mutability":"mutable","name":"schema","nameLocation":"4231:6:1","nodeType":"VariableDeclaration","scope":172,"src":"4215:22:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":169,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4215:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4148:90:1"},"src":"4134:105:1"},{"anonymous":false,"documentation":{"id":173,"nodeType":"StructuredDocumentation","src":"4245:275:1","text":" @dev Emitted when an attestation has been revoked.\n @param recipient The recipient of the attestation.\n @param attester The attesting account.\n @param schema The UID of the schema.\n @param uid The UID the revoked attestation."},"eventSelector":"f930a6e2523c9cc298691873087a740550b8fc85a0680830414c148ed927f615","id":183,"name":"Revoked","nameLocation":"4531:7:1","nodeType":"EventDefinition","parameters":{"id":182,"nodeType":"ParameterList","parameters":[{"constant":false,"id":175,"indexed":true,"mutability":"mutable","name":"recipient","nameLocation":"4555:9:1","nodeType":"VariableDeclaration","scope":183,"src":"4539:25:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":174,"name":"address","nodeType":"ElementaryTypeName","src":"4539:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":177,"indexed":true,"mutability":"mutable","name":"attester","nameLocation":"4582:8:1","nodeType":"VariableDeclaration","scope":183,"src":"4566:24:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":176,"name":"address","nodeType":"ElementaryTypeName","src":"4566:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":179,"indexed":false,"mutability":"mutable","name":"uid","nameLocation":"4600:3:1","nodeType":"VariableDeclaration","scope":183,"src":"4592:11:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":178,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4592:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":181,"indexed":true,"mutability":"mutable","name":"schema","nameLocation":"4621:6:1","nodeType":"VariableDeclaration","scope":183,"src":"4605:22:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":180,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4605:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4538:90:1"},"src":"4525:104:1"},{"anonymous":false,"documentation":{"id":184,"nodeType":"StructuredDocumentation","src":"4635:140:1","text":" @dev Emitted when a data has been timestamped.\n @param data The data.\n @param timestamp The timestamp."},"eventSelector":"5aafceeb1c7ad58e4a84898bdee37c02c0fc46e7d24e6b60e8209449f183459f","id":190,"name":"Timestamped","nameLocation":"4786:11:1","nodeType":"EventDefinition","parameters":{"id":189,"nodeType":"ParameterList","parameters":[{"constant":false,"id":186,"indexed":true,"mutability":"mutable","name":"data","nameLocation":"4814:4:1","nodeType":"VariableDeclaration","scope":190,"src":"4798:20:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":185,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4798:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":188,"indexed":true,"mutability":"mutable","name":"timestamp","nameLocation":"4835:9:1","nodeType":"VariableDeclaration","scope":190,"src":"4820:24:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":187,"name":"uint64","nodeType":"ElementaryTypeName","src":"4820:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"4797:48:1"},"src":"4780:66:1"},{"anonymous":false,"documentation":{"id":191,"nodeType":"StructuredDocumentation","src":"4852:186:1","text":" @dev Emitted when a data has been revoked.\n @param revoker The address of the revoker.\n @param data The data.\n @param timestamp The timestamp."},"eventSelector":"92a1f7a41a7c585a8b09e25b195e225b1d43248daca46b0faf9e0792777a2229","id":199,"name":"RevokedOffchain","nameLocation":"5049:15:1","nodeType":"EventDefinition","parameters":{"id":198,"nodeType":"ParameterList","parameters":[{"constant":false,"id":193,"indexed":true,"mutability":"mutable","name":"revoker","nameLocation":"5081:7:1","nodeType":"VariableDeclaration","scope":199,"src":"5065:23:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":192,"name":"address","nodeType":"ElementaryTypeName","src":"5065:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":195,"indexed":true,"mutability":"mutable","name":"data","nameLocation":"5106:4:1","nodeType":"VariableDeclaration","scope":199,"src":"5090:20:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":194,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5090:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":197,"indexed":true,"mutability":"mutable","name":"timestamp","nameLocation":"5127:9:1","nodeType":"VariableDeclaration","scope":199,"src":"5112:24:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":196,"name":"uint64","nodeType":"ElementaryTypeName","src":"5112:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"5064:73:1"},"src":"5043:95:1"},{"documentation":{"id":200,"nodeType":"StructuredDocumentation","src":"5144:139:1","text":" @dev Returns the address of the global schema registry.\n @return The address of the global schema registry."},"functionSelector":"f10b5cc8","id":206,"implemented":false,"kind":"function","modifiers":[],"name":"getSchemaRegistry","nameLocation":"5297:17:1","nodeType":"FunctionDefinition","parameters":{"id":201,"nodeType":"ParameterList","parameters":[],"src":"5314:2:1"},"returnParameters":{"id":205,"nodeType":"ParameterList","parameters":[{"constant":false,"id":204,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":206,"src":"5340:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_ISchemaRegistry_$391","typeString":"contract ISchemaRegistry"},"typeName":{"id":203,"nodeType":"UserDefinedTypeName","pathNode":{"id":202,"name":"ISchemaRegistry","nameLocations":["5340:15:1"],"nodeType":"IdentifierPath","referencedDeclaration":391,"src":"5340:15:1"},"referencedDeclaration":391,"src":"5340:15:1","typeDescriptions":{"typeIdentifier":"t_contract$_ISchemaRegistry_$391","typeString":"contract ISchemaRegistry"}},"visibility":"internal"}],"src":"5339:17:1"},"scope":346,"src":"5288:69:1","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":207,"nodeType":"StructuredDocumentation","src":"5363:639:1","text":" @dev Attests to a specific schema.\n @param request The arguments of the attestation request.\n Example:\n attest({\n     schema: \"0facc36681cbe2456019c1b0d1e7bedd6d1d40f6f324bf3dd3a4cef2999200a0\",\n     data: {\n         recipient: \"0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf\",\n         expirationTime: 0,\n         revocable: true,\n         refUID: \"0x0000000000000000000000000000000000000000000000000000000000000000\",\n         data: \"0xF00D\",\n         value: 0\n     }\n })\n @return The UID of the new attestation."},"functionSelector":"f17325e7","id":215,"implemented":false,"kind":"function","modifiers":[],"name":"attest","nameLocation":"6016:6:1","nodeType":"FunctionDefinition","parameters":{"id":211,"nodeType":"ParameterList","parameters":[{"constant":false,"id":210,"mutability":"mutable","name":"request","nameLocation":"6051:7:1","nodeType":"VariableDeclaration","scope":215,"src":"6023:35:1","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_AttestationRequest_$87_calldata_ptr","typeString":"struct AttestationRequest"},"typeName":{"id":209,"nodeType":"UserDefinedTypeName","pathNode":{"id":208,"name":"AttestationRequest","nameLocations":["6023:18:1"],"nodeType":"IdentifierPath","referencedDeclaration":87,"src":"6023:18:1"},"referencedDeclaration":87,"src":"6023:18:1","typeDescriptions":{"typeIdentifier":"t_struct$_AttestationRequest_$87_storage_ptr","typeString":"struct AttestationRequest"}},"visibility":"internal"}],"src":"6022:37:1"},"returnParameters":{"id":214,"nodeType":"ParameterList","parameters":[{"constant":false,"id":213,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":215,"src":"6086:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":212,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6086:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"6085:9:1"},"scope":346,"src":"6007:88:1","stateMutability":"payable","virtual":false,"visibility":"external"},{"documentation":{"id":216,"nodeType":"StructuredDocumentation","src":"6101:911:1","text":" @dev Attests to a specific schema via the provided EIP712 signature.\n @param delegatedRequest The arguments of the delegated attestation request.\n Example:\n attestByDelegation({\n     schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\n     data: {\n         recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',\n         expirationTime: 1673891048,\n         revocable: true,\n         refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\n         data: '0x1234',\n         value: 0\n     },\n     signature: {\n         v: 28,\n         r: '0x148c...b25b',\n         s: '0x5a72...be22'\n     },\n     attester: '0xc5E8740aD971409492b1A63Db8d83025e0Fc427e'\n })\n @return The UID of the new attestation."},"functionSelector":"e13458fc","id":224,"implemented":false,"kind":"function","modifiers":[],"name":"attestByDelegation","nameLocation":"7026:18:1","nodeType":"FunctionDefinition","parameters":{"id":220,"nodeType":"ParameterList","parameters":[{"constant":false,"id":219,"mutability":"mutable","name":"delegatedRequest","nameLocation":"7091:16:1","nodeType":"VariableDeclaration","scope":224,"src":"7054:53:1","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_DelegatedAttestationRequest_$98_calldata_ptr","typeString":"struct DelegatedAttestationRequest"},"typeName":{"id":218,"nodeType":"UserDefinedTypeName","pathNode":{"id":217,"name":"DelegatedAttestationRequest","nameLocations":["7054:27:1"],"nodeType":"IdentifierPath","referencedDeclaration":98,"src":"7054:27:1"},"referencedDeclaration":98,"src":"7054:27:1","typeDescriptions":{"typeIdentifier":"t_struct$_DelegatedAttestationRequest_$98_storage_ptr","typeString":"struct DelegatedAttestationRequest"}},"visibility":"internal"}],"src":"7044:69:1"},"returnParameters":{"id":223,"nodeType":"ParameterList","parameters":[{"constant":false,"id":222,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":224,"src":"7140:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":221,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7140:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"7139:9:1"},"scope":346,"src":"7017:132:1","stateMutability":"payable","virtual":false,"visibility":"external"},{"documentation":{"id":225,"nodeType":"StructuredDocumentation","src":"7155:1530:1","text":" @dev Attests to multiple schemas.\n @param multiRequests The arguments of the multi attestation requests. The requests should be grouped by distinct\n schema ids to benefit from the best batching optimization.\n Example:\n multiAttest([{\n     schema: '0x33e9094830a5cba5554d1954310e4fbed2ef5f859ec1404619adea4207f391fd',\n     data: [{\n         recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',\n         expirationTime: 1673891048,\n         revocable: true,\n         refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\n         data: '0x1234',\n         value: 1000\n     },\n     {\n         recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',\n         expirationTime: 0,\n         revocable: false,\n         refUID: '0x480df4a039efc31b11bfdf491b383ca138b6bde160988222a2a3509c02cee174',\n         data: '0x00',\n         value: 0\n     }],\n },\n {\n     schema: '0x5ac273ce41e3c8bfa383efe7c03e54c5f0bff29c9f11ef6ffa930fc84ca32425',\n     data: [{\n         recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',\n         expirationTime: 0,\n         revocable: true,\n         refUID: '0x75bf2ed8dca25a8190c50c52db136664de25b2449535839008ccfdab469b214f',\n         data: '0x12345678',\n         value: 0\n     },\n }])\n @return The UIDs of the new attestations."},"functionSelector":"44adc90e","id":235,"implemented":false,"kind":"function","modifiers":[],"name":"multiAttest","nameLocation":"8699:11:1","nodeType":"FunctionDefinition","parameters":{"id":230,"nodeType":"ParameterList","parameters":[{"constant":false,"id":229,"mutability":"mutable","name":"multiRequests","nameLocation":"8746:13:1","nodeType":"VariableDeclaration","scope":235,"src":"8711:48:1","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_MultiAttestationRequest_$105_calldata_ptr_$dyn_calldata_ptr","typeString":"struct MultiAttestationRequest[]"},"typeName":{"baseType":{"id":227,"nodeType":"UserDefinedTypeName","pathNode":{"id":226,"name":"MultiAttestationRequest","nameLocations":["8711:23:1"],"nodeType":"IdentifierPath","referencedDeclaration":105,"src":"8711:23:1"},"referencedDeclaration":105,"src":"8711:23:1","typeDescriptions":{"typeIdentifier":"t_struct$_MultiAttestationRequest_$105_storage_ptr","typeString":"struct MultiAttestationRequest"}},"id":228,"nodeType":"ArrayTypeName","src":"8711:25:1","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_MultiAttestationRequest_$105_storage_$dyn_storage_ptr","typeString":"struct MultiAttestationRequest[]"}},"visibility":"internal"}],"src":"8710:50:1"},"returnParameters":{"id":234,"nodeType":"ParameterList","parameters":[{"constant":false,"id":233,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":235,"src":"8787:16:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":231,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8787:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":232,"nodeType":"ArrayTypeName","src":"8787:9:1","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"8786:18:1"},"scope":346,"src":"8690:115:1","stateMutability":"payable","virtual":false,"visibility":"external"},{"documentation":{"id":236,"nodeType":"StructuredDocumentation","src":"8811:1479:1","text":" @dev Attests to multiple schemas using via provided EIP712 signatures.\n @param multiDelegatedRequests The arguments of the delegated multi attestation requests. The requests should be\n grouped by distinct schema ids to benefit from the best batching optimization.\n Example:\n multiAttestByDelegation([{\n     schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\n     data: [{\n         recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',\n         expirationTime: 1673891048,\n         revocable: true,\n         refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\n         data: '0x1234',\n         value: 0\n     },\n     {\n         recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',\n         expirationTime: 0,\n         revocable: false,\n         refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\n         data: '0x00',\n         value: 0\n     }],\n     signatures: [{\n         v: 28,\n         r: '0x148c...b25b',\n         s: '0x5a72...be22'\n     },\n     {\n         v: 28,\n         r: '0x487s...67bb',\n         s: '0x12ad...2366'\n     }],\n     attester: '0x1D86495b2A7B524D747d2839b3C645Bed32e8CF4'\n }])\n @return The UIDs of the new attestations."},"functionSelector":"831e05a1","id":246,"implemented":false,"kind":"function","modifiers":[],"name":"multiAttestByDelegation","nameLocation":"10304:23:1","nodeType":"FunctionDefinition","parameters":{"id":241,"nodeType":"ParameterList","parameters":[{"constant":false,"id":240,"mutability":"mutable","name":"multiDelegatedRequests","nameLocation":"10381:22:1","nodeType":"VariableDeclaration","scope":246,"src":"10337:66:1","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_MultiDelegatedAttestationRequest_$118_calldata_ptr_$dyn_calldata_ptr","typeString":"struct MultiDelegatedAttestationRequest[]"},"typeName":{"baseType":{"id":238,"nodeType":"UserDefinedTypeName","pathNode":{"id":237,"name":"MultiDelegatedAttestationRequest","nameLocations":["10337:32:1"],"nodeType":"IdentifierPath","referencedDeclaration":118,"src":"10337:32:1"},"referencedDeclaration":118,"src":"10337:32:1","typeDescriptions":{"typeIdentifier":"t_struct$_MultiDelegatedAttestationRequest_$118_storage_ptr","typeString":"struct MultiDelegatedAttestationRequest"}},"id":239,"nodeType":"ArrayTypeName","src":"10337:34:1","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_MultiDelegatedAttestationRequest_$118_storage_$dyn_storage_ptr","typeString":"struct MultiDelegatedAttestationRequest[]"}},"visibility":"internal"}],"src":"10327:82:1"},"returnParameters":{"id":245,"nodeType":"ParameterList","parameters":[{"constant":false,"id":244,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":246,"src":"10436:16:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":242,"name":"bytes32","nodeType":"ElementaryTypeName","src":"10436:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":243,"nodeType":"ArrayTypeName","src":"10436:9:1","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"10435:18:1"},"scope":346,"src":"10295:159:1","stateMutability":"payable","virtual":false,"visibility":"external"},{"documentation":{"id":247,"nodeType":"StructuredDocumentation","src":"10460:438:1","text":" @dev Revokes an existing attestation to a specific schema.\n Example:\n revoke({\n     schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\n     data: {\n         uid: '0x101032e487642ee04ee17049f99a70590c735b8614079fc9275f9dd57c00966d',\n         value: 0\n     }\n })\n @param request The arguments of the revocation request."},"functionSelector":"46926267","id":253,"implemented":false,"kind":"function","modifiers":[],"name":"revoke","nameLocation":"10912:6:1","nodeType":"FunctionDefinition","parameters":{"id":251,"nodeType":"ParameterList","parameters":[{"constant":false,"id":250,"mutability":"mutable","name":"request","nameLocation":"10946:7:1","nodeType":"VariableDeclaration","scope":253,"src":"10919:34:1","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_RevocationRequest_$129_calldata_ptr","typeString":"struct RevocationRequest"},"typeName":{"id":249,"nodeType":"UserDefinedTypeName","pathNode":{"id":248,"name":"RevocationRequest","nameLocations":["10919:17:1"],"nodeType":"IdentifierPath","referencedDeclaration":129,"src":"10919:17:1"},"referencedDeclaration":129,"src":"10919:17:1","typeDescriptions":{"typeIdentifier":"t_struct$_RevocationRequest_$129_storage_ptr","typeString":"struct RevocationRequest"}},"visibility":"internal"}],"src":"10918:36:1"},"returnParameters":{"id":252,"nodeType":"ParameterList","parameters":[],"src":"10971:0:1"},"scope":346,"src":"10903:69:1","stateMutability":"payable","virtual":false,"visibility":"external"},{"documentation":{"id":254,"nodeType":"StructuredDocumentation","src":"10978:698:1","text":" @dev Revokes an existing attestation to a specific schema via the provided EIP712 signature.\n Example:\n revokeByDelegation({\n     schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\n     data: {\n         uid: '0xcbbc12102578c642a0f7b34fe7111e41afa25683b6cd7b5a14caf90fa14d24ba',\n         value: 0\n     },\n     signature: {\n         v: 27,\n         r: '0xb593...7142',\n         s: '0x0f5b...2cce'\n     },\n     revoker: '0x244934dd3e31bE2c81f84ECf0b3E6329F5381992'\n })\n @param delegatedRequest The arguments of the delegated revocation request."},"functionSelector":"e57a6b1b","id":260,"implemented":false,"kind":"function","modifiers":[],"name":"revokeByDelegation","nameLocation":"11690:18:1","nodeType":"FunctionDefinition","parameters":{"id":258,"nodeType":"ParameterList","parameters":[{"constant":false,"id":257,"mutability":"mutable","name":"delegatedRequest","nameLocation":"11745:16:1","nodeType":"VariableDeclaration","scope":260,"src":"11709:52:1","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_DelegatedRevocationRequest_$140_calldata_ptr","typeString":"struct DelegatedRevocationRequest"},"typeName":{"id":256,"nodeType":"UserDefinedTypeName","pathNode":{"id":255,"name":"DelegatedRevocationRequest","nameLocations":["11709:26:1"],"nodeType":"IdentifierPath","referencedDeclaration":140,"src":"11709:26:1"},"referencedDeclaration":140,"src":"11709:26:1","typeDescriptions":{"typeIdentifier":"t_struct$_DelegatedRevocationRequest_$140_storage_ptr","typeString":"struct DelegatedRevocationRequest"}},"visibility":"internal"}],"src":"11708:54:1"},"returnParameters":{"id":259,"nodeType":"ParameterList","parameters":[],"src":"11779:0:1"},"scope":346,"src":"11681:99:1","stateMutability":"payable","virtual":false,"visibility":"external"},{"documentation":{"id":261,"nodeType":"StructuredDocumentation","src":"11786:967:1","text":" @dev Revokes existing attestations to multiple schemas.\n @param multiRequests The arguments of the multi revocation requests. The requests should be grouped by distinct\n schema ids to benefit from the best batching optimization.\n Example:\n multiRevoke([{\n     schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\n     data: [{\n         uid: '0x211296a1ca0d7f9f2cfebf0daaa575bea9b20e968d81aef4e743d699c6ac4b25',\n         value: 1000\n     },\n     {\n         uid: '0xe160ac1bd3606a287b4d53d5d1d6da5895f65b4b4bab6d93aaf5046e48167ade',\n         value: 0\n     }],\n },\n {\n     schema: '0x5ac273ce41e3c8bfa383efe7c03e54c5f0bff29c9f11ef6ffa930fc84ca32425',\n     data: [{\n         uid: '0x053d42abce1fd7c8fcddfae21845ad34dae287b2c326220b03ba241bc5a8f019',\n         value: 0\n     },\n }])"},"functionSelector":"4cb7e9e5","id":268,"implemented":false,"kind":"function","modifiers":[],"name":"multiRevoke","nameLocation":"12767:11:1","nodeType":"FunctionDefinition","parameters":{"id":266,"nodeType":"ParameterList","parameters":[{"constant":false,"id":265,"mutability":"mutable","name":"multiRequests","nameLocation":"12813:13:1","nodeType":"VariableDeclaration","scope":268,"src":"12779:47:1","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_MultiRevocationRequest_$147_calldata_ptr_$dyn_calldata_ptr","typeString":"struct MultiRevocationRequest[]"},"typeName":{"baseType":{"id":263,"nodeType":"UserDefinedTypeName","pathNode":{"id":262,"name":"MultiRevocationRequest","nameLocations":["12779:22:1"],"nodeType":"IdentifierPath","referencedDeclaration":147,"src":"12779:22:1"},"referencedDeclaration":147,"src":"12779:22:1","typeDescriptions":{"typeIdentifier":"t_struct$_MultiRevocationRequest_$147_storage_ptr","typeString":"struct MultiRevocationRequest"}},"id":264,"nodeType":"ArrayTypeName","src":"12779:24:1","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_MultiRevocationRequest_$147_storage_$dyn_storage_ptr","typeString":"struct MultiRevocationRequest[]"}},"visibility":"internal"}],"src":"12778:49:1"},"returnParameters":{"id":267,"nodeType":"ParameterList","parameters":[],"src":"12844:0:1"},"scope":346,"src":"12758:87:1","stateMutability":"payable","virtual":false,"visibility":"external"},{"documentation":{"id":269,"nodeType":"StructuredDocumentation","src":"12851:1107:1","text":" @dev Revokes existing attestations to multiple schemas via provided EIP712 signatures.\n @param multiDelegatedRequests The arguments of the delegated multi revocation attestation requests. The requests should be\n grouped by distinct schema ids to benefit from the best batching optimization.\n Example:\n multiRevokeByDelegation([{\n     schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\n     data: [{\n         uid: '0x211296a1ca0d7f9f2cfebf0daaa575bea9b20e968d81aef4e743d699c6ac4b25',\n         value: 1000\n     },\n     {\n         uid: '0xe160ac1bd3606a287b4d53d5d1d6da5895f65b4b4bab6d93aaf5046e48167ade',\n         value: 0\n     }],\n     signatures: [{\n         v: 28,\n         r: '0x148c...b25b',\n         s: '0x5a72...be22'\n     },\n     {\n         v: 28,\n         r: '0x487s...67bb',\n         s: '0x12ad...2366'\n     }],\n     revoker: '0x244934dd3e31bE2c81f84ECf0b3E6329F5381992'\n }])"},"functionSelector":"e45d03f9","id":276,"implemented":false,"kind":"function","modifiers":[],"name":"multiRevokeByDelegation","nameLocation":"13972:23:1","nodeType":"FunctionDefinition","parameters":{"id":274,"nodeType":"ParameterList","parameters":[{"constant":false,"id":273,"mutability":"mutable","name":"multiDelegatedRequests","nameLocation":"14048:22:1","nodeType":"VariableDeclaration","scope":276,"src":"14005:65:1","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_MultiDelegatedRevocationRequest_$160_calldata_ptr_$dyn_calldata_ptr","typeString":"struct MultiDelegatedRevocationRequest[]"},"typeName":{"baseType":{"id":271,"nodeType":"UserDefinedTypeName","pathNode":{"id":270,"name":"MultiDelegatedRevocationRequest","nameLocations":["14005:31:1"],"nodeType":"IdentifierPath","referencedDeclaration":160,"src":"14005:31:1"},"referencedDeclaration":160,"src":"14005:31:1","typeDescriptions":{"typeIdentifier":"t_struct$_MultiDelegatedRevocationRequest_$160_storage_ptr","typeString":"struct MultiDelegatedRevocationRequest"}},"id":272,"nodeType":"ArrayTypeName","src":"14005:33:1","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_MultiDelegatedRevocationRequest_$160_storage_$dyn_storage_ptr","typeString":"struct MultiDelegatedRevocationRequest[]"}},"visibility":"internal"}],"src":"13995:81:1"},"returnParameters":{"id":275,"nodeType":"ParameterList","parameters":[],"src":"14093:0:1"},"scope":346,"src":"13963:131:1","stateMutability":"payable","virtual":false,"visibility":"external"},{"documentation":{"id":277,"nodeType":"StructuredDocumentation","src":"14100:178:1","text":" @dev Timestamps the specified bytes32 data.\n @param data The data to timestamp.\n @return The timestamp the data was timestamped with."},"functionSelector":"4d003070","id":284,"implemented":false,"kind":"function","modifiers":[],"name":"timestamp","nameLocation":"14292:9:1","nodeType":"FunctionDefinition","parameters":{"id":280,"nodeType":"ParameterList","parameters":[{"constant":false,"id":279,"mutability":"mutable","name":"data","nameLocation":"14310:4:1","nodeType":"VariableDeclaration","scope":284,"src":"14302:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":278,"name":"bytes32","nodeType":"ElementaryTypeName","src":"14302:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"14301:14:1"},"returnParameters":{"id":283,"nodeType":"ParameterList","parameters":[{"constant":false,"id":282,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":284,"src":"14334:6:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":281,"name":"uint64","nodeType":"ElementaryTypeName","src":"14334:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"14333:8:1"},"scope":346,"src":"14283:59:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":285,"nodeType":"StructuredDocumentation","src":"14348:187:1","text":" @dev Timestamps the specified multiple bytes32 data.\n @param data The data to timestamp.\n @return The timestamp the data was timestamped with."},"functionSelector":"e71ff365","id":293,"implemented":false,"kind":"function","modifiers":[],"name":"multiTimestamp","nameLocation":"14549:14:1","nodeType":"FunctionDefinition","parameters":{"id":289,"nodeType":"ParameterList","parameters":[{"constant":false,"id":288,"mutability":"mutable","name":"data","nameLocation":"14583:4:1","nodeType":"VariableDeclaration","scope":293,"src":"14564:23:1","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":286,"name":"bytes32","nodeType":"ElementaryTypeName","src":"14564:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":287,"nodeType":"ArrayTypeName","src":"14564:9:1","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"14563:25:1"},"returnParameters":{"id":292,"nodeType":"ParameterList","parameters":[{"constant":false,"id":291,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":293,"src":"14607:6:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":290,"name":"uint64","nodeType":"ElementaryTypeName","src":"14607:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"14606:8:1"},"scope":346,"src":"14540:75:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":294,"nodeType":"StructuredDocumentation","src":"14621:171:1","text":" @dev Revokes the specified bytes32 data.\n @param data The data to timestamp.\n @return The timestamp the data was revoked with."},"functionSelector":"cf190f34","id":301,"implemented":false,"kind":"function","modifiers":[],"name":"revokeOffchain","nameLocation":"14806:14:1","nodeType":"FunctionDefinition","parameters":{"id":297,"nodeType":"ParameterList","parameters":[{"constant":false,"id":296,"mutability":"mutable","name":"data","nameLocation":"14829:4:1","nodeType":"VariableDeclaration","scope":301,"src":"14821:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":295,"name":"bytes32","nodeType":"ElementaryTypeName","src":"14821:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"14820:14:1"},"returnParameters":{"id":300,"nodeType":"ParameterList","parameters":[{"constant":false,"id":299,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":301,"src":"14853:6:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":298,"name":"uint64","nodeType":"ElementaryTypeName","src":"14853:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"14852:8:1"},"scope":346,"src":"14797:64:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":302,"nodeType":"StructuredDocumentation","src":"14867:180:1","text":" @dev Revokes the specified multiple bytes32 data.\n @param data The data to timestamp.\n @return The timestamp the data was revoked with."},"functionSelector":"13893f61","id":310,"implemented":false,"kind":"function","modifiers":[],"name":"multiRevokeOffchain","nameLocation":"15061:19:1","nodeType":"FunctionDefinition","parameters":{"id":306,"nodeType":"ParameterList","parameters":[{"constant":false,"id":305,"mutability":"mutable","name":"data","nameLocation":"15100:4:1","nodeType":"VariableDeclaration","scope":310,"src":"15081:23:1","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":303,"name":"bytes32","nodeType":"ElementaryTypeName","src":"15081:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":304,"nodeType":"ArrayTypeName","src":"15081:9:1","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"15080:25:1"},"returnParameters":{"id":309,"nodeType":"ParameterList","parameters":[{"constant":false,"id":308,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":310,"src":"15124:6:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":307,"name":"uint64","nodeType":"ElementaryTypeName","src":"15124:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"15123:8:1"},"scope":346,"src":"15052:80:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":311,"nodeType":"StructuredDocumentation","src":"15138:180:1","text":" @dev Returns an existing attestation by UID.\n @param uid The UID of the attestation to retrieve.\n @return The attestation data members."},"functionSelector":"a3112a64","id":319,"implemented":false,"kind":"function","modifiers":[],"name":"getAttestation","nameLocation":"15332:14:1","nodeType":"FunctionDefinition","parameters":{"id":314,"nodeType":"ParameterList","parameters":[{"constant":false,"id":313,"mutability":"mutable","name":"uid","nameLocation":"15355:3:1","nodeType":"VariableDeclaration","scope":319,"src":"15347:11:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":312,"name":"bytes32","nodeType":"ElementaryTypeName","src":"15347:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"15346:13:1"},"returnParameters":{"id":318,"nodeType":"ParameterList","parameters":[{"constant":false,"id":317,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":319,"src":"15383:18:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Attestation_$45_memory_ptr","typeString":"struct Attestation"},"typeName":{"id":316,"nodeType":"UserDefinedTypeName","pathNode":{"id":315,"name":"Attestation","nameLocations":["15383:11:1"],"nodeType":"IdentifierPath","referencedDeclaration":45,"src":"15383:11:1"},"referencedDeclaration":45,"src":"15383:11:1","typeDescriptions":{"typeIdentifier":"t_struct$_Attestation_$45_storage_ptr","typeString":"struct Attestation"}},"visibility":"internal"}],"src":"15382:20:1"},"scope":346,"src":"15323:80:1","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":320,"nodeType":"StructuredDocumentation","src":"15409:179:1","text":" @dev Checks whether an attestation exists.\n @param uid The UID of the attestation to retrieve.\n @return Whether an attestation exists."},"functionSelector":"e30bb563","id":327,"implemented":false,"kind":"function","modifiers":[],"name":"isAttestationValid","nameLocation":"15602:18:1","nodeType":"FunctionDefinition","parameters":{"id":323,"nodeType":"ParameterList","parameters":[{"constant":false,"id":322,"mutability":"mutable","name":"uid","nameLocation":"15629:3:1","nodeType":"VariableDeclaration","scope":327,"src":"15621:11:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":321,"name":"bytes32","nodeType":"ElementaryTypeName","src":"15621:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"15620:13:1"},"returnParameters":{"id":326,"nodeType":"ParameterList","parameters":[{"constant":false,"id":325,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":327,"src":"15657:4:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":324,"name":"bool","nodeType":"ElementaryTypeName","src":"15657:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"15656:6:1"},"scope":346,"src":"15593:70:1","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":328,"nodeType":"StructuredDocumentation","src":"15669:203:1","text":" @dev Returns the timestamp that the specified data was timestamped with.\n @param data The data to query.\n @return The timestamp the data was timestamped with."},"functionSelector":"d45c4435","id":335,"implemented":false,"kind":"function","modifiers":[],"name":"getTimestamp","nameLocation":"15886:12:1","nodeType":"FunctionDefinition","parameters":{"id":331,"nodeType":"ParameterList","parameters":[{"constant":false,"id":330,"mutability":"mutable","name":"data","nameLocation":"15907:4:1","nodeType":"VariableDeclaration","scope":335,"src":"15899:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":329,"name":"bytes32","nodeType":"ElementaryTypeName","src":"15899:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"15898:14:1"},"returnParameters":{"id":334,"nodeType":"ParameterList","parameters":[{"constant":false,"id":333,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":335,"src":"15936:6:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":332,"name":"uint64","nodeType":"ElementaryTypeName","src":"15936:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"15935:8:1"},"scope":346,"src":"15877:67:1","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":336,"nodeType":"StructuredDocumentation","src":"15950:203:1","text":" @dev Returns the timestamp that the specified data was timestamped with.\n @param data The data to query.\n @return The timestamp the data was timestamped with."},"functionSelector":"b469318d","id":345,"implemented":false,"kind":"function","modifiers":[],"name":"getRevokeOffchain","nameLocation":"16167:17:1","nodeType":"FunctionDefinition","parameters":{"id":341,"nodeType":"ParameterList","parameters":[{"constant":false,"id":338,"mutability":"mutable","name":"revoker","nameLocation":"16193:7:1","nodeType":"VariableDeclaration","scope":345,"src":"16185:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":337,"name":"address","nodeType":"ElementaryTypeName","src":"16185:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":340,"mutability":"mutable","name":"data","nameLocation":"16210:4:1","nodeType":"VariableDeclaration","scope":345,"src":"16202:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":339,"name":"bytes32","nodeType":"ElementaryTypeName","src":"16202:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"16184:31:1"},"returnParameters":{"id":344,"nodeType":"ParameterList","parameters":[{"constant":false,"id":343,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":345,"src":"16239:6:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":342,"name":"uint64","nodeType":"ElementaryTypeName","src":"16239:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"16238:8:1"},"scope":346,"src":"16158:89:1","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":347,"src":"3836:12413:1","usedErrors":[]}],"src":"33:16217:1"},"id":1},"@ethereum-attestation-service/eas-contracts/contracts/ISchemaRegistry.sol":{"ast":{"absolutePath":"@ethereum-attestation-service/eas-contracts/contracts/ISchemaRegistry.sol","exportedSymbols":{"ISchemaRegistry":[391],"ISchemaResolver":[447],"SchemaRecord":[360]},"id":392,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":348,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"33:23:2"},{"absolutePath":"@ethereum-attestation-service/eas-contracts/contracts/resolver/ISchemaResolver.sol","file":"./resolver/ISchemaResolver.sol","id":350,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":392,"sourceUnit":448,"src":"58:65:2","symbolAliases":[{"foreign":{"id":349,"name":"ISchemaResolver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":447,"src":"67:15:2","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"canonicalName":"SchemaRecord","id":360,"members":[{"constant":false,"id":352,"mutability":"mutable","name":"uid","nameLocation":"232:3:2","nodeType":"VariableDeclaration","scope":360,"src":"224:11:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":351,"name":"bytes32","nodeType":"ElementaryTypeName","src":"224:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":355,"mutability":"mutable","name":"resolver","nameLocation":"297:8:2","nodeType":"VariableDeclaration","scope":360,"src":"281:24:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_ISchemaResolver_$447","typeString":"contract ISchemaResolver"},"typeName":{"id":354,"nodeType":"UserDefinedTypeName","pathNode":{"id":353,"name":"ISchemaResolver","nameLocations":["281:15:2"],"nodeType":"IdentifierPath","referencedDeclaration":447,"src":"281:15:2"},"referencedDeclaration":447,"src":"281:15:2","typeDescriptions":{"typeIdentifier":"t_contract$_ISchemaResolver_$447","typeString":"contract ISchemaResolver"}},"visibility":"internal"},{"constant":false,"id":357,"mutability":"mutable","name":"revocable","nameLocation":"345:9:2","nodeType":"VariableDeclaration","scope":360,"src":"340:14:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":356,"name":"bool","nodeType":"ElementaryTypeName","src":"340:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":359,"mutability":"mutable","name":"schema","nameLocation":"420:6:2","nodeType":"VariableDeclaration","scope":360,"src":"413:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":358,"name":"string","nodeType":"ElementaryTypeName","src":"413:6:2","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"name":"SchemaRecord","nameLocation":"205:12:2","nodeType":"StructDefinition","scope":392,"src":"198:285:2","visibility":"public"},{"abstract":false,"baseContracts":[],"canonicalName":"ISchemaRegistry","contractDependencies":[],"contractKind":"interface","documentation":{"id":361,"nodeType":"StructuredDocumentation","src":"485:55:2","text":" @title The global schema registry interface."},"fullyImplemented":false,"id":391,"linearizedBaseContracts":[391],"name":"ISchemaRegistry","nameLocation":"551:15:2","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":362,"nodeType":"StructuredDocumentation","src":"573:191:2","text":" @dev Emitted when a new schema has been registered\n @param uid The schema UID.\n @param registerer The address of the account used to register the schema."},"eventSelector":"7d917fcbc9a29a9705ff9936ffa599500e4fd902e4486bae317414fe967b307c","id":368,"name":"Registered","nameLocation":"775:10:2","nodeType":"EventDefinition","parameters":{"id":367,"nodeType":"ParameterList","parameters":[{"constant":false,"id":364,"indexed":true,"mutability":"mutable","name":"uid","nameLocation":"802:3:2","nodeType":"VariableDeclaration","scope":368,"src":"786:19:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":363,"name":"bytes32","nodeType":"ElementaryTypeName","src":"786:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":366,"indexed":false,"mutability":"mutable","name":"registerer","nameLocation":"815:10:2","nodeType":"VariableDeclaration","scope":368,"src":"807:18:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":365,"name":"address","nodeType":"ElementaryTypeName","src":"807:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"785:41:2"},"src":"769:58:2"},{"documentation":{"id":369,"nodeType":"StructuredDocumentation","src":"833:284:2","text":" @dev Submits and reserves a new schema\n @param schema The schema data schema.\n @param resolver An optional schema resolver.\n @param revocable Whether the schema allows revocations explicitly.\n @return The UID of the new schema."},"functionSelector":"60d7a278","id":381,"implemented":false,"kind":"function","modifiers":[],"name":"register","nameLocation":"1131:8:2","nodeType":"FunctionDefinition","parameters":{"id":377,"nodeType":"ParameterList","parameters":[{"constant":false,"id":371,"mutability":"mutable","name":"schema","nameLocation":"1156:6:2","nodeType":"VariableDeclaration","scope":381,"src":"1140:22:2","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string"},"typeName":{"id":370,"name":"string","nodeType":"ElementaryTypeName","src":"1140:6:2","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":374,"mutability":"mutable","name":"resolver","nameLocation":"1180:8:2","nodeType":"VariableDeclaration","scope":381,"src":"1164:24:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_ISchemaResolver_$447","typeString":"contract ISchemaResolver"},"typeName":{"id":373,"nodeType":"UserDefinedTypeName","pathNode":{"id":372,"name":"ISchemaResolver","nameLocations":["1164:15:2"],"nodeType":"IdentifierPath","referencedDeclaration":447,"src":"1164:15:2"},"referencedDeclaration":447,"src":"1164:15:2","typeDescriptions":{"typeIdentifier":"t_contract$_ISchemaResolver_$447","typeString":"contract ISchemaResolver"}},"visibility":"internal"},{"constant":false,"id":376,"mutability":"mutable","name":"revocable","nameLocation":"1195:9:2","nodeType":"VariableDeclaration","scope":381,"src":"1190:14:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":375,"name":"bool","nodeType":"ElementaryTypeName","src":"1190:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1139:66:2"},"returnParameters":{"id":380,"nodeType":"ParameterList","parameters":[{"constant":false,"id":379,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":381,"src":"1224:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":378,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1224:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1223:9:2"},"scope":391,"src":"1122:111:2","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":382,"nodeType":"StructuredDocumentation","src":"1239:164:2","text":" @dev Returns an existing schema by UID\n @param uid The UID of the schema to retrieve.\n @return The schema data members."},"functionSelector":"a2ea7c6e","id":390,"implemented":false,"kind":"function","modifiers":[],"name":"getSchema","nameLocation":"1417:9:2","nodeType":"FunctionDefinition","parameters":{"id":385,"nodeType":"ParameterList","parameters":[{"constant":false,"id":384,"mutability":"mutable","name":"uid","nameLocation":"1435:3:2","nodeType":"VariableDeclaration","scope":390,"src":"1427:11:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":383,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1427:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1426:13:2"},"returnParameters":{"id":389,"nodeType":"ParameterList","parameters":[{"constant":false,"id":388,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":390,"src":"1463:19:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_SchemaRecord_$360_memory_ptr","typeString":"struct SchemaRecord"},"typeName":{"id":387,"nodeType":"UserDefinedTypeName","pathNode":{"id":386,"name":"SchemaRecord","nameLocations":["1463:12:2"],"nodeType":"IdentifierPath","referencedDeclaration":360,"src":"1463:12:2"},"referencedDeclaration":360,"src":"1463:12:2","typeDescriptions":{"typeIdentifier":"t_struct$_SchemaRecord_$360_storage_ptr","typeString":"struct SchemaRecord"}},"visibility":"internal"}],"src":"1462:21:2"},"scope":391,"src":"1408:76:2","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":392,"src":"541:945:2","usedErrors":[]}],"src":"33:1454:2"},"id":2},"@ethereum-attestation-service/eas-contracts/contracts/resolver/ISchemaResolver.sol":{"ast":{"absolutePath":"@ethereum-attestation-service/eas-contracts/contracts/resolver/ISchemaResolver.sol","exportedSymbols":{"Attestation":[45],"ISchemaResolver":[447]},"id":448,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":393,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"33:23:3"},{"absolutePath":"@ethereum-attestation-service/eas-contracts/contracts/Common.sol","file":"../Common.sol","id":395,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":448,"sourceUnit":62,"src":"58:44:3","symbolAliases":[{"foreign":{"id":394,"name":"Attestation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":45,"src":"67:11:3","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"ISchemaResolver","contractDependencies":[],"contractKind":"interface","documentation":{"id":396,"nodeType":"StructuredDocumentation","src":"104:63:3","text":" @title The interface of an optional schema resolver."},"fullyImplemented":false,"id":447,"linearizedBaseContracts":[447],"name":"ISchemaResolver","nameLocation":"178:15:3","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":397,"nodeType":"StructuredDocumentation","src":"200:76:3","text":" @dev Returns whether the resolver supports ETH transfers."},"functionSelector":"ce46e046","id":402,"implemented":false,"kind":"function","modifiers":[],"name":"isPayable","nameLocation":"290:9:3","nodeType":"FunctionDefinition","parameters":{"id":398,"nodeType":"ParameterList","parameters":[],"src":"299:2:3"},"returnParameters":{"id":401,"nodeType":"ParameterList","parameters":[{"constant":false,"id":400,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":402,"src":"325:4:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":399,"name":"bool","nodeType":"ElementaryTypeName","src":"325:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"324:6:3"},"scope":447,"src":"281:50:3","stateMutability":"pure","virtual":false,"visibility":"external"},{"documentation":{"id":403,"nodeType":"StructuredDocumentation","src":"337:191:3","text":" @dev Processes an attestation and verifies whether it's valid.\n @param attestation The new attestation.\n @return Whether the attestation is valid."},"functionSelector":"e60c3505","id":411,"implemented":false,"kind":"function","modifiers":[],"name":"attest","nameLocation":"542:6:3","nodeType":"FunctionDefinition","parameters":{"id":407,"nodeType":"ParameterList","parameters":[{"constant":false,"id":406,"mutability":"mutable","name":"attestation","nameLocation":"570:11:3","nodeType":"VariableDeclaration","scope":411,"src":"549:32:3","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_Attestation_$45_calldata_ptr","typeString":"struct Attestation"},"typeName":{"id":405,"nodeType":"UserDefinedTypeName","pathNode":{"id":404,"name":"Attestation","nameLocations":["549:11:3"],"nodeType":"IdentifierPath","referencedDeclaration":45,"src":"549:11:3"},"referencedDeclaration":45,"src":"549:11:3","typeDescriptions":{"typeIdentifier":"t_struct$_Attestation_$45_storage_ptr","typeString":"struct Attestation"}},"visibility":"internal"}],"src":"548:34:3"},"returnParameters":{"id":410,"nodeType":"ParameterList","parameters":[{"constant":false,"id":409,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":411,"src":"609:4:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":408,"name":"bool","nodeType":"ElementaryTypeName","src":"609:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"608:6:3"},"scope":447,"src":"533:82:3","stateMutability":"payable","virtual":false,"visibility":"external"},{"documentation":{"id":412,"nodeType":"StructuredDocumentation","src":"621:291:3","text":" @dev Processes multiple attestations and verifies whether they are valid.\n @param attestations The new attestations.\n @param values Explicit ETH amounts which were sent with each attestation.\n @return Whether all the attestations are valid."},"functionSelector":"91db0b7e","id":424,"implemented":false,"kind":"function","modifiers":[],"name":"multiAttest","nameLocation":"926:11:3","nodeType":"FunctionDefinition","parameters":{"id":420,"nodeType":"ParameterList","parameters":[{"constant":false,"id":416,"mutability":"mutable","name":"attestations","nameLocation":"970:12:3","nodeType":"VariableDeclaration","scope":424,"src":"947:35:3","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Attestation_$45_calldata_ptr_$dyn_calldata_ptr","typeString":"struct Attestation[]"},"typeName":{"baseType":{"id":414,"nodeType":"UserDefinedTypeName","pathNode":{"id":413,"name":"Attestation","nameLocations":["947:11:3"],"nodeType":"IdentifierPath","referencedDeclaration":45,"src":"947:11:3"},"referencedDeclaration":45,"src":"947:11:3","typeDescriptions":{"typeIdentifier":"t_struct$_Attestation_$45_storage_ptr","typeString":"struct Attestation"}},"id":415,"nodeType":"ArrayTypeName","src":"947:13:3","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Attestation_$45_storage_$dyn_storage_ptr","typeString":"struct Attestation[]"}},"visibility":"internal"},{"constant":false,"id":419,"mutability":"mutable","name":"values","nameLocation":"1011:6:3","nodeType":"VariableDeclaration","scope":424,"src":"992:25:3","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":417,"name":"uint256","nodeType":"ElementaryTypeName","src":"992:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":418,"nodeType":"ArrayTypeName","src":"992:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"937:86:3"},"returnParameters":{"id":423,"nodeType":"ParameterList","parameters":[{"constant":false,"id":422,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":424,"src":"1050:4:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":421,"name":"bool","nodeType":"ElementaryTypeName","src":"1050:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1049:6:3"},"scope":447,"src":"917:139:3","stateMutability":"payable","virtual":false,"visibility":"external"},{"documentation":{"id":425,"nodeType":"StructuredDocumentation","src":"1062:229:3","text":" @dev Processes an attestation revocation and verifies if it can be revoked.\n @param attestation The existing attestation to be revoked.\n @return Whether the attestation can be revoked."},"functionSelector":"e49617e1","id":433,"implemented":false,"kind":"function","modifiers":[],"name":"revoke","nameLocation":"1305:6:3","nodeType":"FunctionDefinition","parameters":{"id":429,"nodeType":"ParameterList","parameters":[{"constant":false,"id":428,"mutability":"mutable","name":"attestation","nameLocation":"1333:11:3","nodeType":"VariableDeclaration","scope":433,"src":"1312:32:3","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_Attestation_$45_calldata_ptr","typeString":"struct Attestation"},"typeName":{"id":427,"nodeType":"UserDefinedTypeName","pathNode":{"id":426,"name":"Attestation","nameLocations":["1312:11:3"],"nodeType":"IdentifierPath","referencedDeclaration":45,"src":"1312:11:3"},"referencedDeclaration":45,"src":"1312:11:3","typeDescriptions":{"typeIdentifier":"t_struct$_Attestation_$45_storage_ptr","typeString":"struct Attestation"}},"visibility":"internal"}],"src":"1311:34:3"},"returnParameters":{"id":432,"nodeType":"ParameterList","parameters":[{"constant":false,"id":431,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":433,"src":"1372:4:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":430,"name":"bool","nodeType":"ElementaryTypeName","src":"1372:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1371:6:3"},"scope":447,"src":"1296:82:3","stateMutability":"payable","virtual":false,"visibility":"external"},{"documentation":{"id":434,"nodeType":"StructuredDocumentation","src":"1384:320:3","text":" @dev Processes revocation of multiple attestation and verifies they can be revoked.\n @param attestations The existing attestations to be revoked.\n @param values Explicit ETH amounts which were sent with each revocation.\n @return Whether the attestations can be revoked."},"functionSelector":"88e5b2d9","id":446,"implemented":false,"kind":"function","modifiers":[],"name":"multiRevoke","nameLocation":"1718:11:3","nodeType":"FunctionDefinition","parameters":{"id":442,"nodeType":"ParameterList","parameters":[{"constant":false,"id":438,"mutability":"mutable","name":"attestations","nameLocation":"1762:12:3","nodeType":"VariableDeclaration","scope":446,"src":"1739:35:3","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Attestation_$45_calldata_ptr_$dyn_calldata_ptr","typeString":"struct Attestation[]"},"typeName":{"baseType":{"id":436,"nodeType":"UserDefinedTypeName","pathNode":{"id":435,"name":"Attestation","nameLocations":["1739:11:3"],"nodeType":"IdentifierPath","referencedDeclaration":45,"src":"1739:11:3"},"referencedDeclaration":45,"src":"1739:11:3","typeDescriptions":{"typeIdentifier":"t_struct$_Attestation_$45_storage_ptr","typeString":"struct Attestation"}},"id":437,"nodeType":"ArrayTypeName","src":"1739:13:3","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Attestation_$45_storage_$dyn_storage_ptr","typeString":"struct Attestation[]"}},"visibility":"internal"},{"constant":false,"id":441,"mutability":"mutable","name":"values","nameLocation":"1803:6:3","nodeType":"VariableDeclaration","scope":446,"src":"1784:25:3","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":439,"name":"uint256","nodeType":"ElementaryTypeName","src":"1784:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":440,"nodeType":"ArrayTypeName","src":"1784:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"1729:86:3"},"returnParameters":{"id":445,"nodeType":"ParameterList","parameters":[{"constant":false,"id":444,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":446,"src":"1842:4:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":443,"name":"bool","nodeType":"ElementaryTypeName","src":"1842:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1841:6:3"},"scope":447,"src":"1709:139:3","stateMutability":"payable","virtual":false,"visibility":"external"}],"scope":448,"src":"168:1682:3","usedErrors":[]}],"src":"33:1818:3"},"id":3},"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol","exportedSymbols":{"AddressUpgradeable":[1078],"ContextUpgradeable":[1120],"Initializable":[748],"OwnableUpgradeable":[579]},"id":580,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":449,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"102:23:4"},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol","file":"../utils/ContextUpgradeable.sol","id":450,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":580,"sourceUnit":1121,"src":"127:41:4","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"../proxy/utils/Initializable.sol","id":451,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":580,"sourceUnit":749,"src":"169:42:4","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":453,"name":"Initializable","nameLocations":["748:13:4"],"nodeType":"IdentifierPath","referencedDeclaration":748,"src":"748:13:4"},"id":454,"nodeType":"InheritanceSpecifier","src":"748:13:4"},{"baseName":{"id":455,"name":"ContextUpgradeable","nameLocations":["763:18:4"],"nodeType":"IdentifierPath","referencedDeclaration":1120,"src":"763:18:4"},"id":456,"nodeType":"InheritanceSpecifier","src":"763:18:4"}],"canonicalName":"OwnableUpgradeable","contractDependencies":[],"contractKind":"contract","documentation":{"id":452,"nodeType":"StructuredDocumentation","src":"213:494:4","text":" @dev Contract module which provides a basic access control mechanism, where\n there is an account (an owner) that can be granted exclusive access to\n specific functions.\n By default, the owner account will be the one that deploys the contract. This\n can later be changed with {transferOwnership}.\n This module is used through inheritance. It will make available the modifier\n `onlyOwner`, which can be applied to your functions to restrict their use to\n the owner."},"fullyImplemented":true,"id":579,"linearizedBaseContracts":[579,1120,748],"name":"OwnableUpgradeable","nameLocation":"726:18:4","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":458,"mutability":"mutable","name":"_owner","nameLocation":"804:6:4","nodeType":"VariableDeclaration","scope":579,"src":"788:22:4","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":457,"name":"address","nodeType":"ElementaryTypeName","src":"788:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"private"},{"anonymous":false,"eventSelector":"8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0","id":464,"name":"OwnershipTransferred","nameLocation":"823:20:4","nodeType":"EventDefinition","parameters":{"id":463,"nodeType":"ParameterList","parameters":[{"constant":false,"id":460,"indexed":true,"mutability":"mutable","name":"previousOwner","nameLocation":"860:13:4","nodeType":"VariableDeclaration","scope":464,"src":"844:29:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":459,"name":"address","nodeType":"ElementaryTypeName","src":"844:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":462,"indexed":true,"mutability":"mutable","name":"newOwner","nameLocation":"891:8:4","nodeType":"VariableDeclaration","scope":464,"src":"875:24:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":461,"name":"address","nodeType":"ElementaryTypeName","src":"875:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"843:57:4"},"src":"817:84:4"},{"body":{"id":473,"nodeType":"Block","src":"1055:43:4","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":470,"name":"__Ownable_init_unchained","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":485,"src":"1065:24:4","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":471,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1065:26:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":472,"nodeType":"ExpressionStatement","src":"1065:26:4"}]},"documentation":{"id":465,"nodeType":"StructuredDocumentation","src":"907:91:4","text":" @dev Initializes the contract setting the deployer as the initial owner."},"id":474,"implemented":true,"kind":"function","modifiers":[{"id":468,"kind":"modifierInvocation","modifierName":{"id":467,"name":"onlyInitializing","nameLocations":["1038:16:4"],"nodeType":"IdentifierPath","referencedDeclaration":693,"src":"1038:16:4"},"nodeType":"ModifierInvocation","src":"1038:16:4"}],"name":"__Ownable_init","nameLocation":"1012:14:4","nodeType":"FunctionDefinition","parameters":{"id":466,"nodeType":"ParameterList","parameters":[],"src":"1026:2:4"},"returnParameters":{"id":469,"nodeType":"ParameterList","parameters":[],"src":"1055:0:4"},"scope":579,"src":"1003:95:4","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":484,"nodeType":"Block","src":"1166:49:4","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":480,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1105,"src":"1195:10:4","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":481,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1195:12:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":479,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":573,"src":"1176:18:4","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":482,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1176:32:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":483,"nodeType":"ExpressionStatement","src":"1176:32:4"}]},"id":485,"implemented":true,"kind":"function","modifiers":[{"id":477,"kind":"modifierInvocation","modifierName":{"id":476,"name":"onlyInitializing","nameLocations":["1149:16:4"],"nodeType":"IdentifierPath","referencedDeclaration":693,"src":"1149:16:4"},"nodeType":"ModifierInvocation","src":"1149:16:4"}],"name":"__Ownable_init_unchained","nameLocation":"1113:24:4","nodeType":"FunctionDefinition","parameters":{"id":475,"nodeType":"ParameterList","parameters":[],"src":"1137:2:4"},"returnParameters":{"id":478,"nodeType":"ParameterList","parameters":[],"src":"1166:0:4"},"scope":579,"src":"1104:111:4","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":492,"nodeType":"Block","src":"1324:41:4","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":488,"name":"_checkOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":516,"src":"1334:11:4","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$__$","typeString":"function () view"}},"id":489,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1334:13:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":490,"nodeType":"ExpressionStatement","src":"1334:13:4"},{"id":491,"nodeType":"PlaceholderStatement","src":"1357:1:4"}]},"documentation":{"id":486,"nodeType":"StructuredDocumentation","src":"1221:77:4","text":" @dev Throws if called by any account other than the owner."},"id":493,"name":"onlyOwner","nameLocation":"1312:9:4","nodeType":"ModifierDefinition","parameters":{"id":487,"nodeType":"ParameterList","parameters":[],"src":"1321:2:4"},"src":"1303:62:4","virtual":false,"visibility":"internal"},{"body":{"id":501,"nodeType":"Block","src":"1496:30:4","statements":[{"expression":{"id":499,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":458,"src":"1513:6:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":498,"id":500,"nodeType":"Return","src":"1506:13:4"}]},"documentation":{"id":494,"nodeType":"StructuredDocumentation","src":"1371:65:4","text":" @dev Returns the address of the current owner."},"functionSelector":"8da5cb5b","id":502,"implemented":true,"kind":"function","modifiers":[],"name":"owner","nameLocation":"1450:5:4","nodeType":"FunctionDefinition","parameters":{"id":495,"nodeType":"ParameterList","parameters":[],"src":"1455:2:4"},"returnParameters":{"id":498,"nodeType":"ParameterList","parameters":[{"constant":false,"id":497,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":502,"src":"1487:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":496,"name":"address","nodeType":"ElementaryTypeName","src":"1487:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1486:9:4"},"scope":579,"src":"1441:85:4","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":515,"nodeType":"Block","src":"1644:85:4","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":511,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":507,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":502,"src":"1662:5:4","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":508,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1662:7:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":509,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1105,"src":"1673:10:4","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":510,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1673:12:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1662:23:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572","id":512,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1687:34:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe","typeString":"literal_string \"Ownable: caller is not the owner\""},"value":"Ownable: caller is not the owner"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe","typeString":"literal_string \"Ownable: caller is not the owner\""}],"id":506,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1654:7:4","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":513,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1654:68:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":514,"nodeType":"ExpressionStatement","src":"1654:68:4"}]},"documentation":{"id":503,"nodeType":"StructuredDocumentation","src":"1532:62:4","text":" @dev Throws if the sender is not the owner."},"id":516,"implemented":true,"kind":"function","modifiers":[],"name":"_checkOwner","nameLocation":"1608:11:4","nodeType":"FunctionDefinition","parameters":{"id":504,"nodeType":"ParameterList","parameters":[],"src":"1619:2:4"},"returnParameters":{"id":505,"nodeType":"ParameterList","parameters":[],"src":"1644:0:4"},"scope":579,"src":"1599:130:4","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":529,"nodeType":"Block","src":"2118:47:4","statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":525,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2155:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":524,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2147:7:4","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":523,"name":"address","nodeType":"ElementaryTypeName","src":"2147:7:4","typeDescriptions":{}}},"id":526,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2147:10:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":522,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":573,"src":"2128:18:4","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":527,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2128:30:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":528,"nodeType":"ExpressionStatement","src":"2128:30:4"}]},"documentation":{"id":517,"nodeType":"StructuredDocumentation","src":"1735:324:4","text":" @dev Leaves the contract without owner. It will not be possible to call\n `onlyOwner` functions. Can only be called by the current owner.\n NOTE: Renouncing ownership will leave the contract without an owner,\n thereby disabling any functionality that is only available to the owner."},"functionSelector":"715018a6","id":530,"implemented":true,"kind":"function","modifiers":[{"id":520,"kind":"modifierInvocation","modifierName":{"id":519,"name":"onlyOwner","nameLocations":["2108:9:4"],"nodeType":"IdentifierPath","referencedDeclaration":493,"src":"2108:9:4"},"nodeType":"ModifierInvocation","src":"2108:9:4"}],"name":"renounceOwnership","nameLocation":"2073:17:4","nodeType":"FunctionDefinition","parameters":{"id":518,"nodeType":"ParameterList","parameters":[],"src":"2090:2:4"},"returnParameters":{"id":521,"nodeType":"ParameterList","parameters":[],"src":"2118:0:4"},"scope":579,"src":"2064:101:4","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":552,"nodeType":"Block","src":"2384:128:4","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":544,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":539,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":533,"src":"2402:8:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":542,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2422:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":541,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2414:7:4","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":540,"name":"address","nodeType":"ElementaryTypeName","src":"2414:7:4","typeDescriptions":{}}},"id":543,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2414:10:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2402:22:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373","id":545,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2426:40:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe","typeString":"literal_string \"Ownable: new owner is the zero address\""},"value":"Ownable: new owner is the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe","typeString":"literal_string \"Ownable: new owner is the zero address\""}],"id":538,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2394:7:4","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":546,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2394:73:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":547,"nodeType":"ExpressionStatement","src":"2394:73:4"},{"expression":{"arguments":[{"id":549,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":533,"src":"2496:8:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":548,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":573,"src":"2477:18:4","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":550,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2477:28:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":551,"nodeType":"ExpressionStatement","src":"2477:28:4"}]},"documentation":{"id":531,"nodeType":"StructuredDocumentation","src":"2171:138:4","text":" @dev Transfers ownership of the contract to a new account (`newOwner`).\n Can only be called by the current owner."},"functionSelector":"f2fde38b","id":553,"implemented":true,"kind":"function","modifiers":[{"id":536,"kind":"modifierInvocation","modifierName":{"id":535,"name":"onlyOwner","nameLocations":["2374:9:4"],"nodeType":"IdentifierPath","referencedDeclaration":493,"src":"2374:9:4"},"nodeType":"ModifierInvocation","src":"2374:9:4"}],"name":"transferOwnership","nameLocation":"2323:17:4","nodeType":"FunctionDefinition","parameters":{"id":534,"nodeType":"ParameterList","parameters":[{"constant":false,"id":533,"mutability":"mutable","name":"newOwner","nameLocation":"2349:8:4","nodeType":"VariableDeclaration","scope":553,"src":"2341:16:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":532,"name":"address","nodeType":"ElementaryTypeName","src":"2341:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2340:18:4"},"returnParameters":{"id":537,"nodeType":"ParameterList","parameters":[],"src":"2384:0:4"},"scope":579,"src":"2314:198:4","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":572,"nodeType":"Block","src":"2729:124:4","statements":[{"assignments":[560],"declarations":[{"constant":false,"id":560,"mutability":"mutable","name":"oldOwner","nameLocation":"2747:8:4","nodeType":"VariableDeclaration","scope":572,"src":"2739:16:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":559,"name":"address","nodeType":"ElementaryTypeName","src":"2739:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":562,"initialValue":{"id":561,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":458,"src":"2758:6:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"2739:25:4"},{"expression":{"id":565,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":563,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":458,"src":"2774:6:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":564,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":556,"src":"2783:8:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2774:17:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":566,"nodeType":"ExpressionStatement","src":"2774:17:4"},{"eventCall":{"arguments":[{"id":568,"name":"oldOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":560,"src":"2827:8:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":569,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":556,"src":"2837:8:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":567,"name":"OwnershipTransferred","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":464,"src":"2806:20:4","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":570,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2806:40:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":571,"nodeType":"EmitStatement","src":"2801:45:4"}]},"documentation":{"id":554,"nodeType":"StructuredDocumentation","src":"2518:143:4","text":" @dev Transfers ownership of the contract to a new account (`newOwner`).\n Internal function without access restriction."},"id":573,"implemented":true,"kind":"function","modifiers":[],"name":"_transferOwnership","nameLocation":"2675:18:4","nodeType":"FunctionDefinition","parameters":{"id":557,"nodeType":"ParameterList","parameters":[{"constant":false,"id":556,"mutability":"mutable","name":"newOwner","nameLocation":"2702:8:4","nodeType":"VariableDeclaration","scope":573,"src":"2694:16:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":555,"name":"address","nodeType":"ElementaryTypeName","src":"2694:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2693:18:4"},"returnParameters":{"id":558,"nodeType":"ParameterList","parameters":[],"src":"2729:0:4"},"scope":579,"src":"2666:187:4","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"constant":false,"documentation":{"id":574,"nodeType":"StructuredDocumentation","src":"2859:254:4","text":" @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"},"id":578,"mutability":"mutable","name":"__gap","nameLocation":"3138:5:4","nodeType":"VariableDeclaration","scope":579,"src":"3118:25:4","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$49_storage","typeString":"uint256[49]"},"typeName":{"baseType":{"id":575,"name":"uint256","nodeType":"ElementaryTypeName","src":"3118:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":577,"length":{"hexValue":"3439","id":576,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3126:2:4","typeDescriptions":{"typeIdentifier":"t_rational_49_by_1","typeString":"int_const 49"},"value":"49"},"nodeType":"ArrayTypeName","src":"3118:11:4","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$49_storage_ptr","typeString":"uint256[49]"}},"visibility":"private"}],"scope":580,"src":"708:2438:4","usedErrors":[]}],"src":"102:3045:4"},"id":4},"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","exportedSymbols":{"AddressUpgradeable":[1078],"Initializable":[748]},"id":749,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":581,"literals":["solidity","^","0.8",".2"],"nodeType":"PragmaDirective","src":"113:23:5"},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol","file":"../../utils/AddressUpgradeable.sol","id":582,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":749,"sourceUnit":1079,"src":"138:44:5","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[],"canonicalName":"Initializable","contractDependencies":[],"contractKind":"contract","documentation":{"id":583,"nodeType":"StructuredDocumentation","src":"184:2209:5","text":" @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n case an upgrade adds a module that needs to be initialized.\n For example:\n [.hljs-theme-light.nopadding]\n ```solidity\n contract MyToken is ERC20Upgradeable {\n     function initialize() initializer public {\n         __ERC20_init(\"MyToken\", \"MTK\");\n     }\n }\n contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n     function initializeV2() reinitializer(2) public {\n         __ERC20Permit_init(\"MyToken\");\n     }\n }\n ```\n TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n [CAUTION]\n ====\n Avoid leaving a contract uninitialized.\n An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n [.hljs-theme-light.nopadding]\n ```\n /// @custom:oz-upgrades-unsafe-allow constructor\n constructor() {\n     _disableInitializers();\n }\n ```\n ===="},"fullyImplemented":true,"id":748,"linearizedBaseContracts":[748],"name":"Initializable","nameLocation":"2412:13:5","nodeType":"ContractDefinition","nodes":[{"constant":false,"documentation":{"id":584,"nodeType":"StructuredDocumentation","src":"2432:109:5","text":" @dev Indicates that the contract has been initialized.\n @custom:oz-retyped-from bool"},"id":586,"mutability":"mutable","name":"_initialized","nameLocation":"2560:12:5","nodeType":"VariableDeclaration","scope":748,"src":"2546:26:5","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":585,"name":"uint8","nodeType":"ElementaryTypeName","src":"2546:5:5","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"private"},{"constant":false,"documentation":{"id":587,"nodeType":"StructuredDocumentation","src":"2579:91:5","text":" @dev Indicates that the contract is in the process of being initialized."},"id":589,"mutability":"mutable","name":"_initializing","nameLocation":"2688:13:5","nodeType":"VariableDeclaration","scope":748,"src":"2675:26:5","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":588,"name":"bool","nodeType":"ElementaryTypeName","src":"2675:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"private"},{"anonymous":false,"documentation":{"id":590,"nodeType":"StructuredDocumentation","src":"2708:90:5","text":" @dev Triggered when the contract has been initialized or reinitialized."},"eventSelector":"7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498","id":594,"name":"Initialized","nameLocation":"2809:11:5","nodeType":"EventDefinition","parameters":{"id":593,"nodeType":"ParameterList","parameters":[{"constant":false,"id":592,"indexed":false,"mutability":"mutable","name":"version","nameLocation":"2827:7:5","nodeType":"VariableDeclaration","scope":594,"src":"2821:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":591,"name":"uint8","nodeType":"ElementaryTypeName","src":"2821:5:5","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"2820:15:5"},"src":"2803:33:5"},{"body":{"id":649,"nodeType":"Block","src":"3269:483:5","statements":[{"assignments":[598],"declarations":[{"constant":false,"id":598,"mutability":"mutable","name":"isTopLevelCall","nameLocation":"3284:14:5","nodeType":"VariableDeclaration","scope":649,"src":"3279:19:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":597,"name":"bool","nodeType":"ElementaryTypeName","src":"3279:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":601,"initialValue":{"id":600,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"3301:14:5","subExpression":{"id":599,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":589,"src":"3302:13:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"VariableDeclarationStatement","src":"3279:36:5"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":622,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":607,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":603,"name":"isTopLevelCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":598,"src":"3347:14:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":606,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":604,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":586,"src":"3365:12:5","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"31","id":605,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3380:1:5","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3365:16:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3347:34:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":608,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3346:36:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":620,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":616,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"3387:45:5","subExpression":{"arguments":[{"arguments":[{"id":613,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"3426:4:5","typeDescriptions":{"typeIdentifier":"t_contract$_Initializable_$748","typeString":"contract Initializable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Initializable_$748","typeString":"contract Initializable"}],"id":612,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3418:7:5","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":611,"name":"address","nodeType":"ElementaryTypeName","src":"3418:7:5","typeDescriptions":{}}},"id":614,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3418:13:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":609,"name":"AddressUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1078,"src":"3388:18:5","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_AddressUpgradeable_$1078_$","typeString":"type(library AddressUpgradeable)"}},"id":610,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3407:10:5","memberName":"isContract","nodeType":"MemberAccess","referencedDeclaration":766,"src":"3388:29:5","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":615,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3388:44:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":619,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":617,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":586,"src":"3436:12:5","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"31","id":618,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3452:1:5","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3436:17:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3387:66:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":621,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3386:68:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3346:108:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a6564","id":623,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3468:48:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759","typeString":"literal_string \"Initializable: contract is already initialized\""},"value":"Initializable: contract is already initialized"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759","typeString":"literal_string \"Initializable: contract is already initialized\""}],"id":602,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3325:7:5","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":624,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3325:201:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":625,"nodeType":"ExpressionStatement","src":"3325:201:5"},{"expression":{"id":628,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":626,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":586,"src":"3536:12:5","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"31","id":627,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3551:1:5","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3536:16:5","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":629,"nodeType":"ExpressionStatement","src":"3536:16:5"},{"condition":{"id":630,"name":"isTopLevelCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":598,"src":"3566:14:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":636,"nodeType":"IfStatement","src":"3562:65:5","trueBody":{"id":635,"nodeType":"Block","src":"3582:45:5","statements":[{"expression":{"id":633,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":631,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":589,"src":"3596:13:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":632,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3612:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"3596:20:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":634,"nodeType":"ExpressionStatement","src":"3596:20:5"}]}},{"id":637,"nodeType":"PlaceholderStatement","src":"3636:1:5"},{"condition":{"id":638,"name":"isTopLevelCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":598,"src":"3651:14:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":648,"nodeType":"IfStatement","src":"3647:99:5","trueBody":{"id":647,"nodeType":"Block","src":"3667:79:5","statements":[{"expression":{"id":641,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":639,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":589,"src":"3681:13:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":640,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3697:5:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"3681:21:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":642,"nodeType":"ExpressionStatement","src":"3681:21:5"},{"eventCall":{"arguments":[{"hexValue":"31","id":644,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3733:1:5","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":643,"name":"Initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":594,"src":"3721:11:5","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint8_$returns$__$","typeString":"function (uint8)"}},"id":645,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3721:14:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":646,"nodeType":"EmitStatement","src":"3716:19:5"}]}}]},"documentation":{"id":595,"nodeType":"StructuredDocumentation","src":"2842:399:5","text":" @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n `onlyInitializing` functions can be used to initialize parent contracts.\n Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n constructor.\n Emits an {Initialized} event."},"id":650,"name":"initializer","nameLocation":"3255:11:5","nodeType":"ModifierDefinition","parameters":{"id":596,"nodeType":"ParameterList","parameters":[],"src":"3266:2:5"},"src":"3246:506:5","virtual":false,"visibility":"internal"},{"body":{"id":682,"nodeType":"Block","src":"4863:255:5","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":661,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":657,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"4881:14:5","subExpression":{"id":656,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":589,"src":"4882:13:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":660,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":658,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":586,"src":"4899:12:5","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":659,"name":"version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":653,"src":"4914:7:5","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"4899:22:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"4881:40:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a6564","id":662,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4923:48:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759","typeString":"literal_string \"Initializable: contract is already initialized\""},"value":"Initializable: contract is already initialized"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759","typeString":"literal_string \"Initializable: contract is already initialized\""}],"id":655,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4873:7:5","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":663,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4873:99:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":664,"nodeType":"ExpressionStatement","src":"4873:99:5"},{"expression":{"id":667,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":665,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":586,"src":"4982:12:5","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":666,"name":"version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":653,"src":"4997:7:5","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"4982:22:5","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":668,"nodeType":"ExpressionStatement","src":"4982:22:5"},{"expression":{"id":671,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":669,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":589,"src":"5014:13:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":670,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"5030:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"5014:20:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":672,"nodeType":"ExpressionStatement","src":"5014:20:5"},{"id":673,"nodeType":"PlaceholderStatement","src":"5044:1:5"},{"expression":{"id":676,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":674,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":589,"src":"5055:13:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":675,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"5071:5:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"5055:21:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":677,"nodeType":"ExpressionStatement","src":"5055:21:5"},{"eventCall":{"arguments":[{"id":679,"name":"version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":653,"src":"5103:7:5","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":678,"name":"Initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":594,"src":"5091:11:5","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint8_$returns$__$","typeString":"function (uint8)"}},"id":680,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5091:20:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":681,"nodeType":"EmitStatement","src":"5086:25:5"}]},"documentation":{"id":651,"nodeType":"StructuredDocumentation","src":"3758:1062:5","text":" @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n used to initialize parent contracts.\n A reinitializer may be used after the original initialization step. This is essential to configure modules that\n are added through upgrades and that require initialization.\n When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n cannot be nested. If one is invoked in the context of another, execution will revert.\n Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n a contract, executing them in the right order is up to the developer or operator.\n WARNING: setting the version to 255 will prevent any future reinitialization.\n Emits an {Initialized} event."},"id":683,"name":"reinitializer","nameLocation":"4834:13:5","nodeType":"ModifierDefinition","parameters":{"id":654,"nodeType":"ParameterList","parameters":[{"constant":false,"id":653,"mutability":"mutable","name":"version","nameLocation":"4854:7:5","nodeType":"VariableDeclaration","scope":683,"src":"4848:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":652,"name":"uint8","nodeType":"ElementaryTypeName","src":"4848:5:5","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"4847:15:5"},"src":"4825:293:5","virtual":false,"visibility":"internal"},{"body":{"id":692,"nodeType":"Block","src":"5356:97:5","statements":[{"expression":{"arguments":[{"id":687,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":589,"src":"5374:13:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e697469616c697a61626c653a20636f6e7472616374206973206e6f7420696e697469616c697a696e67","id":688,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5389:45:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b","typeString":"literal_string \"Initializable: contract is not initializing\""},"value":"Initializable: contract is not initializing"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b","typeString":"literal_string \"Initializable: contract is not initializing\""}],"id":686,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5366:7:5","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":689,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5366:69:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":690,"nodeType":"ExpressionStatement","src":"5366:69:5"},{"id":691,"nodeType":"PlaceholderStatement","src":"5445:1:5"}]},"documentation":{"id":684,"nodeType":"StructuredDocumentation","src":"5124:199:5","text":" @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n {initializer} and {reinitializer} modifiers, directly or indirectly."},"id":693,"name":"onlyInitializing","nameLocation":"5337:16:5","nodeType":"ModifierDefinition","parameters":{"id":685,"nodeType":"ParameterList","parameters":[],"src":"5353:2:5"},"src":"5328:125:5","virtual":false,"visibility":"internal"},{"body":{"id":728,"nodeType":"Block","src":"5988:231:5","statements":[{"expression":{"arguments":[{"id":699,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"6006:14:5","subExpression":{"id":698,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":589,"src":"6007:13:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e697469616c697a61626c653a20636f6e747261637420697320696e697469616c697a696e67","id":700,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6022:41:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a","typeString":"literal_string \"Initializable: contract is initializing\""},"value":"Initializable: contract is initializing"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a","typeString":"literal_string \"Initializable: contract is initializing\""}],"id":697,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5998:7:5","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":701,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5998:66:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":702,"nodeType":"ExpressionStatement","src":"5998:66:5"},{"condition":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":709,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":703,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":586,"src":"6078:12:5","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"arguments":[{"id":706,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6099:5:5","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":705,"name":"uint8","nodeType":"ElementaryTypeName","src":"6099:5:5","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"}],"id":704,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"6094:4:5","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":707,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6094:11:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint8","typeString":"type(uint8)"}},"id":708,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6106:3:5","memberName":"max","nodeType":"MemberAccess","src":"6094:15:5","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"6078:31:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":727,"nodeType":"IfStatement","src":"6074:139:5","trueBody":{"id":726,"nodeType":"Block","src":"6111:102:5","statements":[{"expression":{"id":716,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":710,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":586,"src":"6125:12:5","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"arguments":[{"id":713,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6145:5:5","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":712,"name":"uint8","nodeType":"ElementaryTypeName","src":"6145:5:5","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"}],"id":711,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"6140:4:5","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":714,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6140:11:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint8","typeString":"type(uint8)"}},"id":715,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6152:3:5","memberName":"max","nodeType":"MemberAccess","src":"6140:15:5","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"6125:30:5","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":717,"nodeType":"ExpressionStatement","src":"6125:30:5"},{"eventCall":{"arguments":[{"expression":{"arguments":[{"id":721,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6191:5:5","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":720,"name":"uint8","nodeType":"ElementaryTypeName","src":"6191:5:5","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"}],"id":719,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"6186:4:5","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":722,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6186:11:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint8","typeString":"type(uint8)"}},"id":723,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6198:3:5","memberName":"max","nodeType":"MemberAccess","src":"6186:15:5","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":718,"name":"Initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":594,"src":"6174:11:5","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint8_$returns$__$","typeString":"function (uint8)"}},"id":724,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6174:28:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":725,"nodeType":"EmitStatement","src":"6169:33:5"}]}}]},"documentation":{"id":694,"nodeType":"StructuredDocumentation","src":"5459:475:5","text":" @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n through proxies.\n Emits an {Initialized} event the first time it is successfully executed."},"id":729,"implemented":true,"kind":"function","modifiers":[],"name":"_disableInitializers","nameLocation":"5948:20:5","nodeType":"FunctionDefinition","parameters":{"id":695,"nodeType":"ParameterList","parameters":[],"src":"5968:2:5"},"returnParameters":{"id":696,"nodeType":"ParameterList","parameters":[],"src":"5988:0:5"},"scope":748,"src":"5939:280:5","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":737,"nodeType":"Block","src":"6393:36:5","statements":[{"expression":{"id":735,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":586,"src":"6410:12:5","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"functionReturnParameters":734,"id":736,"nodeType":"Return","src":"6403:19:5"}]},"documentation":{"id":730,"nodeType":"StructuredDocumentation","src":"6225:99:5","text":" @dev Returns the highest version that has been initialized. See {reinitializer}."},"id":738,"implemented":true,"kind":"function","modifiers":[],"name":"_getInitializedVersion","nameLocation":"6338:22:5","nodeType":"FunctionDefinition","parameters":{"id":731,"nodeType":"ParameterList","parameters":[],"src":"6360:2:5"},"returnParameters":{"id":734,"nodeType":"ParameterList","parameters":[{"constant":false,"id":733,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":738,"src":"6386:5:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":732,"name":"uint8","nodeType":"ElementaryTypeName","src":"6386:5:5","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"6385:7:5"},"scope":748,"src":"6329:100:5","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":746,"nodeType":"Block","src":"6601:37:5","statements":[{"expression":{"id":744,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":589,"src":"6618:13:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":743,"id":745,"nodeType":"Return","src":"6611:20:5"}]},"documentation":{"id":739,"nodeType":"StructuredDocumentation","src":"6435:105:5","text":" @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}."},"id":747,"implemented":true,"kind":"function","modifiers":[],"name":"_isInitializing","nameLocation":"6554:15:5","nodeType":"FunctionDefinition","parameters":{"id":740,"nodeType":"ParameterList","parameters":[],"src":"6569:2:5"},"returnParameters":{"id":743,"nodeType":"ParameterList","parameters":[{"constant":false,"id":742,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":747,"src":"6595:4:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":741,"name":"bool","nodeType":"ElementaryTypeName","src":"6595:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6594:6:5"},"scope":748,"src":"6545:93:5","stateMutability":"view","virtual":false,"visibility":"internal"}],"scope":749,"src":"2394:4246:5","usedErrors":[]}],"src":"113:6528:5"},"id":5},"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol","exportedSymbols":{"AddressUpgradeable":[1078]},"id":1079,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":750,"literals":["solidity","^","0.8",".1"],"nodeType":"PragmaDirective","src":"101:23:6"},{"abstract":false,"baseContracts":[],"canonicalName":"AddressUpgradeable","contractDependencies":[],"contractKind":"library","documentation":{"id":751,"nodeType":"StructuredDocumentation","src":"126:67:6","text":" @dev Collection of functions related to the address type"},"fullyImplemented":true,"id":1078,"linearizedBaseContracts":[1078],"name":"AddressUpgradeable","nameLocation":"202:18:6","nodeType":"ContractDefinition","nodes":[{"body":{"id":765,"nodeType":"Block","src":"1489:254:6","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":763,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":759,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":754,"src":"1713:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":760,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1721:4:6","memberName":"code","nodeType":"MemberAccess","src":"1713:12:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":761,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1726:6:6","memberName":"length","nodeType":"MemberAccess","src":"1713:19:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":762,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1735:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1713:23:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":758,"id":764,"nodeType":"Return","src":"1706:30:6"}]},"documentation":{"id":752,"nodeType":"StructuredDocumentation","src":"227:1191:6","text":" @dev Returns true if `account` is a contract.\n [IMPORTANT]\n ====\n It is unsafe to assume that an address for which this function returns\n false is an externally-owned account (EOA) and not a contract.\n Among others, `isContract` will return false for the following\n types of addresses:\n  - an externally-owned account\n  - a contract in construction\n  - an address where a contract will be created\n  - an address where a contract lived, but was destroyed\n Furthermore, `isContract` will also return true if the target contract within\n the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n which only has an effect at the end of a transaction.\n ====\n [IMPORTANT]\n ====\n You shouldn't rely on `isContract` to protect against flash loan attacks!\n Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n constructor.\n ===="},"id":766,"implemented":true,"kind":"function","modifiers":[],"name":"isContract","nameLocation":"1432:10:6","nodeType":"FunctionDefinition","parameters":{"id":755,"nodeType":"ParameterList","parameters":[{"constant":false,"id":754,"mutability":"mutable","name":"account","nameLocation":"1451:7:6","nodeType":"VariableDeclaration","scope":766,"src":"1443:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":753,"name":"address","nodeType":"ElementaryTypeName","src":"1443:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1442:17:6"},"returnParameters":{"id":758,"nodeType":"ParameterList","parameters":[{"constant":false,"id":757,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":766,"src":"1483:4:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":756,"name":"bool","nodeType":"ElementaryTypeName","src":"1483:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1482:6:6"},"scope":1078,"src":"1423:320:6","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":799,"nodeType":"Block","src":"2729:241:6","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":781,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":777,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2755:4:6","typeDescriptions":{"typeIdentifier":"t_contract$_AddressUpgradeable_$1078","typeString":"library AddressUpgradeable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_AddressUpgradeable_$1078","typeString":"library AddressUpgradeable"}],"id":776,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2747:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":775,"name":"address","nodeType":"ElementaryTypeName","src":"2747:7:6","typeDescriptions":{}}},"id":778,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2747:13:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":779,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2761:7:6","memberName":"balance","nodeType":"MemberAccess","src":"2747:21:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":780,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":771,"src":"2772:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2747:31:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e6365","id":782,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2780:31:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9","typeString":"literal_string \"Address: insufficient balance\""},"value":"Address: insufficient balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9","typeString":"literal_string \"Address: insufficient balance\""}],"id":774,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2739:7:6","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":783,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2739:73:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":784,"nodeType":"ExpressionStatement","src":"2739:73:6"},{"assignments":[786,null],"declarations":[{"constant":false,"id":786,"mutability":"mutable","name":"success","nameLocation":"2829:7:6","nodeType":"VariableDeclaration","scope":799,"src":"2824:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":785,"name":"bool","nodeType":"ElementaryTypeName","src":"2824:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},null],"id":793,"initialValue":{"arguments":[{"hexValue":"","id":791,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2872:2:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"id":787,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":769,"src":"2842:9:6","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":788,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2852:4:6","memberName":"call","nodeType":"MemberAccess","src":"2842:14:6","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":790,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":789,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":771,"src":"2864:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"2842:29:6","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":792,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2842:33:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"2823:52:6"},{"expression":{"arguments":[{"id":795,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":786,"src":"2893:7:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d61792068617665207265766572746564","id":796,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2902:60:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae","typeString":"literal_string \"Address: unable to send value, recipient may have reverted\""},"value":"Address: unable to send value, recipient may have reverted"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae","typeString":"literal_string \"Address: unable to send value, recipient may have reverted\""}],"id":794,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2885:7:6","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":797,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2885:78:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":798,"nodeType":"ExpressionStatement","src":"2885:78:6"}]},"documentation":{"id":767,"nodeType":"StructuredDocumentation","src":"1749:904:6","text":" @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n `recipient`, forwarding all available gas and reverting on errors.\n https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n of certain opcodes, possibly making contracts go over the 2300 gas limit\n imposed by `transfer`, making them unable to receive funds via\n `transfer`. {sendValue} removes this limitation.\n https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n IMPORTANT: because control is transferred to `recipient`, care must be\n taken to not create reentrancy vulnerabilities. Consider using\n {ReentrancyGuard} or the\n https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern]."},"id":800,"implemented":true,"kind":"function","modifiers":[],"name":"sendValue","nameLocation":"2667:9:6","nodeType":"FunctionDefinition","parameters":{"id":772,"nodeType":"ParameterList","parameters":[{"constant":false,"id":769,"mutability":"mutable","name":"recipient","nameLocation":"2693:9:6","nodeType":"VariableDeclaration","scope":800,"src":"2677:25:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":768,"name":"address","nodeType":"ElementaryTypeName","src":"2677:15:6","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"},{"constant":false,"id":771,"mutability":"mutable","name":"amount","nameLocation":"2712:6:6","nodeType":"VariableDeclaration","scope":800,"src":"2704:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":770,"name":"uint256","nodeType":"ElementaryTypeName","src":"2704:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2676:43:6"},"returnParameters":{"id":773,"nodeType":"ParameterList","parameters":[],"src":"2729:0:6"},"scope":1078,"src":"2658:312:6","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":817,"nodeType":"Block","src":"3801:96:6","statements":[{"expression":{"arguments":[{"id":811,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":803,"src":"3840:6:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":812,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":805,"src":"3848:4:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":813,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3854:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"416464726573733a206c6f772d6c6576656c2063616c6c206661696c6564","id":814,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3857:32:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df","typeString":"literal_string \"Address: low-level call failed\""},"value":"Address: low-level call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df","typeString":"literal_string \"Address: low-level call failed\""}],"id":810,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[858,902],"referencedDeclaration":902,"src":"3818:21:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":815,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3818:72:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":809,"id":816,"nodeType":"Return","src":"3811:79:6"}]},"documentation":{"id":801,"nodeType":"StructuredDocumentation","src":"2976:731:6","text":" @dev Performs a Solidity function call using a low level `call`. A\n plain `call` is an unsafe replacement for a function call: use this\n function instead.\n If `target` reverts with a revert reason, it is bubbled up by this\n function (like regular Solidity function calls).\n Returns the raw returned data. To convert to the expected return value,\n use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n Requirements:\n - `target` must be a contract.\n - calling `target` with `data` must not revert.\n _Available since v3.1._"},"id":818,"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nameLocation":"3721:12:6","nodeType":"FunctionDefinition","parameters":{"id":806,"nodeType":"ParameterList","parameters":[{"constant":false,"id":803,"mutability":"mutable","name":"target","nameLocation":"3742:6:6","nodeType":"VariableDeclaration","scope":818,"src":"3734:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":802,"name":"address","nodeType":"ElementaryTypeName","src":"3734:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":805,"mutability":"mutable","name":"data","nameLocation":"3763:4:6","nodeType":"VariableDeclaration","scope":818,"src":"3750:17:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":804,"name":"bytes","nodeType":"ElementaryTypeName","src":"3750:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3733:35:6"},"returnParameters":{"id":809,"nodeType":"ParameterList","parameters":[{"constant":false,"id":808,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":818,"src":"3787:12:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":807,"name":"bytes","nodeType":"ElementaryTypeName","src":"3787:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3786:14:6"},"scope":1078,"src":"3712:185:6","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":837,"nodeType":"Block","src":"4266:76:6","statements":[{"expression":{"arguments":[{"id":831,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":821,"src":"4305:6:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":832,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":823,"src":"4313:4:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":833,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4319:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"id":834,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":825,"src":"4322:12:6","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":830,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[858,902],"referencedDeclaration":902,"src":"4283:21:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":835,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4283:52:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":829,"id":836,"nodeType":"Return","src":"4276:59:6"}]},"documentation":{"id":819,"nodeType":"StructuredDocumentation","src":"3903:211:6","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"},"id":838,"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nameLocation":"4128:12:6","nodeType":"FunctionDefinition","parameters":{"id":826,"nodeType":"ParameterList","parameters":[{"constant":false,"id":821,"mutability":"mutable","name":"target","nameLocation":"4158:6:6","nodeType":"VariableDeclaration","scope":838,"src":"4150:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":820,"name":"address","nodeType":"ElementaryTypeName","src":"4150:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":823,"mutability":"mutable","name":"data","nameLocation":"4187:4:6","nodeType":"VariableDeclaration","scope":838,"src":"4174:17:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":822,"name":"bytes","nodeType":"ElementaryTypeName","src":"4174:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":825,"mutability":"mutable","name":"errorMessage","nameLocation":"4215:12:6","nodeType":"VariableDeclaration","scope":838,"src":"4201:26:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":824,"name":"string","nodeType":"ElementaryTypeName","src":"4201:6:6","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"4140:93:6"},"returnParameters":{"id":829,"nodeType":"ParameterList","parameters":[{"constant":false,"id":828,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":838,"src":"4252:12:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":827,"name":"bytes","nodeType":"ElementaryTypeName","src":"4252:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4251:14:6"},"scope":1078,"src":"4119:223:6","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":857,"nodeType":"Block","src":"4817:111:6","statements":[{"expression":{"arguments":[{"id":851,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":841,"src":"4856:6:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":852,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":843,"src":"4864:4:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":853,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":845,"src":"4870:5:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564","id":854,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4877:43:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc","typeString":"literal_string \"Address: low-level call with value failed\""},"value":"Address: low-level call with value failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc","typeString":"literal_string \"Address: low-level call with value failed\""}],"id":850,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[858,902],"referencedDeclaration":902,"src":"4834:21:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":855,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4834:87:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":849,"id":856,"nodeType":"Return","src":"4827:94:6"}]},"documentation":{"id":839,"nodeType":"StructuredDocumentation","src":"4348:351:6","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but also transferring `value` wei to `target`.\n Requirements:\n - the calling contract must have an ETH balance of at least `value`.\n - the called Solidity function must be `payable`.\n _Available since v3.1._"},"id":858,"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nameLocation":"4713:21:6","nodeType":"FunctionDefinition","parameters":{"id":846,"nodeType":"ParameterList","parameters":[{"constant":false,"id":841,"mutability":"mutable","name":"target","nameLocation":"4743:6:6","nodeType":"VariableDeclaration","scope":858,"src":"4735:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":840,"name":"address","nodeType":"ElementaryTypeName","src":"4735:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":843,"mutability":"mutable","name":"data","nameLocation":"4764:4:6","nodeType":"VariableDeclaration","scope":858,"src":"4751:17:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":842,"name":"bytes","nodeType":"ElementaryTypeName","src":"4751:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":845,"mutability":"mutable","name":"value","nameLocation":"4778:5:6","nodeType":"VariableDeclaration","scope":858,"src":"4770:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":844,"name":"uint256","nodeType":"ElementaryTypeName","src":"4770:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4734:50:6"},"returnParameters":{"id":849,"nodeType":"ParameterList","parameters":[{"constant":false,"id":848,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":858,"src":"4803:12:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":847,"name":"bytes","nodeType":"ElementaryTypeName","src":"4803:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4802:14:6"},"scope":1078,"src":"4704:224:6","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":901,"nodeType":"Block","src":"5355:267:6","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":879,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":875,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"5381:4:6","typeDescriptions":{"typeIdentifier":"t_contract$_AddressUpgradeable_$1078","typeString":"library AddressUpgradeable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_AddressUpgradeable_$1078","typeString":"library AddressUpgradeable"}],"id":874,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5373:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":873,"name":"address","nodeType":"ElementaryTypeName","src":"5373:7:6","typeDescriptions":{}}},"id":876,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5373:13:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":877,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5387:7:6","memberName":"balance","nodeType":"MemberAccess","src":"5373:21:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":878,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":865,"src":"5398:5:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5373:30:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c","id":880,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5405:40:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","typeString":"literal_string \"Address: insufficient balance for call\""},"value":"Address: insufficient balance for call"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","typeString":"literal_string \"Address: insufficient balance for call\""}],"id":872,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5365:7:6","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":881,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5365:81:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":882,"nodeType":"ExpressionStatement","src":"5365:81:6"},{"assignments":[884,886],"declarations":[{"constant":false,"id":884,"mutability":"mutable","name":"success","nameLocation":"5462:7:6","nodeType":"VariableDeclaration","scope":901,"src":"5457:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":883,"name":"bool","nodeType":"ElementaryTypeName","src":"5457:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":886,"mutability":"mutable","name":"returndata","nameLocation":"5484:10:6","nodeType":"VariableDeclaration","scope":901,"src":"5471:23:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":885,"name":"bytes","nodeType":"ElementaryTypeName","src":"5471:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":893,"initialValue":{"arguments":[{"id":891,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":863,"src":"5524:4:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":887,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":861,"src":"5498:6:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":888,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5505:4:6","memberName":"call","nodeType":"MemberAccess","src":"5498:11:6","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":890,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":889,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":865,"src":"5517:5:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"5498:25:6","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":892,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5498:31:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"5456:73:6"},{"expression":{"arguments":[{"id":895,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":861,"src":"5573:6:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":896,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":884,"src":"5581:7:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":897,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":886,"src":"5590:10:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":898,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":867,"src":"5602:12:6","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":894,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1033,"src":"5546:26:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":899,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5546:69:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":871,"id":900,"nodeType":"Return","src":"5539:76:6"}]},"documentation":{"id":859,"nodeType":"StructuredDocumentation","src":"4934:237:6","text":" @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n with `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"},"id":902,"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nameLocation":"5185:21:6","nodeType":"FunctionDefinition","parameters":{"id":868,"nodeType":"ParameterList","parameters":[{"constant":false,"id":861,"mutability":"mutable","name":"target","nameLocation":"5224:6:6","nodeType":"VariableDeclaration","scope":902,"src":"5216:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":860,"name":"address","nodeType":"ElementaryTypeName","src":"5216:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":863,"mutability":"mutable","name":"data","nameLocation":"5253:4:6","nodeType":"VariableDeclaration","scope":902,"src":"5240:17:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":862,"name":"bytes","nodeType":"ElementaryTypeName","src":"5240:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":865,"mutability":"mutable","name":"value","nameLocation":"5275:5:6","nodeType":"VariableDeclaration","scope":902,"src":"5267:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":864,"name":"uint256","nodeType":"ElementaryTypeName","src":"5267:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":867,"mutability":"mutable","name":"errorMessage","nameLocation":"5304:12:6","nodeType":"VariableDeclaration","scope":902,"src":"5290:26:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":866,"name":"string","nodeType":"ElementaryTypeName","src":"5290:6:6","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"5206:116:6"},"returnParameters":{"id":871,"nodeType":"ParameterList","parameters":[{"constant":false,"id":870,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":902,"src":"5341:12:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":869,"name":"bytes","nodeType":"ElementaryTypeName","src":"5341:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5340:14:6"},"scope":1078,"src":"5176:446:6","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":918,"nodeType":"Block","src":"5899:97:6","statements":[{"expression":{"arguments":[{"id":913,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":905,"src":"5935:6:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":914,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":907,"src":"5943:4:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"416464726573733a206c6f772d6c6576656c207374617469632063616c6c206661696c6564","id":915,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5949:39:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0","typeString":"literal_string \"Address: low-level static call failed\""},"value":"Address: low-level static call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0","typeString":"literal_string \"Address: low-level static call failed\""}],"id":912,"name":"functionStaticCall","nodeType":"Identifier","overloadedDeclarations":[919,948],"referencedDeclaration":948,"src":"5916:18:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,string memory) view returns (bytes memory)"}},"id":916,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5916:73:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":911,"id":917,"nodeType":"Return","src":"5909:80:6"}]},"documentation":{"id":903,"nodeType":"StructuredDocumentation","src":"5628:166:6","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"},"id":919,"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nameLocation":"5808:18:6","nodeType":"FunctionDefinition","parameters":{"id":908,"nodeType":"ParameterList","parameters":[{"constant":false,"id":905,"mutability":"mutable","name":"target","nameLocation":"5835:6:6","nodeType":"VariableDeclaration","scope":919,"src":"5827:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":904,"name":"address","nodeType":"ElementaryTypeName","src":"5827:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":907,"mutability":"mutable","name":"data","nameLocation":"5856:4:6","nodeType":"VariableDeclaration","scope":919,"src":"5843:17:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":906,"name":"bytes","nodeType":"ElementaryTypeName","src":"5843:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5826:35:6"},"returnParameters":{"id":911,"nodeType":"ParameterList","parameters":[{"constant":false,"id":910,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":919,"src":"5885:12:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":909,"name":"bytes","nodeType":"ElementaryTypeName","src":"5885:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5884:14:6"},"scope":1078,"src":"5799:197:6","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":947,"nodeType":"Block","src":"6338:168:6","statements":[{"assignments":[932,934],"declarations":[{"constant":false,"id":932,"mutability":"mutable","name":"success","nameLocation":"6354:7:6","nodeType":"VariableDeclaration","scope":947,"src":"6349:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":931,"name":"bool","nodeType":"ElementaryTypeName","src":"6349:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":934,"mutability":"mutable","name":"returndata","nameLocation":"6376:10:6","nodeType":"VariableDeclaration","scope":947,"src":"6363:23:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":933,"name":"bytes","nodeType":"ElementaryTypeName","src":"6363:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":939,"initialValue":{"arguments":[{"id":937,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":924,"src":"6408:4:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":935,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":922,"src":"6390:6:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":936,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6397:10:6","memberName":"staticcall","nodeType":"MemberAccess","src":"6390:17:6","typeDescriptions":{"typeIdentifier":"t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) view returns (bool,bytes memory)"}},"id":938,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6390:23:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"6348:65:6"},{"expression":{"arguments":[{"id":941,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":922,"src":"6457:6:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":942,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":932,"src":"6465:7:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":943,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":934,"src":"6474:10:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":944,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":926,"src":"6486:12:6","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":940,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1033,"src":"6430:26:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":945,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6430:69:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":930,"id":946,"nodeType":"Return","src":"6423:76:6"}]},"documentation":{"id":920,"nodeType":"StructuredDocumentation","src":"6002:173:6","text":" @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"},"id":948,"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nameLocation":"6189:18:6","nodeType":"FunctionDefinition","parameters":{"id":927,"nodeType":"ParameterList","parameters":[{"constant":false,"id":922,"mutability":"mutable","name":"target","nameLocation":"6225:6:6","nodeType":"VariableDeclaration","scope":948,"src":"6217:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":921,"name":"address","nodeType":"ElementaryTypeName","src":"6217:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":924,"mutability":"mutable","name":"data","nameLocation":"6254:4:6","nodeType":"VariableDeclaration","scope":948,"src":"6241:17:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":923,"name":"bytes","nodeType":"ElementaryTypeName","src":"6241:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":926,"mutability":"mutable","name":"errorMessage","nameLocation":"6282:12:6","nodeType":"VariableDeclaration","scope":948,"src":"6268:26:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":925,"name":"string","nodeType":"ElementaryTypeName","src":"6268:6:6","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"6207:93:6"},"returnParameters":{"id":930,"nodeType":"ParameterList","parameters":[{"constant":false,"id":929,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":948,"src":"6324:12:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":928,"name":"bytes","nodeType":"ElementaryTypeName","src":"6324:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6323:14:6"},"scope":1078,"src":"6180:326:6","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":964,"nodeType":"Block","src":"6782:101:6","statements":[{"expression":{"arguments":[{"id":959,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":951,"src":"6820:6:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":960,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":953,"src":"6828:4:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564","id":961,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6834:41:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398","typeString":"literal_string \"Address: low-level delegate call failed\""},"value":"Address: low-level delegate call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398","typeString":"literal_string \"Address: low-level delegate call failed\""}],"id":958,"name":"functionDelegateCall","nodeType":"Identifier","overloadedDeclarations":[965,994],"referencedDeclaration":994,"src":"6799:20:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,string memory) returns (bytes memory)"}},"id":962,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6799:77:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":957,"id":963,"nodeType":"Return","src":"6792:84:6"}]},"documentation":{"id":949,"nodeType":"StructuredDocumentation","src":"6512:168:6","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"},"id":965,"implemented":true,"kind":"function","modifiers":[],"name":"functionDelegateCall","nameLocation":"6694:20:6","nodeType":"FunctionDefinition","parameters":{"id":954,"nodeType":"ParameterList","parameters":[{"constant":false,"id":951,"mutability":"mutable","name":"target","nameLocation":"6723:6:6","nodeType":"VariableDeclaration","scope":965,"src":"6715:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":950,"name":"address","nodeType":"ElementaryTypeName","src":"6715:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":953,"mutability":"mutable","name":"data","nameLocation":"6744:4:6","nodeType":"VariableDeclaration","scope":965,"src":"6731:17:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":952,"name":"bytes","nodeType":"ElementaryTypeName","src":"6731:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6714:35:6"},"returnParameters":{"id":957,"nodeType":"ParameterList","parameters":[{"constant":false,"id":956,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":965,"src":"6768:12:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":955,"name":"bytes","nodeType":"ElementaryTypeName","src":"6768:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6767:14:6"},"scope":1078,"src":"6685:198:6","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":993,"nodeType":"Block","src":"7224:170:6","statements":[{"assignments":[978,980],"declarations":[{"constant":false,"id":978,"mutability":"mutable","name":"success","nameLocation":"7240:7:6","nodeType":"VariableDeclaration","scope":993,"src":"7235:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":977,"name":"bool","nodeType":"ElementaryTypeName","src":"7235:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":980,"mutability":"mutable","name":"returndata","nameLocation":"7262:10:6","nodeType":"VariableDeclaration","scope":993,"src":"7249:23:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":979,"name":"bytes","nodeType":"ElementaryTypeName","src":"7249:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":985,"initialValue":{"arguments":[{"id":983,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":970,"src":"7296:4:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":981,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":968,"src":"7276:6:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":982,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7283:12:6","memberName":"delegatecall","nodeType":"MemberAccess","src":"7276:19:6","typeDescriptions":{"typeIdentifier":"t_function_baredelegatecall_nonpayable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) returns (bool,bytes memory)"}},"id":984,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7276:25:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"7234:67:6"},{"expression":{"arguments":[{"id":987,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":968,"src":"7345:6:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":988,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":978,"src":"7353:7:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":989,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":980,"src":"7362:10:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":990,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":972,"src":"7374:12:6","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":986,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1033,"src":"7318:26:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":991,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7318:69:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":976,"id":992,"nodeType":"Return","src":"7311:76:6"}]},"documentation":{"id":966,"nodeType":"StructuredDocumentation","src":"6889:175:6","text":" @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"},"id":994,"implemented":true,"kind":"function","modifiers":[],"name":"functionDelegateCall","nameLocation":"7078:20:6","nodeType":"FunctionDefinition","parameters":{"id":973,"nodeType":"ParameterList","parameters":[{"constant":false,"id":968,"mutability":"mutable","name":"target","nameLocation":"7116:6:6","nodeType":"VariableDeclaration","scope":994,"src":"7108:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":967,"name":"address","nodeType":"ElementaryTypeName","src":"7108:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":970,"mutability":"mutable","name":"data","nameLocation":"7145:4:6","nodeType":"VariableDeclaration","scope":994,"src":"7132:17:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":969,"name":"bytes","nodeType":"ElementaryTypeName","src":"7132:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":972,"mutability":"mutable","name":"errorMessage","nameLocation":"7173:12:6","nodeType":"VariableDeclaration","scope":994,"src":"7159:26:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":971,"name":"string","nodeType":"ElementaryTypeName","src":"7159:6:6","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"7098:93:6"},"returnParameters":{"id":976,"nodeType":"ParameterList","parameters":[{"constant":false,"id":975,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":994,"src":"7210:12:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":974,"name":"bytes","nodeType":"ElementaryTypeName","src":"7210:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7209:14:6"},"scope":1078,"src":"7069:325:6","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1032,"nodeType":"Block","src":"7876:434:6","statements":[{"condition":{"id":1008,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":999,"src":"7890:7:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1030,"nodeType":"Block","src":"8246:58:6","statements":[{"expression":{"arguments":[{"id":1026,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1001,"src":"8268:10:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1027,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1003,"src":"8280:12:6","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1025,"name":"_revert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1077,"src":"8260:7:6","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (bytes memory,string memory) pure"}},"id":1028,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8260:33:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1029,"nodeType":"ExpressionStatement","src":"8260:33:6"}]},"id":1031,"nodeType":"IfStatement","src":"7886:418:6","trueBody":{"id":1024,"nodeType":"Block","src":"7899:341:6","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1012,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1009,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1001,"src":"7917:10:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1010,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7928:6:6","memberName":"length","nodeType":"MemberAccess","src":"7917:17:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1011,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7938:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"7917:22:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1021,"nodeType":"IfStatement","src":"7913:286:6","trueBody":{"id":1020,"nodeType":"Block","src":"7941:258:6","statements":[{"expression":{"arguments":[{"arguments":[{"id":1015,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":997,"src":"8143:6:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1014,"name":"isContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":766,"src":"8132:10:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":1016,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8132:18:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374","id":1017,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8152:31:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","typeString":"literal_string \"Address: call to non-contract\""},"value":"Address: call to non-contract"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","typeString":"literal_string \"Address: call to non-contract\""}],"id":1013,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"8124:7:6","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1018,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8124:60:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1019,"nodeType":"ExpressionStatement","src":"8124:60:6"}]}},{"expression":{"id":1022,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1001,"src":"8219:10:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1007,"id":1023,"nodeType":"Return","src":"8212:17:6"}]}}]},"documentation":{"id":995,"nodeType":"StructuredDocumentation","src":"7400:277:6","text":" @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n _Available since v4.8._"},"id":1033,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCallResultFromTarget","nameLocation":"7691:26:6","nodeType":"FunctionDefinition","parameters":{"id":1004,"nodeType":"ParameterList","parameters":[{"constant":false,"id":997,"mutability":"mutable","name":"target","nameLocation":"7735:6:6","nodeType":"VariableDeclaration","scope":1033,"src":"7727:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":996,"name":"address","nodeType":"ElementaryTypeName","src":"7727:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":999,"mutability":"mutable","name":"success","nameLocation":"7756:7:6","nodeType":"VariableDeclaration","scope":1033,"src":"7751:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":998,"name":"bool","nodeType":"ElementaryTypeName","src":"7751:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1001,"mutability":"mutable","name":"returndata","nameLocation":"7786:10:6","nodeType":"VariableDeclaration","scope":1033,"src":"7773:23:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1000,"name":"bytes","nodeType":"ElementaryTypeName","src":"7773:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1003,"mutability":"mutable","name":"errorMessage","nameLocation":"7820:12:6","nodeType":"VariableDeclaration","scope":1033,"src":"7806:26:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1002,"name":"string","nodeType":"ElementaryTypeName","src":"7806:6:6","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"7717:121:6"},"returnParameters":{"id":1007,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1006,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1033,"src":"7862:12:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1005,"name":"bytes","nodeType":"ElementaryTypeName","src":"7862:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7861:14:6"},"scope":1078,"src":"7682:628:6","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1056,"nodeType":"Block","src":"8691:135:6","statements":[{"condition":{"id":1045,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1036,"src":"8705:7:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1054,"nodeType":"Block","src":"8762:58:6","statements":[{"expression":{"arguments":[{"id":1050,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1038,"src":"8784:10:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1051,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1040,"src":"8796:12:6","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1049,"name":"_revert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1077,"src":"8776:7:6","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (bytes memory,string memory) pure"}},"id":1052,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8776:33:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1053,"nodeType":"ExpressionStatement","src":"8776:33:6"}]},"id":1055,"nodeType":"IfStatement","src":"8701:119:6","trueBody":{"id":1048,"nodeType":"Block","src":"8714:42:6","statements":[{"expression":{"id":1046,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1038,"src":"8735:10:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1044,"id":1047,"nodeType":"Return","src":"8728:17:6"}]}}]},"documentation":{"id":1034,"nodeType":"StructuredDocumentation","src":"8316:210:6","text":" @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n revert reason or using the provided one.\n _Available since v4.3._"},"id":1057,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCallResult","nameLocation":"8540:16:6","nodeType":"FunctionDefinition","parameters":{"id":1041,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1036,"mutability":"mutable","name":"success","nameLocation":"8571:7:6","nodeType":"VariableDeclaration","scope":1057,"src":"8566:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1035,"name":"bool","nodeType":"ElementaryTypeName","src":"8566:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1038,"mutability":"mutable","name":"returndata","nameLocation":"8601:10:6","nodeType":"VariableDeclaration","scope":1057,"src":"8588:23:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1037,"name":"bytes","nodeType":"ElementaryTypeName","src":"8588:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1040,"mutability":"mutable","name":"errorMessage","nameLocation":"8635:12:6","nodeType":"VariableDeclaration","scope":1057,"src":"8621:26:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1039,"name":"string","nodeType":"ElementaryTypeName","src":"8621:6:6","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"8556:97:6"},"returnParameters":{"id":1044,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1043,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1057,"src":"8677:12:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1042,"name":"bytes","nodeType":"ElementaryTypeName","src":"8677:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"8676:14:6"},"scope":1078,"src":"8531:295:6","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1076,"nodeType":"Block","src":"8915:457:6","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1067,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1064,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1059,"src":"8991:10:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1065,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9002:6:6","memberName":"length","nodeType":"MemberAccess","src":"8991:17:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1066,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9011:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8991:21:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1074,"nodeType":"Block","src":"9321:45:6","statements":[{"expression":{"arguments":[{"id":1071,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1061,"src":"9342:12:6","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1070,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"9335:6:6","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":1072,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9335:20:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1073,"nodeType":"ExpressionStatement","src":"9335:20:6"}]},"id":1075,"nodeType":"IfStatement","src":"8987:379:6","trueBody":{"id":1069,"nodeType":"Block","src":"9014:301:6","statements":[{"AST":{"nodeType":"YulBlock","src":"9172:133:6","statements":[{"nodeType":"YulVariableDeclaration","src":"9190:40:6","value":{"arguments":[{"name":"returndata","nodeType":"YulIdentifier","src":"9219:10:6"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"9213:5:6"},"nodeType":"YulFunctionCall","src":"9213:17:6"},"variables":[{"name":"returndata_size","nodeType":"YulTypedName","src":"9194:15:6","type":""}]},{"expression":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9258:2:6","type":"","value":"32"},{"name":"returndata","nodeType":"YulIdentifier","src":"9262:10:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9254:3:6"},"nodeType":"YulFunctionCall","src":"9254:19:6"},{"name":"returndata_size","nodeType":"YulIdentifier","src":"9275:15:6"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9247:6:6"},"nodeType":"YulFunctionCall","src":"9247:44:6"},"nodeType":"YulExpressionStatement","src":"9247:44:6"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":1059,"isOffset":false,"isSlot":false,"src":"9219:10:6","valueSize":1},{"declaration":1059,"isOffset":false,"isSlot":false,"src":"9262:10:6","valueSize":1}],"id":1068,"nodeType":"InlineAssembly","src":"9163:142:6"}]}}]},"id":1077,"implemented":true,"kind":"function","modifiers":[],"name":"_revert","nameLocation":"8841:7:6","nodeType":"FunctionDefinition","parameters":{"id":1062,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1059,"mutability":"mutable","name":"returndata","nameLocation":"8862:10:6","nodeType":"VariableDeclaration","scope":1077,"src":"8849:23:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1058,"name":"bytes","nodeType":"ElementaryTypeName","src":"8849:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1061,"mutability":"mutable","name":"errorMessage","nameLocation":"8888:12:6","nodeType":"VariableDeclaration","scope":1077,"src":"8874:26:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1060,"name":"string","nodeType":"ElementaryTypeName","src":"8874:6:6","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"8848:53:6"},"returnParameters":{"id":1063,"nodeType":"ParameterList","parameters":[],"src":"8915:0:6"},"scope":1078,"src":"8832:540:6","stateMutability":"pure","virtual":false,"visibility":"private"}],"scope":1079,"src":"194:9180:6","usedErrors":[]}],"src":"101:9274:6"},"id":6},"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol","exportedSymbols":{"AddressUpgradeable":[1078],"ContextUpgradeable":[1120],"Initializable":[748]},"id":1121,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1080,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"86:23:7"},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"../proxy/utils/Initializable.sol","id":1081,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1121,"sourceUnit":749,"src":"110:42:7","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":1083,"name":"Initializable","nameLocations":["691:13:7"],"nodeType":"IdentifierPath","referencedDeclaration":748,"src":"691:13:7"},"id":1084,"nodeType":"InheritanceSpecifier","src":"691:13:7"}],"canonicalName":"ContextUpgradeable","contractDependencies":[],"contractKind":"contract","documentation":{"id":1082,"nodeType":"StructuredDocumentation","src":"154:496:7","text":" @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."},"fullyImplemented":true,"id":1120,"linearizedBaseContracts":[1120,748],"name":"ContextUpgradeable","nameLocation":"669:18:7","nodeType":"ContractDefinition","nodes":[{"body":{"id":1089,"nodeType":"Block","src":"763:7:7","statements":[]},"id":1090,"implemented":true,"kind":"function","modifiers":[{"id":1087,"kind":"modifierInvocation","modifierName":{"id":1086,"name":"onlyInitializing","nameLocations":["746:16:7"],"nodeType":"IdentifierPath","referencedDeclaration":693,"src":"746:16:7"},"nodeType":"ModifierInvocation","src":"746:16:7"}],"name":"__Context_init","nameLocation":"720:14:7","nodeType":"FunctionDefinition","parameters":{"id":1085,"nodeType":"ParameterList","parameters":[],"src":"734:2:7"},"returnParameters":{"id":1088,"nodeType":"ParameterList","parameters":[],"src":"763:0:7"},"scope":1120,"src":"711:59:7","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1095,"nodeType":"Block","src":"838:7:7","statements":[]},"id":1096,"implemented":true,"kind":"function","modifiers":[{"id":1093,"kind":"modifierInvocation","modifierName":{"id":1092,"name":"onlyInitializing","nameLocations":["821:16:7"],"nodeType":"IdentifierPath","referencedDeclaration":693,"src":"821:16:7"},"nodeType":"ModifierInvocation","src":"821:16:7"}],"name":"__Context_init_unchained","nameLocation":"785:24:7","nodeType":"FunctionDefinition","parameters":{"id":1091,"nodeType":"ParameterList","parameters":[],"src":"809:2:7"},"returnParameters":{"id":1094,"nodeType":"ParameterList","parameters":[],"src":"838:0:7"},"scope":1120,"src":"776:69:7","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1104,"nodeType":"Block","src":"912:34:7","statements":[{"expression":{"expression":{"id":1101,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"929:3:7","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1102,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"933:6:7","memberName":"sender","nodeType":"MemberAccess","src":"929:10:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":1100,"id":1103,"nodeType":"Return","src":"922:17:7"}]},"id":1105,"implemented":true,"kind":"function","modifiers":[],"name":"_msgSender","nameLocation":"859:10:7","nodeType":"FunctionDefinition","parameters":{"id":1097,"nodeType":"ParameterList","parameters":[],"src":"869:2:7"},"returnParameters":{"id":1100,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1099,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1105,"src":"903:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1098,"name":"address","nodeType":"ElementaryTypeName","src":"903:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"902:9:7"},"scope":1120,"src":"850:96:7","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":1113,"nodeType":"Block","src":"1019:32:7","statements":[{"expression":{"expression":{"id":1110,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1036:3:7","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1111,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1040:4:7","memberName":"data","nodeType":"MemberAccess","src":"1036:8:7","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":1109,"id":1112,"nodeType":"Return","src":"1029:15:7"}]},"id":1114,"implemented":true,"kind":"function","modifiers":[],"name":"_msgData","nameLocation":"961:8:7","nodeType":"FunctionDefinition","parameters":{"id":1106,"nodeType":"ParameterList","parameters":[],"src":"969:2:7"},"returnParameters":{"id":1109,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1108,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1114,"src":"1003:14:7","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1107,"name":"bytes","nodeType":"ElementaryTypeName","src":"1003:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1002:16:7"},"scope":1120,"src":"952:99:7","stateMutability":"view","virtual":true,"visibility":"internal"},{"constant":false,"documentation":{"id":1115,"nodeType":"StructuredDocumentation","src":"1057:254:7","text":" @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"},"id":1119,"mutability":"mutable","name":"__gap","nameLocation":"1336:5:7","nodeType":"VariableDeclaration","scope":1120,"src":"1316:25:7","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$50_storage","typeString":"uint256[50]"},"typeName":{"baseType":{"id":1116,"name":"uint256","nodeType":"ElementaryTypeName","src":"1316:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1118,"length":{"hexValue":"3530","id":1117,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1324:2:7","typeDescriptions":{"typeIdentifier":"t_rational_50_by_1","typeString":"int_const 50"},"value":"50"},"nodeType":"ArrayTypeName","src":"1316:11:7","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$50_storage_ptr","typeString":"uint256[50]"}},"visibility":"private"}],"scope":1121,"src":"651:693:7","usedErrors":[]}],"src":"86:1259:7"},"id":7},"contracts/Gap.sol":{"ast":{"absolutePath":"contracts/Gap.sol","exportedSymbols":{"AddressUpgradeable":[1078],"AttestationRequest":[87],"AttestationRequestData":[81],"ContextUpgradeable":[1120],"Gap":[1280],"IEAS":[346],"Initializable":[748],"MultiAttestationRequest":[105],"OwnableUpgradeable":[579]},"id":1281,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1122,"literals":["solidity","0.8",".19"],"nodeType":"PragmaDirective","src":"33:23:8"},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","id":1123,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1281,"sourceUnit":749,"src":"58:75:8","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol","file":"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol","id":1124,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1281,"sourceUnit":580,"src":"134:75:8","symbolAliases":[],"unitAlias":""},{"absolutePath":"@ethereum-attestation-service/eas-contracts/contracts/IEAS.sol","file":"@ethereum-attestation-service/eas-contracts/contracts/IEAS.sol","id":1129,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1281,"sourceUnit":347,"src":"210:153:8","symbolAliases":[{"foreign":{"id":1125,"name":"IEAS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":346,"src":"218:4:8","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":1126,"name":"AttestationRequest","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":87,"src":"224:18:8","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":1127,"name":"AttestationRequestData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":81,"src":"244:22:8","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":1128,"name":"MultiAttestationRequest","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":105,"src":"268:23:8","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":1130,"name":"Initializable","nameLocations":["381:13:8"],"nodeType":"IdentifierPath","referencedDeclaration":748,"src":"381:13:8"},"id":1131,"nodeType":"InheritanceSpecifier","src":"381:13:8"},{"baseName":{"id":1132,"name":"OwnableUpgradeable","nameLocations":["396:18:8"],"nodeType":"IdentifierPath","referencedDeclaration":579,"src":"396:18:8"},"id":1133,"nodeType":"InheritanceSpecifier","src":"396:18:8"}],"canonicalName":"Gap","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":1280,"linearizedBaseContracts":[1280,579,1120,748],"name":"Gap","nameLocation":"374:3:8","nodeType":"ContractDefinition","nodes":[{"constant":false,"functionSelector":"8150864d","id":1136,"mutability":"mutable","name":"eas","nameLocation":"433:3:8","nodeType":"VariableDeclaration","scope":1280,"src":"421:15:8","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IEAS_$346","typeString":"contract IEAS"},"typeName":{"id":1135,"nodeType":"UserDefinedTypeName","pathNode":{"id":1134,"name":"IEAS","nameLocations":["421:4:8"],"nodeType":"IdentifierPath","referencedDeclaration":346,"src":"421:4:8"},"referencedDeclaration":346,"src":"421:4:8","typeDescriptions":{"typeIdentifier":"t_contract$_IEAS_$346","typeString":"contract IEAS"}},"visibility":"public"},{"canonicalName":"Gap.AttestationRequestNode","id":1144,"members":[{"constant":false,"id":1138,"mutability":"mutable","name":"uid","nameLocation":"491:3:8","nodeType":"VariableDeclaration","scope":1144,"src":"483:11:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1137,"name":"bytes32","nodeType":"ElementaryTypeName","src":"483:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1141,"mutability":"mutable","name":"multiRequest","nameLocation":"528:12:8","nodeType":"VariableDeclaration","scope":1144,"src":"504:36:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_MultiAttestationRequest_$105_storage_ptr","typeString":"struct MultiAttestationRequest"},"typeName":{"id":1140,"nodeType":"UserDefinedTypeName","pathNode":{"id":1139,"name":"MultiAttestationRequest","nameLocations":["504:23:8"],"nodeType":"IdentifierPath","referencedDeclaration":105,"src":"504:23:8"},"referencedDeclaration":105,"src":"504:23:8","typeDescriptions":{"typeIdentifier":"t_struct$_MultiAttestationRequest_$105_storage_ptr","typeString":"struct MultiAttestationRequest"}},"visibility":"internal"},{"constant":false,"id":1143,"mutability":"mutable","name":"refIdx","nameLocation":"555:6:8","nodeType":"VariableDeclaration","scope":1144,"src":"550:11:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1142,"name":"uint","nodeType":"ElementaryTypeName","src":"550:4:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"AttestationRequestNode","nameLocation":"450:22:8","nodeType":"StructDefinition","scope":1280,"src":"443:125:8","visibility":"public"},{"body":{"id":1160,"nodeType":"Block","src":"630:62:8","statements":[{"expression":{"id":1155,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1151,"name":"eas","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1136,"src":"640:3:8","typeDescriptions":{"typeIdentifier":"t_contract$_IEAS_$346","typeString":"contract IEAS"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":1153,"name":"easAddr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1146,"src":"651:7:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1152,"name":"IEAS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":346,"src":"646:4:8","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IEAS_$346_$","typeString":"type(contract IEAS)"}},"id":1154,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"646:13:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IEAS_$346","typeString":"contract IEAS"}},"src":"640:19:8","typeDescriptions":{"typeIdentifier":"t_contract$_IEAS_$346","typeString":"contract IEAS"}},"id":1156,"nodeType":"ExpressionStatement","src":"640:19:8"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":1157,"name":"__Ownable_init","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":474,"src":"669:14:8","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":1158,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"669:16:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1159,"nodeType":"ExpressionStatement","src":"669:16:8"}]},"functionSelector":"c4d66de8","id":1161,"implemented":true,"kind":"function","modifiers":[{"id":1149,"kind":"modifierInvocation","modifierName":{"id":1148,"name":"initializer","nameLocations":["618:11:8"],"nodeType":"IdentifierPath","referencedDeclaration":650,"src":"618:11:8"},"nodeType":"ModifierInvocation","src":"618:11:8"}],"name":"initialize","nameLocation":"583:10:8","nodeType":"FunctionDefinition","parameters":{"id":1147,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1146,"mutability":"mutable","name":"easAddr","nameLocation":"602:7:8","nodeType":"VariableDeclaration","scope":1161,"src":"594:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1145,"name":"address","nodeType":"ElementaryTypeName","src":"594:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"593:17:8"},"returnParameters":{"id":1150,"nodeType":"ParameterList","parameters":[],"src":"630:0:8"},"scope":1280,"src":"574:118:8","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":1278,"nodeType":"Block","src":"784:729:8","statements":[{"assignments":[1173],"declarations":[{"constant":false,"id":1173,"mutability":"mutable","name":"totalUids","nameLocation":"813:9:8","nodeType":"VariableDeclaration","scope":1278,"src":"794:28:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_array$_t_bytes32_$dyn_memory_ptr_$dyn_memory_ptr","typeString":"bytes32[][]"},"typeName":{"baseType":{"baseType":{"id":1170,"name":"bytes32","nodeType":"ElementaryTypeName","src":"794:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1171,"nodeType":"ArrayTypeName","src":"794:9:8","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"id":1172,"nodeType":"ArrayTypeName","src":"794:11:8","typeDescriptions":{"typeIdentifier":"t_array$_t_array$_t_bytes32_$dyn_storage_$dyn_storage_ptr","typeString":"bytes32[][]"}},"visibility":"internal"}],"id":1181,"initialValue":{"arguments":[{"expression":{"id":1178,"name":"requestNodes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1165,"src":"841:12:8","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_AttestationRequestNode_$1144_calldata_ptr_$dyn_calldata_ptr","typeString":"struct Gap.AttestationRequestNode calldata[] calldata"}},"id":1179,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"854:6:8","memberName":"length","nodeType":"MemberAccess","src":"841:19:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1177,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"825:15:8","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_array$_t_bytes32_$dyn_memory_ptr_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (bytes32[] memory[] memory)"},"typeName":{"baseType":{"baseType":{"id":1174,"name":"bytes32","nodeType":"ElementaryTypeName","src":"829:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1175,"nodeType":"ArrayTypeName","src":"829:9:8","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"id":1176,"nodeType":"ArrayTypeName","src":"829:11:8","typeDescriptions":{"typeIdentifier":"t_array$_t_array$_t_bytes32_$dyn_storage_$dyn_storage_ptr","typeString":"bytes32[][]"}}},"id":1180,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"825:36:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_array$_t_bytes32_$dyn_memory_ptr_$dyn_memory_ptr","typeString":"bytes32[] memory[] memory"}},"nodeType":"VariableDeclarationStatement","src":"794:67:8"},{"body":{"id":1276,"nodeType":"Block","src":"920:587:8","statements":[{"assignments":[1195],"declarations":[{"constant":false,"id":1195,"mutability":"mutable","name":"request","nameLocation":"965:7:8","nodeType":"VariableDeclaration","scope":1276,"src":"934:38:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_MultiAttestationRequest_$105_memory_ptr","typeString":"struct MultiAttestationRequest"},"typeName":{"id":1194,"nodeType":"UserDefinedTypeName","pathNode":{"id":1193,"name":"MultiAttestationRequest","nameLocations":["934:23:8"],"nodeType":"IdentifierPath","referencedDeclaration":105,"src":"934:23:8"},"referencedDeclaration":105,"src":"934:23:8","typeDescriptions":{"typeIdentifier":"t_struct$_MultiAttestationRequest_$105_storage_ptr","typeString":"struct MultiAttestationRequest"}},"visibility":"internal"}],"id":1200,"initialValue":{"expression":{"baseExpression":{"id":1196,"name":"requestNodes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1165,"src":"975:12:8","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_AttestationRequestNode_$1144_calldata_ptr_$dyn_calldata_ptr","typeString":"struct Gap.AttestationRequestNode calldata[] calldata"}},"id":1198,"indexExpression":{"id":1197,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1183,"src":"988:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"975:15:8","typeDescriptions":{"typeIdentifier":"t_struct$_AttestationRequestNode_$1144_calldata_ptr","typeString":"struct Gap.AttestationRequestNode calldata"}},"id":1199,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"991:12:8","memberName":"multiRequest","nodeType":"MemberAccess","referencedDeclaration":1141,"src":"975:28:8","typeDescriptions":{"typeIdentifier":"t_struct$_MultiAttestationRequest_$105_calldata_ptr","typeString":"struct MultiAttestationRequest calldata"}},"nodeType":"VariableDeclarationStatement","src":"934:69:8"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1203,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1201,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1183,"src":"1021:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1202,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1025:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1021:5:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1248,"nodeType":"IfStatement","src":"1017:301:8","trueBody":{"id":1247,"nodeType":"Block","src":"1028:290:8","statements":[{"body":{"id":1245,"nodeType":"Block","src":"1095:209:8","statements":[{"assignments":[1218],"declarations":[{"constant":false,"id":1218,"mutability":"mutable","name":"data","nameLocation":"1147:4:8","nodeType":"VariableDeclaration","scope":1245,"src":"1117:34:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_AttestationRequestData_$81_memory_ptr","typeString":"struct AttestationRequestData"},"typeName":{"id":1217,"nodeType":"UserDefinedTypeName","pathNode":{"id":1216,"name":"AttestationRequestData","nameLocations":["1117:22:8"],"nodeType":"IdentifierPath","referencedDeclaration":81,"src":"1117:22:8"},"referencedDeclaration":81,"src":"1117:22:8","typeDescriptions":{"typeIdentifier":"t_struct$_AttestationRequestData_$81_storage_ptr","typeString":"struct AttestationRequestData"}},"visibility":"internal"}],"id":1223,"initialValue":{"baseExpression":{"expression":{"id":1219,"name":"request","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1195,"src":"1154:7:8","typeDescriptions":{"typeIdentifier":"t_struct$_MultiAttestationRequest_$105_memory_ptr","typeString":"struct MultiAttestationRequest memory"}},"id":1220,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1162:4:8","memberName":"data","nodeType":"MemberAccess","referencedDeclaration":104,"src":"1154:12:8","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_AttestationRequestData_$81_memory_ptr_$dyn_memory_ptr","typeString":"struct AttestationRequestData memory[] memory"}},"id":1222,"indexExpression":{"id":1221,"name":"j","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1205,"src":"1167:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1154:15:8","typeDescriptions":{"typeIdentifier":"t_struct$_AttestationRequestData_$81_memory_ptr","typeString":"struct AttestationRequestData memory"}},"nodeType":"VariableDeclarationStatement","src":"1117:52:8"},{"expression":{"id":1235,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":1224,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1218,"src":"1191:4:8","typeDescriptions":{"typeIdentifier":"t_struct$_AttestationRequestData_$81_memory_ptr","typeString":"struct AttestationRequestData memory"}},"id":1226,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"1196:6:8","memberName":"refUID","nodeType":"MemberAccess","referencedDeclaration":76,"src":"1191:11:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"baseExpression":{"id":1227,"name":"totalUids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1173,"src":"1205:9:8","typeDescriptions":{"typeIdentifier":"t_array$_t_array$_t_bytes32_$dyn_memory_ptr_$dyn_memory_ptr","typeString":"bytes32[] memory[] memory"}},"id":1232,"indexExpression":{"expression":{"baseExpression":{"id":1228,"name":"requestNodes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1165,"src":"1215:12:8","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_AttestationRequestNode_$1144_calldata_ptr_$dyn_calldata_ptr","typeString":"struct Gap.AttestationRequestNode calldata[] calldata"}},"id":1230,"indexExpression":{"id":1229,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1183,"src":"1228:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1215:15:8","typeDescriptions":{"typeIdentifier":"t_struct$_AttestationRequestNode_$1144_calldata_ptr","typeString":"struct Gap.AttestationRequestNode calldata"}},"id":1231,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1231:6:8","memberName":"refIdx","nodeType":"MemberAccess","referencedDeclaration":1143,"src":"1215:22:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1205:33:8","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1234,"indexExpression":{"hexValue":"30","id":1233,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1239:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1205:36:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"1191:50:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1236,"nodeType":"ExpressionStatement","src":"1191:50:8"},{"expression":{"id":1243,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"id":1237,"name":"request","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1195,"src":"1263:7:8","typeDescriptions":{"typeIdentifier":"t_struct$_MultiAttestationRequest_$105_memory_ptr","typeString":"struct MultiAttestationRequest memory"}},"id":1240,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1271:4:8","memberName":"data","nodeType":"MemberAccess","referencedDeclaration":104,"src":"1263:12:8","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_AttestationRequestData_$81_memory_ptr_$dyn_memory_ptr","typeString":"struct AttestationRequestData memory[] memory"}},"id":1241,"indexExpression":{"id":1239,"name":"j","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1205,"src":"1276:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1263:15:8","typeDescriptions":{"typeIdentifier":"t_struct$_AttestationRequestData_$81_memory_ptr","typeString":"struct AttestationRequestData memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1242,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1218,"src":"1281:4:8","typeDescriptions":{"typeIdentifier":"t_struct$_AttestationRequestData_$81_memory_ptr","typeString":"struct AttestationRequestData memory"}},"src":"1263:22:8","typeDescriptions":{"typeIdentifier":"t_struct$_AttestationRequestData_$81_memory_ptr","typeString":"struct AttestationRequestData memory"}},"id":1244,"nodeType":"ExpressionStatement","src":"1263:22:8"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1212,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1208,"name":"j","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1205,"src":"1065:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"expression":{"id":1209,"name":"request","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1195,"src":"1069:7:8","typeDescriptions":{"typeIdentifier":"t_struct$_MultiAttestationRequest_$105_memory_ptr","typeString":"struct MultiAttestationRequest memory"}},"id":1210,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1077:4:8","memberName":"data","nodeType":"MemberAccess","referencedDeclaration":104,"src":"1069:12:8","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_AttestationRequestData_$81_memory_ptr_$dyn_memory_ptr","typeString":"struct AttestationRequestData memory[] memory"}},"id":1211,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1082:6:8","memberName":"length","nodeType":"MemberAccess","src":"1069:19:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1065:23:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1246,"initializationExpression":{"assignments":[1205],"declarations":[{"constant":false,"id":1205,"mutability":"mutable","name":"j","nameLocation":"1058:1:8","nodeType":"VariableDeclaration","scope":1246,"src":"1050:9:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1204,"name":"uint256","nodeType":"ElementaryTypeName","src":"1050:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1207,"initialValue":{"hexValue":"30","id":1206,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1062:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"1050:13:8"},"loopExpression":{"expression":{"id":1214,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"1090:3:8","subExpression":{"id":1213,"name":"j","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1205,"src":"1090:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1215,"nodeType":"ExpressionStatement","src":"1090:3:8"},"nodeType":"ForStatement","src":"1046:258:8"}]}},{"assignments":[1253],"declarations":[{"constant":false,"id":1253,"mutability":"mutable","name":"requests","nameLocation":"1364:8:8","nodeType":"VariableDeclaration","scope":1276,"src":"1331:41:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_MultiAttestationRequest_$105_memory_ptr_$dyn_memory_ptr","typeString":"struct MultiAttestationRequest[]"},"typeName":{"baseType":{"id":1251,"nodeType":"UserDefinedTypeName","pathNode":{"id":1250,"name":"MultiAttestationRequest","nameLocations":["1331:23:8"],"nodeType":"IdentifierPath","referencedDeclaration":105,"src":"1331:23:8"},"referencedDeclaration":105,"src":"1331:23:8","typeDescriptions":{"typeIdentifier":"t_struct$_MultiAttestationRequest_$105_storage_ptr","typeString":"struct MultiAttestationRequest"}},"id":1252,"nodeType":"ArrayTypeName","src":"1331:25:8","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_MultiAttestationRequest_$105_storage_$dyn_storage_ptr","typeString":"struct MultiAttestationRequest[]"}},"visibility":"internal"}],"id":1260,"initialValue":{"arguments":[{"hexValue":"31","id":1258,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1405:1:8","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":1257,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"1375:29:8","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_struct$_MultiAttestationRequest_$105_memory_ptr_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (struct MultiAttestationRequest memory[] memory)"},"typeName":{"baseType":{"id":1255,"nodeType":"UserDefinedTypeName","pathNode":{"id":1254,"name":"MultiAttestationRequest","nameLocations":["1379:23:8"],"nodeType":"IdentifierPath","referencedDeclaration":105,"src":"1379:23:8"},"referencedDeclaration":105,"src":"1379:23:8","typeDescriptions":{"typeIdentifier":"t_struct$_MultiAttestationRequest_$105_storage_ptr","typeString":"struct MultiAttestationRequest"}},"id":1256,"nodeType":"ArrayTypeName","src":"1379:25:8","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_MultiAttestationRequest_$105_storage_$dyn_storage_ptr","typeString":"struct MultiAttestationRequest[]"}}},"id":1259,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1375:32:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_MultiAttestationRequest_$105_memory_ptr_$dyn_memory_ptr","typeString":"struct MultiAttestationRequest memory[] memory"}},"nodeType":"VariableDeclarationStatement","src":"1331:76:8"},{"expression":{"id":1265,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1261,"name":"requests","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1253,"src":"1421:8:8","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_MultiAttestationRequest_$105_memory_ptr_$dyn_memory_ptr","typeString":"struct MultiAttestationRequest memory[] memory"}},"id":1263,"indexExpression":{"hexValue":"30","id":1262,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1430:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1421:11:8","typeDescriptions":{"typeIdentifier":"t_struct$_MultiAttestationRequest_$105_memory_ptr","typeString":"struct MultiAttestationRequest memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1264,"name":"request","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1195,"src":"1435:7:8","typeDescriptions":{"typeIdentifier":"t_struct$_MultiAttestationRequest_$105_memory_ptr","typeString":"struct MultiAttestationRequest memory"}},"src":"1421:21:8","typeDescriptions":{"typeIdentifier":"t_struct$_MultiAttestationRequest_$105_memory_ptr","typeString":"struct MultiAttestationRequest memory"}},"id":1266,"nodeType":"ExpressionStatement","src":"1421:21:8"},{"expression":{"id":1274,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1267,"name":"totalUids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1173,"src":"1456:9:8","typeDescriptions":{"typeIdentifier":"t_array$_t_array$_t_bytes32_$dyn_memory_ptr_$dyn_memory_ptr","typeString":"bytes32[] memory[] memory"}},"id":1269,"indexExpression":{"id":1268,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1183,"src":"1466:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1456:12:8","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":1272,"name":"requests","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1253,"src":"1487:8:8","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_MultiAttestationRequest_$105_memory_ptr_$dyn_memory_ptr","typeString":"struct MultiAttestationRequest memory[] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_struct$_MultiAttestationRequest_$105_memory_ptr_$dyn_memory_ptr","typeString":"struct MultiAttestationRequest memory[] memory"}],"expression":{"id":1270,"name":"eas","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1136,"src":"1471:3:8","typeDescriptions":{"typeIdentifier":"t_contract$_IEAS_$346","typeString":"contract IEAS"}},"id":1271,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1475:11:8","memberName":"multiAttest","nodeType":"MemberAccess","referencedDeclaration":235,"src":"1471:15:8","typeDescriptions":{"typeIdentifier":"t_function_external_payable$_t_array$_t_struct$_MultiAttestationRequest_$105_memory_ptr_$dyn_memory_ptr_$returns$_t_array$_t_bytes32_$dyn_memory_ptr_$","typeString":"function (struct MultiAttestationRequest memory[] memory) payable external returns (bytes32[] memory)"}},"id":1273,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1471:25:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"src":"1456:40:8","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1275,"nodeType":"ExpressionStatement","src":"1456:40:8"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1189,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1186,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1183,"src":"890:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":1187,"name":"requestNodes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1165,"src":"894:12:8","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_AttestationRequestNode_$1144_calldata_ptr_$dyn_calldata_ptr","typeString":"struct Gap.AttestationRequestNode calldata[] calldata"}},"id":1188,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"907:6:8","memberName":"length","nodeType":"MemberAccess","src":"894:19:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"890:23:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1277,"initializationExpression":{"assignments":[1183],"declarations":[{"constant":false,"id":1183,"mutability":"mutable","name":"i","nameLocation":"883:1:8","nodeType":"VariableDeclaration","scope":1277,"src":"875:9:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1182,"name":"uint256","nodeType":"ElementaryTypeName","src":"875:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1185,"initialValue":{"hexValue":"30","id":1184,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"887:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"875:13:8"},"loopExpression":{"expression":{"id":1191,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"915:3:8","subExpression":{"id":1190,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1183,"src":"915:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1192,"nodeType":"ExpressionStatement","src":"915:3:8"},"nodeType":"ForStatement","src":"871:636:8"}]},"functionSelector":"5913a31c","id":1279,"implemented":true,"kind":"function","modifiers":[],"name":"multiSequentialAttest","nameLocation":"707:21:8","nodeType":"FunctionDefinition","parameters":{"id":1166,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1165,"mutability":"mutable","name":"requestNodes","nameLocation":"763:12:8","nodeType":"VariableDeclaration","scope":1279,"src":"729:46:8","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_AttestationRequestNode_$1144_calldata_ptr_$dyn_calldata_ptr","typeString":"struct Gap.AttestationRequestNode[]"},"typeName":{"baseType":{"id":1163,"nodeType":"UserDefinedTypeName","pathNode":{"id":1162,"name":"AttestationRequestNode","nameLocations":["729:22:8"],"nodeType":"IdentifierPath","referencedDeclaration":1144,"src":"729:22:8"},"referencedDeclaration":1144,"src":"729:22:8","typeDescriptions":{"typeIdentifier":"t_struct$_AttestationRequestNode_$1144_storage_ptr","typeString":"struct Gap.AttestationRequestNode"}},"id":1164,"nodeType":"ArrayTypeName","src":"729:24:8","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_AttestationRequestNode_$1144_storage_$dyn_storage_ptr","typeString":"struct Gap.AttestationRequestNode[]"}},"visibility":"internal"}],"src":"728:48:8"},"returnParameters":{"id":1167,"nodeType":"ParameterList","parameters":[],"src":"784:0:8"},"scope":1280,"src":"698:815:8","stateMutability":"nonpayable","virtual":false,"visibility":"public"}],"scope":1281,"src":"365:1909:8","usedErrors":[]}],"src":"33:2241:8"},"id":8}},"contracts":{"@ethereum-attestation-service/eas-contracts/contracts/IEAS.sol":{"IEAS":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"recipient","type":"address"},{"indexed":true,"internalType":"address","name":"attester","type":"address"},{"indexed":false,"internalType":"bytes32","name":"uid","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"schema","type":"bytes32"}],"name":"Attested","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"recipient","type":"address"},{"indexed":true,"internalType":"address","name":"attester","type":"address"},{"indexed":false,"internalType":"bytes32","name":"uid","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"schema","type":"bytes32"}],"name":"Revoked","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"revoker","type":"address"},{"indexed":true,"internalType":"bytes32","name":"data","type":"bytes32"},{"indexed":true,"internalType":"uint64","name":"timestamp","type":"uint64"}],"name":"RevokedOffchain","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"data","type":"bytes32"},{"indexed":true,"internalType":"uint64","name":"timestamp","type":"uint64"}],"name":"Timestamped","type":"event"},{"inputs":[{"components":[{"internalType":"bytes32","name":"schema","type":"bytes32"},{"components":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"uint256","name":"value","type":"uint256"}],"internalType":"struct AttestationRequestData","name":"data","type":"tuple"}],"internalType":"struct AttestationRequest","name":"request","type":"tuple"}],"name":"attest","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"payable","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"schema","type":"bytes32"},{"components":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"uint256","name":"value","type":"uint256"}],"internalType":"struct AttestationRequestData","name":"data","type":"tuple"},{"components":[{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"internalType":"struct EIP712Signature","name":"signature","type":"tuple"},{"internalType":"address","name":"attester","type":"address"}],"internalType":"struct DelegatedAttestationRequest","name":"delegatedRequest","type":"tuple"}],"name":"attestByDelegation","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"uid","type":"bytes32"}],"name":"getAttestation","outputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"bytes32","name":"schema","type":"bytes32"},{"internalType":"uint64","name":"time","type":"uint64"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"uint64","name":"revocationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Attestation","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"revoker","type":"address"},{"internalType":"bytes32","name":"data","type":"bytes32"}],"name":"getRevokeOffchain","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getSchemaRegistry","outputs":[{"internalType":"contract ISchemaRegistry","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"data","type":"bytes32"}],"name":"getTimestamp","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"uid","type":"bytes32"}],"name":"isAttestationValid","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"schema","type":"bytes32"},{"components":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"uint256","name":"value","type":"uint256"}],"internalType":"struct AttestationRequestData[]","name":"data","type":"tuple[]"}],"internalType":"struct MultiAttestationRequest[]","name":"multiRequests","type":"tuple[]"}],"name":"multiAttest","outputs":[{"internalType":"bytes32[]","name":"","type":"bytes32[]"}],"stateMutability":"payable","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"schema","type":"bytes32"},{"components":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"uint256","name":"value","type":"uint256"}],"internalType":"struct AttestationRequestData[]","name":"data","type":"tuple[]"},{"components":[{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"internalType":"struct EIP712Signature[]","name":"signatures","type":"tuple[]"},{"internalType":"address","name":"attester","type":"address"}],"internalType":"struct MultiDelegatedAttestationRequest[]","name":"multiDelegatedRequests","type":"tuple[]"}],"name":"multiAttestByDelegation","outputs":[{"internalType":"bytes32[]","name":"","type":"bytes32[]"}],"stateMutability":"payable","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"schema","type":"bytes32"},{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"uint256","name":"value","type":"uint256"}],"internalType":"struct RevocationRequestData[]","name":"data","type":"tuple[]"}],"internalType":"struct MultiRevocationRequest[]","name":"multiRequests","type":"tuple[]"}],"name":"multiRevoke","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"schema","type":"bytes32"},{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"uint256","name":"value","type":"uint256"}],"internalType":"struct RevocationRequestData[]","name":"data","type":"tuple[]"},{"components":[{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"internalType":"struct EIP712Signature[]","name":"signatures","type":"tuple[]"},{"internalType":"address","name":"revoker","type":"address"}],"internalType":"struct MultiDelegatedRevocationRequest[]","name":"multiDelegatedRequests","type":"tuple[]"}],"name":"multiRevokeByDelegation","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes32[]","name":"data","type":"bytes32[]"}],"name":"multiRevokeOffchain","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32[]","name":"data","type":"bytes32[]"}],"name":"multiTimestamp","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"schema","type":"bytes32"},{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"uint256","name":"value","type":"uint256"}],"internalType":"struct RevocationRequestData","name":"data","type":"tuple"}],"internalType":"struct RevocationRequest","name":"request","type":"tuple"}],"name":"revoke","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"schema","type":"bytes32"},{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"uint256","name":"value","type":"uint256"}],"internalType":"struct RevocationRequestData","name":"data","type":"tuple"},{"components":[{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"internalType":"struct EIP712Signature","name":"signature","type":"tuple"},{"internalType":"address","name":"revoker","type":"address"}],"internalType":"struct DelegatedRevocationRequest","name":"delegatedRequest","type":"tuple"}],"name":"revokeByDelegation","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"data","type":"bytes32"}],"name":"revokeOffchain","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"data","type":"bytes32"}],"name":"timestamp","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"events":{"Attested(address,address,bytes32,bytes32)":{"details":"Emitted when an attestation has been made.","params":{"attester":"The attesting account.","recipient":"The recipient of the attestation.","schema":"The UID of the schema.","uid":"The UID the revoked attestation."}},"Revoked(address,address,bytes32,bytes32)":{"details":"Emitted when an attestation has been revoked.","params":{"attester":"The attesting account.","recipient":"The recipient of the attestation.","schema":"The UID of the schema.","uid":"The UID the revoked attestation."}},"RevokedOffchain(address,bytes32,uint64)":{"details":"Emitted when a data has been revoked.","params":{"data":"The data.","revoker":"The address of the revoker.","timestamp":"The timestamp."}},"Timestamped(bytes32,uint64)":{"details":"Emitted when a data has been timestamped.","params":{"data":"The data.","timestamp":"The timestamp."}}},"kind":"dev","methods":{"attest((bytes32,(address,uint64,bool,bytes32,bytes,uint256)))":{"details":"Attests to a specific schema.","params":{"request":"The arguments of the attestation request. Example: attest({     schema: \"0facc36681cbe2456019c1b0d1e7bedd6d1d40f6f324bf3dd3a4cef2999200a0\",     data: {         recipient: \"0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf\",         expirationTime: 0,         revocable: true,         refUID: \"0x0000000000000000000000000000000000000000000000000000000000000000\",         data: \"0xF00D\",         value: 0     } })"},"returns":{"_0":"The UID of the new attestation."}},"attestByDelegation((bytes32,(address,uint64,bool,bytes32,bytes,uint256),(uint8,bytes32,bytes32),address))":{"details":"Attests to a specific schema via the provided EIP712 signature.","params":{"delegatedRequest":"The arguments of the delegated attestation request. Example: attestByDelegation({     schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',     data: {         recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',         expirationTime: 1673891048,         revocable: true,         refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',         data: '0x1234',         value: 0     },     signature: {         v: 28,         r: '0x148c...b25b',         s: '0x5a72...be22'     },     attester: '0xc5E8740aD971409492b1A63Db8d83025e0Fc427e' })"},"returns":{"_0":"The UID of the new attestation."}},"getAttestation(bytes32)":{"details":"Returns an existing attestation by UID.","params":{"uid":"The UID of the attestation to retrieve."},"returns":{"_0":"The attestation data members."}},"getRevokeOffchain(address,bytes32)":{"details":"Returns the timestamp that the specified data was timestamped with.","params":{"data":"The data to query."},"returns":{"_0":"The timestamp the data was timestamped with."}},"getSchemaRegistry()":{"details":"Returns the address of the global schema registry.","returns":{"_0":"The address of the global schema registry."}},"getTimestamp(bytes32)":{"details":"Returns the timestamp that the specified data was timestamped with.","params":{"data":"The data to query."},"returns":{"_0":"The timestamp the data was timestamped with."}},"isAttestationValid(bytes32)":{"details":"Checks whether an attestation exists.","params":{"uid":"The UID of the attestation to retrieve."},"returns":{"_0":"Whether an attestation exists."}},"multiAttest((bytes32,(address,uint64,bool,bytes32,bytes,uint256)[])[])":{"details":"Attests to multiple schemas.","params":{"multiRequests":"The arguments of the multi attestation requests. The requests should be grouped by distinct schema ids to benefit from the best batching optimization. Example: multiAttest([{     schema: '0x33e9094830a5cba5554d1954310e4fbed2ef5f859ec1404619adea4207f391fd',     data: [{         recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',         expirationTime: 1673891048,         revocable: true,         refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',         data: '0x1234',         value: 1000     },     {         recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',         expirationTime: 0,         revocable: false,         refUID: '0x480df4a039efc31b11bfdf491b383ca138b6bde160988222a2a3509c02cee174',         data: '0x00',         value: 0     }], }, {     schema: '0x5ac273ce41e3c8bfa383efe7c03e54c5f0bff29c9f11ef6ffa930fc84ca32425',     data: [{         recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',         expirationTime: 0,         revocable: true,         refUID: '0x75bf2ed8dca25a8190c50c52db136664de25b2449535839008ccfdab469b214f',         data: '0x12345678',         value: 0     }, }])"},"returns":{"_0":"The UIDs of the new attestations."}},"multiAttestByDelegation((bytes32,(address,uint64,bool,bytes32,bytes,uint256)[],(uint8,bytes32,bytes32)[],address)[])":{"details":"Attests to multiple schemas using via provided EIP712 signatures.","params":{"multiDelegatedRequests":"The arguments of the delegated multi attestation requests. The requests should be grouped by distinct schema ids to benefit from the best batching optimization. Example: multiAttestByDelegation([{     schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',     data: [{         recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',         expirationTime: 1673891048,         revocable: true,         refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',         data: '0x1234',         value: 0     },     {         recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',         expirationTime: 0,         revocable: false,         refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',         data: '0x00',         value: 0     }],     signatures: [{         v: 28,         r: '0x148c...b25b',         s: '0x5a72...be22'     },     {         v: 28,         r: '0x487s...67bb',         s: '0x12ad...2366'     }],     attester: '0x1D86495b2A7B524D747d2839b3C645Bed32e8CF4' }])"},"returns":{"_0":"The UIDs of the new attestations."}},"multiRevoke((bytes32,(bytes32,uint256)[])[])":{"details":"Revokes existing attestations to multiple schemas.","params":{"multiRequests":"The arguments of the multi revocation requests. The requests should be grouped by distinct schema ids to benefit from the best batching optimization. Example: multiRevoke([{     schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',     data: [{         uid: '0x211296a1ca0d7f9f2cfebf0daaa575bea9b20e968d81aef4e743d699c6ac4b25',         value: 1000     },     {         uid: '0xe160ac1bd3606a287b4d53d5d1d6da5895f65b4b4bab6d93aaf5046e48167ade',         value: 0     }], }, {     schema: '0x5ac273ce41e3c8bfa383efe7c03e54c5f0bff29c9f11ef6ffa930fc84ca32425',     data: [{         uid: '0x053d42abce1fd7c8fcddfae21845ad34dae287b2c326220b03ba241bc5a8f019',         value: 0     }, }])"}},"multiRevokeByDelegation((bytes32,(bytes32,uint256)[],(uint8,bytes32,bytes32)[],address)[])":{"details":"Revokes existing attestations to multiple schemas via provided EIP712 signatures.","params":{"multiDelegatedRequests":"The arguments of the delegated multi revocation attestation requests. The requests should be grouped by distinct schema ids to benefit from the best batching optimization. Example: multiRevokeByDelegation([{     schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',     data: [{         uid: '0x211296a1ca0d7f9f2cfebf0daaa575bea9b20e968d81aef4e743d699c6ac4b25',         value: 1000     },     {         uid: '0xe160ac1bd3606a287b4d53d5d1d6da5895f65b4b4bab6d93aaf5046e48167ade',         value: 0     }],     signatures: [{         v: 28,         r: '0x148c...b25b',         s: '0x5a72...be22'     },     {         v: 28,         r: '0x487s...67bb',         s: '0x12ad...2366'     }],     revoker: '0x244934dd3e31bE2c81f84ECf0b3E6329F5381992' }])"}},"multiRevokeOffchain(bytes32[])":{"details":"Revokes the specified multiple bytes32 data.","params":{"data":"The data to timestamp."},"returns":{"_0":"The timestamp the data was revoked with."}},"multiTimestamp(bytes32[])":{"details":"Timestamps the specified multiple bytes32 data.","params":{"data":"The data to timestamp."},"returns":{"_0":"The timestamp the data was timestamped with."}},"revoke((bytes32,(bytes32,uint256)))":{"details":"Revokes an existing attestation to a specific schema. Example: revoke({     schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',     data: {         uid: '0x101032e487642ee04ee17049f99a70590c735b8614079fc9275f9dd57c00966d',         value: 0     } })","params":{"request":"The arguments of the revocation request."}},"revokeByDelegation((bytes32,(bytes32,uint256),(uint8,bytes32,bytes32),address))":{"details":"Revokes an existing attestation to a specific schema via the provided EIP712 signature. Example: revokeByDelegation({     schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',     data: {         uid: '0xcbbc12102578c642a0f7b34fe7111e41afa25683b6cd7b5a14caf90fa14d24ba',         value: 0     },     signature: {         v: 27,         r: '0xb593...7142',         s: '0x0f5b...2cce'     },     revoker: '0x244934dd3e31bE2c81f84ECf0b3E6329F5381992' })","params":{"delegatedRequest":"The arguments of the delegated revocation request."}},"revokeOffchain(bytes32)":{"details":"Revokes the specified bytes32 data.","params":{"data":"The data to timestamp."},"returns":{"_0":"The timestamp the data was revoked with."}},"timestamp(bytes32)":{"details":"Timestamps the specified bytes32 data.","params":{"data":"The data to timestamp."},"returns":{"_0":"The timestamp the data was timestamped with."}}},"title":"EAS - Ethereum Attestation Service interface.","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"attest((bytes32,(address,uint64,bool,bytes32,bytes,uint256)))":"f17325e7","attestByDelegation((bytes32,(address,uint64,bool,bytes32,bytes,uint256),(uint8,bytes32,bytes32),address))":"e13458fc","getAttestation(bytes32)":"a3112a64","getRevokeOffchain(address,bytes32)":"b469318d","getSchemaRegistry()":"f10b5cc8","getTimestamp(bytes32)":"d45c4435","isAttestationValid(bytes32)":"e30bb563","multiAttest((bytes32,(address,uint64,bool,bytes32,bytes,uint256)[])[])":"44adc90e","multiAttestByDelegation((bytes32,(address,uint64,bool,bytes32,bytes,uint256)[],(uint8,bytes32,bytes32)[],address)[])":"831e05a1","multiRevoke((bytes32,(bytes32,uint256)[])[])":"4cb7e9e5","multiRevokeByDelegation((bytes32,(bytes32,uint256)[],(uint8,bytes32,bytes32)[],address)[])":"e45d03f9","multiRevokeOffchain(bytes32[])":"13893f61","multiTimestamp(bytes32[])":"e71ff365","revoke((bytes32,(bytes32,uint256)))":"46926267","revokeByDelegation((bytes32,(bytes32,uint256),(uint8,bytes32,bytes32),address))":"e57a6b1b","revokeOffchain(bytes32)":"cf190f34","timestamp(bytes32)":"4d003070"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"attester\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"uid\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"schema\",\"type\":\"bytes32\"}],\"name\":\"Attested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"attester\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"uid\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"schema\",\"type\":\"bytes32\"}],\"name\":\"Revoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"revoker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"data\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"timestamp\",\"type\":\"uint64\"}],\"name\":\"RevokedOffchain\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"data\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"timestamp\",\"type\":\"uint64\"}],\"name\":\"Timestamped\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"schema\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"expirationTime\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"revocable\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"refUID\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct AttestationRequestData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct AttestationRequest\",\"name\":\"request\",\"type\":\"tuple\"}],\"name\":\"attest\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"schema\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"expirationTime\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"revocable\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"refUID\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct AttestationRequestData\",\"name\":\"data\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct EIP712Signature\",\"name\":\"signature\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"attester\",\"type\":\"address\"}],\"internalType\":\"struct DelegatedAttestationRequest\",\"name\":\"delegatedRequest\",\"type\":\"tuple\"}],\"name\":\"attestByDelegation\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"uid\",\"type\":\"bytes32\"}],\"name\":\"getAttestation\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"uid\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"schema\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"time\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"expirationTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"revocationTime\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"refUID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"attester\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"revocable\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct Attestation\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"revoker\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"data\",\"type\":\"bytes32\"}],\"name\":\"getRevokeOffchain\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSchemaRegistry\",\"outputs\":[{\"internalType\":\"contract ISchemaRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"data\",\"type\":\"bytes32\"}],\"name\":\"getTimestamp\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"uid\",\"type\":\"bytes32\"}],\"name\":\"isAttestationValid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"schema\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"expirationTime\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"revocable\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"refUID\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct AttestationRequestData[]\",\"name\":\"data\",\"type\":\"tuple[]\"}],\"internalType\":\"struct MultiAttestationRequest[]\",\"name\":\"multiRequests\",\"type\":\"tuple[]\"}],\"name\":\"multiAttest\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"schema\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"expirationTime\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"revocable\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"refUID\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct AttestationRequestData[]\",\"name\":\"data\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct EIP712Signature[]\",\"name\":\"signatures\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"attester\",\"type\":\"address\"}],\"internalType\":\"struct MultiDelegatedAttestationRequest[]\",\"name\":\"multiDelegatedRequests\",\"type\":\"tuple[]\"}],\"name\":\"multiAttestByDelegation\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"schema\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"uid\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct RevocationRequestData[]\",\"name\":\"data\",\"type\":\"tuple[]\"}],\"internalType\":\"struct MultiRevocationRequest[]\",\"name\":\"multiRequests\",\"type\":\"tuple[]\"}],\"name\":\"multiRevoke\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"schema\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"uid\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct RevocationRequestData[]\",\"name\":\"data\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct EIP712Signature[]\",\"name\":\"signatures\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"revoker\",\"type\":\"address\"}],\"internalType\":\"struct MultiDelegatedRevocationRequest[]\",\"name\":\"multiDelegatedRequests\",\"type\":\"tuple[]\"}],\"name\":\"multiRevokeByDelegation\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"data\",\"type\":\"bytes32[]\"}],\"name\":\"multiRevokeOffchain\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"data\",\"type\":\"bytes32[]\"}],\"name\":\"multiTimestamp\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"schema\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"uid\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct RevocationRequestData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct RevocationRequest\",\"name\":\"request\",\"type\":\"tuple\"}],\"name\":\"revoke\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"schema\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"uid\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct RevocationRequestData\",\"name\":\"data\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct EIP712Signature\",\"name\":\"signature\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"revoker\",\"type\":\"address\"}],\"internalType\":\"struct DelegatedRevocationRequest\",\"name\":\"delegatedRequest\",\"type\":\"tuple\"}],\"name\":\"revokeByDelegation\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"data\",\"type\":\"bytes32\"}],\"name\":\"revokeOffchain\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"data\",\"type\":\"bytes32\"}],\"name\":\"timestamp\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Attested(address,address,bytes32,bytes32)\":{\"details\":\"Emitted when an attestation has been made.\",\"params\":{\"attester\":\"The attesting account.\",\"recipient\":\"The recipient of the attestation.\",\"schema\":\"The UID of the schema.\",\"uid\":\"The UID the revoked attestation.\"}},\"Revoked(address,address,bytes32,bytes32)\":{\"details\":\"Emitted when an attestation has been revoked.\",\"params\":{\"attester\":\"The attesting account.\",\"recipient\":\"The recipient of the attestation.\",\"schema\":\"The UID of the schema.\",\"uid\":\"The UID the revoked attestation.\"}},\"RevokedOffchain(address,bytes32,uint64)\":{\"details\":\"Emitted when a data has been revoked.\",\"params\":{\"data\":\"The data.\",\"revoker\":\"The address of the revoker.\",\"timestamp\":\"The timestamp.\"}},\"Timestamped(bytes32,uint64)\":{\"details\":\"Emitted when a data has been timestamped.\",\"params\":{\"data\":\"The data.\",\"timestamp\":\"The timestamp.\"}}},\"kind\":\"dev\",\"methods\":{\"attest((bytes32,(address,uint64,bool,bytes32,bytes,uint256)))\":{\"details\":\"Attests to a specific schema.\",\"params\":{\"request\":\"The arguments of the attestation request. Example: attest({     schema: \\\"0facc36681cbe2456019c1b0d1e7bedd6d1d40f6f324bf3dd3a4cef2999200a0\\\",     data: {         recipient: \\\"0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf\\\",         expirationTime: 0,         revocable: true,         refUID: \\\"0x0000000000000000000000000000000000000000000000000000000000000000\\\",         data: \\\"0xF00D\\\",         value: 0     } })\"},\"returns\":{\"_0\":\"The UID of the new attestation.\"}},\"attestByDelegation((bytes32,(address,uint64,bool,bytes32,bytes,uint256),(uint8,bytes32,bytes32),address))\":{\"details\":\"Attests to a specific schema via the provided EIP712 signature.\",\"params\":{\"delegatedRequest\":\"The arguments of the delegated attestation request. Example: attestByDelegation({     schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',     data: {         recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',         expirationTime: 1673891048,         revocable: true,         refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',         data: '0x1234',         value: 0     },     signature: {         v: 28,         r: '0x148c...b25b',         s: '0x5a72...be22'     },     attester: '0xc5E8740aD971409492b1A63Db8d83025e0Fc427e' })\"},\"returns\":{\"_0\":\"The UID of the new attestation.\"}},\"getAttestation(bytes32)\":{\"details\":\"Returns an existing attestation by UID.\",\"params\":{\"uid\":\"The UID of the attestation to retrieve.\"},\"returns\":{\"_0\":\"The attestation data members.\"}},\"getRevokeOffchain(address,bytes32)\":{\"details\":\"Returns the timestamp that the specified data was timestamped with.\",\"params\":{\"data\":\"The data to query.\"},\"returns\":{\"_0\":\"The timestamp the data was timestamped with.\"}},\"getSchemaRegistry()\":{\"details\":\"Returns the address of the global schema registry.\",\"returns\":{\"_0\":\"The address of the global schema registry.\"}},\"getTimestamp(bytes32)\":{\"details\":\"Returns the timestamp that the specified data was timestamped with.\",\"params\":{\"data\":\"The data to query.\"},\"returns\":{\"_0\":\"The timestamp the data was timestamped with.\"}},\"isAttestationValid(bytes32)\":{\"details\":\"Checks whether an attestation exists.\",\"params\":{\"uid\":\"The UID of the attestation to retrieve.\"},\"returns\":{\"_0\":\"Whether an attestation exists.\"}},\"multiAttest((bytes32,(address,uint64,bool,bytes32,bytes,uint256)[])[])\":{\"details\":\"Attests to multiple schemas.\",\"params\":{\"multiRequests\":\"The arguments of the multi attestation requests. The requests should be grouped by distinct schema ids to benefit from the best batching optimization. Example: multiAttest([{     schema: '0x33e9094830a5cba5554d1954310e4fbed2ef5f859ec1404619adea4207f391fd',     data: [{         recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',         expirationTime: 1673891048,         revocable: true,         refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',         data: '0x1234',         value: 1000     },     {         recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',         expirationTime: 0,         revocable: false,         refUID: '0x480df4a039efc31b11bfdf491b383ca138b6bde160988222a2a3509c02cee174',         data: '0x00',         value: 0     }], }, {     schema: '0x5ac273ce41e3c8bfa383efe7c03e54c5f0bff29c9f11ef6ffa930fc84ca32425',     data: [{         recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',         expirationTime: 0,         revocable: true,         refUID: '0x75bf2ed8dca25a8190c50c52db136664de25b2449535839008ccfdab469b214f',         data: '0x12345678',         value: 0     }, }])\"},\"returns\":{\"_0\":\"The UIDs of the new attestations.\"}},\"multiAttestByDelegation((bytes32,(address,uint64,bool,bytes32,bytes,uint256)[],(uint8,bytes32,bytes32)[],address)[])\":{\"details\":\"Attests to multiple schemas using via provided EIP712 signatures.\",\"params\":{\"multiDelegatedRequests\":\"The arguments of the delegated multi attestation requests. The requests should be grouped by distinct schema ids to benefit from the best batching optimization. Example: multiAttestByDelegation([{     schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',     data: [{         recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',         expirationTime: 1673891048,         revocable: true,         refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',         data: '0x1234',         value: 0     },     {         recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',         expirationTime: 0,         revocable: false,         refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',         data: '0x00',         value: 0     }],     signatures: [{         v: 28,         r: '0x148c...b25b',         s: '0x5a72...be22'     },     {         v: 28,         r: '0x487s...67bb',         s: '0x12ad...2366'     }],     attester: '0x1D86495b2A7B524D747d2839b3C645Bed32e8CF4' }])\"},\"returns\":{\"_0\":\"The UIDs of the new attestations.\"}},\"multiRevoke((bytes32,(bytes32,uint256)[])[])\":{\"details\":\"Revokes existing attestations to multiple schemas.\",\"params\":{\"multiRequests\":\"The arguments of the multi revocation requests. The requests should be grouped by distinct schema ids to benefit from the best batching optimization. Example: multiRevoke([{     schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',     data: [{         uid: '0x211296a1ca0d7f9f2cfebf0daaa575bea9b20e968d81aef4e743d699c6ac4b25',         value: 1000     },     {         uid: '0xe160ac1bd3606a287b4d53d5d1d6da5895f65b4b4bab6d93aaf5046e48167ade',         value: 0     }], }, {     schema: '0x5ac273ce41e3c8bfa383efe7c03e54c5f0bff29c9f11ef6ffa930fc84ca32425',     data: [{         uid: '0x053d42abce1fd7c8fcddfae21845ad34dae287b2c326220b03ba241bc5a8f019',         value: 0     }, }])\"}},\"multiRevokeByDelegation((bytes32,(bytes32,uint256)[],(uint8,bytes32,bytes32)[],address)[])\":{\"details\":\"Revokes existing attestations to multiple schemas via provided EIP712 signatures.\",\"params\":{\"multiDelegatedRequests\":\"The arguments of the delegated multi revocation attestation requests. The requests should be grouped by distinct schema ids to benefit from the best batching optimization. Example: multiRevokeByDelegation([{     schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',     data: [{         uid: '0x211296a1ca0d7f9f2cfebf0daaa575bea9b20e968d81aef4e743d699c6ac4b25',         value: 1000     },     {         uid: '0xe160ac1bd3606a287b4d53d5d1d6da5895f65b4b4bab6d93aaf5046e48167ade',         value: 0     }],     signatures: [{         v: 28,         r: '0x148c...b25b',         s: '0x5a72...be22'     },     {         v: 28,         r: '0x487s...67bb',         s: '0x12ad...2366'     }],     revoker: '0x244934dd3e31bE2c81f84ECf0b3E6329F5381992' }])\"}},\"multiRevokeOffchain(bytes32[])\":{\"details\":\"Revokes the specified multiple bytes32 data.\",\"params\":{\"data\":\"The data to timestamp.\"},\"returns\":{\"_0\":\"The timestamp the data was revoked with.\"}},\"multiTimestamp(bytes32[])\":{\"details\":\"Timestamps the specified multiple bytes32 data.\",\"params\":{\"data\":\"The data to timestamp.\"},\"returns\":{\"_0\":\"The timestamp the data was timestamped with.\"}},\"revoke((bytes32,(bytes32,uint256)))\":{\"details\":\"Revokes an existing attestation to a specific schema. Example: revoke({     schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',     data: {         uid: '0x101032e487642ee04ee17049f99a70590c735b8614079fc9275f9dd57c00966d',         value: 0     } })\",\"params\":{\"request\":\"The arguments of the revocation request.\"}},\"revokeByDelegation((bytes32,(bytes32,uint256),(uint8,bytes32,bytes32),address))\":{\"details\":\"Revokes an existing attestation to a specific schema via the provided EIP712 signature. Example: revokeByDelegation({     schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',     data: {         uid: '0xcbbc12102578c642a0f7b34fe7111e41afa25683b6cd7b5a14caf90fa14d24ba',         value: 0     },     signature: {         v: 27,         r: '0xb593...7142',         s: '0x0f5b...2cce'     },     revoker: '0x244934dd3e31bE2c81f84ECf0b3E6329F5381992' })\",\"params\":{\"delegatedRequest\":\"The arguments of the delegated revocation request.\"}},\"revokeOffchain(bytes32)\":{\"details\":\"Revokes the specified bytes32 data.\",\"params\":{\"data\":\"The data to timestamp.\"},\"returns\":{\"_0\":\"The timestamp the data was revoked with.\"}},\"timestamp(bytes32)\":{\"details\":\"Timestamps the specified bytes32 data.\",\"params\":{\"data\":\"The data to timestamp.\"},\"returns\":{\"_0\":\"The timestamp the data was timestamped with.\"}}},\"title\":\"EAS - Ethereum Attestation Service interface.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@ethereum-attestation-service/eas-contracts/contracts/IEAS.sol\":\"IEAS\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@ethereum-attestation-service/eas-contracts/contracts/Common.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// A representation of an empty/uninitialized UID.\\nbytes32 constant EMPTY_UID = 0;\\n\\n// A zero expiration represents an non-expiring attestation.\\nuint64 constant NO_EXPIRATION_TIME = 0;\\n\\nerror AccessDenied();\\nerror InvalidEAS();\\nerror InvalidLength();\\nerror InvalidSignature();\\nerror NotFound();\\n\\n/**\\n * @dev A struct representing EIP712 signature data.\\n */\\nstruct EIP712Signature {\\n    uint8 v; // The recovery ID.\\n    bytes32 r; // The x-coordinate of the nonce R.\\n    bytes32 s; // The signature data.\\n}\\n\\n/**\\n * @dev A struct representing a single attestation.\\n */\\nstruct Attestation {\\n    bytes32 uid; // A unique identifier of the attestation.\\n    bytes32 schema; // The unique identifier of the schema.\\n    uint64 time; // The time when the attestation was created (Unix timestamp).\\n    uint64 expirationTime; // The time when the attestation expires (Unix timestamp).\\n    uint64 revocationTime; // The time when the attestation was revoked (Unix timestamp).\\n    bytes32 refUID; // The UID of the related attestation.\\n    address recipient; // The recipient of the attestation.\\n    address attester; // The attester/sender of the attestation.\\n    bool revocable; // Whether the attestation is revocable.\\n    bytes data; // Custom attestation data.\\n}\\n\\n/**\\n * @dev A helper function to work with unchecked iterators in loops.\\n */\\nfunction uncheckedInc(uint256 i) pure returns (uint256 j) {\\n    unchecked {\\n        j = i + 1;\\n    }\\n}\\n\",\"keccak256\":\"0x4bab9ec76bdb009e9fb505c45a679d39c9e80771eb13ed901029a1068025752a\",\"license\":\"MIT\"},\"@ethereum-attestation-service/eas-contracts/contracts/IEAS.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { ISchemaRegistry } from \\\"./ISchemaRegistry.sol\\\";\\nimport { Attestation, EIP712Signature } from \\\"./Common.sol\\\";\\n\\n/**\\n * @dev A struct representing the arguments of the attestation request.\\n */\\nstruct AttestationRequestData {\\n    address recipient; // The recipient of the attestation.\\n    uint64 expirationTime; // The time when the attestation expires (Unix timestamp).\\n    bool revocable; // Whether the attestation is revocable.\\n    bytes32 refUID; // The UID of the related attestation.\\n    bytes data; // Custom attestation data.\\n    uint256 value; // An explicit ETH amount to send to the resolver. This is important to prevent accidental user errors.\\n}\\n\\n/**\\n * @dev A struct representing the full arguments of the attestation request.\\n */\\nstruct AttestationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    AttestationRequestData data; // The arguments of the attestation request.\\n}\\n\\n/**\\n * @dev A struct representing the full arguments of the full delegated attestation request.\\n */\\nstruct DelegatedAttestationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    AttestationRequestData data; // The arguments of the attestation request.\\n    EIP712Signature signature; // The EIP712 signature data.\\n    address attester; // The attesting account.\\n}\\n\\n/**\\n * @dev A struct representing the full arguments of the multi attestation request.\\n */\\nstruct MultiAttestationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    AttestationRequestData[] data; // The arguments of the attestation request.\\n}\\n\\n/**\\n * @dev A struct representing the full arguments of the delegated multi attestation request.\\n */\\nstruct MultiDelegatedAttestationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    AttestationRequestData[] data; // The arguments of the attestation requests.\\n    EIP712Signature[] signatures; // The EIP712 signatures data. Please note that the signatures are assumed to be signed with increasing nonces.\\n    address attester; // The attesting account.\\n}\\n\\n/**\\n * @dev A struct representing the arguments of the revocation request.\\n */\\nstruct RevocationRequestData {\\n    bytes32 uid; // The UID of the attestation to revoke.\\n    uint256 value; // An explicit ETH amount to send to the resolver. This is important to prevent accidental user errors.\\n}\\n\\n/**\\n * @dev A struct representing the full arguments of the revocation request.\\n */\\nstruct RevocationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    RevocationRequestData data; // The arguments of the revocation request.\\n}\\n\\n/**\\n * @dev A struct representing the arguments of the full delegated revocation request.\\n */\\nstruct DelegatedRevocationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    RevocationRequestData data; // The arguments of the revocation request.\\n    EIP712Signature signature; // The EIP712 signature data.\\n    address revoker; // The revoking account.\\n}\\n\\n/**\\n * @dev A struct representing the full arguments of the multi revocation request.\\n */\\nstruct MultiRevocationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    RevocationRequestData[] data; // The arguments of the revocation request.\\n}\\n\\n/**\\n * @dev A struct representing the full arguments of the delegated multi revocation request.\\n */\\nstruct MultiDelegatedRevocationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    RevocationRequestData[] data; // The arguments of the revocation requests.\\n    EIP712Signature[] signatures; // The EIP712 signatures data. Please note that the signatures are assumed to be signed with increasing nonces.\\n    address revoker; // The revoking account.\\n}\\n\\n/**\\n * @title EAS - Ethereum Attestation Service interface.\\n */\\ninterface IEAS {\\n    /**\\n     * @dev Emitted when an attestation has been made.\\n     *\\n     * @param recipient The recipient of the attestation.\\n     * @param attester The attesting account.\\n     * @param uid The UID the revoked attestation.\\n     * @param schema The UID of the schema.\\n     */\\n    event Attested(address indexed recipient, address indexed attester, bytes32 uid, bytes32 indexed schema);\\n\\n    /**\\n     * @dev Emitted when an attestation has been revoked.\\n     *\\n     * @param recipient The recipient of the attestation.\\n     * @param attester The attesting account.\\n     * @param schema The UID of the schema.\\n     * @param uid The UID the revoked attestation.\\n     */\\n    event Revoked(address indexed recipient, address indexed attester, bytes32 uid, bytes32 indexed schema);\\n\\n    /**\\n     * @dev Emitted when a data has been timestamped.\\n     *\\n     * @param data The data.\\n     * @param timestamp The timestamp.\\n     */\\n    event Timestamped(bytes32 indexed data, uint64 indexed timestamp);\\n\\n    /**\\n     * @dev Emitted when a data has been revoked.\\n     *\\n     * @param revoker The address of the revoker.\\n     * @param data The data.\\n     * @param timestamp The timestamp.\\n     */\\n    event RevokedOffchain(address indexed revoker, bytes32 indexed data, uint64 indexed timestamp);\\n\\n    /**\\n     * @dev Returns the address of the global schema registry.\\n     *\\n     * @return The address of the global schema registry.\\n     */\\n    function getSchemaRegistry() external view returns (ISchemaRegistry);\\n\\n    /**\\n     * @dev Attests to a specific schema.\\n     *\\n     * @param request The arguments of the attestation request.\\n     *\\n     * Example:\\n     *\\n     * attest({\\n     *     schema: \\\"0facc36681cbe2456019c1b0d1e7bedd6d1d40f6f324bf3dd3a4cef2999200a0\\\",\\n     *     data: {\\n     *         recipient: \\\"0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf\\\",\\n     *         expirationTime: 0,\\n     *         revocable: true,\\n     *         refUID: \\\"0x0000000000000000000000000000000000000000000000000000000000000000\\\",\\n     *         data: \\\"0xF00D\\\",\\n     *         value: 0\\n     *     }\\n     * })\\n     *\\n     * @return The UID of the new attestation.\\n     */\\n    function attest(AttestationRequest calldata request) external payable returns (bytes32);\\n\\n    /**\\n     * @dev Attests to a specific schema via the provided EIP712 signature.\\n     *\\n     * @param delegatedRequest The arguments of the delegated attestation request.\\n     *\\n     * Example:\\n     *\\n     * attestByDelegation({\\n     *     schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n     *     data: {\\n     *         recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',\\n     *         expirationTime: 1673891048,\\n     *         revocable: true,\\n     *         refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\\n     *         data: '0x1234',\\n     *         value: 0\\n     *     },\\n     *     signature: {\\n     *         v: 28,\\n     *         r: '0x148c...b25b',\\n     *         s: '0x5a72...be22'\\n     *     },\\n     *     attester: '0xc5E8740aD971409492b1A63Db8d83025e0Fc427e'\\n     * })\\n     *\\n     * @return The UID of the new attestation.\\n     */\\n    function attestByDelegation(\\n        DelegatedAttestationRequest calldata delegatedRequest\\n    ) external payable returns (bytes32);\\n\\n    /**\\n     * @dev Attests to multiple schemas.\\n     *\\n     * @param multiRequests The arguments of the multi attestation requests. The requests should be grouped by distinct\\n     * schema ids to benefit from the best batching optimization.\\n     *\\n     * Example:\\n     *\\n     * multiAttest([{\\n     *     schema: '0x33e9094830a5cba5554d1954310e4fbed2ef5f859ec1404619adea4207f391fd',\\n     *     data: [{\\n     *         recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',\\n     *         expirationTime: 1673891048,\\n     *         revocable: true,\\n     *         refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\\n     *         data: '0x1234',\\n     *         value: 1000\\n     *     },\\n     *     {\\n     *         recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',\\n     *         expirationTime: 0,\\n     *         revocable: false,\\n     *         refUID: '0x480df4a039efc31b11bfdf491b383ca138b6bde160988222a2a3509c02cee174',\\n     *         data: '0x00',\\n     *         value: 0\\n     *     }],\\n     * },\\n     * {\\n     *     schema: '0x5ac273ce41e3c8bfa383efe7c03e54c5f0bff29c9f11ef6ffa930fc84ca32425',\\n     *     data: [{\\n     *         recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',\\n     *         expirationTime: 0,\\n     *         revocable: true,\\n     *         refUID: '0x75bf2ed8dca25a8190c50c52db136664de25b2449535839008ccfdab469b214f',\\n     *         data: '0x12345678',\\n     *         value: 0\\n     *     },\\n     * }])\\n     *\\n     * @return The UIDs of the new attestations.\\n     */\\n    function multiAttest(MultiAttestationRequest[] calldata multiRequests) external payable returns (bytes32[] memory);\\n\\n    /**\\n     * @dev Attests to multiple schemas using via provided EIP712 signatures.\\n     *\\n     * @param multiDelegatedRequests The arguments of the delegated multi attestation requests. The requests should be\\n     * grouped by distinct schema ids to benefit from the best batching optimization.\\n     *\\n     * Example:\\n     *\\n     * multiAttestByDelegation([{\\n     *     schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n     *     data: [{\\n     *         recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',\\n     *         expirationTime: 1673891048,\\n     *         revocable: true,\\n     *         refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\\n     *         data: '0x1234',\\n     *         value: 0\\n     *     },\\n     *     {\\n     *         recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',\\n     *         expirationTime: 0,\\n     *         revocable: false,\\n     *         refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\\n     *         data: '0x00',\\n     *         value: 0\\n     *     }],\\n     *     signatures: [{\\n     *         v: 28,\\n     *         r: '0x148c...b25b',\\n     *         s: '0x5a72...be22'\\n     *     },\\n     *     {\\n     *         v: 28,\\n     *         r: '0x487s...67bb',\\n     *         s: '0x12ad...2366'\\n     *     }],\\n     *     attester: '0x1D86495b2A7B524D747d2839b3C645Bed32e8CF4'\\n     * }])\\n     *\\n     * @return The UIDs of the new attestations.\\n     */\\n    function multiAttestByDelegation(\\n        MultiDelegatedAttestationRequest[] calldata multiDelegatedRequests\\n    ) external payable returns (bytes32[] memory);\\n\\n    /**\\n     * @dev Revokes an existing attestation to a specific schema.\\n     *\\n     * Example:\\n     *\\n     * revoke({\\n     *     schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n     *     data: {\\n     *         uid: '0x101032e487642ee04ee17049f99a70590c735b8614079fc9275f9dd57c00966d',\\n     *         value: 0\\n     *     }\\n     * })\\n     *\\n     * @param request The arguments of the revocation request.\\n     */\\n    function revoke(RevocationRequest calldata request) external payable;\\n\\n    /**\\n     * @dev Revokes an existing attestation to a specific schema via the provided EIP712 signature.\\n     *\\n     * Example:\\n     *\\n     * revokeByDelegation({\\n     *     schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n     *     data: {\\n     *         uid: '0xcbbc12102578c642a0f7b34fe7111e41afa25683b6cd7b5a14caf90fa14d24ba',\\n     *         value: 0\\n     *     },\\n     *     signature: {\\n     *         v: 27,\\n     *         r: '0xb593...7142',\\n     *         s: '0x0f5b...2cce'\\n     *     },\\n     *     revoker: '0x244934dd3e31bE2c81f84ECf0b3E6329F5381992'\\n     * })\\n     *\\n     * @param delegatedRequest The arguments of the delegated revocation request.\\n     */\\n    function revokeByDelegation(DelegatedRevocationRequest calldata delegatedRequest) external payable;\\n\\n    /**\\n     * @dev Revokes existing attestations to multiple schemas.\\n     *\\n     * @param multiRequests The arguments of the multi revocation requests. The requests should be grouped by distinct\\n     * schema ids to benefit from the best batching optimization.\\n     *\\n     * Example:\\n     *\\n     * multiRevoke([{\\n     *     schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n     *     data: [{\\n     *         uid: '0x211296a1ca0d7f9f2cfebf0daaa575bea9b20e968d81aef4e743d699c6ac4b25',\\n     *         value: 1000\\n     *     },\\n     *     {\\n     *         uid: '0xe160ac1bd3606a287b4d53d5d1d6da5895f65b4b4bab6d93aaf5046e48167ade',\\n     *         value: 0\\n     *     }],\\n     * },\\n     * {\\n     *     schema: '0x5ac273ce41e3c8bfa383efe7c03e54c5f0bff29c9f11ef6ffa930fc84ca32425',\\n     *     data: [{\\n     *         uid: '0x053d42abce1fd7c8fcddfae21845ad34dae287b2c326220b03ba241bc5a8f019',\\n     *         value: 0\\n     *     },\\n     * }])\\n     */\\n    function multiRevoke(MultiRevocationRequest[] calldata multiRequests) external payable;\\n\\n    /**\\n     * @dev Revokes existing attestations to multiple schemas via provided EIP712 signatures.\\n     *\\n     * @param multiDelegatedRequests The arguments of the delegated multi revocation attestation requests. The requests should be\\n     * grouped by distinct schema ids to benefit from the best batching optimization.\\n     *\\n     * Example:\\n     *\\n     * multiRevokeByDelegation([{\\n     *     schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n     *     data: [{\\n     *         uid: '0x211296a1ca0d7f9f2cfebf0daaa575bea9b20e968d81aef4e743d699c6ac4b25',\\n     *         value: 1000\\n     *     },\\n     *     {\\n     *         uid: '0xe160ac1bd3606a287b4d53d5d1d6da5895f65b4b4bab6d93aaf5046e48167ade',\\n     *         value: 0\\n     *     }],\\n     *     signatures: [{\\n     *         v: 28,\\n     *         r: '0x148c...b25b',\\n     *         s: '0x5a72...be22'\\n     *     },\\n     *     {\\n     *         v: 28,\\n     *         r: '0x487s...67bb',\\n     *         s: '0x12ad...2366'\\n     *     }],\\n     *     revoker: '0x244934dd3e31bE2c81f84ECf0b3E6329F5381992'\\n     * }])\\n     *\\n     */\\n    function multiRevokeByDelegation(\\n        MultiDelegatedRevocationRequest[] calldata multiDelegatedRequests\\n    ) external payable;\\n\\n    /**\\n     * @dev Timestamps the specified bytes32 data.\\n     *\\n     * @param data The data to timestamp.\\n     *\\n     * @return The timestamp the data was timestamped with.\\n     */\\n    function timestamp(bytes32 data) external returns (uint64);\\n\\n    /**\\n     * @dev Timestamps the specified multiple bytes32 data.\\n     *\\n     * @param data The data to timestamp.\\n     *\\n     * @return The timestamp the data was timestamped with.\\n     */\\n    function multiTimestamp(bytes32[] calldata data) external returns (uint64);\\n\\n    /**\\n     * @dev Revokes the specified bytes32 data.\\n     *\\n     * @param data The data to timestamp.\\n     *\\n     * @return The timestamp the data was revoked with.\\n     */\\n    function revokeOffchain(bytes32 data) external returns (uint64);\\n\\n    /**\\n     * @dev Revokes the specified multiple bytes32 data.\\n     *\\n     * @param data The data to timestamp.\\n     *\\n     * @return The timestamp the data was revoked with.\\n     */\\n    function multiRevokeOffchain(bytes32[] calldata data) external returns (uint64);\\n\\n    /**\\n     * @dev Returns an existing attestation by UID.\\n     *\\n     * @param uid The UID of the attestation to retrieve.\\n     *\\n     * @return The attestation data members.\\n     */\\n    function getAttestation(bytes32 uid) external view returns (Attestation memory);\\n\\n    /**\\n     * @dev Checks whether an attestation exists.\\n     *\\n     * @param uid The UID of the attestation to retrieve.\\n     *\\n     * @return Whether an attestation exists.\\n     */\\n    function isAttestationValid(bytes32 uid) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the timestamp that the specified data was timestamped with.\\n     *\\n     * @param data The data to query.\\n     *\\n     * @return The timestamp the data was timestamped with.\\n     */\\n    function getTimestamp(bytes32 data) external view returns (uint64);\\n\\n    /**\\n     * @dev Returns the timestamp that the specified data was timestamped with.\\n     *\\n     * @param data The data to query.\\n     *\\n     * @return The timestamp the data was timestamped with.\\n     */\\n    function getRevokeOffchain(address revoker, bytes32 data) external view returns (uint64);\\n}\\n\",\"keccak256\":\"0xd530be686226f3c8d7b02bb59797901620f64749a02228539afc8b082a1ee036\",\"license\":\"MIT\"},\"@ethereum-attestation-service/eas-contracts/contracts/ISchemaRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { ISchemaResolver } from \\\"./resolver/ISchemaResolver.sol\\\";\\n\\n/**\\n * @title A struct representing a record for a submitted schema.\\n */\\nstruct SchemaRecord {\\n    bytes32 uid; // The unique identifier of the schema.\\n    ISchemaResolver resolver; // Optional schema resolver.\\n    bool revocable; // Whether the schema allows revocations explicitly.\\n    string schema; // Custom specification of the schema (e.g., an ABI).\\n}\\n\\n/**\\n * @title The global schema registry interface.\\n */\\ninterface ISchemaRegistry {\\n    /**\\n     * @dev Emitted when a new schema has been registered\\n     *\\n     * @param uid The schema UID.\\n     * @param registerer The address of the account used to register the schema.\\n     */\\n    event Registered(bytes32 indexed uid, address registerer);\\n\\n    /**\\n     * @dev Submits and reserves a new schema\\n     *\\n     * @param schema The schema data schema.\\n     * @param resolver An optional schema resolver.\\n     * @param revocable Whether the schema allows revocations explicitly.\\n     *\\n     * @return The UID of the new schema.\\n     */\\n    function register(string calldata schema, ISchemaResolver resolver, bool revocable) external returns (bytes32);\\n\\n    /**\\n     * @dev Returns an existing schema by UID\\n     *\\n     * @param uid The UID of the schema to retrieve.\\n     *\\n     * @return The schema data members.\\n     */\\n    function getSchema(bytes32 uid) external view returns (SchemaRecord memory);\\n}\\n\",\"keccak256\":\"0xef47e449dd02bd034e26b1dea505ce533906f8462fc674c938ed0e872a68d640\",\"license\":\"MIT\"},\"@ethereum-attestation-service/eas-contracts/contracts/resolver/ISchemaResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { Attestation } from \\\"../Common.sol\\\";\\n\\n/**\\n * @title The interface of an optional schema resolver.\\n */\\ninterface ISchemaResolver {\\n    /**\\n     * @dev Returns whether the resolver supports ETH transfers.\\n     */\\n    function isPayable() external pure returns (bool);\\n\\n    /**\\n     * @dev Processes an attestation and verifies whether it's valid.\\n     *\\n     * @param attestation The new attestation.\\n     *\\n     * @return Whether the attestation is valid.\\n     */\\n    function attest(Attestation calldata attestation) external payable returns (bool);\\n\\n    /**\\n     * @dev Processes multiple attestations and verifies whether they are valid.\\n     *\\n     * @param attestations The new attestations.\\n     * @param values Explicit ETH amounts which were sent with each attestation.\\n     *\\n     * @return Whether all the attestations are valid.\\n     */\\n    function multiAttest(\\n        Attestation[] calldata attestations,\\n        uint256[] calldata values\\n    ) external payable returns (bool);\\n\\n    /**\\n     * @dev Processes an attestation revocation and verifies if it can be revoked.\\n     *\\n     * @param attestation The existing attestation to be revoked.\\n     *\\n     * @return Whether the attestation can be revoked.\\n     */\\n    function revoke(Attestation calldata attestation) external payable returns (bool);\\n\\n    /**\\n     * @dev Processes revocation of multiple attestation and verifies they can be revoked.\\n     *\\n     * @param attestations The existing attestations to be revoked.\\n     * @param values Explicit ETH amounts which were sent with each revocation.\\n     *\\n     * @return Whether the attestations can be revoked.\\n     */\\n    function multiRevoke(\\n        Attestation[] calldata attestations,\\n        uint256[] calldata values\\n    ) external payable returns (bool);\\n}\\n\",\"keccak256\":\"0xc628c6540da258f76192eaa34c21699c9cbcc4a4029d7ee04e88dc9c18c981fd\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@ethereum-attestation-service/eas-contracts/contracts/ISchemaRegistry.sol":{"ISchemaRegistry":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"uid","type":"bytes32"},{"indexed":false,"internalType":"address","name":"registerer","type":"address"}],"name":"Registered","type":"event"},{"inputs":[{"internalType":"bytes32","name":"uid","type":"bytes32"}],"name":"getSchema","outputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"contract ISchemaResolver","name":"resolver","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"string","name":"schema","type":"string"}],"internalType":"struct SchemaRecord","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"string","name":"schema","type":"string"},{"internalType":"contract ISchemaResolver","name":"resolver","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"}],"name":"register","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"events":{"Registered(bytes32,address)":{"details":"Emitted when a new schema has been registered","params":{"registerer":"The address of the account used to register the schema.","uid":"The schema UID."}}},"kind":"dev","methods":{"getSchema(bytes32)":{"details":"Returns an existing schema by UID","params":{"uid":"The UID of the schema to retrieve."},"returns":{"_0":"The schema data members."}},"register(string,address,bool)":{"details":"Submits and reserves a new schema","params":{"resolver":"An optional schema resolver.","revocable":"Whether the schema allows revocations explicitly.","schema":"The schema data schema."},"returns":{"_0":"The UID of the new schema."}}},"title":"The global schema registry interface.","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"getSchema(bytes32)":"a2ea7c6e","register(string,address,bool)":"60d7a278"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"uid\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"registerer\",\"type\":\"address\"}],\"name\":\"Registered\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"uid\",\"type\":\"bytes32\"}],\"name\":\"getSchema\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"uid\",\"type\":\"bytes32\"},{\"internalType\":\"contract ISchemaResolver\",\"name\":\"resolver\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"revocable\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"schema\",\"type\":\"string\"}],\"internalType\":\"struct SchemaRecord\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"schema\",\"type\":\"string\"},{\"internalType\":\"contract ISchemaResolver\",\"name\":\"resolver\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"revocable\",\"type\":\"bool\"}],\"name\":\"register\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Registered(bytes32,address)\":{\"details\":\"Emitted when a new schema has been registered\",\"params\":{\"registerer\":\"The address of the account used to register the schema.\",\"uid\":\"The schema UID.\"}}},\"kind\":\"dev\",\"methods\":{\"getSchema(bytes32)\":{\"details\":\"Returns an existing schema by UID\",\"params\":{\"uid\":\"The UID of the schema to retrieve.\"},\"returns\":{\"_0\":\"The schema data members.\"}},\"register(string,address,bool)\":{\"details\":\"Submits and reserves a new schema\",\"params\":{\"resolver\":\"An optional schema resolver.\",\"revocable\":\"Whether the schema allows revocations explicitly.\",\"schema\":\"The schema data schema.\"},\"returns\":{\"_0\":\"The UID of the new schema.\"}}},\"title\":\"The global schema registry interface.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@ethereum-attestation-service/eas-contracts/contracts/ISchemaRegistry.sol\":\"ISchemaRegistry\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@ethereum-attestation-service/eas-contracts/contracts/Common.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// A representation of an empty/uninitialized UID.\\nbytes32 constant EMPTY_UID = 0;\\n\\n// A zero expiration represents an non-expiring attestation.\\nuint64 constant NO_EXPIRATION_TIME = 0;\\n\\nerror AccessDenied();\\nerror InvalidEAS();\\nerror InvalidLength();\\nerror InvalidSignature();\\nerror NotFound();\\n\\n/**\\n * @dev A struct representing EIP712 signature data.\\n */\\nstruct EIP712Signature {\\n    uint8 v; // The recovery ID.\\n    bytes32 r; // The x-coordinate of the nonce R.\\n    bytes32 s; // The signature data.\\n}\\n\\n/**\\n * @dev A struct representing a single attestation.\\n */\\nstruct Attestation {\\n    bytes32 uid; // A unique identifier of the attestation.\\n    bytes32 schema; // The unique identifier of the schema.\\n    uint64 time; // The time when the attestation was created (Unix timestamp).\\n    uint64 expirationTime; // The time when the attestation expires (Unix timestamp).\\n    uint64 revocationTime; // The time when the attestation was revoked (Unix timestamp).\\n    bytes32 refUID; // The UID of the related attestation.\\n    address recipient; // The recipient of the attestation.\\n    address attester; // The attester/sender of the attestation.\\n    bool revocable; // Whether the attestation is revocable.\\n    bytes data; // Custom attestation data.\\n}\\n\\n/**\\n * @dev A helper function to work with unchecked iterators in loops.\\n */\\nfunction uncheckedInc(uint256 i) pure returns (uint256 j) {\\n    unchecked {\\n        j = i + 1;\\n    }\\n}\\n\",\"keccak256\":\"0x4bab9ec76bdb009e9fb505c45a679d39c9e80771eb13ed901029a1068025752a\",\"license\":\"MIT\"},\"@ethereum-attestation-service/eas-contracts/contracts/ISchemaRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { ISchemaResolver } from \\\"./resolver/ISchemaResolver.sol\\\";\\n\\n/**\\n * @title A struct representing a record for a submitted schema.\\n */\\nstruct SchemaRecord {\\n    bytes32 uid; // The unique identifier of the schema.\\n    ISchemaResolver resolver; // Optional schema resolver.\\n    bool revocable; // Whether the schema allows revocations explicitly.\\n    string schema; // Custom specification of the schema (e.g., an ABI).\\n}\\n\\n/**\\n * @title The global schema registry interface.\\n */\\ninterface ISchemaRegistry {\\n    /**\\n     * @dev Emitted when a new schema has been registered\\n     *\\n     * @param uid The schema UID.\\n     * @param registerer The address of the account used to register the schema.\\n     */\\n    event Registered(bytes32 indexed uid, address registerer);\\n\\n    /**\\n     * @dev Submits and reserves a new schema\\n     *\\n     * @param schema The schema data schema.\\n     * @param resolver An optional schema resolver.\\n     * @param revocable Whether the schema allows revocations explicitly.\\n     *\\n     * @return The UID of the new schema.\\n     */\\n    function register(string calldata schema, ISchemaResolver resolver, bool revocable) external returns (bytes32);\\n\\n    /**\\n     * @dev Returns an existing schema by UID\\n     *\\n     * @param uid The UID of the schema to retrieve.\\n     *\\n     * @return The schema data members.\\n     */\\n    function getSchema(bytes32 uid) external view returns (SchemaRecord memory);\\n}\\n\",\"keccak256\":\"0xef47e449dd02bd034e26b1dea505ce533906f8462fc674c938ed0e872a68d640\",\"license\":\"MIT\"},\"@ethereum-attestation-service/eas-contracts/contracts/resolver/ISchemaResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { Attestation } from \\\"../Common.sol\\\";\\n\\n/**\\n * @title The interface of an optional schema resolver.\\n */\\ninterface ISchemaResolver {\\n    /**\\n     * @dev Returns whether the resolver supports ETH transfers.\\n     */\\n    function isPayable() external pure returns (bool);\\n\\n    /**\\n     * @dev Processes an attestation and verifies whether it's valid.\\n     *\\n     * @param attestation The new attestation.\\n     *\\n     * @return Whether the attestation is valid.\\n     */\\n    function attest(Attestation calldata attestation) external payable returns (bool);\\n\\n    /**\\n     * @dev Processes multiple attestations and verifies whether they are valid.\\n     *\\n     * @param attestations The new attestations.\\n     * @param values Explicit ETH amounts which were sent with each attestation.\\n     *\\n     * @return Whether all the attestations are valid.\\n     */\\n    function multiAttest(\\n        Attestation[] calldata attestations,\\n        uint256[] calldata values\\n    ) external payable returns (bool);\\n\\n    /**\\n     * @dev Processes an attestation revocation and verifies if it can be revoked.\\n     *\\n     * @param attestation The existing attestation to be revoked.\\n     *\\n     * @return Whether the attestation can be revoked.\\n     */\\n    function revoke(Attestation calldata attestation) external payable returns (bool);\\n\\n    /**\\n     * @dev Processes revocation of multiple attestation and verifies they can be revoked.\\n     *\\n     * @param attestations The existing attestations to be revoked.\\n     * @param values Explicit ETH amounts which were sent with each revocation.\\n     *\\n     * @return Whether the attestations can be revoked.\\n     */\\n    function multiRevoke(\\n        Attestation[] calldata attestations,\\n        uint256[] calldata values\\n    ) external payable returns (bool);\\n}\\n\",\"keccak256\":\"0xc628c6540da258f76192eaa34c21699c9cbcc4a4029d7ee04e88dc9c18c981fd\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@ethereum-attestation-service/eas-contracts/contracts/resolver/ISchemaResolver.sol":{"ISchemaResolver":{"abi":[{"inputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"bytes32","name":"schema","type":"bytes32"},{"internalType":"uint64","name":"time","type":"uint64"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"uint64","name":"revocationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Attestation","name":"attestation","type":"tuple"}],"name":"attest","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"isPayable","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"pure","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"bytes32","name":"schema","type":"bytes32"},{"internalType":"uint64","name":"time","type":"uint64"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"uint64","name":"revocationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Attestation[]","name":"attestations","type":"tuple[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"}],"name":"multiAttest","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"payable","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"bytes32","name":"schema","type":"bytes32"},{"internalType":"uint64","name":"time","type":"uint64"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"uint64","name":"revocationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Attestation[]","name":"attestations","type":"tuple[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"}],"name":"multiRevoke","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"payable","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"bytes32","name":"schema","type":"bytes32"},{"internalType":"uint64","name":"time","type":"uint64"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"uint64","name":"revocationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Attestation","name":"attestation","type":"tuple"}],"name":"revoke","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"payable","type":"function"}],"devdoc":{"kind":"dev","methods":{"attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))":{"details":"Processes an attestation and verifies whether it's valid.","params":{"attestation":"The new attestation."},"returns":{"_0":"Whether the attestation is valid."}},"isPayable()":{"details":"Returns whether the resolver supports ETH transfers."},"multiAttest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])":{"details":"Processes multiple attestations and verifies whether they are valid.","params":{"attestations":"The new attestations.","values":"Explicit ETH amounts which were sent with each attestation."},"returns":{"_0":"Whether all the attestations are valid."}},"multiRevoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])":{"details":"Processes revocation of multiple attestation and verifies they can be revoked.","params":{"attestations":"The existing attestations to be revoked.","values":"Explicit ETH amounts which were sent with each revocation."},"returns":{"_0":"Whether the attestations can be revoked."}},"revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))":{"details":"Processes an attestation revocation and verifies if it can be revoked.","params":{"attestation":"The existing attestation to be revoked."},"returns":{"_0":"Whether the attestation can be revoked."}}},"title":"The interface of an optional schema resolver.","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))":"e60c3505","isPayable()":"ce46e046","multiAttest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])":"91db0b7e","multiRevoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])":"88e5b2d9","revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))":"e49617e1"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"uid\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"schema\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"time\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"expirationTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"revocationTime\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"refUID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"attester\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"revocable\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct Attestation\",\"name\":\"attestation\",\"type\":\"tuple\"}],\"name\":\"attest\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPayable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"uid\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"schema\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"time\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"expirationTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"revocationTime\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"refUID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"attester\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"revocable\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct Attestation[]\",\"name\":\"attestations\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"multiAttest\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"uid\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"schema\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"time\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"expirationTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"revocationTime\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"refUID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"attester\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"revocable\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct Attestation[]\",\"name\":\"attestations\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"multiRevoke\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"uid\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"schema\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"time\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"expirationTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"revocationTime\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"refUID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"attester\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"revocable\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct Attestation\",\"name\":\"attestation\",\"type\":\"tuple\"}],\"name\":\"revoke\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))\":{\"details\":\"Processes an attestation and verifies whether it's valid.\",\"params\":{\"attestation\":\"The new attestation.\"},\"returns\":{\"_0\":\"Whether the attestation is valid.\"}},\"isPayable()\":{\"details\":\"Returns whether the resolver supports ETH transfers.\"},\"multiAttest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])\":{\"details\":\"Processes multiple attestations and verifies whether they are valid.\",\"params\":{\"attestations\":\"The new attestations.\",\"values\":\"Explicit ETH amounts which were sent with each attestation.\"},\"returns\":{\"_0\":\"Whether all the attestations are valid.\"}},\"multiRevoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])\":{\"details\":\"Processes revocation of multiple attestation and verifies they can be revoked.\",\"params\":{\"attestations\":\"The existing attestations to be revoked.\",\"values\":\"Explicit ETH amounts which were sent with each revocation.\"},\"returns\":{\"_0\":\"Whether the attestations can be revoked.\"}},\"revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))\":{\"details\":\"Processes an attestation revocation and verifies if it can be revoked.\",\"params\":{\"attestation\":\"The existing attestation to be revoked.\"},\"returns\":{\"_0\":\"Whether the attestation can be revoked.\"}}},\"title\":\"The interface of an optional schema resolver.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@ethereum-attestation-service/eas-contracts/contracts/resolver/ISchemaResolver.sol\":\"ISchemaResolver\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@ethereum-attestation-service/eas-contracts/contracts/Common.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// A representation of an empty/uninitialized UID.\\nbytes32 constant EMPTY_UID = 0;\\n\\n// A zero expiration represents an non-expiring attestation.\\nuint64 constant NO_EXPIRATION_TIME = 0;\\n\\nerror AccessDenied();\\nerror InvalidEAS();\\nerror InvalidLength();\\nerror InvalidSignature();\\nerror NotFound();\\n\\n/**\\n * @dev A struct representing EIP712 signature data.\\n */\\nstruct EIP712Signature {\\n    uint8 v; // The recovery ID.\\n    bytes32 r; // The x-coordinate of the nonce R.\\n    bytes32 s; // The signature data.\\n}\\n\\n/**\\n * @dev A struct representing a single attestation.\\n */\\nstruct Attestation {\\n    bytes32 uid; // A unique identifier of the attestation.\\n    bytes32 schema; // The unique identifier of the schema.\\n    uint64 time; // The time when the attestation was created (Unix timestamp).\\n    uint64 expirationTime; // The time when the attestation expires (Unix timestamp).\\n    uint64 revocationTime; // The time when the attestation was revoked (Unix timestamp).\\n    bytes32 refUID; // The UID of the related attestation.\\n    address recipient; // The recipient of the attestation.\\n    address attester; // The attester/sender of the attestation.\\n    bool revocable; // Whether the attestation is revocable.\\n    bytes data; // Custom attestation data.\\n}\\n\\n/**\\n * @dev A helper function to work with unchecked iterators in loops.\\n */\\nfunction uncheckedInc(uint256 i) pure returns (uint256 j) {\\n    unchecked {\\n        j = i + 1;\\n    }\\n}\\n\",\"keccak256\":\"0x4bab9ec76bdb009e9fb505c45a679d39c9e80771eb13ed901029a1068025752a\",\"license\":\"MIT\"},\"@ethereum-attestation-service/eas-contracts/contracts/resolver/ISchemaResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { Attestation } from \\\"../Common.sol\\\";\\n\\n/**\\n * @title The interface of an optional schema resolver.\\n */\\ninterface ISchemaResolver {\\n    /**\\n     * @dev Returns whether the resolver supports ETH transfers.\\n     */\\n    function isPayable() external pure returns (bool);\\n\\n    /**\\n     * @dev Processes an attestation and verifies whether it's valid.\\n     *\\n     * @param attestation The new attestation.\\n     *\\n     * @return Whether the attestation is valid.\\n     */\\n    function attest(Attestation calldata attestation) external payable returns (bool);\\n\\n    /**\\n     * @dev Processes multiple attestations and verifies whether they are valid.\\n     *\\n     * @param attestations The new attestations.\\n     * @param values Explicit ETH amounts which were sent with each attestation.\\n     *\\n     * @return Whether all the attestations are valid.\\n     */\\n    function multiAttest(\\n        Attestation[] calldata attestations,\\n        uint256[] calldata values\\n    ) external payable returns (bool);\\n\\n    /**\\n     * @dev Processes an attestation revocation and verifies if it can be revoked.\\n     *\\n     * @param attestation The existing attestation to be revoked.\\n     *\\n     * @return Whether the attestation can be revoked.\\n     */\\n    function revoke(Attestation calldata attestation) external payable returns (bool);\\n\\n    /**\\n     * @dev Processes revocation of multiple attestation and verifies they can be revoked.\\n     *\\n     * @param attestations The existing attestations to be revoked.\\n     * @param values Explicit ETH amounts which were sent with each revocation.\\n     *\\n     * @return Whether the attestations can be revoked.\\n     */\\n    function multiRevoke(\\n        Attestation[] calldata attestations,\\n        uint256[] calldata values\\n    ) external payable returns (bool);\\n}\\n\",\"keccak256\":\"0xc628c6540da258f76192eaa34c21699c9cbcc4a4029d7ee04e88dc9c18c981fd\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol":{"OwnableUpgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.","events":{"Initialized(uint8)":{"details":"Triggered when the contract has been initialized or reinitialized."}},"kind":"dev","methods":{"owner()":{"details":"Returns the address of the current owner."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"stateVariables":{"__gap":{"details":"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"owner()":"8da5cb5b","renounceOwnership()":"715018a6","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.\",\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":\"OwnableUpgradeable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x4075622496acc77fd6d4de4cc30a8577a744d5c75afad33fdeacf1704d6eda98\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":586,"contract":"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":589,"contract":"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":1119,"contract":"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"},{"astId":458,"contract":"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable","label":"_owner","offset":0,"slot":"51","type":"t_address"},{"astId":578,"contract":"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable","label":"__gap","offset":0,"slot":"52","type":"t_array(t_uint256)49_storage"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_uint256)49_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[49]","numberOfBytes":"1568"},"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol":{"Initializable":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"}],"devdoc":{"custom:oz-upgrades-unsafe-allow":"constructor constructor() {     _disableInitializers(); } ``` ====","details":"This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer function so it can only be called once. The {initializer} modifier provided by this contract will have this effect. The initialization functions use a version number. Once a version number is used, it is consumed and cannot be reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in case an upgrade adds a module that needs to be initialized. For example: [.hljs-theme-light.nopadding] ```solidity contract MyToken is ERC20Upgradeable {     function initialize() initializer public {         __ERC20_init(\"MyToken\", \"MTK\");     } } contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {     function initializeV2() reinitializer(2) public {         __ERC20Permit_init(\"MyToken\");     } } ``` TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}. CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure that all initializers are idempotent. This is not verified automatically as constructors are by Solidity. [CAUTION] ==== Avoid leaving a contract uninitialized. An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke the {_disableInitializers} function in the constructor to automatically lock it when it is deployed: [.hljs-theme-light.nopadding] ```","events":{"Initialized(uint8)":{"details":"Triggered when the contract has been initialized or reinitialized."}},"kind":"dev","methods":{},"stateVariables":{"_initialized":{"custom:oz-retyped-from":"bool","details":"Indicates that the contract has been initialized."},"_initializing":{"details":"Indicates that the contract is in the process of being initialized."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"}],\"devdoc\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor constructor() {     _disableInitializers(); } ``` ====\",\"details\":\"This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer function so it can only be called once. The {initializer} modifier provided by this contract will have this effect. The initialization functions use a version number. Once a version number is used, it is consumed and cannot be reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in case an upgrade adds a module that needs to be initialized. For example: [.hljs-theme-light.nopadding] ```solidity contract MyToken is ERC20Upgradeable {     function initialize() initializer public {         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");     } } contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {     function initializeV2() reinitializer(2) public {         __ERC20Permit_init(\\\"MyToken\\\");     } } ``` TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}. CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure that all initializers are idempotent. This is not verified automatically as constructors are by Solidity. [CAUTION] ==== Avoid leaving a contract uninitialized. An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke the {_disableInitializers} function in the constructor to automatically lock it when it is deployed: [.hljs-theme-light.nopadding] ```\",\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"_initialized\":{\"custom:oz-retyped-from\":\"bool\",\"details\":\"Indicates that the contract has been initialized.\"},\"_initializing\":{\"details\":\"Indicates that the contract is in the process of being initialized.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":\"Initializable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":586,"contract":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":589,"contract":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"}],"types":{"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol":{"AddressUpgradeable":{"abi":[],"devdoc":{"details":"Collection of functions related to the address type","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212208f24ba9a5a6e3582a4aaa793687200136073a24ff34e004616c7d8fc302c652d64736f6c63430008130033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP16 0x24 0xBA SWAP11 GAS PUSH15 0x3582A4AAA793687200136073A24FF3 0x4E STOP CHAINID AND 0xC7 0xD8 0xFC ADDRESS 0x2C PUSH6 0x2D64736F6C63 NUMBER STOP ADDMOD SGT STOP CALLER ","sourceMap":"194:9180:6:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;194:9180:6;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212208f24ba9a5a6e3582a4aaa793687200136073a24ff34e004616c7d8fc302c652d64736f6c63430008130033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP16 0x24 0xBA SWAP11 GAS PUSH15 0x3582A4AAA793687200136073A24FF3 0x4E STOP CHAINID AND 0xC7 0xD8 0xFC ADDRESS 0x2C PUSH6 0x2D64736F6C63 NUMBER STOP ADDMOD SGT STOP CALLER ","sourceMap":"194:9180:6:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"_revert(bytes memory,string memory)":"infinite","functionCall(address,bytes memory)":"infinite","functionCall(address,bytes memory,string memory)":"infinite","functionCallWithValue(address,bytes memory,uint256)":"infinite","functionCallWithValue(address,bytes memory,uint256,string memory)":"infinite","functionDelegateCall(address,bytes memory)":"infinite","functionDelegateCall(address,bytes memory,string memory)":"infinite","functionStaticCall(address,bytes memory)":"infinite","functionStaticCall(address,bytes memory,string memory)":"infinite","isContract(address)":"infinite","sendValue(address payable,uint256)":"infinite","verifyCallResult(bool,bytes memory,string memory)":"infinite","verifyCallResultFromTarget(address,bool,bytes memory,string memory)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Collection of functions related to the address type\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":\"AddressUpgradeable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol":{"ContextUpgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"}],"devdoc":{"details":"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.","events":{"Initialized(uint8)":{"details":"Triggered when the contract has been initialized or reinitialized."}},"kind":"dev","methods":{},"stateVariables":{"__gap":{"details":"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"}],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":\"ContextUpgradeable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":586,"contract":"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":589,"contract":"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":1119,"contract":"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"}],"types":{"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/Gap.sol":{"Gap":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"eas","outputs":[{"internalType":"contract IEAS","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"easAddr","type":"address"}],"name":"initialize","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"components":[{"internalType":"bytes32","name":"schema","type":"bytes32"},{"components":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"uint256","name":"value","type":"uint256"}],"internalType":"struct AttestationRequestData[]","name":"data","type":"tuple[]"}],"internalType":"struct MultiAttestationRequest","name":"multiRequest","type":"tuple"},{"internalType":"uint256","name":"refIdx","type":"uint256"}],"internalType":"struct Gap.AttestationRequestNode[]","name":"requestNodes","type":"tuple[]"}],"name":"multiSequentialAttest","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"events":{"Initialized(uint8)":{"details":"Triggered when the contract has been initialized or reinitialized."}},"kind":"dev","methods":{"owner()":{"details":"Returns the address of the current owner."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"608060405234801561001057600080fd5b50610cd3806100206000396000f3fe608060405234801561001057600080fd5b50600436106100725760003560e01c80638da5cb5b116100505780638da5cb5b146100c3578063c4d66de8146100d4578063f2fde38b146100e757600080fd5b80635913a31c14610077578063715018a61461008c5780638150864d14610094575b600080fd5b61008a61008536600461071e565b6100fa565b005b61008a610391565b6065546100a7906001600160a01b031681565b6040516001600160a01b03909116815260200160405180910390f35b6033546001600160a01b03166100a7565b61008a6100e23660046107af565b6103a5565b61008a6100f53660046107af565b6104f3565b60008167ffffffffffffffff811115610115576101156107d1565b60405190808252806020026020018201604052801561014857816020015b60608152602001906001900390816101335790505b50905060005b8281101561038b57600084848381811061016a5761016a6107e7565b905060200281019061017c91906107fd565b61018a90602081019061081d565b61019390610954565b905081156102695760005b816020015151811015610267576000826020015182815181106101c3576101c36107e7565b60200260200101519050848787868181106101e0576101e06107e7565b90506020028101906101f291906107fd565b6040013581518110610206576102066107e7565b6020026020010151600081518110610220576102206107e7565b60200260200101518160600181815250508083602001518381518110610248576102486107e7565b602002602001018190525050808061025f90610aa6565b91505061019e565b505b604080516001808252818301909252600091816020015b60408051808201909152600081526060602082015281526020019060019003908161028057905050905081816000815181106102be576102be6107e7565b60209081029190910101526065546040517f44adc90e0000000000000000000000000000000000000000000000000000000081526001600160a01b03909116906344adc90e90610312908490600401610acd565b6000604051808303816000875af1158015610331573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526103599190810190610c0c565b84848151811061036b5761036b6107e7565b60200260200101819052505050808061038390610aa6565b91505061014e565b50505050565b610399610583565b6103a360006105dd565b565b600054610100900460ff16158080156103c55750600054600160ff909116105b806103df5750303b1580156103df575060005460ff166001145b6104565760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084015b60405180910390fd5b6000805460ff191660011790558015610479576000805461ff0019166101001790555b6065805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0384161790556104a961063c565b80156104ef576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050565b6104fb610583565b6001600160a01b0381166105775760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f6464726573730000000000000000000000000000000000000000000000000000606482015260840161044d565b610580816105dd565b50565b6033546001600160a01b031633146103a35760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161044d565b603380546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff166106a75760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b606482015260840161044d565b6103a3600054610100900460ff166107155760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b606482015260840161044d565b6103a3336105dd565b6000806020838503121561073157600080fd5b823567ffffffffffffffff8082111561074957600080fd5b818501915085601f83011261075d57600080fd5b81358181111561076c57600080fd5b8660208260051b850101111561078157600080fd5b60209290920196919550909350505050565b80356001600160a01b03811681146107aa57600080fd5b919050565b6000602082840312156107c157600080fd5b6107ca82610793565b9392505050565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b60008235605e1983360301811261081357600080fd5b9190910192915050565b60008235603e1983360301811261081357600080fd5b6040805190810167ffffffffffffffff81118282101715610856576108566107d1565b60405290565b60405160c0810167ffffffffffffffff81118282101715610856576108566107d1565b604051601f8201601f1916810167ffffffffffffffff811182821017156108a8576108a86107d1565b604052919050565b600067ffffffffffffffff8211156108ca576108ca6107d1565b5060051b60200190565b803580151581146107aa57600080fd5b600082601f8301126108f557600080fd5b813567ffffffffffffffff81111561090f5761090f6107d1565b610922601f8201601f191660200161087f565b81815284602083860101111561093757600080fd5b816020850160208301376000918101602001919091529392505050565b6000604080833603121561096757600080fd5b61096f610833565b8335815260208085013567ffffffffffffffff8082111561098f57600080fd5b9086019036601f8301126109a257600080fd5b81356109b56109b0826108b0565b61087f565b81815260059190911b830184019084810190368311156109d457600080fd5b8585015b83811015610a92578035858111156109f05760008081fd5b860160c036829003601f1901811315610a095760008081fd5b610a1161085c565b610a1c8a8401610793565b81528b8301358881168114610a315760008081fd5b818b01526060610a428482016108d4565b8d8301526080808501358284015260a09150818501358a811115610a665760008081fd5b610a74368e838901016108e4565b918401919091525091909201359082015283529186019186016109d8565b509486019490945250929695505050505050565b600060018201610ac657634e487b7160e01b600052601160045260246000fd5b5060010190565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b83811015610bfe57603f198984030185528151805184528701518784018790528051878501819052908801906060600582901b86018101919086019060005b81811015610be857605f1988850301835284516001600160a01b03815116855267ffffffffffffffff8d820151168d8601528b81015115158c86015260608101516060860152608081015160c0608087015280518060c088015260005b81811015610baf578f818401015160e0828a0101528f81019050610b90565b50600087820160e09081019190915260a09384015193880193909352968e0196601f01601f1916909501019350918b0191600101610b33565b5050509588019593505090860190600101610af4565b509098975050505050505050565b60006020808385031215610c1f57600080fd5b825167ffffffffffffffff811115610c3657600080fd5b8301601f81018513610c4757600080fd5b8051610c556109b0826108b0565b81815260059190911b82018301908381019087831115610c7457600080fd5b928401925b82841015610c9257835182529284019290840190610c79565b97965050505050505056fea26469706673582212205499387ff34c3bce07996d536378efc23281ae9194540f40a08da9fc3171958464736f6c63430008130033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xCD3 DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x72 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8DA5CB5B GT PUSH2 0x50 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0xC3 JUMPI DUP1 PUSH4 0xC4D66DE8 EQ PUSH2 0xD4 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0xE7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x5913A31C EQ PUSH2 0x77 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x8C JUMPI DUP1 PUSH4 0x8150864D EQ PUSH2 0x94 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x8A PUSH2 0x85 CALLDATASIZE PUSH1 0x4 PUSH2 0x71E JUMP JUMPDEST PUSH2 0xFA JUMP JUMPDEST STOP JUMPDEST PUSH2 0x8A PUSH2 0x391 JUMP JUMPDEST PUSH1 0x65 SLOAD PUSH2 0xA7 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x33 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xA7 JUMP JUMPDEST PUSH2 0x8A PUSH2 0xE2 CALLDATASIZE PUSH1 0x4 PUSH2 0x7AF JUMP JUMPDEST PUSH2 0x3A5 JUMP JUMPDEST PUSH2 0x8A PUSH2 0xF5 CALLDATASIZE PUSH1 0x4 PUSH2 0x7AF JUMP JUMPDEST PUSH2 0x4F3 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x115 JUMPI PUSH2 0x115 PUSH2 0x7D1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x148 JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x133 JUMPI SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x38B JUMPI PUSH1 0x0 DUP5 DUP5 DUP4 DUP2 DUP2 LT PUSH2 0x16A JUMPI PUSH2 0x16A PUSH2 0x7E7 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0x17C SWAP2 SWAP1 PUSH2 0x7FD JUMP JUMPDEST PUSH2 0x18A SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x81D JUMP JUMPDEST PUSH2 0x193 SWAP1 PUSH2 0x954 JUMP JUMPDEST SWAP1 POP DUP2 ISZERO PUSH2 0x269 JUMPI PUSH1 0x0 JUMPDEST DUP2 PUSH1 0x20 ADD MLOAD MLOAD DUP2 LT ISZERO PUSH2 0x267 JUMPI PUSH1 0x0 DUP3 PUSH1 0x20 ADD MLOAD DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x1C3 JUMPI PUSH2 0x1C3 PUSH2 0x7E7 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP DUP5 DUP8 DUP8 DUP7 DUP2 DUP2 LT PUSH2 0x1E0 JUMPI PUSH2 0x1E0 PUSH2 0x7E7 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0x1F2 SWAP2 SWAP1 PUSH2 0x7FD JUMP JUMPDEST PUSH1 0x40 ADD CALLDATALOAD DUP2 MLOAD DUP2 LT PUSH2 0x206 JUMPI PUSH2 0x206 PUSH2 0x7E7 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x220 JUMPI PUSH2 0x220 PUSH2 0x7E7 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP2 PUSH1 0x60 ADD DUP2 DUP2 MSTORE POP POP DUP1 DUP4 PUSH1 0x20 ADD MLOAD DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x248 JUMPI PUSH2 0x248 PUSH2 0x7E7 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP POP DUP1 DUP1 PUSH2 0x25F SWAP1 PUSH2 0xAA6 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x19E JUMP JUMPDEST POP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE PUSH1 0x0 SWAP2 DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP2 MSTORE PUSH1 0x60 PUSH1 0x20 DUP3 ADD MSTORE DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x280 JUMPI SWAP1 POP POP SWAP1 POP DUP2 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x2BE JUMPI PUSH2 0x2BE PUSH2 0x7E7 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x65 SLOAD PUSH1 0x40 MLOAD PUSH32 0x44ADC90E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x44ADC90E SWAP1 PUSH2 0x312 SWAP1 DUP5 SWAP1 PUSH1 0x4 ADD PUSH2 0xACD JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x331 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x359 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0xC0C JUMP JUMPDEST DUP5 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x36B JUMPI PUSH2 0x36B PUSH2 0x7E7 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP POP POP DUP1 DUP1 PUSH2 0x383 SWAP1 PUSH2 0xAA6 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x14E JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH2 0x399 PUSH2 0x583 JUMP JUMPDEST PUSH2 0x3A3 PUSH1 0x0 PUSH2 0x5DD JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND ISZERO DUP1 DUP1 ISZERO PUSH2 0x3C5 JUMPI POP PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0xFF SWAP1 SWAP2 AND LT JUMPDEST DUP1 PUSH2 0x3DF JUMPI POP ADDRESS EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3DF JUMPI POP PUSH1 0x0 SLOAD PUSH1 0xFF AND PUSH1 0x1 EQ JUMPDEST PUSH2 0x456 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E747261637420697320616C726561 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x647920696E697469616C697A6564000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE DUP1 ISZERO PUSH2 0x479 JUMPI PUSH1 0x0 DUP1 SLOAD PUSH2 0xFF00 NOT AND PUSH2 0x100 OR SWAP1 SSTORE JUMPDEST PUSH1 0x65 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND OR SWAP1 SSTORE PUSH2 0x4A9 PUSH2 0x63C JUMP JUMPDEST DUP1 ISZERO PUSH2 0x4EF JUMPI PUSH1 0x0 DUP1 SLOAD PUSH2 0xFF00 NOT AND SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH1 0x1 DUP2 MSTORE PUSH32 0x7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x4FB PUSH2 0x583 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x577 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6464726573730000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x44D JUMP JUMPDEST PUSH2 0x580 DUP2 PUSH2 0x5DD JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x33 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x3A3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x44D JUMP JUMPDEST PUSH1 0x33 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 MLOAD SWAP2 AND SWAP2 SWAP1 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x6A7 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E7472616374206973206E6F742069 PUSH1 0x44 DUP3 ADD MSTORE PUSH11 0x6E697469616C697A696E67 PUSH1 0xA8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x44D JUMP JUMPDEST PUSH2 0x3A3 PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x715 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E7472616374206973206E6F742069 PUSH1 0x44 DUP3 ADD MSTORE PUSH11 0x6E697469616C697A696E67 PUSH1 0xA8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x44D JUMP JUMPDEST PUSH2 0x3A3 CALLER PUSH2 0x5DD JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x20 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x731 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x749 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x75D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x76C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP6 ADD ADD GT ISZERO PUSH2 0x781 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 SWAP3 SWAP1 SWAP3 ADD SWAP7 SWAP2 SWAP6 POP SWAP1 SWAP4 POP POP POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x7AA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x7C1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x7CA DUP3 PUSH2 0x793 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 CALLDATALOAD PUSH1 0x5E NOT DUP4 CALLDATASIZE SUB ADD DUP2 SLT PUSH2 0x813 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 CALLDATALOAD PUSH1 0x3E NOT DUP4 CALLDATASIZE SUB ADD DUP2 SLT PUSH2 0x813 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP1 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x856 JUMPI PUSH2 0x856 PUSH2 0x7D1 JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0xC0 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x856 JUMPI PUSH2 0x856 PUSH2 0x7D1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x8A8 JUMPI PUSH2 0x8A8 PUSH2 0x7D1 JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x8CA JUMPI PUSH2 0x8CA PUSH2 0x7D1 JUMP JUMPDEST POP PUSH1 0x5 SHL PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST DUP1 CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x7AA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x8F5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x90F JUMPI PUSH2 0x90F PUSH2 0x7D1 JUMP JUMPDEST PUSH2 0x922 PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD PUSH2 0x87F JUMP JUMPDEST DUP2 DUP2 MSTORE DUP5 PUSH1 0x20 DUP4 DUP7 ADD ADD GT ISZERO PUSH2 0x937 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 PUSH1 0x20 DUP6 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 SWAP2 DUP2 ADD PUSH1 0x20 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP1 DUP4 CALLDATASIZE SUB SLT ISZERO PUSH2 0x967 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x96F PUSH2 0x833 JUMP JUMPDEST DUP4 CALLDATALOAD DUP2 MSTORE PUSH1 0x20 DUP1 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x98F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 DUP7 ADD SWAP1 CALLDATASIZE PUSH1 0x1F DUP4 ADD SLT PUSH2 0x9A2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x9B5 PUSH2 0x9B0 DUP3 PUSH2 0x8B0 JUMP JUMPDEST PUSH2 0x87F JUMP JUMPDEST DUP2 DUP2 MSTORE PUSH1 0x5 SWAP2 SWAP1 SWAP2 SHL DUP4 ADD DUP5 ADD SWAP1 DUP5 DUP2 ADD SWAP1 CALLDATASIZE DUP4 GT ISZERO PUSH2 0x9D4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 DUP6 ADD JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xA92 JUMPI DUP1 CALLDATALOAD DUP6 DUP2 GT ISZERO PUSH2 0x9F0 JUMPI PUSH1 0x0 DUP1 DUP2 REVERT JUMPDEST DUP7 ADD PUSH1 0xC0 CALLDATASIZE DUP3 SWAP1 SUB PUSH1 0x1F NOT ADD DUP2 SGT ISZERO PUSH2 0xA09 JUMPI PUSH1 0x0 DUP1 DUP2 REVERT JUMPDEST PUSH2 0xA11 PUSH2 0x85C JUMP JUMPDEST PUSH2 0xA1C DUP11 DUP5 ADD PUSH2 0x793 JUMP JUMPDEST DUP2 MSTORE DUP12 DUP4 ADD CALLDATALOAD DUP9 DUP2 AND DUP2 EQ PUSH2 0xA31 JUMPI PUSH1 0x0 DUP1 DUP2 REVERT JUMPDEST DUP2 DUP12 ADD MSTORE PUSH1 0x60 PUSH2 0xA42 DUP5 DUP3 ADD PUSH2 0x8D4 JUMP JUMPDEST DUP14 DUP4 ADD MSTORE PUSH1 0x80 DUP1 DUP6 ADD CALLDATALOAD DUP3 DUP5 ADD MSTORE PUSH1 0xA0 SWAP2 POP DUP2 DUP6 ADD CALLDATALOAD DUP11 DUP2 GT ISZERO PUSH2 0xA66 JUMPI PUSH1 0x0 DUP1 DUP2 REVERT JUMPDEST PUSH2 0xA74 CALLDATASIZE DUP15 DUP4 DUP10 ADD ADD PUSH2 0x8E4 JUMP JUMPDEST SWAP2 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE POP SWAP2 SWAP1 SWAP3 ADD CALLDATALOAD SWAP1 DUP3 ADD MSTORE DUP4 MSTORE SWAP2 DUP7 ADD SWAP2 DUP7 ADD PUSH2 0x9D8 JUMP JUMPDEST POP SWAP5 DUP7 ADD SWAP5 SWAP1 SWAP5 MSTORE POP SWAP3 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 ADD PUSH2 0xAC6 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 ADD DUP2 DUP5 MSTORE DUP1 DUP6 MLOAD DUP1 DUP4 MSTORE PUSH1 0x40 SWAP3 POP DUP3 DUP7 ADD SWAP2 POP DUP3 DUP2 PUSH1 0x5 SHL DUP8 ADD ADD DUP5 DUP9 ADD PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xBFE JUMPI PUSH1 0x3F NOT DUP10 DUP5 SUB ADD DUP6 MSTORE DUP2 MLOAD DUP1 MLOAD DUP5 MSTORE DUP8 ADD MLOAD DUP8 DUP5 ADD DUP8 SWAP1 MSTORE DUP1 MLOAD DUP8 DUP6 ADD DUP2 SWAP1 MSTORE SWAP1 DUP9 ADD SWAP1 PUSH1 0x60 PUSH1 0x5 DUP3 SWAP1 SHL DUP7 ADD DUP2 ADD SWAP2 SWAP1 DUP7 ADD SWAP1 PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xBE8 JUMPI PUSH1 0x5F NOT DUP9 DUP6 SUB ADD DUP4 MSTORE DUP5 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 MLOAD AND DUP6 MSTORE PUSH8 0xFFFFFFFFFFFFFFFF DUP14 DUP3 ADD MLOAD AND DUP14 DUP7 ADD MSTORE DUP12 DUP2 ADD MLOAD ISZERO ISZERO DUP13 DUP7 ADD MSTORE PUSH1 0x60 DUP2 ADD MLOAD PUSH1 0x60 DUP7 ADD MSTORE PUSH1 0x80 DUP2 ADD MLOAD PUSH1 0xC0 PUSH1 0x80 DUP8 ADD MSTORE DUP1 MLOAD DUP1 PUSH1 0xC0 DUP9 ADD MSTORE PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xBAF JUMPI DUP16 DUP2 DUP5 ADD ADD MLOAD PUSH1 0xE0 DUP3 DUP11 ADD ADD MSTORE DUP16 DUP2 ADD SWAP1 POP PUSH2 0xB90 JUMP JUMPDEST POP PUSH1 0x0 DUP8 DUP3 ADD PUSH1 0xE0 SWAP1 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0xA0 SWAP4 DUP5 ADD MLOAD SWAP4 DUP9 ADD SWAP4 SWAP1 SWAP4 MSTORE SWAP7 DUP15 ADD SWAP7 PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP1 SWAP6 ADD ADD SWAP4 POP SWAP2 DUP12 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0xB33 JUMP JUMPDEST POP POP POP SWAP6 DUP9 ADD SWAP6 SWAP4 POP POP SWAP1 DUP7 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0xAF4 JUMP JUMPDEST POP SWAP1 SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xC1F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xC36 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 ADD PUSH1 0x1F DUP2 ADD DUP6 SGT PUSH2 0xC47 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 MLOAD PUSH2 0xC55 PUSH2 0x9B0 DUP3 PUSH2 0x8B0 JUMP JUMPDEST DUP2 DUP2 MSTORE PUSH1 0x5 SWAP2 SWAP1 SWAP2 SHL DUP3 ADD DUP4 ADD SWAP1 DUP4 DUP2 ADD SWAP1 DUP8 DUP4 GT ISZERO PUSH2 0xC74 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 DUP5 ADD SWAP3 JUMPDEST DUP3 DUP5 LT ISZERO PUSH2 0xC92 JUMPI DUP4 MLOAD DUP3 MSTORE SWAP3 DUP5 ADD SWAP3 SWAP1 DUP5 ADD SWAP1 PUSH2 0xC79 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SLOAD SWAP10 CODESIZE PUSH32 0xF34C3BCE07996D536378EFC23281AE9194540F40A08DA9FC3171958464736F6C PUSH4 0x43000813 STOP CALLER ","sourceMap":"365:1909:8:-:0;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@__Ownable_init_474":{"entryPoint":1596,"id":474,"parameterSlots":0,"returnSlots":0},"@__Ownable_init_unchained_485":{"entryPoint":null,"id":485,"parameterSlots":0,"returnSlots":0},"@_checkOwner_516":{"entryPoint":1411,"id":516,"parameterSlots":0,"returnSlots":0},"@_msgSender_1105":{"entryPoint":null,"id":1105,"parameterSlots":0,"returnSlots":1},"@_transferOwnership_573":{"entryPoint":1501,"id":573,"parameterSlots":1,"returnSlots":0},"@eas_1136":{"entryPoint":null,"id":1136,"parameterSlots":0,"returnSlots":0},"@initialize_1161":{"entryPoint":933,"id":1161,"parameterSlots":1,"returnSlots":0},"@isContract_766":{"entryPoint":null,"id":766,"parameterSlots":1,"returnSlots":1},"@multiSequentialAttest_1279":{"entryPoint":250,"id":1279,"parameterSlots":2,"returnSlots":0},"@owner_502":{"entryPoint":null,"id":502,"parameterSlots":0,"returnSlots":1},"@renounceOwnership_530":{"entryPoint":913,"id":530,"parameterSlots":0,"returnSlots":0},"@transferOwnership_553":{"entryPoint":1267,"id":553,"parameterSlots":1,"returnSlots":0},"abi_decode_address":{"entryPoint":1939,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_bool":{"entryPoint":2260,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_bytes":{"entryPoint":2276,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":1967,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_array$_t_bytes32_$dyn_memory_ptr_fromMemory":{"entryPoint":3084,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_array$_t_struct$_AttestationRequestNode_$1144_calldata_ptr_$dyn_calldata_ptr":{"entryPoint":1822,"id":null,"parameterSlots":2,"returnSlots":2},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_array$_t_struct$_MultiAttestationRequest_$105_memory_ptr_$dyn_memory_ptr__to_t_array$_t_struct$_MultiAttestationRequest_$105_memory_ptr_$dyn_memory_ptr__fromStack_reversed":{"entryPoint":2765,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_contract$_IEAS_$346__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"access_calldata_tail_t_struct$_AttestationRequestNode_$1144_calldata_ptr":{"entryPoint":2045,"id":null,"parameterSlots":2,"returnSlots":1},"access_calldata_tail_t_struct$_MultiAttestationRequest_$105_calldata_ptr":{"entryPoint":2077,"id":null,"parameterSlots":2,"returnSlots":1},"allocate_memory":{"entryPoint":2175,"id":null,"parameterSlots":1,"returnSlots":1},"allocate_memory_3439":{"entryPoint":2099,"id":null,"parameterSlots":0,"returnSlots":1},"allocate_memory_3440":{"entryPoint":2140,"id":null,"parameterSlots":0,"returnSlots":1},"array_allocation_size_array_struct_AttestationRequestData_dyn":{"entryPoint":2224,"id":null,"parameterSlots":1,"returnSlots":1},"convert_t_struct$_MultiAttestationRequest_$105_calldata_ptr_to_t_struct$_MultiAttestationRequest_$105_memory_ptr":{"entryPoint":2388,"id":null,"parameterSlots":1,"returnSlots":1},"increment_t_uint256":{"entryPoint":2726,"id":null,"parameterSlots":1,"returnSlots":1},"panic_error_0x32":{"entryPoint":2023,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":2001,"id":null,"parameterSlots":0,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:12362:9","statements":[{"nodeType":"YulBlock","src":"6:3:9","statements":[]},{"body":{"nodeType":"YulBlock","src":"161:510:9","statements":[{"body":{"nodeType":"YulBlock","src":"207:16:9","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"216:1:9","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"219:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"209:6:9"},"nodeType":"YulFunctionCall","src":"209:12:9"},"nodeType":"YulExpressionStatement","src":"209:12:9"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"182:7:9"},{"name":"headStart","nodeType":"YulIdentifier","src":"191:9:9"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"178:3:9"},"nodeType":"YulFunctionCall","src":"178:23:9"},{"kind":"number","nodeType":"YulLiteral","src":"203:2:9","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"174:3:9"},"nodeType":"YulFunctionCall","src":"174:32:9"},"nodeType":"YulIf","src":"171:52:9"},{"nodeType":"YulVariableDeclaration","src":"232:37:9","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"259:9:9"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"246:12:9"},"nodeType":"YulFunctionCall","src":"246:23:9"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"236:6:9","type":""}]},{"nodeType":"YulVariableDeclaration","src":"278:28:9","value":{"kind":"number","nodeType":"YulLiteral","src":"288:18:9","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"282:2:9","type":""}]},{"body":{"nodeType":"YulBlock","src":"333:16:9","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"342:1:9","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"345:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"335:6:9"},"nodeType":"YulFunctionCall","src":"335:12:9"},"nodeType":"YulExpressionStatement","src":"335:12:9"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"321:6:9"},{"name":"_1","nodeType":"YulIdentifier","src":"329:2:9"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"318:2:9"},"nodeType":"YulFunctionCall","src":"318:14:9"},"nodeType":"YulIf","src":"315:34:9"},{"nodeType":"YulVariableDeclaration","src":"358:32:9","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"372:9:9"},{"name":"offset","nodeType":"YulIdentifier","src":"383:6:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"368:3:9"},"nodeType":"YulFunctionCall","src":"368:22:9"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"362:2:9","type":""}]},{"body":{"nodeType":"YulBlock","src":"438:16:9","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"447:1:9","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"450:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"440:6:9"},"nodeType":"YulFunctionCall","src":"440:12:9"},"nodeType":"YulExpressionStatement","src":"440:12:9"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"417:2:9"},{"kind":"number","nodeType":"YulLiteral","src":"421:4:9","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"413:3:9"},"nodeType":"YulFunctionCall","src":"413:13:9"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"428:7:9"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"409:3:9"},"nodeType":"YulFunctionCall","src":"409:27:9"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"402:6:9"},"nodeType":"YulFunctionCall","src":"402:35:9"},"nodeType":"YulIf","src":"399:55:9"},{"nodeType":"YulVariableDeclaration","src":"463:30:9","value":{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"490:2:9"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"477:12:9"},"nodeType":"YulFunctionCall","src":"477:16:9"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"467:6:9","type":""}]},{"body":{"nodeType":"YulBlock","src":"520:16:9","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"529:1:9","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"532:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"522:6:9"},"nodeType":"YulFunctionCall","src":"522:12:9"},"nodeType":"YulExpressionStatement","src":"522:12:9"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"508:6:9"},{"name":"_1","nodeType":"YulIdentifier","src":"516:2:9"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"505:2:9"},"nodeType":"YulFunctionCall","src":"505:14:9"},"nodeType":"YulIf","src":"502:34:9"},{"body":{"nodeType":"YulBlock","src":"594:16:9","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"603:1:9","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"606:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"596:6:9"},"nodeType":"YulFunctionCall","src":"596:12:9"},"nodeType":"YulExpressionStatement","src":"596:12:9"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"559:2:9"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"567:1:9","type":"","value":"5"},{"name":"length","nodeType":"YulIdentifier","src":"570:6:9"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"563:3:9"},"nodeType":"YulFunctionCall","src":"563:14:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"555:3:9"},"nodeType":"YulFunctionCall","src":"555:23:9"},{"kind":"number","nodeType":"YulLiteral","src":"580:2:9","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"551:3:9"},"nodeType":"YulFunctionCall","src":"551:32:9"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"585:7:9"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"548:2:9"},"nodeType":"YulFunctionCall","src":"548:45:9"},"nodeType":"YulIf","src":"545:65:9"},{"nodeType":"YulAssignment","src":"619:21:9","value":{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"633:2:9"},{"kind":"number","nodeType":"YulLiteral","src":"637:2:9","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"629:3:9"},"nodeType":"YulFunctionCall","src":"629:11:9"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"619:6:9"}]},{"nodeType":"YulAssignment","src":"649:16:9","value":{"name":"length","nodeType":"YulIdentifier","src":"659:6:9"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"649:6:9"}]}]},"name":"abi_decode_tuple_t_array$_t_struct$_AttestationRequestNode_$1144_calldata_ptr_$dyn_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"119:9:9","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"130:7:9","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"142:6:9","type":""},{"name":"value1","nodeType":"YulTypedName","src":"150:6:9","type":""}],"src":"14:657:9"},{"body":{"nodeType":"YulBlock","src":"789:125:9","statements":[{"nodeType":"YulAssignment","src":"799:26:9","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"811:9:9"},{"kind":"number","nodeType":"YulLiteral","src":"822:2:9","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"807:3:9"},"nodeType":"YulFunctionCall","src":"807:18:9"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"799:4:9"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"841:9:9"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"856:6:9"},{"kind":"number","nodeType":"YulLiteral","src":"864:42:9","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"852:3:9"},"nodeType":"YulFunctionCall","src":"852:55:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"834:6:9"},"nodeType":"YulFunctionCall","src":"834:74:9"},"nodeType":"YulExpressionStatement","src":"834:74:9"}]},"name":"abi_encode_tuple_t_contract$_IEAS_$346__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"758:9:9","type":""},{"name":"value0","nodeType":"YulTypedName","src":"769:6:9","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"780:4:9","type":""}],"src":"676:238:9"},{"body":{"nodeType":"YulBlock","src":"1020:125:9","statements":[{"nodeType":"YulAssignment","src":"1030:26:9","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1042:9:9"},{"kind":"number","nodeType":"YulLiteral","src":"1053:2:9","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1038:3:9"},"nodeType":"YulFunctionCall","src":"1038:18:9"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1030:4:9"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1072:9:9"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1087:6:9"},{"kind":"number","nodeType":"YulLiteral","src":"1095:42:9","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1083:3:9"},"nodeType":"YulFunctionCall","src":"1083:55:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1065:6:9"},"nodeType":"YulFunctionCall","src":"1065:74:9"},"nodeType":"YulExpressionStatement","src":"1065:74:9"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"989:9:9","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1000:6:9","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1011:4:9","type":""}],"src":"919:226:9"},{"body":{"nodeType":"YulBlock","src":"1199:147:9","statements":[{"nodeType":"YulAssignment","src":"1209:29:9","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1231:6:9"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1218:12:9"},"nodeType":"YulFunctionCall","src":"1218:20:9"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"1209:5:9"}]},{"body":{"nodeType":"YulBlock","src":"1324:16:9","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1333:1:9","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1336:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1326:6:9"},"nodeType":"YulFunctionCall","src":"1326:12:9"},"nodeType":"YulExpressionStatement","src":"1326:12:9"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1260:5:9"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1271:5:9"},{"kind":"number","nodeType":"YulLiteral","src":"1278:42:9","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1267:3:9"},"nodeType":"YulFunctionCall","src":"1267:54:9"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"1257:2:9"},"nodeType":"YulFunctionCall","src":"1257:65:9"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1250:6:9"},"nodeType":"YulFunctionCall","src":"1250:73:9"},"nodeType":"YulIf","src":"1247:93:9"}]},"name":"abi_decode_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"1178:6:9","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"1189:5:9","type":""}],"src":"1150:196:9"},{"body":{"nodeType":"YulBlock","src":"1421:116:9","statements":[{"body":{"nodeType":"YulBlock","src":"1467:16:9","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1476:1:9","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1479:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1469:6:9"},"nodeType":"YulFunctionCall","src":"1469:12:9"},"nodeType":"YulExpressionStatement","src":"1469:12:9"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1442:7:9"},{"name":"headStart","nodeType":"YulIdentifier","src":"1451:9:9"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1438:3:9"},"nodeType":"YulFunctionCall","src":"1438:23:9"},{"kind":"number","nodeType":"YulLiteral","src":"1463:2:9","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1434:3:9"},"nodeType":"YulFunctionCall","src":"1434:32:9"},"nodeType":"YulIf","src":"1431:52:9"},{"nodeType":"YulAssignment","src":"1492:39:9","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1521:9:9"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"1502:18:9"},"nodeType":"YulFunctionCall","src":"1502:29:9"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1492:6:9"}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1387:9:9","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1398:7:9","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1410:6:9","type":""}],"src":"1351:186:9"},{"body":{"nodeType":"YulBlock","src":"1574:152:9","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1591:1:9","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1594:77:9","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1584:6:9"},"nodeType":"YulFunctionCall","src":"1584:88:9"},"nodeType":"YulExpressionStatement","src":"1584:88:9"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1688:1:9","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"1691:4:9","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1681:6:9"},"nodeType":"YulFunctionCall","src":"1681:15:9"},"nodeType":"YulExpressionStatement","src":"1681:15:9"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1712:1:9","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1715:4:9","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1705:6:9"},"nodeType":"YulFunctionCall","src":"1705:15:9"},"nodeType":"YulExpressionStatement","src":"1705:15:9"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"1542:184:9"},{"body":{"nodeType":"YulBlock","src":"1763:152:9","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1780:1:9","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1783:77:9","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1773:6:9"},"nodeType":"YulFunctionCall","src":"1773:88:9"},"nodeType":"YulExpressionStatement","src":"1773:88:9"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1877:1:9","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"1880:4:9","type":"","value":"0x32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1870:6:9"},"nodeType":"YulFunctionCall","src":"1870:15:9"},"nodeType":"YulExpressionStatement","src":"1870:15:9"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1901:1:9","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1904:4:9","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1894:6:9"},"nodeType":"YulFunctionCall","src":"1894:15:9"},"nodeType":"YulExpressionStatement","src":"1894:15:9"}]},"name":"panic_error_0x32","nodeType":"YulFunctionDefinition","src":"1731:184:9"},{"body":{"nodeType":"YulBlock","src":"2037:222:9","statements":[{"nodeType":"YulVariableDeclaration","src":"2047:51:9","value":{"arguments":[{"name":"ptr_to_tail","nodeType":"YulIdentifier","src":"2086:11:9"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2073:12:9"},"nodeType":"YulFunctionCall","src":"2073:25:9"},"variables":[{"name":"rel_offset_of_tail","nodeType":"YulTypedName","src":"2051:18:9","type":""}]},{"body":{"nodeType":"YulBlock","src":"2187:16:9","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2196:1:9","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2199:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2189:6:9"},"nodeType":"YulFunctionCall","src":"2189:12:9"},"nodeType":"YulExpressionStatement","src":"2189:12:9"}]},"condition":{"arguments":[{"arguments":[{"name":"rel_offset_of_tail","nodeType":"YulIdentifier","src":"2121:18:9"},{"arguments":[{"arguments":[{"arguments":[],"functionName":{"name":"calldatasize","nodeType":"YulIdentifier","src":"2149:12:9"},"nodeType":"YulFunctionCall","src":"2149:14:9"},{"name":"base_ref","nodeType":"YulIdentifier","src":"2165:8:9"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2145:3:9"},"nodeType":"YulFunctionCall","src":"2145:29:9"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2180:2:9","type":"","value":"94"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"2176:3:9"},"nodeType":"YulFunctionCall","src":"2176:7:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2141:3:9"},"nodeType":"YulFunctionCall","src":"2141:43:9"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2117:3:9"},"nodeType":"YulFunctionCall","src":"2117:68:9"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2110:6:9"},"nodeType":"YulFunctionCall","src":"2110:76:9"},"nodeType":"YulIf","src":"2107:96:9"},{"nodeType":"YulAssignment","src":"2212:41:9","value":{"arguments":[{"name":"base_ref","nodeType":"YulIdentifier","src":"2224:8:9"},{"name":"rel_offset_of_tail","nodeType":"YulIdentifier","src":"2234:18:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2220:3:9"},"nodeType":"YulFunctionCall","src":"2220:33:9"},"variableNames":[{"name":"addr","nodeType":"YulIdentifier","src":"2212:4:9"}]}]},"name":"access_calldata_tail_t_struct$_AttestationRequestNode_$1144_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"base_ref","nodeType":"YulTypedName","src":"2002:8:9","type":""},{"name":"ptr_to_tail","nodeType":"YulTypedName","src":"2012:11:9","type":""}],"returnVariables":[{"name":"addr","nodeType":"YulTypedName","src":"2028:4:9","type":""}],"src":"1920:339:9"},{"body":{"nodeType":"YulBlock","src":"2381:222:9","statements":[{"nodeType":"YulVariableDeclaration","src":"2391:51:9","value":{"arguments":[{"name":"ptr_to_tail","nodeType":"YulIdentifier","src":"2430:11:9"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2417:12:9"},"nodeType":"YulFunctionCall","src":"2417:25:9"},"variables":[{"name":"rel_offset_of_tail","nodeType":"YulTypedName","src":"2395:18:9","type":""}]},{"body":{"nodeType":"YulBlock","src":"2531:16:9","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2540:1:9","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2543:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2533:6:9"},"nodeType":"YulFunctionCall","src":"2533:12:9"},"nodeType":"YulExpressionStatement","src":"2533:12:9"}]},"condition":{"arguments":[{"arguments":[{"name":"rel_offset_of_tail","nodeType":"YulIdentifier","src":"2465:18:9"},{"arguments":[{"arguments":[{"arguments":[],"functionName":{"name":"calldatasize","nodeType":"YulIdentifier","src":"2493:12:9"},"nodeType":"YulFunctionCall","src":"2493:14:9"},{"name":"base_ref","nodeType":"YulIdentifier","src":"2509:8:9"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2489:3:9"},"nodeType":"YulFunctionCall","src":"2489:29:9"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2524:2:9","type":"","value":"62"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"2520:3:9"},"nodeType":"YulFunctionCall","src":"2520:7:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2485:3:9"},"nodeType":"YulFunctionCall","src":"2485:43:9"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2461:3:9"},"nodeType":"YulFunctionCall","src":"2461:68:9"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2454:6:9"},"nodeType":"YulFunctionCall","src":"2454:76:9"},"nodeType":"YulIf","src":"2451:96:9"},{"nodeType":"YulAssignment","src":"2556:41:9","value":{"arguments":[{"name":"base_ref","nodeType":"YulIdentifier","src":"2568:8:9"},{"name":"rel_offset_of_tail","nodeType":"YulIdentifier","src":"2578:18:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2564:3:9"},"nodeType":"YulFunctionCall","src":"2564:33:9"},"variableNames":[{"name":"addr","nodeType":"YulIdentifier","src":"2556:4:9"}]}]},"name":"access_calldata_tail_t_struct$_MultiAttestationRequest_$105_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"base_ref","nodeType":"YulTypedName","src":"2346:8:9","type":""},{"name":"ptr_to_tail","nodeType":"YulTypedName","src":"2356:11:9","type":""}],"returnVariables":[{"name":"addr","nodeType":"YulTypedName","src":"2372:4:9","type":""}],"src":"2264:339:9"},{"body":{"nodeType":"YulBlock","src":"2654:211:9","statements":[{"nodeType":"YulAssignment","src":"2664:21:9","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2680:4:9","type":"","value":"0x40"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2674:5:9"},"nodeType":"YulFunctionCall","src":"2674:11:9"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"2664:6:9"}]},{"nodeType":"YulVariableDeclaration","src":"2694:35:9","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"2716:6:9"},{"kind":"number","nodeType":"YulLiteral","src":"2724:4:9","type":"","value":"0x40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2712:3:9"},"nodeType":"YulFunctionCall","src":"2712:17:9"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"2698:10:9","type":""}]},{"body":{"nodeType":"YulBlock","src":"2804:22:9","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"2806:16:9"},"nodeType":"YulFunctionCall","src":"2806:18:9"},"nodeType":"YulExpressionStatement","src":"2806:18:9"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"2747:10:9"},{"kind":"number","nodeType":"YulLiteral","src":"2759:18:9","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2744:2:9"},"nodeType":"YulFunctionCall","src":"2744:34:9"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"2783:10:9"},{"name":"memPtr","nodeType":"YulIdentifier","src":"2795:6:9"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2780:2:9"},"nodeType":"YulFunctionCall","src":"2780:22:9"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"2741:2:9"},"nodeType":"YulFunctionCall","src":"2741:62:9"},"nodeType":"YulIf","src":"2738:88:9"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2842:4:9","type":"","value":"0x40"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"2848:10:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2835:6:9"},"nodeType":"YulFunctionCall","src":"2835:24:9"},"nodeType":"YulExpressionStatement","src":"2835:24:9"}]},"name":"allocate_memory_3439","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"2643:6:9","type":""}],"src":"2608:257:9"},{"body":{"nodeType":"YulBlock","src":"2916:207:9","statements":[{"nodeType":"YulAssignment","src":"2926:19:9","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2942:2:9","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2936:5:9"},"nodeType":"YulFunctionCall","src":"2936:9:9"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"2926:6:9"}]},{"nodeType":"YulVariableDeclaration","src":"2954:35:9","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"2976:6:9"},{"kind":"number","nodeType":"YulLiteral","src":"2984:4:9","type":"","value":"0xc0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2972:3:9"},"nodeType":"YulFunctionCall","src":"2972:17:9"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"2958:10:9","type":""}]},{"body":{"nodeType":"YulBlock","src":"3064:22:9","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"3066:16:9"},"nodeType":"YulFunctionCall","src":"3066:18:9"},"nodeType":"YulExpressionStatement","src":"3066:18:9"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"3007:10:9"},{"kind":"number","nodeType":"YulLiteral","src":"3019:18:9","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3004:2:9"},"nodeType":"YulFunctionCall","src":"3004:34:9"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"3043:10:9"},{"name":"memPtr","nodeType":"YulIdentifier","src":"3055:6:9"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"3040:2:9"},"nodeType":"YulFunctionCall","src":"3040:22:9"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"3001:2:9"},"nodeType":"YulFunctionCall","src":"3001:62:9"},"nodeType":"YulIf","src":"2998:88:9"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3102:2:9","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"3106:10:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3095:6:9"},"nodeType":"YulFunctionCall","src":"3095:22:9"},"nodeType":"YulExpressionStatement","src":"3095:22:9"}]},"name":"allocate_memory_3440","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"2905:6:9","type":""}],"src":"2870:253:9"},{"body":{"nodeType":"YulBlock","src":"3173:230:9","statements":[{"nodeType":"YulAssignment","src":"3183:19:9","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3199:2:9","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3193:5:9"},"nodeType":"YulFunctionCall","src":"3193:9:9"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"3183:6:9"}]},{"nodeType":"YulVariableDeclaration","src":"3211:58:9","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"3233:6:9"},{"arguments":[{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"3249:4:9"},{"kind":"number","nodeType":"YulLiteral","src":"3255:2:9","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3245:3:9"},"nodeType":"YulFunctionCall","src":"3245:13:9"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3264:2:9","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"3260:3:9"},"nodeType":"YulFunctionCall","src":"3260:7:9"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3241:3:9"},"nodeType":"YulFunctionCall","src":"3241:27:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3229:3:9"},"nodeType":"YulFunctionCall","src":"3229:40:9"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"3215:10:9","type":""}]},{"body":{"nodeType":"YulBlock","src":"3344:22:9","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"3346:16:9"},"nodeType":"YulFunctionCall","src":"3346:18:9"},"nodeType":"YulExpressionStatement","src":"3346:18:9"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"3287:10:9"},{"kind":"number","nodeType":"YulLiteral","src":"3299:18:9","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3284:2:9"},"nodeType":"YulFunctionCall","src":"3284:34:9"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"3323:10:9"},{"name":"memPtr","nodeType":"YulIdentifier","src":"3335:6:9"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"3320:2:9"},"nodeType":"YulFunctionCall","src":"3320:22:9"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"3281:2:9"},"nodeType":"YulFunctionCall","src":"3281:62:9"},"nodeType":"YulIf","src":"3278:88:9"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3382:2:9","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"3386:10:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3375:6:9"},"nodeType":"YulFunctionCall","src":"3375:22:9"},"nodeType":"YulExpressionStatement","src":"3375:22:9"}]},"name":"allocate_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"size","nodeType":"YulTypedName","src":"3153:4:9","type":""}],"returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"3162:6:9","type":""}],"src":"3128:275:9"},{"body":{"nodeType":"YulBlock","src":"3499:114:9","statements":[{"body":{"nodeType":"YulBlock","src":"3543:22:9","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"3545:16:9"},"nodeType":"YulFunctionCall","src":"3545:18:9"},"nodeType":"YulExpressionStatement","src":"3545:18:9"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"3515:6:9"},{"kind":"number","nodeType":"YulLiteral","src":"3523:18:9","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3512:2:9"},"nodeType":"YulFunctionCall","src":"3512:30:9"},"nodeType":"YulIf","src":"3509:56:9"},{"nodeType":"YulAssignment","src":"3574:33:9","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3590:1:9","type":"","value":"5"},{"name":"length","nodeType":"YulIdentifier","src":"3593:6:9"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"3586:3:9"},"nodeType":"YulFunctionCall","src":"3586:14:9"},{"kind":"number","nodeType":"YulLiteral","src":"3602:4:9","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3582:3:9"},"nodeType":"YulFunctionCall","src":"3582:25:9"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"3574:4:9"}]}]},"name":"array_allocation_size_array_struct_AttestationRequestData_dyn","nodeType":"YulFunctionDefinition","parameters":[{"name":"length","nodeType":"YulTypedName","src":"3479:6:9","type":""}],"returnVariables":[{"name":"size","nodeType":"YulTypedName","src":"3490:4:9","type":""}],"src":"3408:205:9"},{"body":{"nodeType":"YulBlock","src":"3664:114:9","statements":[{"nodeType":"YulAssignment","src":"3674:29:9","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3696:6:9"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3683:12:9"},"nodeType":"YulFunctionCall","src":"3683:20:9"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"3674:5:9"}]},{"body":{"nodeType":"YulBlock","src":"3756:16:9","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3765:1:9","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3768:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3758:6:9"},"nodeType":"YulFunctionCall","src":"3758:12:9"},"nodeType":"YulExpressionStatement","src":"3758:12:9"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3725:5:9"},{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3746:5:9"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3739:6:9"},"nodeType":"YulFunctionCall","src":"3739:13:9"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3732:6:9"},"nodeType":"YulFunctionCall","src":"3732:21:9"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"3722:2:9"},"nodeType":"YulFunctionCall","src":"3722:32:9"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3715:6:9"},"nodeType":"YulFunctionCall","src":"3715:40:9"},"nodeType":"YulIf","src":"3712:60:9"}]},"name":"abi_decode_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"3643:6:9","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"3654:5:9","type":""}],"src":"3618:160:9"},{"body":{"nodeType":"YulBlock","src":"3835:478:9","statements":[{"body":{"nodeType":"YulBlock","src":"3884:16:9","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3893:1:9","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3896:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3886:6:9"},"nodeType":"YulFunctionCall","src":"3886:12:9"},"nodeType":"YulExpressionStatement","src":"3886:12:9"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3863:6:9"},{"kind":"number","nodeType":"YulLiteral","src":"3871:4:9","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3859:3:9"},"nodeType":"YulFunctionCall","src":"3859:17:9"},{"name":"end","nodeType":"YulIdentifier","src":"3878:3:9"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3855:3:9"},"nodeType":"YulFunctionCall","src":"3855:27:9"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3848:6:9"},"nodeType":"YulFunctionCall","src":"3848:35:9"},"nodeType":"YulIf","src":"3845:55:9"},{"nodeType":"YulVariableDeclaration","src":"3909:30:9","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3932:6:9"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3919:12:9"},"nodeType":"YulFunctionCall","src":"3919:20:9"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"3913:2:9","type":""}]},{"body":{"nodeType":"YulBlock","src":"3978:22:9","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"3980:16:9"},"nodeType":"YulFunctionCall","src":"3980:18:9"},"nodeType":"YulExpressionStatement","src":"3980:18:9"}]},"condition":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"3954:2:9"},{"kind":"number","nodeType":"YulLiteral","src":"3958:18:9","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3951:2:9"},"nodeType":"YulFunctionCall","src":"3951:26:9"},"nodeType":"YulIf","src":"3948:52:9"},{"nodeType":"YulVariableDeclaration","src":"4009:70:9","value":{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"4052:2:9"},{"kind":"number","nodeType":"YulLiteral","src":"4056:4:9","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4048:3:9"},"nodeType":"YulFunctionCall","src":"4048:13:9"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4067:2:9","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"4063:3:9"},"nodeType":"YulFunctionCall","src":"4063:7:9"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4044:3:9"},"nodeType":"YulFunctionCall","src":"4044:27:9"},{"kind":"number","nodeType":"YulLiteral","src":"4073:4:9","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4040:3:9"},"nodeType":"YulFunctionCall","src":"4040:38:9"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"4024:15:9"},"nodeType":"YulFunctionCall","src":"4024:55:9"},"variables":[{"name":"array_1","nodeType":"YulTypedName","src":"4013:7:9","type":""}]},{"expression":{"arguments":[{"name":"array_1","nodeType":"YulIdentifier","src":"4095:7:9"},{"name":"_1","nodeType":"YulIdentifier","src":"4104:2:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4088:6:9"},"nodeType":"YulFunctionCall","src":"4088:19:9"},"nodeType":"YulExpressionStatement","src":"4088:19:9"},{"body":{"nodeType":"YulBlock","src":"4155:16:9","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4164:1:9","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4167:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4157:6:9"},"nodeType":"YulFunctionCall","src":"4157:12:9"},"nodeType":"YulExpressionStatement","src":"4157:12:9"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"4130:6:9"},{"name":"_1","nodeType":"YulIdentifier","src":"4138:2:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4126:3:9"},"nodeType":"YulFunctionCall","src":"4126:15:9"},{"kind":"number","nodeType":"YulLiteral","src":"4143:4:9","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4122:3:9"},"nodeType":"YulFunctionCall","src":"4122:26:9"},{"name":"end","nodeType":"YulIdentifier","src":"4150:3:9"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4119:2:9"},"nodeType":"YulFunctionCall","src":"4119:35:9"},"nodeType":"YulIf","src":"4116:55:9"},{"expression":{"arguments":[{"arguments":[{"name":"array_1","nodeType":"YulIdentifier","src":"4197:7:9"},{"kind":"number","nodeType":"YulLiteral","src":"4206:4:9","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4193:3:9"},"nodeType":"YulFunctionCall","src":"4193:18:9"},{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"4217:6:9"},{"kind":"number","nodeType":"YulLiteral","src":"4225:4:9","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4213:3:9"},"nodeType":"YulFunctionCall","src":"4213:17:9"},{"name":"_1","nodeType":"YulIdentifier","src":"4232:2:9"}],"functionName":{"name":"calldatacopy","nodeType":"YulIdentifier","src":"4180:12:9"},"nodeType":"YulFunctionCall","src":"4180:55:9"},"nodeType":"YulExpressionStatement","src":"4180:55:9"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"array_1","nodeType":"YulIdentifier","src":"4259:7:9"},{"name":"_1","nodeType":"YulIdentifier","src":"4268:2:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4255:3:9"},"nodeType":"YulFunctionCall","src":"4255:16:9"},{"kind":"number","nodeType":"YulLiteral","src":"4273:4:9","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4251:3:9"},"nodeType":"YulFunctionCall","src":"4251:27:9"},{"kind":"number","nodeType":"YulLiteral","src":"4280:1:9","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4244:6:9"},"nodeType":"YulFunctionCall","src":"4244:38:9"},"nodeType":"YulExpressionStatement","src":"4244:38:9"},{"nodeType":"YulAssignment","src":"4291:16:9","value":{"name":"array_1","nodeType":"YulIdentifier","src":"4300:7:9"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"4291:5:9"}]}]},"name":"abi_decode_bytes","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"3809:6:9","type":""},{"name":"end","nodeType":"YulTypedName","src":"3817:3:9","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"3825:5:9","type":""}],"src":"3783:530:9"},{"body":{"nodeType":"YulBlock","src":"4464:2305:9","statements":[{"nodeType":"YulVariableDeclaration","src":"4474:14:9","value":{"kind":"number","nodeType":"YulLiteral","src":"4484:4:9","type":"","value":"0x40"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"4478:2:9","type":""}]},{"body":{"nodeType":"YulBlock","src":"4536:16:9","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4545:1:9","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4548:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4538:6:9"},"nodeType":"YulFunctionCall","src":"4538:12:9"},"nodeType":"YulExpressionStatement","src":"4538:12:9"}]},"condition":{"arguments":[{"arguments":[{"arguments":[],"functionName":{"name":"calldatasize","nodeType":"YulIdentifier","src":"4508:12:9"},"nodeType":"YulFunctionCall","src":"4508:14:9"},{"name":"value","nodeType":"YulIdentifier","src":"4524:5:9"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4504:3:9"},"nodeType":"YulFunctionCall","src":"4504:26:9"},{"name":"_1","nodeType":"YulIdentifier","src":"4532:2:9"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4500:3:9"},"nodeType":"YulFunctionCall","src":"4500:35:9"},"nodeType":"YulIf","src":"4497:55:9"},{"nodeType":"YulVariableDeclaration","src":"4561:37:9","value":{"arguments":[],"functionName":{"name":"allocate_memory_3439","nodeType":"YulIdentifier","src":"4576:20:9"},"nodeType":"YulFunctionCall","src":"4576:22:9"},"variables":[{"name":"value_1","nodeType":"YulTypedName","src":"4565:7:9","type":""}]},{"expression":{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"4614:7:9"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4636:5:9"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4623:12:9"},"nodeType":"YulFunctionCall","src":"4623:19:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4607:6:9"},"nodeType":"YulFunctionCall","src":"4607:36:9"},"nodeType":"YulExpressionStatement","src":"4607:36:9"},{"nodeType":"YulVariableDeclaration","src":"4652:12:9","value":{"kind":"number","nodeType":"YulLiteral","src":"4662:2:9","type":"","value":"32"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"4656:2:9","type":""}]},{"nodeType":"YulVariableDeclaration","src":"4673:42:9","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4704:5:9"},{"name":"_2","nodeType":"YulIdentifier","src":"4711:2:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4700:3:9"},"nodeType":"YulFunctionCall","src":"4700:14:9"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4687:12:9"},"nodeType":"YulFunctionCall","src":"4687:28:9"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"4677:6:9","type":""}]},{"nodeType":"YulVariableDeclaration","src":"4724:28:9","value":{"kind":"number","nodeType":"YulLiteral","src":"4734:18:9","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_3","nodeType":"YulTypedName","src":"4728:2:9","type":""}]},{"body":{"nodeType":"YulBlock","src":"4779:16:9","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4788:1:9","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4791:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4781:6:9"},"nodeType":"YulFunctionCall","src":"4781:12:9"},"nodeType":"YulExpressionStatement","src":"4781:12:9"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"4767:6:9"},{"name":"_3","nodeType":"YulIdentifier","src":"4775:2:9"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4764:2:9"},"nodeType":"YulFunctionCall","src":"4764:14:9"},"nodeType":"YulIf","src":"4761:34:9"},{"nodeType":"YulVariableDeclaration","src":"4804:28:9","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4818:5:9"},{"name":"offset","nodeType":"YulIdentifier","src":"4825:6:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4814:3:9"},"nodeType":"YulFunctionCall","src":"4814:18:9"},"variables":[{"name":"_4","nodeType":"YulTypedName","src":"4808:2:9","type":""}]},{"body":{"nodeType":"YulBlock","src":"4887:16:9","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4896:1:9","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4899:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4889:6:9"},"nodeType":"YulFunctionCall","src":"4889:12:9"},"nodeType":"YulExpressionStatement","src":"4889:12:9"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_4","nodeType":"YulIdentifier","src":"4859:2:9"},{"kind":"number","nodeType":"YulLiteral","src":"4863:4:9","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4855:3:9"},"nodeType":"YulFunctionCall","src":"4855:13:9"},{"arguments":[],"functionName":{"name":"calldatasize","nodeType":"YulIdentifier","src":"4870:12:9"},"nodeType":"YulFunctionCall","src":"4870:14:9"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4851:3:9"},"nodeType":"YulFunctionCall","src":"4851:34:9"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"4844:6:9"},"nodeType":"YulFunctionCall","src":"4844:42:9"},"nodeType":"YulIf","src":"4841:62:9"},{"nodeType":"YulVariableDeclaration","src":"4912:26:9","value":{"arguments":[{"name":"_4","nodeType":"YulIdentifier","src":"4935:2:9"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4922:12:9"},"nodeType":"YulFunctionCall","src":"4922:16:9"},"variables":[{"name":"_5","nodeType":"YulTypedName","src":"4916:2:9","type":""}]},{"nodeType":"YulVariableDeclaration","src":"4947:93:9","value":{"arguments":[{"arguments":[{"name":"_5","nodeType":"YulIdentifier","src":"5036:2:9"}],"functionName":{"name":"array_allocation_size_array_struct_AttestationRequestData_dyn","nodeType":"YulIdentifier","src":"4974:61:9"},"nodeType":"YulFunctionCall","src":"4974:65:9"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"4958:15:9"},"nodeType":"YulFunctionCall","src":"4958:82:9"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"4951:3:9","type":""}]},{"nodeType":"YulVariableDeclaration","src":"5049:16:9","value":{"name":"dst","nodeType":"YulIdentifier","src":"5062:3:9"},"variables":[{"name":"dst_1","nodeType":"YulTypedName","src":"5053:5:9","type":""}]},{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"5081:3:9"},{"name":"_5","nodeType":"YulIdentifier","src":"5086:2:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5074:6:9"},"nodeType":"YulFunctionCall","src":"5074:15:9"},"nodeType":"YulExpressionStatement","src":"5074:15:9"},{"nodeType":"YulAssignment","src":"5098:19:9","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"5109:3:9"},{"name":"_2","nodeType":"YulIdentifier","src":"5114:2:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5105:3:9"},"nodeType":"YulFunctionCall","src":"5105:12:9"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"5098:3:9"}]},{"nodeType":"YulVariableDeclaration","src":"5126:42:9","value":{"arguments":[{"arguments":[{"name":"_4","nodeType":"YulIdentifier","src":"5148:2:9"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5156:1:9","type":"","value":"5"},{"name":"_5","nodeType":"YulIdentifier","src":"5159:2:9"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"5152:3:9"},"nodeType":"YulFunctionCall","src":"5152:10:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5144:3:9"},"nodeType":"YulFunctionCall","src":"5144:19:9"},{"name":"_2","nodeType":"YulIdentifier","src":"5165:2:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5140:3:9"},"nodeType":"YulFunctionCall","src":"5140:28:9"},"variables":[{"name":"srcEnd","nodeType":"YulTypedName","src":"5130:6:9","type":""}]},{"body":{"nodeType":"YulBlock","src":"5207:16:9","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5216:1:9","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5219:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5209:6:9"},"nodeType":"YulFunctionCall","src":"5209:12:9"},"nodeType":"YulExpressionStatement","src":"5209:12:9"}]},"condition":{"arguments":[{"name":"srcEnd","nodeType":"YulIdentifier","src":"5183:6:9"},{"arguments":[],"functionName":{"name":"calldatasize","nodeType":"YulIdentifier","src":"5191:12:9"},"nodeType":"YulFunctionCall","src":"5191:14:9"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5180:2:9"},"nodeType":"YulFunctionCall","src":"5180:26:9"},"nodeType":"YulIf","src":"5177:46:9"},{"nodeType":"YulVariableDeclaration","src":"5232:22:9","value":{"arguments":[{"name":"_4","nodeType":"YulIdentifier","src":"5247:2:9"},{"name":"_2","nodeType":"YulIdentifier","src":"5251:2:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5243:3:9"},"nodeType":"YulFunctionCall","src":"5243:11:9"},"variables":[{"name":"src","nodeType":"YulTypedName","src":"5236:3:9","type":""}]},{"body":{"nodeType":"YulBlock","src":"5319:1375:9","statements":[{"nodeType":"YulVariableDeclaration","src":"5333:36:9","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"5365:3:9"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5352:12:9"},"nodeType":"YulFunctionCall","src":"5352:17:9"},"variables":[{"name":"innerOffset","nodeType":"YulTypedName","src":"5337:11:9","type":""}]},{"body":{"nodeType":"YulBlock","src":"5417:74:9","statements":[{"nodeType":"YulVariableDeclaration","src":"5435:11:9","value":{"kind":"number","nodeType":"YulLiteral","src":"5445:1:9","type":"","value":"0"},"variables":[{"name":"_6","nodeType":"YulTypedName","src":"5439:2:9","type":""}]},{"expression":{"arguments":[{"name":"_6","nodeType":"YulIdentifier","src":"5470:2:9"},{"name":"_6","nodeType":"YulIdentifier","src":"5474:2:9"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5463:6:9"},"nodeType":"YulFunctionCall","src":"5463:14:9"},"nodeType":"YulExpressionStatement","src":"5463:14:9"}]},"condition":{"arguments":[{"name":"innerOffset","nodeType":"YulIdentifier","src":"5388:11:9"},{"name":"_3","nodeType":"YulIdentifier","src":"5401:2:9"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5385:2:9"},"nodeType":"YulFunctionCall","src":"5385:19:9"},"nodeType":"YulIf","src":"5382:109:9"},{"nodeType":"YulVariableDeclaration","src":"5504:30:9","value":{"arguments":[{"name":"_4","nodeType":"YulIdentifier","src":"5518:2:9"},{"name":"innerOffset","nodeType":"YulIdentifier","src":"5522:11:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5514:3:9"},"nodeType":"YulFunctionCall","src":"5514:20:9"},"variables":[{"name":"_7","nodeType":"YulTypedName","src":"5508:2:9","type":""}]},{"nodeType":"YulVariableDeclaration","src":"5547:14:9","value":{"kind":"number","nodeType":"YulLiteral","src":"5557:4:9","type":"","value":"0xc0"},"variables":[{"name":"_8","nodeType":"YulTypedName","src":"5551:2:9","type":""}]},{"body":{"nodeType":"YulBlock","src":"5636:74:9","statements":[{"nodeType":"YulVariableDeclaration","src":"5654:11:9","value":{"kind":"number","nodeType":"YulLiteral","src":"5664:1:9","type":"","value":"0"},"variables":[{"name":"_9","nodeType":"YulTypedName","src":"5658:2:9","type":""}]},{"expression":{"arguments":[{"name":"_9","nodeType":"YulIdentifier","src":"5689:2:9"},{"name":"_9","nodeType":"YulIdentifier","src":"5693:2:9"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5682:6:9"},"nodeType":"YulFunctionCall","src":"5682:14:9"},"nodeType":"YulExpressionStatement","src":"5682:14:9"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"arguments":[],"functionName":{"name":"calldatasize","nodeType":"YulIdentifier","src":"5589:12:9"},"nodeType":"YulFunctionCall","src":"5589:14:9"},{"name":"_7","nodeType":"YulIdentifier","src":"5605:2:9"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5585:3:9"},"nodeType":"YulFunctionCall","src":"5585:23:9"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5614:2:9","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"5610:3:9"},"nodeType":"YulFunctionCall","src":"5610:7:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5581:3:9"},"nodeType":"YulFunctionCall","src":"5581:37:9"},{"name":"_8","nodeType":"YulIdentifier","src":"5620:2:9"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"5577:3:9"},"nodeType":"YulFunctionCall","src":"5577:46:9"},"nodeType":"YulIf","src":"5574:136:9"},{"nodeType":"YulVariableDeclaration","src":"5723:37:9","value":{"arguments":[],"functionName":{"name":"allocate_memory_3440","nodeType":"YulIdentifier","src":"5738:20:9"},"nodeType":"YulFunctionCall","src":"5738:22:9"},"variables":[{"name":"value_2","nodeType":"YulTypedName","src":"5727:7:9","type":""}]},{"expression":{"arguments":[{"name":"value_2","nodeType":"YulIdentifier","src":"5780:7:9"},{"arguments":[{"arguments":[{"name":"_7","nodeType":"YulIdentifier","src":"5812:2:9"},{"name":"_2","nodeType":"YulIdentifier","src":"5816:2:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5808:3:9"},"nodeType":"YulFunctionCall","src":"5808:11:9"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"5789:18:9"},"nodeType":"YulFunctionCall","src":"5789:31:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5773:6:9"},"nodeType":"YulFunctionCall","src":"5773:48:9"},"nodeType":"YulExpressionStatement","src":"5773:48:9"},{"nodeType":"YulVariableDeclaration","src":"5834:40:9","value":{"arguments":[{"arguments":[{"name":"_7","nodeType":"YulIdentifier","src":"5866:2:9"},{"name":"_1","nodeType":"YulIdentifier","src":"5870:2:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5862:3:9"},"nodeType":"YulFunctionCall","src":"5862:11:9"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5849:12:9"},"nodeType":"YulFunctionCall","src":"5849:25:9"},"variables":[{"name":"value_3","nodeType":"YulTypedName","src":"5838:7:9","type":""}]},{"body":{"nodeType":"YulBlock","src":"5940:77:9","statements":[{"nodeType":"YulVariableDeclaration","src":"5958:12:9","value":{"kind":"number","nodeType":"YulLiteral","src":"5969:1:9","type":"","value":"0"},"variables":[{"name":"_10","nodeType":"YulTypedName","src":"5962:3:9","type":""}]},{"expression":{"arguments":[{"name":"_10","nodeType":"YulIdentifier","src":"5994:3:9"},{"name":"_10","nodeType":"YulIdentifier","src":"5999:3:9"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5987:6:9"},"nodeType":"YulFunctionCall","src":"5987:16:9"},"nodeType":"YulExpressionStatement","src":"5987:16:9"}]},"condition":{"arguments":[{"arguments":[{"name":"value_3","nodeType":"YulIdentifier","src":"5900:7:9"},{"arguments":[{"name":"value_3","nodeType":"YulIdentifier","src":"5913:7:9"},{"name":"_3","nodeType":"YulIdentifier","src":"5922:2:9"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"5909:3:9"},"nodeType":"YulFunctionCall","src":"5909:16:9"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"5897:2:9"},"nodeType":"YulFunctionCall","src":"5897:29:9"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"5890:6:9"},"nodeType":"YulFunctionCall","src":"5890:37:9"},"nodeType":"YulIf","src":"5887:130:9"},{"expression":{"arguments":[{"arguments":[{"name":"value_2","nodeType":"YulIdentifier","src":"6041:7:9"},{"name":"_2","nodeType":"YulIdentifier","src":"6050:2:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6037:3:9"},"nodeType":"YulFunctionCall","src":"6037:16:9"},{"name":"value_3","nodeType":"YulIdentifier","src":"6055:7:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6030:6:9"},"nodeType":"YulFunctionCall","src":"6030:33:9"},"nodeType":"YulExpressionStatement","src":"6030:33:9"},{"nodeType":"YulVariableDeclaration","src":"6076:13:9","value":{"kind":"number","nodeType":"YulLiteral","src":"6087:2:9","type":"","value":"96"},"variables":[{"name":"_11","nodeType":"YulTypedName","src":"6080:3:9","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value_2","nodeType":"YulIdentifier","src":"6113:7:9"},{"name":"_1","nodeType":"YulIdentifier","src":"6122:2:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6109:3:9"},"nodeType":"YulFunctionCall","src":"6109:16:9"},{"arguments":[{"arguments":[{"name":"_7","nodeType":"YulIdentifier","src":"6147:2:9"},{"name":"_11","nodeType":"YulIdentifier","src":"6151:3:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6143:3:9"},"nodeType":"YulFunctionCall","src":"6143:12:9"}],"functionName":{"name":"abi_decode_bool","nodeType":"YulIdentifier","src":"6127:15:9"},"nodeType":"YulFunctionCall","src":"6127:29:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6102:6:9"},"nodeType":"YulFunctionCall","src":"6102:55:9"},"nodeType":"YulExpressionStatement","src":"6102:55:9"},{"nodeType":"YulVariableDeclaration","src":"6170:14:9","value":{"kind":"number","nodeType":"YulLiteral","src":"6181:3:9","type":"","value":"128"},"variables":[{"name":"_12","nodeType":"YulTypedName","src":"6174:3:9","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value_2","nodeType":"YulIdentifier","src":"6208:7:9"},{"name":"_11","nodeType":"YulIdentifier","src":"6217:3:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6204:3:9"},"nodeType":"YulFunctionCall","src":"6204:17:9"},{"arguments":[{"arguments":[{"name":"_7","nodeType":"YulIdentifier","src":"6240:2:9"},{"name":"_12","nodeType":"YulIdentifier","src":"6244:3:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6236:3:9"},"nodeType":"YulFunctionCall","src":"6236:12:9"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"6223:12:9"},"nodeType":"YulFunctionCall","src":"6223:26:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6197:6:9"},"nodeType":"YulFunctionCall","src":"6197:53:9"},"nodeType":"YulExpressionStatement","src":"6197:53:9"},{"nodeType":"YulVariableDeclaration","src":"6263:14:9","value":{"kind":"number","nodeType":"YulLiteral","src":"6274:3:9","type":"","value":"160"},"variables":[{"name":"_13","nodeType":"YulTypedName","src":"6267:3:9","type":""}]},{"nodeType":"YulVariableDeclaration","src":"6290:42:9","value":{"arguments":[{"arguments":[{"name":"_7","nodeType":"YulIdentifier","src":"6323:2:9"},{"name":"_13","nodeType":"YulIdentifier","src":"6327:3:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6319:3:9"},"nodeType":"YulFunctionCall","src":"6319:12:9"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"6306:12:9"},"nodeType":"YulFunctionCall","src":"6306:26:9"},"variables":[{"name":"offset_1","nodeType":"YulTypedName","src":"6294:8:9","type":""}]},{"body":{"nodeType":"YulBlock","src":"6377:77:9","statements":[{"nodeType":"YulVariableDeclaration","src":"6395:12:9","value":{"kind":"number","nodeType":"YulLiteral","src":"6406:1:9","type":"","value":"0"},"variables":[{"name":"_14","nodeType":"YulTypedName","src":"6399:3:9","type":""}]},{"expression":{"arguments":[{"name":"_14","nodeType":"YulIdentifier","src":"6431:3:9"},{"name":"_14","nodeType":"YulIdentifier","src":"6436:3:9"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6424:6:9"},"nodeType":"YulFunctionCall","src":"6424:16:9"},"nodeType":"YulExpressionStatement","src":"6424:16:9"}]},"condition":{"arguments":[{"name":"offset_1","nodeType":"YulIdentifier","src":"6351:8:9"},{"name":"_3","nodeType":"YulIdentifier","src":"6361:2:9"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"6348:2:9"},"nodeType":"YulFunctionCall","src":"6348:16:9"},"nodeType":"YulIf","src":"6345:109:9"},{"expression":{"arguments":[{"arguments":[{"name":"value_2","nodeType":"YulIdentifier","src":"6478:7:9"},{"name":"_12","nodeType":"YulIdentifier","src":"6487:3:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6474:3:9"},"nodeType":"YulFunctionCall","src":"6474:17:9"},{"arguments":[{"arguments":[{"arguments":[{"name":"_7","nodeType":"YulIdentifier","src":"6518:2:9"},{"name":"offset_1","nodeType":"YulIdentifier","src":"6522:8:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6514:3:9"},"nodeType":"YulFunctionCall","src":"6514:17:9"},{"name":"_2","nodeType":"YulIdentifier","src":"6533:2:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6510:3:9"},"nodeType":"YulFunctionCall","src":"6510:26:9"},{"arguments":[],"functionName":{"name":"calldatasize","nodeType":"YulIdentifier","src":"6538:12:9"},"nodeType":"YulFunctionCall","src":"6538:14:9"}],"functionName":{"name":"abi_decode_bytes","nodeType":"YulIdentifier","src":"6493:16:9"},"nodeType":"YulFunctionCall","src":"6493:60:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6467:6:9"},"nodeType":"YulFunctionCall","src":"6467:87:9"},"nodeType":"YulExpressionStatement","src":"6467:87:9"},{"expression":{"arguments":[{"arguments":[{"name":"value_2","nodeType":"YulIdentifier","src":"6578:7:9"},{"name":"_13","nodeType":"YulIdentifier","src":"6587:3:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6574:3:9"},"nodeType":"YulFunctionCall","src":"6574:17:9"},{"arguments":[{"arguments":[{"name":"_7","nodeType":"YulIdentifier","src":"6610:2:9"},{"name":"_8","nodeType":"YulIdentifier","src":"6614:2:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6606:3:9"},"nodeType":"YulFunctionCall","src":"6606:11:9"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"6593:12:9"},"nodeType":"YulFunctionCall","src":"6593:25:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6567:6:9"},"nodeType":"YulFunctionCall","src":"6567:52:9"},"nodeType":"YulExpressionStatement","src":"6567:52:9"},{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"6639:3:9"},{"name":"value_2","nodeType":"YulIdentifier","src":"6644:7:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6632:6:9"},"nodeType":"YulFunctionCall","src":"6632:20:9"},"nodeType":"YulExpressionStatement","src":"6632:20:9"},{"nodeType":"YulAssignment","src":"6665:19:9","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"6676:3:9"},{"name":"_2","nodeType":"YulIdentifier","src":"6681:2:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6672:3:9"},"nodeType":"YulFunctionCall","src":"6672:12:9"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"6665:3:9"}]}]},"condition":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"5274:3:9"},{"name":"srcEnd","nodeType":"YulIdentifier","src":"5279:6:9"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"5271:2:9"},"nodeType":"YulFunctionCall","src":"5271:15:9"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"5287:23:9","statements":[{"nodeType":"YulAssignment","src":"5289:19:9","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"5300:3:9"},{"name":"_2","nodeType":"YulIdentifier","src":"5305:2:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5296:3:9"},"nodeType":"YulFunctionCall","src":"5296:12:9"},"variableNames":[{"name":"src","nodeType":"YulIdentifier","src":"5289:3:9"}]}]},"pre":{"nodeType":"YulBlock","src":"5267:3:9","statements":[]},"src":"5263:1431:9"},{"expression":{"arguments":[{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"6714:7:9"},{"name":"_2","nodeType":"YulIdentifier","src":"6723:2:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6710:3:9"},"nodeType":"YulFunctionCall","src":"6710:16:9"},{"name":"dst_1","nodeType":"YulIdentifier","src":"6728:5:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6703:6:9"},"nodeType":"YulFunctionCall","src":"6703:31:9"},"nodeType":"YulExpressionStatement","src":"6703:31:9"},{"nodeType":"YulAssignment","src":"6743:20:9","value":{"name":"value_1","nodeType":"YulIdentifier","src":"6756:7:9"},"variableNames":[{"name":"converted","nodeType":"YulIdentifier","src":"6743:9:9"}]}]},"name":"convert_t_struct$_MultiAttestationRequest_$105_calldata_ptr_to_t_struct$_MultiAttestationRequest_$105_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"4440:5:9","type":""}],"returnVariables":[{"name":"converted","nodeType":"YulTypedName","src":"4450:9:9","type":""}],"src":"4318:2451:9"},{"body":{"nodeType":"YulBlock","src":"6821:242:9","statements":[{"body":{"nodeType":"YulBlock","src":"6860:168:9","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6881:1:9","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6884:77:9","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6874:6:9"},"nodeType":"YulFunctionCall","src":"6874:88:9"},"nodeType":"YulExpressionStatement","src":"6874:88:9"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6982:1:9","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"6985:4:9","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6975:6:9"},"nodeType":"YulFunctionCall","src":"6975:15:9"},"nodeType":"YulExpressionStatement","src":"6975:15:9"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7010:1:9","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7013:4:9","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7003:6:9"},"nodeType":"YulFunctionCall","src":"7003:15:9"},"nodeType":"YulExpressionStatement","src":"7003:15:9"}]},"condition":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6837:5:9"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6848:1:9","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"6844:3:9"},"nodeType":"YulFunctionCall","src":"6844:6:9"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"6834:2:9"},"nodeType":"YulFunctionCall","src":"6834:17:9"},"nodeType":"YulIf","src":"6831:197:9"},{"nodeType":"YulAssignment","src":"7037:20:9","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7048:5:9"},{"kind":"number","nodeType":"YulLiteral","src":"7055:1:9","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7044:3:9"},"nodeType":"YulFunctionCall","src":"7044:13:9"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"7037:3:9"}]}]},"name":"increment_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"6803:5:9","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"6813:3:9","type":""}],"src":"6774:289:9"},{"body":{"nodeType":"YulBlock","src":"7299:2359:9","statements":[{"nodeType":"YulVariableDeclaration","src":"7309:12:9","value":{"kind":"number","nodeType":"YulLiteral","src":"7319:2:9","type":"","value":"32"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"7313:2:9","type":""}]},{"nodeType":"YulVariableDeclaration","src":"7330:32:9","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7348:9:9"},{"name":"_1","nodeType":"YulIdentifier","src":"7359:2:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7344:3:9"},"nodeType":"YulFunctionCall","src":"7344:18:9"},"variables":[{"name":"tail_1","nodeType":"YulTypedName","src":"7334:6:9","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7378:9:9"},{"name":"_1","nodeType":"YulIdentifier","src":"7389:2:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7371:6:9"},"nodeType":"YulFunctionCall","src":"7371:21:9"},"nodeType":"YulExpressionStatement","src":"7371:21:9"},{"nodeType":"YulVariableDeclaration","src":"7401:17:9","value":{"name":"tail_1","nodeType":"YulIdentifier","src":"7412:6:9"},"variables":[{"name":"pos","nodeType":"YulTypedName","src":"7405:3:9","type":""}]},{"nodeType":"YulVariableDeclaration","src":"7427:27:9","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"7447:6:9"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"7441:5:9"},"nodeType":"YulFunctionCall","src":"7441:13:9"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"7431:6:9","type":""}]},{"expression":{"arguments":[{"name":"tail_1","nodeType":"YulIdentifier","src":"7470:6:9"},{"name":"length","nodeType":"YulIdentifier","src":"7478:6:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7463:6:9"},"nodeType":"YulFunctionCall","src":"7463:22:9"},"nodeType":"YulExpressionStatement","src":"7463:22:9"},{"nodeType":"YulVariableDeclaration","src":"7494:12:9","value":{"kind":"number","nodeType":"YulLiteral","src":"7504:2:9","type":"","value":"64"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"7498:2:9","type":""}]},{"nodeType":"YulAssignment","src":"7515:25:9","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7526:9:9"},{"name":"_2","nodeType":"YulIdentifier","src":"7537:2:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7522:3:9"},"nodeType":"YulFunctionCall","src":"7522:18:9"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"7515:3:9"}]},{"nodeType":"YulVariableDeclaration","src":"7549:53:9","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7571:9:9"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7586:1:9","type":"","value":"5"},{"name":"length","nodeType":"YulIdentifier","src":"7589:6:9"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"7582:3:9"},"nodeType":"YulFunctionCall","src":"7582:14:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7567:3:9"},"nodeType":"YulFunctionCall","src":"7567:30:9"},{"name":"_2","nodeType":"YulIdentifier","src":"7599:2:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7563:3:9"},"nodeType":"YulFunctionCall","src":"7563:39:9"},"variables":[{"name":"tail_2","nodeType":"YulTypedName","src":"7553:6:9","type":""}]},{"nodeType":"YulVariableDeclaration","src":"7611:29:9","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"7629:6:9"},{"name":"_1","nodeType":"YulIdentifier","src":"7637:2:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7625:3:9"},"nodeType":"YulFunctionCall","src":"7625:15:9"},"variables":[{"name":"srcPtr","nodeType":"YulTypedName","src":"7615:6:9","type":""}]},{"nodeType":"YulVariableDeclaration","src":"7649:10:9","value":{"kind":"number","nodeType":"YulLiteral","src":"7658:1:9","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"7653:1:9","type":""}]},{"body":{"nodeType":"YulBlock","src":"7717:1912:9","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7738:3:9"},{"arguments":[{"arguments":[{"name":"tail_2","nodeType":"YulIdentifier","src":"7751:6:9"},{"name":"headStart","nodeType":"YulIdentifier","src":"7759:9:9"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"7747:3:9"},"nodeType":"YulFunctionCall","src":"7747:22:9"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7775:2:9","type":"","value":"63"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"7771:3:9"},"nodeType":"YulFunctionCall","src":"7771:7:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7743:3:9"},"nodeType":"YulFunctionCall","src":"7743:36:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7731:6:9"},"nodeType":"YulFunctionCall","src":"7731:49:9"},"nodeType":"YulExpressionStatement","src":"7731:49:9"},{"nodeType":"YulVariableDeclaration","src":"7793:23:9","value":{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"7809:6:9"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"7803:5:9"},"nodeType":"YulFunctionCall","src":"7803:13:9"},"variables":[{"name":"_3","nodeType":"YulTypedName","src":"7797:2:9","type":""}]},{"nodeType":"YulVariableDeclaration","src":"7829:29:9","value":{"arguments":[{"name":"tail_2","nodeType":"YulIdentifier","src":"7847:6:9"},{"name":"_2","nodeType":"YulIdentifier","src":"7855:2:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7843:3:9"},"nodeType":"YulFunctionCall","src":"7843:15:9"},"variables":[{"name":"tail_3","nodeType":"YulTypedName","src":"7833:6:9","type":""}]},{"expression":{"arguments":[{"name":"tail_2","nodeType":"YulIdentifier","src":"7878:6:9"},{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"7892:2:9"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"7886:5:9"},"nodeType":"YulFunctionCall","src":"7886:9:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7871:6:9"},"nodeType":"YulFunctionCall","src":"7871:25:9"},"nodeType":"YulExpressionStatement","src":"7871:25:9"},{"nodeType":"YulVariableDeclaration","src":"7909:38:9","value":{"arguments":[{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"7939:2:9"},{"name":"_1","nodeType":"YulIdentifier","src":"7943:2:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7935:3:9"},"nodeType":"YulFunctionCall","src":"7935:11:9"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"7929:5:9"},"nodeType":"YulFunctionCall","src":"7929:18:9"},"variables":[{"name":"memberValue0","nodeType":"YulTypedName","src":"7913:12:9","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"tail_2","nodeType":"YulIdentifier","src":"7971:6:9"},{"name":"_1","nodeType":"YulIdentifier","src":"7979:2:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7967:3:9"},"nodeType":"YulFunctionCall","src":"7967:15:9"},{"name":"_2","nodeType":"YulIdentifier","src":"7984:2:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7960:6:9"},"nodeType":"YulFunctionCall","src":"7960:27:9"},"nodeType":"YulExpressionStatement","src":"7960:27:9"},{"nodeType":"YulVariableDeclaration","src":"8000:19:9","value":{"name":"tail_3","nodeType":"YulIdentifier","src":"8013:6:9"},"variables":[{"name":"pos_1","nodeType":"YulTypedName","src":"8004:5:9","type":""}]},{"nodeType":"YulVariableDeclaration","src":"8032:35:9","value":{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"8054:12:9"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"8048:5:9"},"nodeType":"YulFunctionCall","src":"8048:19:9"},"variables":[{"name":"length_1","nodeType":"YulTypedName","src":"8036:8:9","type":""}]},{"expression":{"arguments":[{"name":"tail_3","nodeType":"YulIdentifier","src":"8087:6:9"},{"name":"length_1","nodeType":"YulIdentifier","src":"8095:8:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8080:6:9"},"nodeType":"YulFunctionCall","src":"8080:24:9"},"nodeType":"YulExpressionStatement","src":"8080:24:9"},{"nodeType":"YulAssignment","src":"8117:24:9","value":{"arguments":[{"name":"tail_2","nodeType":"YulIdentifier","src":"8130:6:9"},{"kind":"number","nodeType":"YulLiteral","src":"8138:2:9","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8126:3:9"},"nodeType":"YulFunctionCall","src":"8126:15:9"},"variableNames":[{"name":"pos_1","nodeType":"YulIdentifier","src":"8117:5:9"}]},{"nodeType":"YulVariableDeclaration","src":"8154:52:9","value":{"arguments":[{"arguments":[{"name":"tail_2","nodeType":"YulIdentifier","src":"8176:6:9"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8188:1:9","type":"","value":"5"},{"name":"length_1","nodeType":"YulIdentifier","src":"8191:8:9"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"8184:3:9"},"nodeType":"YulFunctionCall","src":"8184:16:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8172:3:9"},"nodeType":"YulFunctionCall","src":"8172:29:9"},{"kind":"number","nodeType":"YulLiteral","src":"8203:2:9","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8168:3:9"},"nodeType":"YulFunctionCall","src":"8168:38:9"},"variables":[{"name":"tail_4","nodeType":"YulTypedName","src":"8158:6:9","type":""}]},{"nodeType":"YulVariableDeclaration","src":"8219:37:9","value":{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"8239:12:9"},{"name":"_1","nodeType":"YulIdentifier","src":"8253:2:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8235:3:9"},"nodeType":"YulFunctionCall","src":"8235:21:9"},"variables":[{"name":"srcPtr_1","nodeType":"YulTypedName","src":"8223:8:9","type":""}]},{"nodeType":"YulVariableDeclaration","src":"8269:12:9","value":{"kind":"number","nodeType":"YulLiteral","src":"8280:1:9","type":"","value":"0"},"variables":[{"name":"i_1","nodeType":"YulTypedName","src":"8273:3:9","type":""}]},{"body":{"nodeType":"YulBlock","src":"8355:1165:9","statements":[{"expression":{"arguments":[{"name":"pos_1","nodeType":"YulIdentifier","src":"8380:5:9"},{"arguments":[{"arguments":[{"name":"tail_4","nodeType":"YulIdentifier","src":"8395:6:9"},{"name":"tail_2","nodeType":"YulIdentifier","src":"8403:6:9"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"8391:3:9"},"nodeType":"YulFunctionCall","src":"8391:19:9"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8416:2:9","type":"","value":"95"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"8412:3:9"},"nodeType":"YulFunctionCall","src":"8412:7:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8387:3:9"},"nodeType":"YulFunctionCall","src":"8387:33:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8373:6:9"},"nodeType":"YulFunctionCall","src":"8373:48:9"},"nodeType":"YulExpressionStatement","src":"8373:48:9"},{"nodeType":"YulVariableDeclaration","src":"8438:25:9","value":{"arguments":[{"name":"srcPtr_1","nodeType":"YulIdentifier","src":"8454:8:9"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"8448:5:9"},"nodeType":"YulFunctionCall","src":"8448:15:9"},"variables":[{"name":"_4","nodeType":"YulTypedName","src":"8442:2:9","type":""}]},{"expression":{"arguments":[{"name":"tail_4","nodeType":"YulIdentifier","src":"8487:6:9"},{"arguments":[{"arguments":[{"name":"_4","nodeType":"YulIdentifier","src":"8505:2:9"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"8499:5:9"},"nodeType":"YulFunctionCall","src":"8499:9:9"},{"kind":"number","nodeType":"YulLiteral","src":"8510:42:9","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"8495:3:9"},"nodeType":"YulFunctionCall","src":"8495:58:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8480:6:9"},"nodeType":"YulFunctionCall","src":"8480:74:9"},"nodeType":"YulExpressionStatement","src":"8480:74:9"},{"expression":{"arguments":[{"arguments":[{"name":"tail_4","nodeType":"YulIdentifier","src":"8582:6:9"},{"name":"_1","nodeType":"YulIdentifier","src":"8590:2:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8578:3:9"},"nodeType":"YulFunctionCall","src":"8578:15:9"},{"arguments":[{"arguments":[{"arguments":[{"name":"_4","nodeType":"YulIdentifier","src":"8609:2:9"},{"name":"_1","nodeType":"YulIdentifier","src":"8613:2:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8605:3:9"},"nodeType":"YulFunctionCall","src":"8605:11:9"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"8599:5:9"},"nodeType":"YulFunctionCall","src":"8599:18:9"},{"kind":"number","nodeType":"YulLiteral","src":"8619:18:9","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"8595:3:9"},"nodeType":"YulFunctionCall","src":"8595:43:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8571:6:9"},"nodeType":"YulFunctionCall","src":"8571:68:9"},"nodeType":"YulExpressionStatement","src":"8571:68:9"},{"expression":{"arguments":[{"arguments":[{"name":"tail_4","nodeType":"YulIdentifier","src":"8667:6:9"},{"name":"_2","nodeType":"YulIdentifier","src":"8675:2:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8663:3:9"},"nodeType":"YulFunctionCall","src":"8663:15:9"},{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"name":"_4","nodeType":"YulIdentifier","src":"8704:2:9"},{"name":"_2","nodeType":"YulIdentifier","src":"8708:2:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8700:3:9"},"nodeType":"YulFunctionCall","src":"8700:11:9"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"8694:5:9"},"nodeType":"YulFunctionCall","src":"8694:18:9"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"8687:6:9"},"nodeType":"YulFunctionCall","src":"8687:26:9"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"8680:6:9"},"nodeType":"YulFunctionCall","src":"8680:34:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8656:6:9"},"nodeType":"YulFunctionCall","src":"8656:59:9"},"nodeType":"YulExpressionStatement","src":"8656:59:9"},{"expression":{"arguments":[{"arguments":[{"name":"tail_4","nodeType":"YulIdentifier","src":"8743:6:9"},{"kind":"number","nodeType":"YulLiteral","src":"8751:2:9","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8739:3:9"},"nodeType":"YulFunctionCall","src":"8739:15:9"},{"arguments":[{"arguments":[{"name":"_4","nodeType":"YulIdentifier","src":"8766:2:9"},{"kind":"number","nodeType":"YulLiteral","src":"8770:2:9","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8762:3:9"},"nodeType":"YulFunctionCall","src":"8762:11:9"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"8756:5:9"},"nodeType":"YulFunctionCall","src":"8756:18:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8732:6:9"},"nodeType":"YulFunctionCall","src":"8732:43:9"},"nodeType":"YulExpressionStatement","src":"8732:43:9"},{"nodeType":"YulVariableDeclaration","src":"8792:42:9","value":{"arguments":[{"arguments":[{"name":"_4","nodeType":"YulIdentifier","src":"8824:2:9"},{"kind":"number","nodeType":"YulLiteral","src":"8828:4:9","type":"","value":"0x80"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8820:3:9"},"nodeType":"YulFunctionCall","src":"8820:13:9"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"8814:5:9"},"nodeType":"YulFunctionCall","src":"8814:20:9"},"variables":[{"name":"memberValue0_1","nodeType":"YulTypedName","src":"8796:14:9","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"tail_4","nodeType":"YulIdentifier","src":"8862:6:9"},{"kind":"number","nodeType":"YulLiteral","src":"8870:4:9","type":"","value":"0x80"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8858:3:9"},"nodeType":"YulFunctionCall","src":"8858:17:9"},{"kind":"number","nodeType":"YulLiteral","src":"8877:4:9","type":"","value":"0xc0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8851:6:9"},"nodeType":"YulFunctionCall","src":"8851:31:9"},"nodeType":"YulExpressionStatement","src":"8851:31:9"},{"nodeType":"YulVariableDeclaration","src":"8899:37:9","value":{"arguments":[{"name":"memberValue0_1","nodeType":"YulIdentifier","src":"8921:14:9"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"8915:5:9"},"nodeType":"YulFunctionCall","src":"8915:21:9"},"variables":[{"name":"length_2","nodeType":"YulTypedName","src":"8903:8:9","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"tail_4","nodeType":"YulIdentifier","src":"8964:6:9"},{"kind":"number","nodeType":"YulLiteral","src":"8972:4:9","type":"","value":"0xc0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8960:3:9"},"nodeType":"YulFunctionCall","src":"8960:17:9"},{"name":"length_2","nodeType":"YulIdentifier","src":"8979:8:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8953:6:9"},"nodeType":"YulFunctionCall","src":"8953:35:9"},"nodeType":"YulExpressionStatement","src":"8953:35:9"},{"nodeType":"YulVariableDeclaration","src":"9005:12:9","value":{"kind":"number","nodeType":"YulLiteral","src":"9016:1:9","type":"","value":"0"},"variables":[{"name":"i_2","nodeType":"YulTypedName","src":"9009:3:9","type":""}]},{"body":{"nodeType":"YulBlock","src":"9100:116:9","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"tail_4","nodeType":"YulIdentifier","src":"9137:6:9"},{"name":"i_2","nodeType":"YulIdentifier","src":"9145:3:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9133:3:9"},"nodeType":"YulFunctionCall","src":"9133:16:9"},{"kind":"number","nodeType":"YulLiteral","src":"9151:3:9","type":"","value":"224"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9129:3:9"},"nodeType":"YulFunctionCall","src":"9129:26:9"},{"arguments":[{"arguments":[{"arguments":[{"name":"memberValue0_1","nodeType":"YulIdentifier","src":"9171:14:9"},{"name":"i_2","nodeType":"YulIdentifier","src":"9187:3:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9167:3:9"},"nodeType":"YulFunctionCall","src":"9167:24:9"},{"name":"_1","nodeType":"YulIdentifier","src":"9193:2:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9163:3:9"},"nodeType":"YulFunctionCall","src":"9163:33:9"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"9157:5:9"},"nodeType":"YulFunctionCall","src":"9157:40:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9122:6:9"},"nodeType":"YulFunctionCall","src":"9122:76:9"},"nodeType":"YulExpressionStatement","src":"9122:76:9"}]},"condition":{"arguments":[{"name":"i_2","nodeType":"YulIdentifier","src":"9045:3:9"},{"name":"length_2","nodeType":"YulIdentifier","src":"9050:8:9"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"9042:2:9"},"nodeType":"YulFunctionCall","src":"9042:17:9"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"9060:23:9","statements":[{"nodeType":"YulAssignment","src":"9062:19:9","value":{"arguments":[{"name":"i_2","nodeType":"YulIdentifier","src":"9073:3:9"},{"name":"_1","nodeType":"YulIdentifier","src":"9078:2:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9069:3:9"},"nodeType":"YulFunctionCall","src":"9069:12:9"},"variableNames":[{"name":"i_2","nodeType":"YulIdentifier","src":"9062:3:9"}]}]},"pre":{"nodeType":"YulBlock","src":"9038:3:9","statements":[]},"src":"9034:182:9"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"tail_4","nodeType":"YulIdentifier","src":"9248:6:9"},{"name":"length_2","nodeType":"YulIdentifier","src":"9256:8:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9244:3:9"},"nodeType":"YulFunctionCall","src":"9244:21:9"},{"kind":"number","nodeType":"YulLiteral","src":"9267:3:9","type":"","value":"224"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9240:3:9"},"nodeType":"YulFunctionCall","src":"9240:31:9"},{"kind":"number","nodeType":"YulLiteral","src":"9273:1:9","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9233:6:9"},"nodeType":"YulFunctionCall","src":"9233:42:9"},"nodeType":"YulExpressionStatement","src":"9233:42:9"},{"expression":{"arguments":[{"arguments":[{"name":"tail_4","nodeType":"YulIdentifier","src":"9303:6:9"},{"kind":"number","nodeType":"YulLiteral","src":"9311:4:9","type":"","value":"0xa0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9299:3:9"},"nodeType":"YulFunctionCall","src":"9299:17:9"},{"arguments":[{"arguments":[{"name":"_4","nodeType":"YulIdentifier","src":"9328:2:9"},{"kind":"number","nodeType":"YulLiteral","src":"9332:4:9","type":"","value":"0xa0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9324:3:9"},"nodeType":"YulFunctionCall","src":"9324:13:9"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"9318:5:9"},"nodeType":"YulFunctionCall","src":"9318:20:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9292:6:9"},"nodeType":"YulFunctionCall","src":"9292:47:9"},"nodeType":"YulExpressionStatement","src":"9292:47:9"},{"nodeType":"YulAssignment","src":"9356:64:9","value":{"arguments":[{"arguments":[{"name":"tail_4","nodeType":"YulIdentifier","src":"9374:6:9"},{"arguments":[{"arguments":[{"name":"length_2","nodeType":"YulIdentifier","src":"9390:8:9"},{"kind":"number","nodeType":"YulLiteral","src":"9400:2:9","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9386:3:9"},"nodeType":"YulFunctionCall","src":"9386:17:9"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9409:2:9","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"9405:3:9"},"nodeType":"YulFunctionCall","src":"9405:7:9"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"9382:3:9"},"nodeType":"YulFunctionCall","src":"9382:31:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9370:3:9"},"nodeType":"YulFunctionCall","src":"9370:44:9"},{"kind":"number","nodeType":"YulLiteral","src":"9416:3:9","type":"","value":"224"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9366:3:9"},"nodeType":"YulFunctionCall","src":"9366:54:9"},"variableNames":[{"name":"tail_4","nodeType":"YulIdentifier","src":"9356:6:9"}]},{"nodeType":"YulAssignment","src":"9437:29:9","value":{"arguments":[{"name":"srcPtr_1","nodeType":"YulIdentifier","src":"9453:8:9"},{"name":"_1","nodeType":"YulIdentifier","src":"9463:2:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9449:3:9"},"nodeType":"YulFunctionCall","src":"9449:17:9"},"variableNames":[{"name":"srcPtr_1","nodeType":"YulIdentifier","src":"9437:8:9"}]},{"nodeType":"YulAssignment","src":"9483:23:9","value":{"arguments":[{"name":"pos_1","nodeType":"YulIdentifier","src":"9496:5:9"},{"name":"_1","nodeType":"YulIdentifier","src":"9503:2:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9492:3:9"},"nodeType":"YulFunctionCall","src":"9492:14:9"},"variableNames":[{"name":"pos_1","nodeType":"YulIdentifier","src":"9483:5:9"}]}]},"condition":{"arguments":[{"name":"i_1","nodeType":"YulIdentifier","src":"8305:3:9"},{"name":"length_1","nodeType":"YulIdentifier","src":"8310:8:9"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"8302:2:9"},"nodeType":"YulFunctionCall","src":"8302:17:9"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"8320:22:9","statements":[{"nodeType":"YulAssignment","src":"8322:18:9","value":{"arguments":[{"name":"i_1","nodeType":"YulIdentifier","src":"8333:3:9"},{"kind":"number","nodeType":"YulLiteral","src":"8338:1:9","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8329:3:9"},"nodeType":"YulFunctionCall","src":"8329:11:9"},"variableNames":[{"name":"i_1","nodeType":"YulIdentifier","src":"8322:3:9"}]}]},"pre":{"nodeType":"YulBlock","src":"8298:3:9","statements":[]},"src":"8294:1226:9"},{"nodeType":"YulAssignment","src":"9533:16:9","value":{"name":"tail_4","nodeType":"YulIdentifier","src":"9543:6:9"},"variableNames":[{"name":"tail_2","nodeType":"YulIdentifier","src":"9533:6:9"}]},{"nodeType":"YulAssignment","src":"9562:25:9","value":{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"9576:6:9"},{"name":"_1","nodeType":"YulIdentifier","src":"9584:2:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9572:3:9"},"nodeType":"YulFunctionCall","src":"9572:15:9"},"variableNames":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"9562:6:9"}]},{"nodeType":"YulAssignment","src":"9600:19:9","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9611:3:9"},{"name":"_1","nodeType":"YulIdentifier","src":"9616:2:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9607:3:9"},"nodeType":"YulFunctionCall","src":"9607:12:9"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"9600:3:9"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"7679:1:9"},{"name":"length","nodeType":"YulIdentifier","src":"7682:6:9"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"7676:2:9"},"nodeType":"YulFunctionCall","src":"7676:13:9"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"7690:18:9","statements":[{"nodeType":"YulAssignment","src":"7692:14:9","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"7701:1:9"},{"kind":"number","nodeType":"YulLiteral","src":"7704:1:9","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7697:3:9"},"nodeType":"YulFunctionCall","src":"7697:9:9"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"7692:1:9"}]}]},"pre":{"nodeType":"YulBlock","src":"7672:3:9","statements":[]},"src":"7668:1961:9"},{"nodeType":"YulAssignment","src":"9638:14:9","value":{"name":"tail_2","nodeType":"YulIdentifier","src":"9646:6:9"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"9638:4:9"}]}]},"name":"abi_encode_tuple_t_array$_t_struct$_MultiAttestationRequest_$105_memory_ptr_$dyn_memory_ptr__to_t_array$_t_struct$_MultiAttestationRequest_$105_memory_ptr_$dyn_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7268:9:9","type":""},{"name":"value0","nodeType":"YulTypedName","src":"7279:6:9","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"7290:4:9","type":""}],"src":"7068:2590:9"},{"body":{"nodeType":"YulBlock","src":"9769:797:9","statements":[{"nodeType":"YulVariableDeclaration","src":"9779:12:9","value":{"kind":"number","nodeType":"YulLiteral","src":"9789:2:9","type":"","value":"32"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"9783:2:9","type":""}]},{"body":{"nodeType":"YulBlock","src":"9836:16:9","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9845:1:9","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9848:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9838:6:9"},"nodeType":"YulFunctionCall","src":"9838:12:9"},"nodeType":"YulExpressionStatement","src":"9838:12:9"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"9811:7:9"},{"name":"headStart","nodeType":"YulIdentifier","src":"9820:9:9"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"9807:3:9"},"nodeType":"YulFunctionCall","src":"9807:23:9"},{"name":"_1","nodeType":"YulIdentifier","src":"9832:2:9"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"9803:3:9"},"nodeType":"YulFunctionCall","src":"9803:32:9"},"nodeType":"YulIf","src":"9800:52:9"},{"nodeType":"YulVariableDeclaration","src":"9861:30:9","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9881:9:9"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"9875:5:9"},"nodeType":"YulFunctionCall","src":"9875:16:9"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"9865:6:9","type":""}]},{"body":{"nodeType":"YulBlock","src":"9934:16:9","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9943:1:9","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9946:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9936:6:9"},"nodeType":"YulFunctionCall","src":"9936:12:9"},"nodeType":"YulExpressionStatement","src":"9936:12:9"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"9906:6:9"},{"kind":"number","nodeType":"YulLiteral","src":"9914:18:9","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"9903:2:9"},"nodeType":"YulFunctionCall","src":"9903:30:9"},"nodeType":"YulIf","src":"9900:50:9"},{"nodeType":"YulVariableDeclaration","src":"9959:32:9","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9973:9:9"},{"name":"offset","nodeType":"YulIdentifier","src":"9984:6:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9969:3:9"},"nodeType":"YulFunctionCall","src":"9969:22:9"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"9963:2:9","type":""}]},{"body":{"nodeType":"YulBlock","src":"10039:16:9","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10048:1:9","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"10051:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"10041:6:9"},"nodeType":"YulFunctionCall","src":"10041:12:9"},"nodeType":"YulExpressionStatement","src":"10041:12:9"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"10018:2:9"},{"kind":"number","nodeType":"YulLiteral","src":"10022:4:9","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10014:3:9"},"nodeType":"YulFunctionCall","src":"10014:13:9"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"10029:7:9"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"10010:3:9"},"nodeType":"YulFunctionCall","src":"10010:27:9"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"10003:6:9"},"nodeType":"YulFunctionCall","src":"10003:35:9"},"nodeType":"YulIf","src":"10000:55:9"},{"nodeType":"YulVariableDeclaration","src":"10064:19:9","value":{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"10080:2:9"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"10074:5:9"},"nodeType":"YulFunctionCall","src":"10074:9:9"},"variables":[{"name":"_3","nodeType":"YulTypedName","src":"10068:2:9","type":""}]},{"nodeType":"YulVariableDeclaration","src":"10092:93:9","value":{"arguments":[{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"10181:2:9"}],"functionName":{"name":"array_allocation_size_array_struct_AttestationRequestData_dyn","nodeType":"YulIdentifier","src":"10119:61:9"},"nodeType":"YulFunctionCall","src":"10119:65:9"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"10103:15:9"},"nodeType":"YulFunctionCall","src":"10103:82:9"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"10096:3:9","type":""}]},{"nodeType":"YulVariableDeclaration","src":"10194:16:9","value":{"name":"dst","nodeType":"YulIdentifier","src":"10207:3:9"},"variables":[{"name":"dst_1","nodeType":"YulTypedName","src":"10198:5:9","type":""}]},{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"10226:3:9"},{"name":"_3","nodeType":"YulIdentifier","src":"10231:2:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10219:6:9"},"nodeType":"YulFunctionCall","src":"10219:15:9"},"nodeType":"YulExpressionStatement","src":"10219:15:9"},{"nodeType":"YulAssignment","src":"10243:19:9","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"10254:3:9"},{"name":"_1","nodeType":"YulIdentifier","src":"10259:2:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10250:3:9"},"nodeType":"YulFunctionCall","src":"10250:12:9"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"10243:3:9"}]},{"nodeType":"YulVariableDeclaration","src":"10271:42:9","value":{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"10293:2:9"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10301:1:9","type":"","value":"5"},{"name":"_3","nodeType":"YulIdentifier","src":"10304:2:9"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"10297:3:9"},"nodeType":"YulFunctionCall","src":"10297:10:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10289:3:9"},"nodeType":"YulFunctionCall","src":"10289:19:9"},{"name":"_1","nodeType":"YulIdentifier","src":"10310:2:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10285:3:9"},"nodeType":"YulFunctionCall","src":"10285:28:9"},"variables":[{"name":"srcEnd","nodeType":"YulTypedName","src":"10275:6:9","type":""}]},{"body":{"nodeType":"YulBlock","src":"10345:16:9","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10354:1:9","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"10357:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"10347:6:9"},"nodeType":"YulFunctionCall","src":"10347:12:9"},"nodeType":"YulExpressionStatement","src":"10347:12:9"}]},"condition":{"arguments":[{"name":"srcEnd","nodeType":"YulIdentifier","src":"10328:6:9"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"10336:7:9"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"10325:2:9"},"nodeType":"YulFunctionCall","src":"10325:19:9"},"nodeType":"YulIf","src":"10322:39:9"},{"nodeType":"YulVariableDeclaration","src":"10370:22:9","value":{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"10385:2:9"},{"name":"_1","nodeType":"YulIdentifier","src":"10389:2:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10381:3:9"},"nodeType":"YulFunctionCall","src":"10381:11:9"},"variables":[{"name":"src","nodeType":"YulTypedName","src":"10374:3:9","type":""}]},{"body":{"nodeType":"YulBlock","src":"10457:79:9","statements":[{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"10478:3:9"},{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"10489:3:9"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"10483:5:9"},"nodeType":"YulFunctionCall","src":"10483:10:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10471:6:9"},"nodeType":"YulFunctionCall","src":"10471:23:9"},"nodeType":"YulExpressionStatement","src":"10471:23:9"},{"nodeType":"YulAssignment","src":"10507:19:9","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"10518:3:9"},{"name":"_1","nodeType":"YulIdentifier","src":"10523:2:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10514:3:9"},"nodeType":"YulFunctionCall","src":"10514:12:9"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"10507:3:9"}]}]},"condition":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"10412:3:9"},{"name":"srcEnd","nodeType":"YulIdentifier","src":"10417:6:9"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"10409:2:9"},"nodeType":"YulFunctionCall","src":"10409:15:9"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"10425:23:9","statements":[{"nodeType":"YulAssignment","src":"10427:19:9","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"10438:3:9"},{"name":"_1","nodeType":"YulIdentifier","src":"10443:2:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10434:3:9"},"nodeType":"YulFunctionCall","src":"10434:12:9"},"variableNames":[{"name":"src","nodeType":"YulIdentifier","src":"10427:3:9"}]}]},"pre":{"nodeType":"YulBlock","src":"10405:3:9","statements":[]},"src":"10401:135:9"},{"nodeType":"YulAssignment","src":"10545:15:9","value":{"name":"dst_1","nodeType":"YulIdentifier","src":"10555:5:9"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"10545:6:9"}]}]},"name":"abi_decode_tuple_t_array$_t_bytes32_$dyn_memory_ptr_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9735:9:9","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"9746:7:9","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"9758:6:9","type":""}],"src":"9663:903:9"},{"body":{"nodeType":"YulBlock","src":"10745:236:9","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10762:9:9"},{"kind":"number","nodeType":"YulLiteral","src":"10773:2:9","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10755:6:9"},"nodeType":"YulFunctionCall","src":"10755:21:9"},"nodeType":"YulExpressionStatement","src":"10755:21:9"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10796:9:9"},{"kind":"number","nodeType":"YulLiteral","src":"10807:2:9","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10792:3:9"},"nodeType":"YulFunctionCall","src":"10792:18:9"},{"kind":"number","nodeType":"YulLiteral","src":"10812:2:9","type":"","value":"46"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10785:6:9"},"nodeType":"YulFunctionCall","src":"10785:30:9"},"nodeType":"YulExpressionStatement","src":"10785:30:9"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10835:9:9"},{"kind":"number","nodeType":"YulLiteral","src":"10846:2:9","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10831:3:9"},"nodeType":"YulFunctionCall","src":"10831:18:9"},{"hexValue":"496e697469616c697a61626c653a20636f6e747261637420697320616c726561","kind":"string","nodeType":"YulLiteral","src":"10851:34:9","type":"","value":"Initializable: contract is alrea"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10824:6:9"},"nodeType":"YulFunctionCall","src":"10824:62:9"},"nodeType":"YulExpressionStatement","src":"10824:62:9"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10906:9:9"},{"kind":"number","nodeType":"YulLiteral","src":"10917:2:9","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10902:3:9"},"nodeType":"YulFunctionCall","src":"10902:18:9"},{"hexValue":"647920696e697469616c697a6564","kind":"string","nodeType":"YulLiteral","src":"10922:16:9","type":"","value":"dy initialized"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10895:6:9"},"nodeType":"YulFunctionCall","src":"10895:44:9"},"nodeType":"YulExpressionStatement","src":"10895:44:9"},{"nodeType":"YulAssignment","src":"10948:27:9","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10960:9:9"},{"kind":"number","nodeType":"YulLiteral","src":"10971:3:9","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10956:3:9"},"nodeType":"YulFunctionCall","src":"10956:19:9"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"10948:4:9"}]}]},"name":"abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"10722:9:9","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"10736:4:9","type":""}],"src":"10571:410:9"},{"body":{"nodeType":"YulBlock","src":"11093:87:9","statements":[{"nodeType":"YulAssignment","src":"11103:26:9","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11115:9:9"},{"kind":"number","nodeType":"YulLiteral","src":"11126:2:9","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11111:3:9"},"nodeType":"YulFunctionCall","src":"11111:18:9"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"11103:4:9"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11145:9:9"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"11160:6:9"},{"kind":"number","nodeType":"YulLiteral","src":"11168:4:9","type":"","value":"0xff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"11156:3:9"},"nodeType":"YulFunctionCall","src":"11156:17:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11138:6:9"},"nodeType":"YulFunctionCall","src":"11138:36:9"},"nodeType":"YulExpressionStatement","src":"11138:36:9"}]},"name":"abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"11062:9:9","type":""},{"name":"value0","nodeType":"YulTypedName","src":"11073:6:9","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"11084:4:9","type":""}],"src":"10986:194:9"},{"body":{"nodeType":"YulBlock","src":"11359:228:9","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11376:9:9"},{"kind":"number","nodeType":"YulLiteral","src":"11387:2:9","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11369:6:9"},"nodeType":"YulFunctionCall","src":"11369:21:9"},"nodeType":"YulExpressionStatement","src":"11369:21:9"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11410:9:9"},{"kind":"number","nodeType":"YulLiteral","src":"11421:2:9","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11406:3:9"},"nodeType":"YulFunctionCall","src":"11406:18:9"},{"kind":"number","nodeType":"YulLiteral","src":"11426:2:9","type":"","value":"38"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11399:6:9"},"nodeType":"YulFunctionCall","src":"11399:30:9"},"nodeType":"YulExpressionStatement","src":"11399:30:9"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11449:9:9"},{"kind":"number","nodeType":"YulLiteral","src":"11460:2:9","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11445:3:9"},"nodeType":"YulFunctionCall","src":"11445:18:9"},{"hexValue":"4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061","kind":"string","nodeType":"YulLiteral","src":"11465:34:9","type":"","value":"Ownable: new owner is the zero a"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11438:6:9"},"nodeType":"YulFunctionCall","src":"11438:62:9"},"nodeType":"YulExpressionStatement","src":"11438:62:9"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11520:9:9"},{"kind":"number","nodeType":"YulLiteral","src":"11531:2:9","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11516:3:9"},"nodeType":"YulFunctionCall","src":"11516:18:9"},{"hexValue":"646472657373","kind":"string","nodeType":"YulLiteral","src":"11536:8:9","type":"","value":"ddress"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11509:6:9"},"nodeType":"YulFunctionCall","src":"11509:36:9"},"nodeType":"YulExpressionStatement","src":"11509:36:9"},{"nodeType":"YulAssignment","src":"11554:27:9","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11566:9:9"},{"kind":"number","nodeType":"YulLiteral","src":"11577:3:9","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11562:3:9"},"nodeType":"YulFunctionCall","src":"11562:19:9"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"11554:4:9"}]}]},"name":"abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"11336:9:9","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"11350:4:9","type":""}],"src":"11185:402:9"},{"body":{"nodeType":"YulBlock","src":"11766:182:9","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11783:9:9"},{"kind":"number","nodeType":"YulLiteral","src":"11794:2:9","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11776:6:9"},"nodeType":"YulFunctionCall","src":"11776:21:9"},"nodeType":"YulExpressionStatement","src":"11776:21:9"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11817:9:9"},{"kind":"number","nodeType":"YulLiteral","src":"11828:2:9","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11813:3:9"},"nodeType":"YulFunctionCall","src":"11813:18:9"},{"kind":"number","nodeType":"YulLiteral","src":"11833:2:9","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11806:6:9"},"nodeType":"YulFunctionCall","src":"11806:30:9"},"nodeType":"YulExpressionStatement","src":"11806:30:9"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11856:9:9"},{"kind":"number","nodeType":"YulLiteral","src":"11867:2:9","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11852:3:9"},"nodeType":"YulFunctionCall","src":"11852:18:9"},{"hexValue":"4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572","kind":"string","nodeType":"YulLiteral","src":"11872:34:9","type":"","value":"Ownable: caller is not the owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11845:6:9"},"nodeType":"YulFunctionCall","src":"11845:62:9"},"nodeType":"YulExpressionStatement","src":"11845:62:9"},{"nodeType":"YulAssignment","src":"11916:26:9","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11928:9:9"},{"kind":"number","nodeType":"YulLiteral","src":"11939:2:9","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11924:3:9"},"nodeType":"YulFunctionCall","src":"11924:18:9"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"11916:4:9"}]}]},"name":"abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"11743:9:9","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"11757:4:9","type":""}],"src":"11592:356:9"},{"body":{"nodeType":"YulBlock","src":"12127:233:9","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12144:9:9"},{"kind":"number","nodeType":"YulLiteral","src":"12155:2:9","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12137:6:9"},"nodeType":"YulFunctionCall","src":"12137:21:9"},"nodeType":"YulExpressionStatement","src":"12137:21:9"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12178:9:9"},{"kind":"number","nodeType":"YulLiteral","src":"12189:2:9","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12174:3:9"},"nodeType":"YulFunctionCall","src":"12174:18:9"},{"kind":"number","nodeType":"YulLiteral","src":"12194:2:9","type":"","value":"43"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12167:6:9"},"nodeType":"YulFunctionCall","src":"12167:30:9"},"nodeType":"YulExpressionStatement","src":"12167:30:9"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12217:9:9"},{"kind":"number","nodeType":"YulLiteral","src":"12228:2:9","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12213:3:9"},"nodeType":"YulFunctionCall","src":"12213:18:9"},{"hexValue":"496e697469616c697a61626c653a20636f6e7472616374206973206e6f742069","kind":"string","nodeType":"YulLiteral","src":"12233:34:9","type":"","value":"Initializable: contract is not i"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12206:6:9"},"nodeType":"YulFunctionCall","src":"12206:62:9"},"nodeType":"YulExpressionStatement","src":"12206:62:9"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12288:9:9"},{"kind":"number","nodeType":"YulLiteral","src":"12299:2:9","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12284:3:9"},"nodeType":"YulFunctionCall","src":"12284:18:9"},{"hexValue":"6e697469616c697a696e67","kind":"string","nodeType":"YulLiteral","src":"12304:13:9","type":"","value":"nitializing"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12277:6:9"},"nodeType":"YulFunctionCall","src":"12277:41:9"},"nodeType":"YulExpressionStatement","src":"12277:41:9"},{"nodeType":"YulAssignment","src":"12327:27:9","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12339:9:9"},{"kind":"number","nodeType":"YulLiteral","src":"12350:3:9","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12335:3:9"},"nodeType":"YulFunctionCall","src":"12335:19:9"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12327:4:9"}]}]},"name":"abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"12104:9:9","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"12118:4:9","type":""}],"src":"11953:407:9"}]},"contents":"{\n    { }\n    function abi_decode_tuple_t_array$_t_struct$_AttestationRequestNode_$1144_calldata_ptr_$dyn_calldata_ptr(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let _2 := add(headStart, offset)\n        if iszero(slt(add(_2, 0x1f), dataEnd)) { revert(0, 0) }\n        let length := calldataload(_2)\n        if gt(length, _1) { revert(0, 0) }\n        if gt(add(add(_2, shl(5, length)), 32), dataEnd) { revert(0, 0) }\n        value0 := add(_2, 32)\n        value1 := length\n    }\n    function abi_encode_tuple_t_contract$_IEAS_$346__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, 0xffffffffffffffffffffffffffffffffffffffff))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n    function access_calldata_tail_t_struct$_AttestationRequestNode_$1144_calldata_ptr(base_ref, ptr_to_tail) -> addr\n    {\n        let rel_offset_of_tail := calldataload(ptr_to_tail)\n        if iszero(slt(rel_offset_of_tail, add(sub(calldatasize(), base_ref), not(94)))) { revert(0, 0) }\n        addr := add(base_ref, rel_offset_of_tail)\n    }\n    function access_calldata_tail_t_struct$_MultiAttestationRequest_$105_calldata_ptr(base_ref, ptr_to_tail) -> addr\n    {\n        let rel_offset_of_tail := calldataload(ptr_to_tail)\n        if iszero(slt(rel_offset_of_tail, add(sub(calldatasize(), base_ref), not(62)))) { revert(0, 0) }\n        addr := add(base_ref, rel_offset_of_tail)\n    }\n    function allocate_memory_3439() -> memPtr\n    {\n        memPtr := mload(0x40)\n        let newFreePtr := add(memPtr, 0x40)\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(0x40, newFreePtr)\n    }\n    function allocate_memory_3440() -> memPtr\n    {\n        memPtr := mload(64)\n        let newFreePtr := add(memPtr, 0xc0)\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n    function allocate_memory(size) -> memPtr\n    {\n        memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(size, 31), not(31)))\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n    function array_allocation_size_array_struct_AttestationRequestData_dyn(length) -> size\n    {\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n        size := add(shl(5, length), 0x20)\n    }\n    function abi_decode_bool(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n    }\n    function abi_decode_bytes(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        let _1 := calldataload(offset)\n        if gt(_1, 0xffffffffffffffff) { panic_error_0x41() }\n        let array_1 := allocate_memory(add(and(add(_1, 0x1f), not(31)), 0x20))\n        mstore(array_1, _1)\n        if gt(add(add(offset, _1), 0x20), end) { revert(0, 0) }\n        calldatacopy(add(array_1, 0x20), add(offset, 0x20), _1)\n        mstore(add(add(array_1, _1), 0x20), 0)\n        array := array_1\n    }\n    function convert_t_struct$_MultiAttestationRequest_$105_calldata_ptr_to_t_struct$_MultiAttestationRequest_$105_memory_ptr(value) -> converted\n    {\n        let _1 := 0x40\n        if slt(sub(calldatasize(), value), _1) { revert(0, 0) }\n        let value_1 := allocate_memory_3439()\n        mstore(value_1, calldataload(value))\n        let _2 := 32\n        let offset := calldataload(add(value, _2))\n        let _3 := 0xffffffffffffffff\n        if gt(offset, _3) { revert(0, 0) }\n        let _4 := add(value, offset)\n        if iszero(slt(add(_4, 0x1f), calldatasize())) { revert(0, 0) }\n        let _5 := calldataload(_4)\n        let dst := allocate_memory(array_allocation_size_array_struct_AttestationRequestData_dyn(_5))\n        let dst_1 := dst\n        mstore(dst, _5)\n        dst := add(dst, _2)\n        let srcEnd := add(add(_4, shl(5, _5)), _2)\n        if gt(srcEnd, calldatasize()) { revert(0, 0) }\n        let src := add(_4, _2)\n        for { } lt(src, srcEnd) { src := add(src, _2) }\n        {\n            let innerOffset := calldataload(src)\n            if gt(innerOffset, _3)\n            {\n                let _6 := 0\n                revert(_6, _6)\n            }\n            let _7 := add(_4, innerOffset)\n            let _8 := 0xc0\n            if slt(add(sub(calldatasize(), _7), not(31)), _8)\n            {\n                let _9 := 0\n                revert(_9, _9)\n            }\n            let value_2 := allocate_memory_3440()\n            mstore(value_2, abi_decode_address(add(_7, _2)))\n            let value_3 := calldataload(add(_7, _1))\n            if iszero(eq(value_3, and(value_3, _3)))\n            {\n                let _10 := 0\n                revert(_10, _10)\n            }\n            mstore(add(value_2, _2), value_3)\n            let _11 := 96\n            mstore(add(value_2, _1), abi_decode_bool(add(_7, _11)))\n            let _12 := 128\n            mstore(add(value_2, _11), calldataload(add(_7, _12)))\n            let _13 := 160\n            let offset_1 := calldataload(add(_7, _13))\n            if gt(offset_1, _3)\n            {\n                let _14 := 0\n                revert(_14, _14)\n            }\n            mstore(add(value_2, _12), abi_decode_bytes(add(add(_7, offset_1), _2), calldatasize()))\n            mstore(add(value_2, _13), calldataload(add(_7, _8)))\n            mstore(dst, value_2)\n            dst := add(dst, _2)\n        }\n        mstore(add(value_1, _2), dst_1)\n        converted := value_1\n    }\n    function increment_t_uint256(value) -> ret\n    {\n        if eq(value, not(0))\n        {\n            mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n            mstore(4, 0x11)\n            revert(0, 0x24)\n        }\n        ret := add(value, 1)\n    }\n    function abi_encode_tuple_t_array$_t_struct$_MultiAttestationRequest_$105_memory_ptr_$dyn_memory_ptr__to_t_array$_t_struct$_MultiAttestationRequest_$105_memory_ptr_$dyn_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        let _1 := 32\n        let tail_1 := add(headStart, _1)\n        mstore(headStart, _1)\n        let pos := tail_1\n        let length := mload(value0)\n        mstore(tail_1, length)\n        let _2 := 64\n        pos := add(headStart, _2)\n        let tail_2 := add(add(headStart, shl(5, length)), _2)\n        let srcPtr := add(value0, _1)\n        let i := 0\n        for { } lt(i, length) { i := add(i, 1) }\n        {\n            mstore(pos, add(sub(tail_2, headStart), not(63)))\n            let _3 := mload(srcPtr)\n            let tail_3 := add(tail_2, _2)\n            mstore(tail_2, mload(_3))\n            let memberValue0 := mload(add(_3, _1))\n            mstore(add(tail_2, _1), _2)\n            let pos_1 := tail_3\n            let length_1 := mload(memberValue0)\n            mstore(tail_3, length_1)\n            pos_1 := add(tail_2, 96)\n            let tail_4 := add(add(tail_2, shl(5, length_1)), 96)\n            let srcPtr_1 := add(memberValue0, _1)\n            let i_1 := 0\n            for { } lt(i_1, length_1) { i_1 := add(i_1, 1) }\n            {\n                mstore(pos_1, add(sub(tail_4, tail_2), not(95)))\n                let _4 := mload(srcPtr_1)\n                mstore(tail_4, and(mload(_4), 0xffffffffffffffffffffffffffffffffffffffff))\n                mstore(add(tail_4, _1), and(mload(add(_4, _1)), 0xffffffffffffffff))\n                mstore(add(tail_4, _2), iszero(iszero(mload(add(_4, _2)))))\n                mstore(add(tail_4, 96), mload(add(_4, 96)))\n                let memberValue0_1 := mload(add(_4, 0x80))\n                mstore(add(tail_4, 0x80), 0xc0)\n                let length_2 := mload(memberValue0_1)\n                mstore(add(tail_4, 0xc0), length_2)\n                let i_2 := 0\n                for { } lt(i_2, length_2) { i_2 := add(i_2, _1) }\n                {\n                    mstore(add(add(tail_4, i_2), 224), mload(add(add(memberValue0_1, i_2), _1)))\n                }\n                mstore(add(add(tail_4, length_2), 224), 0)\n                mstore(add(tail_4, 0xa0), mload(add(_4, 0xa0)))\n                tail_4 := add(add(tail_4, and(add(length_2, 31), not(31))), 224)\n                srcPtr_1 := add(srcPtr_1, _1)\n                pos_1 := add(pos_1, _1)\n            }\n            tail_2 := tail_4\n            srcPtr := add(srcPtr, _1)\n            pos := add(pos, _1)\n        }\n        tail := tail_2\n    }\n    function abi_decode_tuple_t_array$_t_bytes32_$dyn_memory_ptr_fromMemory(headStart, dataEnd) -> value0\n    {\n        let _1 := 32\n        if slt(sub(dataEnd, headStart), _1) { revert(0, 0) }\n        let offset := mload(headStart)\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        let _2 := add(headStart, offset)\n        if iszero(slt(add(_2, 0x1f), dataEnd)) { revert(0, 0) }\n        let _3 := mload(_2)\n        let dst := allocate_memory(array_allocation_size_array_struct_AttestationRequestData_dyn(_3))\n        let dst_1 := dst\n        mstore(dst, _3)\n        dst := add(dst, _1)\n        let srcEnd := add(add(_2, shl(5, _3)), _1)\n        if gt(srcEnd, dataEnd) { revert(0, 0) }\n        let src := add(_2, _1)\n        for { } lt(src, srcEnd) { src := add(src, _1) }\n        {\n            mstore(dst, mload(src))\n            dst := add(dst, _1)\n        }\n        value0 := dst_1\n    }\n    function abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 46)\n        mstore(add(headStart, 64), \"Initializable: contract is alrea\")\n        mstore(add(headStart, 96), \"dy initialized\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xff))\n    }\n    function abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"Ownable: new owner is the zero a\")\n        mstore(add(headStart, 96), \"ddress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 32)\n        mstore(add(headStart, 64), \"Ownable: caller is not the owner\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 43)\n        mstore(add(headStart, 64), \"Initializable: contract is not i\")\n        mstore(add(headStart, 96), \"nitializing\")\n        tail := add(headStart, 128)\n    }\n}","id":9,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"608060405234801561001057600080fd5b50600436106100725760003560e01c80638da5cb5b116100505780638da5cb5b146100c3578063c4d66de8146100d4578063f2fde38b146100e757600080fd5b80635913a31c14610077578063715018a61461008c5780638150864d14610094575b600080fd5b61008a61008536600461071e565b6100fa565b005b61008a610391565b6065546100a7906001600160a01b031681565b6040516001600160a01b03909116815260200160405180910390f35b6033546001600160a01b03166100a7565b61008a6100e23660046107af565b6103a5565b61008a6100f53660046107af565b6104f3565b60008167ffffffffffffffff811115610115576101156107d1565b60405190808252806020026020018201604052801561014857816020015b60608152602001906001900390816101335790505b50905060005b8281101561038b57600084848381811061016a5761016a6107e7565b905060200281019061017c91906107fd565b61018a90602081019061081d565b61019390610954565b905081156102695760005b816020015151811015610267576000826020015182815181106101c3576101c36107e7565b60200260200101519050848787868181106101e0576101e06107e7565b90506020028101906101f291906107fd565b6040013581518110610206576102066107e7565b6020026020010151600081518110610220576102206107e7565b60200260200101518160600181815250508083602001518381518110610248576102486107e7565b602002602001018190525050808061025f90610aa6565b91505061019e565b505b604080516001808252818301909252600091816020015b60408051808201909152600081526060602082015281526020019060019003908161028057905050905081816000815181106102be576102be6107e7565b60209081029190910101526065546040517f44adc90e0000000000000000000000000000000000000000000000000000000081526001600160a01b03909116906344adc90e90610312908490600401610acd565b6000604051808303816000875af1158015610331573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526103599190810190610c0c565b84848151811061036b5761036b6107e7565b60200260200101819052505050808061038390610aa6565b91505061014e565b50505050565b610399610583565b6103a360006105dd565b565b600054610100900460ff16158080156103c55750600054600160ff909116105b806103df5750303b1580156103df575060005460ff166001145b6104565760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084015b60405180910390fd5b6000805460ff191660011790558015610479576000805461ff0019166101001790555b6065805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0384161790556104a961063c565b80156104ef576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050565b6104fb610583565b6001600160a01b0381166105775760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f6464726573730000000000000000000000000000000000000000000000000000606482015260840161044d565b610580816105dd565b50565b6033546001600160a01b031633146103a35760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161044d565b603380546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff166106a75760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b606482015260840161044d565b6103a3600054610100900460ff166107155760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b606482015260840161044d565b6103a3336105dd565b6000806020838503121561073157600080fd5b823567ffffffffffffffff8082111561074957600080fd5b818501915085601f83011261075d57600080fd5b81358181111561076c57600080fd5b8660208260051b850101111561078157600080fd5b60209290920196919550909350505050565b80356001600160a01b03811681146107aa57600080fd5b919050565b6000602082840312156107c157600080fd5b6107ca82610793565b9392505050565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b60008235605e1983360301811261081357600080fd5b9190910192915050565b60008235603e1983360301811261081357600080fd5b6040805190810167ffffffffffffffff81118282101715610856576108566107d1565b60405290565b60405160c0810167ffffffffffffffff81118282101715610856576108566107d1565b604051601f8201601f1916810167ffffffffffffffff811182821017156108a8576108a86107d1565b604052919050565b600067ffffffffffffffff8211156108ca576108ca6107d1565b5060051b60200190565b803580151581146107aa57600080fd5b600082601f8301126108f557600080fd5b813567ffffffffffffffff81111561090f5761090f6107d1565b610922601f8201601f191660200161087f565b81815284602083860101111561093757600080fd5b816020850160208301376000918101602001919091529392505050565b6000604080833603121561096757600080fd5b61096f610833565b8335815260208085013567ffffffffffffffff8082111561098f57600080fd5b9086019036601f8301126109a257600080fd5b81356109b56109b0826108b0565b61087f565b81815260059190911b830184019084810190368311156109d457600080fd5b8585015b83811015610a92578035858111156109f05760008081fd5b860160c036829003601f1901811315610a095760008081fd5b610a1161085c565b610a1c8a8401610793565b81528b8301358881168114610a315760008081fd5b818b01526060610a428482016108d4565b8d8301526080808501358284015260a09150818501358a811115610a665760008081fd5b610a74368e838901016108e4565b918401919091525091909201359082015283529186019186016109d8565b509486019490945250929695505050505050565b600060018201610ac657634e487b7160e01b600052601160045260246000fd5b5060010190565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b83811015610bfe57603f198984030185528151805184528701518784018790528051878501819052908801906060600582901b86018101919086019060005b81811015610be857605f1988850301835284516001600160a01b03815116855267ffffffffffffffff8d820151168d8601528b81015115158c86015260608101516060860152608081015160c0608087015280518060c088015260005b81811015610baf578f818401015160e0828a0101528f81019050610b90565b50600087820160e09081019190915260a09384015193880193909352968e0196601f01601f1916909501019350918b0191600101610b33565b5050509588019593505090860190600101610af4565b509098975050505050505050565b60006020808385031215610c1f57600080fd5b825167ffffffffffffffff811115610c3657600080fd5b8301601f81018513610c4757600080fd5b8051610c556109b0826108b0565b81815260059190911b82018301908381019087831115610c7457600080fd5b928401925b82841015610c9257835182529284019290840190610c79565b97965050505050505056fea26469706673582212205499387ff34c3bce07996d536378efc23281ae9194540f40a08da9fc3171958464736f6c63430008130033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x72 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8DA5CB5B GT PUSH2 0x50 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0xC3 JUMPI DUP1 PUSH4 0xC4D66DE8 EQ PUSH2 0xD4 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0xE7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x5913A31C EQ PUSH2 0x77 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x8C JUMPI DUP1 PUSH4 0x8150864D EQ PUSH2 0x94 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x8A PUSH2 0x85 CALLDATASIZE PUSH1 0x4 PUSH2 0x71E JUMP JUMPDEST PUSH2 0xFA JUMP JUMPDEST STOP JUMPDEST PUSH2 0x8A PUSH2 0x391 JUMP JUMPDEST PUSH1 0x65 SLOAD PUSH2 0xA7 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x33 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xA7 JUMP JUMPDEST PUSH2 0x8A PUSH2 0xE2 CALLDATASIZE PUSH1 0x4 PUSH2 0x7AF JUMP JUMPDEST PUSH2 0x3A5 JUMP JUMPDEST PUSH2 0x8A PUSH2 0xF5 CALLDATASIZE PUSH1 0x4 PUSH2 0x7AF JUMP JUMPDEST PUSH2 0x4F3 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x115 JUMPI PUSH2 0x115 PUSH2 0x7D1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x148 JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x133 JUMPI SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x38B JUMPI PUSH1 0x0 DUP5 DUP5 DUP4 DUP2 DUP2 LT PUSH2 0x16A JUMPI PUSH2 0x16A PUSH2 0x7E7 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0x17C SWAP2 SWAP1 PUSH2 0x7FD JUMP JUMPDEST PUSH2 0x18A SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x81D JUMP JUMPDEST PUSH2 0x193 SWAP1 PUSH2 0x954 JUMP JUMPDEST SWAP1 POP DUP2 ISZERO PUSH2 0x269 JUMPI PUSH1 0x0 JUMPDEST DUP2 PUSH1 0x20 ADD MLOAD MLOAD DUP2 LT ISZERO PUSH2 0x267 JUMPI PUSH1 0x0 DUP3 PUSH1 0x20 ADD MLOAD DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x1C3 JUMPI PUSH2 0x1C3 PUSH2 0x7E7 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP DUP5 DUP8 DUP8 DUP7 DUP2 DUP2 LT PUSH2 0x1E0 JUMPI PUSH2 0x1E0 PUSH2 0x7E7 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0x1F2 SWAP2 SWAP1 PUSH2 0x7FD JUMP JUMPDEST PUSH1 0x40 ADD CALLDATALOAD DUP2 MLOAD DUP2 LT PUSH2 0x206 JUMPI PUSH2 0x206 PUSH2 0x7E7 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x220 JUMPI PUSH2 0x220 PUSH2 0x7E7 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP2 PUSH1 0x60 ADD DUP2 DUP2 MSTORE POP POP DUP1 DUP4 PUSH1 0x20 ADD MLOAD DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x248 JUMPI PUSH2 0x248 PUSH2 0x7E7 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP POP DUP1 DUP1 PUSH2 0x25F SWAP1 PUSH2 0xAA6 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x19E JUMP JUMPDEST POP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE PUSH1 0x0 SWAP2 DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP2 MSTORE PUSH1 0x60 PUSH1 0x20 DUP3 ADD MSTORE DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x280 JUMPI SWAP1 POP POP SWAP1 POP DUP2 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x2BE JUMPI PUSH2 0x2BE PUSH2 0x7E7 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x65 SLOAD PUSH1 0x40 MLOAD PUSH32 0x44ADC90E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x44ADC90E SWAP1 PUSH2 0x312 SWAP1 DUP5 SWAP1 PUSH1 0x4 ADD PUSH2 0xACD JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x331 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x359 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0xC0C JUMP JUMPDEST DUP5 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x36B JUMPI PUSH2 0x36B PUSH2 0x7E7 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP POP POP DUP1 DUP1 PUSH2 0x383 SWAP1 PUSH2 0xAA6 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x14E JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH2 0x399 PUSH2 0x583 JUMP JUMPDEST PUSH2 0x3A3 PUSH1 0x0 PUSH2 0x5DD JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND ISZERO DUP1 DUP1 ISZERO PUSH2 0x3C5 JUMPI POP PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0xFF SWAP1 SWAP2 AND LT JUMPDEST DUP1 PUSH2 0x3DF JUMPI POP ADDRESS EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3DF JUMPI POP PUSH1 0x0 SLOAD PUSH1 0xFF AND PUSH1 0x1 EQ JUMPDEST PUSH2 0x456 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E747261637420697320616C726561 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x647920696E697469616C697A6564000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE DUP1 ISZERO PUSH2 0x479 JUMPI PUSH1 0x0 DUP1 SLOAD PUSH2 0xFF00 NOT AND PUSH2 0x100 OR SWAP1 SSTORE JUMPDEST PUSH1 0x65 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND OR SWAP1 SSTORE PUSH2 0x4A9 PUSH2 0x63C JUMP JUMPDEST DUP1 ISZERO PUSH2 0x4EF JUMPI PUSH1 0x0 DUP1 SLOAD PUSH2 0xFF00 NOT AND SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH1 0x1 DUP2 MSTORE PUSH32 0x7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x4FB PUSH2 0x583 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x577 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6464726573730000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x44D JUMP JUMPDEST PUSH2 0x580 DUP2 PUSH2 0x5DD JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x33 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x3A3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x44D JUMP JUMPDEST PUSH1 0x33 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 MLOAD SWAP2 AND SWAP2 SWAP1 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x6A7 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E7472616374206973206E6F742069 PUSH1 0x44 DUP3 ADD MSTORE PUSH11 0x6E697469616C697A696E67 PUSH1 0xA8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x44D JUMP JUMPDEST PUSH2 0x3A3 PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x715 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E7472616374206973206E6F742069 PUSH1 0x44 DUP3 ADD MSTORE PUSH11 0x6E697469616C697A696E67 PUSH1 0xA8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x44D JUMP JUMPDEST PUSH2 0x3A3 CALLER PUSH2 0x5DD JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x20 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x731 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x749 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x75D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x76C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP6 ADD ADD GT ISZERO PUSH2 0x781 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 SWAP3 SWAP1 SWAP3 ADD SWAP7 SWAP2 SWAP6 POP SWAP1 SWAP4 POP POP POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x7AA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x7C1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x7CA DUP3 PUSH2 0x793 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 CALLDATALOAD PUSH1 0x5E NOT DUP4 CALLDATASIZE SUB ADD DUP2 SLT PUSH2 0x813 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 CALLDATALOAD PUSH1 0x3E NOT DUP4 CALLDATASIZE SUB ADD DUP2 SLT PUSH2 0x813 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP1 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x856 JUMPI PUSH2 0x856 PUSH2 0x7D1 JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0xC0 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x856 JUMPI PUSH2 0x856 PUSH2 0x7D1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x8A8 JUMPI PUSH2 0x8A8 PUSH2 0x7D1 JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x8CA JUMPI PUSH2 0x8CA PUSH2 0x7D1 JUMP JUMPDEST POP PUSH1 0x5 SHL PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST DUP1 CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x7AA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x8F5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x90F JUMPI PUSH2 0x90F PUSH2 0x7D1 JUMP JUMPDEST PUSH2 0x922 PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD PUSH2 0x87F JUMP JUMPDEST DUP2 DUP2 MSTORE DUP5 PUSH1 0x20 DUP4 DUP7 ADD ADD GT ISZERO PUSH2 0x937 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 PUSH1 0x20 DUP6 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 SWAP2 DUP2 ADD PUSH1 0x20 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP1 DUP4 CALLDATASIZE SUB SLT ISZERO PUSH2 0x967 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x96F PUSH2 0x833 JUMP JUMPDEST DUP4 CALLDATALOAD DUP2 MSTORE PUSH1 0x20 DUP1 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x98F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 DUP7 ADD SWAP1 CALLDATASIZE PUSH1 0x1F DUP4 ADD SLT PUSH2 0x9A2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x9B5 PUSH2 0x9B0 DUP3 PUSH2 0x8B0 JUMP JUMPDEST PUSH2 0x87F JUMP JUMPDEST DUP2 DUP2 MSTORE PUSH1 0x5 SWAP2 SWAP1 SWAP2 SHL DUP4 ADD DUP5 ADD SWAP1 DUP5 DUP2 ADD SWAP1 CALLDATASIZE DUP4 GT ISZERO PUSH2 0x9D4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 DUP6 ADD JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xA92 JUMPI DUP1 CALLDATALOAD DUP6 DUP2 GT ISZERO PUSH2 0x9F0 JUMPI PUSH1 0x0 DUP1 DUP2 REVERT JUMPDEST DUP7 ADD PUSH1 0xC0 CALLDATASIZE DUP3 SWAP1 SUB PUSH1 0x1F NOT ADD DUP2 SGT ISZERO PUSH2 0xA09 JUMPI PUSH1 0x0 DUP1 DUP2 REVERT JUMPDEST PUSH2 0xA11 PUSH2 0x85C JUMP JUMPDEST PUSH2 0xA1C DUP11 DUP5 ADD PUSH2 0x793 JUMP JUMPDEST DUP2 MSTORE DUP12 DUP4 ADD CALLDATALOAD DUP9 DUP2 AND DUP2 EQ PUSH2 0xA31 JUMPI PUSH1 0x0 DUP1 DUP2 REVERT JUMPDEST DUP2 DUP12 ADD MSTORE PUSH1 0x60 PUSH2 0xA42 DUP5 DUP3 ADD PUSH2 0x8D4 JUMP JUMPDEST DUP14 DUP4 ADD MSTORE PUSH1 0x80 DUP1 DUP6 ADD CALLDATALOAD DUP3 DUP5 ADD MSTORE PUSH1 0xA0 SWAP2 POP DUP2 DUP6 ADD CALLDATALOAD DUP11 DUP2 GT ISZERO PUSH2 0xA66 JUMPI PUSH1 0x0 DUP1 DUP2 REVERT JUMPDEST PUSH2 0xA74 CALLDATASIZE DUP15 DUP4 DUP10 ADD ADD PUSH2 0x8E4 JUMP JUMPDEST SWAP2 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE POP SWAP2 SWAP1 SWAP3 ADD CALLDATALOAD SWAP1 DUP3 ADD MSTORE DUP4 MSTORE SWAP2 DUP7 ADD SWAP2 DUP7 ADD PUSH2 0x9D8 JUMP JUMPDEST POP SWAP5 DUP7 ADD SWAP5 SWAP1 SWAP5 MSTORE POP SWAP3 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 ADD PUSH2 0xAC6 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 ADD DUP2 DUP5 MSTORE DUP1 DUP6 MLOAD DUP1 DUP4 MSTORE PUSH1 0x40 SWAP3 POP DUP3 DUP7 ADD SWAP2 POP DUP3 DUP2 PUSH1 0x5 SHL DUP8 ADD ADD DUP5 DUP9 ADD PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xBFE JUMPI PUSH1 0x3F NOT DUP10 DUP5 SUB ADD DUP6 MSTORE DUP2 MLOAD DUP1 MLOAD DUP5 MSTORE DUP8 ADD MLOAD DUP8 DUP5 ADD DUP8 SWAP1 MSTORE DUP1 MLOAD DUP8 DUP6 ADD DUP2 SWAP1 MSTORE SWAP1 DUP9 ADD SWAP1 PUSH1 0x60 PUSH1 0x5 DUP3 SWAP1 SHL DUP7 ADD DUP2 ADD SWAP2 SWAP1 DUP7 ADD SWAP1 PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xBE8 JUMPI PUSH1 0x5F NOT DUP9 DUP6 SUB ADD DUP4 MSTORE DUP5 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 MLOAD AND DUP6 MSTORE PUSH8 0xFFFFFFFFFFFFFFFF DUP14 DUP3 ADD MLOAD AND DUP14 DUP7 ADD MSTORE DUP12 DUP2 ADD MLOAD ISZERO ISZERO DUP13 DUP7 ADD MSTORE PUSH1 0x60 DUP2 ADD MLOAD PUSH1 0x60 DUP7 ADD MSTORE PUSH1 0x80 DUP2 ADD MLOAD PUSH1 0xC0 PUSH1 0x80 DUP8 ADD MSTORE DUP1 MLOAD DUP1 PUSH1 0xC0 DUP9 ADD MSTORE PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xBAF JUMPI DUP16 DUP2 DUP5 ADD ADD MLOAD PUSH1 0xE0 DUP3 DUP11 ADD ADD MSTORE DUP16 DUP2 ADD SWAP1 POP PUSH2 0xB90 JUMP JUMPDEST POP PUSH1 0x0 DUP8 DUP3 ADD PUSH1 0xE0 SWAP1 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0xA0 SWAP4 DUP5 ADD MLOAD SWAP4 DUP9 ADD SWAP4 SWAP1 SWAP4 MSTORE SWAP7 DUP15 ADD SWAP7 PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP1 SWAP6 ADD ADD SWAP4 POP SWAP2 DUP12 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0xB33 JUMP JUMPDEST POP POP POP SWAP6 DUP9 ADD SWAP6 SWAP4 POP POP SWAP1 DUP7 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0xAF4 JUMP JUMPDEST POP SWAP1 SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xC1F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xC36 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 ADD PUSH1 0x1F DUP2 ADD DUP6 SGT PUSH2 0xC47 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 MLOAD PUSH2 0xC55 PUSH2 0x9B0 DUP3 PUSH2 0x8B0 JUMP JUMPDEST DUP2 DUP2 MSTORE PUSH1 0x5 SWAP2 SWAP1 SWAP2 SHL DUP3 ADD DUP4 ADD SWAP1 DUP4 DUP2 ADD SWAP1 DUP8 DUP4 GT ISZERO PUSH2 0xC74 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 DUP5 ADD SWAP3 JUMPDEST DUP3 DUP5 LT ISZERO PUSH2 0xC92 JUMPI DUP4 MLOAD DUP3 MSTORE SWAP3 DUP5 ADD SWAP3 SWAP1 DUP5 ADD SWAP1 PUSH2 0xC79 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SLOAD SWAP10 CODESIZE PUSH32 0xF34C3BCE07996D536378EFC23281AE9194540F40A08DA9FC3171958464736F6C PUSH4 0x43000813 STOP CALLER ","sourceMap":"365:1909:8:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;698:815;;;;;;:::i;:::-;;:::i;:::-;;2064:101:4;;;:::i;421:15:8:-;;;;;-1:-1:-1;;;;;421:15:8;;;;;;-1:-1:-1;;;;;852:55:9;;;834:74;;822:2;807:18;421:15:8;;;;;;;1441:85:4;1513:6;;-1:-1:-1;;;;;1513:6:4;1441:85;;574:118:8;;;;;;:::i;:::-;;:::i;2314:198:4:-;;;;;;:::i;:::-;;:::i;698:815:8:-;794:28;841:12;825:36;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;794:67;;875:9;871:636;890:23;;;871:636;;;934:38;975:12;;988:1;975:15;;;;;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;:28;;;;;;;:::i;:::-;934:69;;;:::i;:::-;;-1:-1:-1;1021:5:8;;1017:301;;1050:9;1046:258;1069:7;:12;;;:19;1065:1;:23;1046:258;;;1117:34;1154:7;:12;;;1167:1;1154:15;;;;;;;;:::i;:::-;;;;;;;1117:52;;1205:9;1215:12;;1228:1;1215:15;;;;;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;:22;;;1205:33;;;;;;;;:::i;:::-;;;;;;;1239:1;1205:36;;;;;;;;:::i;:::-;;;;;;;1191:4;:11;;:50;;;;;1281:4;1263:7;:12;;;1276:1;1263:15;;;;;;;;:::i;:::-;;;;;;:22;;;;1095:209;1090:3;;;;;:::i;:::-;;;;1046:258;;;;1017:301;1375:32;;;1405:1;1375:32;;;;;;;;;1331:41;;1375:32;;;;-1:-1:-1;;;;;;;;;;;;;;;;;1375:32:8;;;;;;;;;;;;;;;1331:76;;1435:7;1421:8;1430:1;1421:11;;;;;;;;:::i;:::-;;;;;;;;;;:21;1471:3;;:25;;;;;-1:-1:-1;;;;;1471:3:8;;;;:15;;:25;;1487:8;;1471:25;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1471:25:8;;;;;;;;;;;;:::i;:::-;1456:9;1466:1;1456:12;;;;;;;;:::i;:::-;;;;;;:40;;;;920:587;;915:3;;;;;:::i;:::-;;;;871:636;;;;784:729;698:815;;:::o;2064:101:4:-;1334:13;:11;:13::i;:::-;2128:30:::1;2155:1;2128:18;:30::i;:::-;2064:101::o:0;574:118:8:-;3279:19:5;3302:13;;;;;;3301:14;;3347:34;;;;-1:-1:-1;3365:12:5;;3380:1;3365:12;;;;:16;3347:34;3346:108;;;-1:-1:-1;3426:4:5;1713:19:6;:23;;;3387:66:5;;-1:-1:-1;3436:12:5;;;;;:17;3387:66;3325:201;;;;-1:-1:-1;;;3325:201:5;;10773:2:9;3325:201:5;;;10755:21:9;10812:2;10792:18;;;10785:30;10851:34;10831:18;;;10824:62;10922:16;10902:18;;;10895:44;10956:19;;3325:201:5;;;;;;;;;3536:12;:16;;-1:-1:-1;;3536:16:5;3551:1;3536:16;;;3562:65;;;;3596:13;:20;;-1:-1:-1;;3596:20:5;;;;;3562:65;640:3:8::1;:19:::0;;-1:-1:-1;;640:19:8::1;-1:-1:-1::0;;;;;640:19:8;::::1;;::::0;;669:16:::1;:14;:16::i;:::-;3651:14:5::0;3647:99;;;3697:5;3681:21;;-1:-1:-1;;3681:21:5;;;3721:14;;-1:-1:-1;11138:36:9;;3721:14:5;;11126:2:9;11111:18;3721:14:5;;;;;;;3647:99;3269:483;574:118:8;:::o;2314:198:4:-;1334:13;:11;:13::i;:::-;-1:-1:-1;;;;;2402:22:4;::::1;2394:73;;;::::0;-1:-1:-1;;;2394:73:4;;11387:2:9;2394:73:4::1;::::0;::::1;11369:21:9::0;11426:2;11406:18;;;11399:30;11465:34;11445:18;;;11438:62;11536:8;11516:18;;;11509:36;11562:19;;2394:73:4::1;11185:402:9::0;2394:73:4::1;2477:28;2496:8;2477:18;:28::i;:::-;2314:198:::0;:::o;1599:130::-;1513:6;;-1:-1:-1;;;;;1513:6:4;929:10:7;1662:23:4;1654:68;;;;-1:-1:-1;;;1654:68:4;;11794:2:9;1654:68:4;;;11776:21:9;;;11813:18;;;11806:30;11872:34;11852:18;;;11845:62;11924:18;;1654:68:4;11592:356:9;2666:187:4;2758:6;;;-1:-1:-1;;;;;2774:17:4;;;-1:-1:-1;;2774:17:4;;;;;;;2806:40;;2758:6;;;2774:17;2758:6;;2806:40;;2739:16;;2806:40;2729:124;2666:187;:::o;1003:95::-;5374:13:5;;;;;;;5366:69;;;;-1:-1:-1;;;5366:69:5;;12155:2:9;5366:69:5;;;12137:21:9;12194:2;12174:18;;;12167:30;12233:34;12213:18;;;12206:62;-1:-1:-1;;;12284:18:9;;;12277:41;12335:19;;5366:69:5;11953:407:9;5366:69:5;1065:26:4::1;5374:13:5::0;;;;;;;5366:69;;;;-1:-1:-1;;;5366:69:5;;12155:2:9;5366:69:5;;;12137:21:9;12194:2;12174:18;;;12167:30;12233:34;12213:18;;;12206:62;-1:-1:-1;;;12284:18:9;;;12277:41;12335:19;;5366:69:5;11953:407:9;5366:69:5;1176:32:4::1;929:10:7::0;1176:18:4::1;:32::i;14:657:9:-:0;142:6;150;203:2;191:9;182:7;178:23;174:32;171:52;;;219:1;216;209:12;171:52;259:9;246:23;288:18;329:2;321:6;318:14;315:34;;;345:1;342;335:12;315:34;383:6;372:9;368:22;358:32;;428:7;421:4;417:2;413:13;409:27;399:55;;450:1;447;440:12;399:55;490:2;477:16;516:2;508:6;505:14;502:34;;;532:1;529;522:12;502:34;585:7;580:2;570:6;567:1;563:14;559:2;555:23;551:32;548:45;545:65;;;606:1;603;596:12;545:65;637:2;629:11;;;;;659:6;;-1:-1:-1;14:657:9;;-1:-1:-1;;;;14:657:9:o;1150:196::-;1218:20;;-1:-1:-1;;;;;1267:54:9;;1257:65;;1247:93;;1336:1;1333;1326:12;1247:93;1150:196;;;:::o;1351:186::-;1410:6;1463:2;1451:9;1442:7;1438:23;1434:32;1431:52;;;1479:1;1476;1469:12;1431:52;1502:29;1521:9;1502:29;:::i;:::-;1492:39;1351:186;-1:-1:-1;;;1351:186:9:o;1542:184::-;-1:-1:-1;;;1591:1:9;1584:88;1691:4;1688:1;1681:15;1715:4;1712:1;1705:15;1731:184;-1:-1:-1;;;1780:1:9;1773:88;1880:4;1877:1;1870:15;1904:4;1901:1;1894:15;1920:339;2028:4;2086:11;2073:25;2180:2;2176:7;2165:8;2149:14;2145:29;2141:43;2121:18;2117:68;2107:96;;2199:1;2196;2189:12;2107:96;2220:33;;;;;1920:339;-1:-1:-1;;1920:339:9:o;2264:::-;2372:4;2430:11;2417:25;2524:2;2520:7;2509:8;2493:14;2489:29;2485:43;2465:18;2461:68;2451:96;;2543:1;2540;2533:12;2608:257;2680:4;2674:11;;;2712:17;;2759:18;2744:34;;2780:22;;;2741:62;2738:88;;;2806:18;;:::i;:::-;2842:4;2835:24;2608:257;:::o;2870:253::-;2942:2;2936:9;2984:4;2972:17;;3019:18;3004:34;;3040:22;;;3001:62;2998:88;;;3066:18;;:::i;3128:275::-;3199:2;3193:9;3264:2;3245:13;;-1:-1:-1;;3241:27:9;3229:40;;3299:18;3284:34;;3320:22;;;3281:62;3278:88;;;3346:18;;:::i;:::-;3382:2;3375:22;3128:275;;-1:-1:-1;3128:275:9:o;3408:205::-;3490:4;3523:18;3515:6;3512:30;3509:56;;;3545:18;;:::i;:::-;-1:-1:-1;3590:1:9;3586:14;3602:4;3582:25;;3408:205::o;3618:160::-;3683:20;;3739:13;;3732:21;3722:32;;3712:60;;3768:1;3765;3758:12;3783:530;3825:5;3878:3;3871:4;3863:6;3859:17;3855:27;3845:55;;3896:1;3893;3886:12;3845:55;3932:6;3919:20;3958:18;3954:2;3951:26;3948:52;;;3980:18;;:::i;:::-;4024:55;4067:2;4048:13;;-1:-1:-1;;4044:27:9;4073:4;4040:38;4024:55;:::i;:::-;4104:2;4095:7;4088:19;4150:3;4143:4;4138:2;4130:6;4126:15;4122:26;4119:35;4116:55;;;4167:1;4164;4157:12;4116:55;4232:2;4225:4;4217:6;4213:17;4206:4;4197:7;4193:18;4180:55;4280:1;4255:16;;;4273:4;4251:27;4244:38;;;;4259:7;3783:530;-1:-1:-1;;;3783:530:9:o;4318:2451::-;4450:9;4484:4;4532:2;4524:5;4508:14;4504:26;4500:35;4497:55;;;4548:1;4545;4538:12;4497:55;4576:22;;:::i;:::-;4636:5;4623:19;4614:7;4607:36;4662:2;4711;4704:5;4700:14;4687:28;4734:18;4775:2;4767:6;4764:14;4761:34;;;4791:1;4788;4781:12;4761:34;4814:18;;;;4870:14;4863:4;4855:13;;4851:34;4841:62;;4899:1;4896;4889:12;4841:62;4935:2;4922:16;4958:82;4974:65;5036:2;4974:65;:::i;:::-;4958:82;:::i;:::-;5074:15;;;5156:1;5152:10;;;;5144:19;;5140:28;;;5105:12;;;;5191:14;5180:26;;5177:46;;;5219:1;5216;5209:12;5177:46;5251:2;5247;5243:11;5263:1431;5279:6;5274:3;5271:15;5263:1431;;;5365:3;5352:17;5401:2;5388:11;5385:19;5382:109;;;5445:1;5474:2;5470;5463:14;5382:109;5514:20;;5557:4;5589:14;5585:23;;;-1:-1:-1;;5581:37:9;5577:46;-1:-1:-1;5574:136:9;;;5664:1;5693:2;5689;5682:14;5574:136;5738:22;;:::i;:::-;5789:31;5816:2;5812;5808:11;5789:31;:::i;:::-;5780:7;5773:48;5870:2;5866;5862:11;5849:25;5922:2;5913:7;5909:16;5900:7;5897:29;5887:130;;5969:1;5999:3;5994;5987:16;5887:130;6037:16;;;6030:33;6087:2;6127:29;6143:12;;;6127:29;:::i;:::-;6122:2;6113:7;6109:16;6102:55;6181:3;6244;6240:2;6236:12;6223:26;6217:3;6208:7;6204:17;6197:53;6274:3;6263:14;;6327:3;6323:2;6319:12;6306:26;6361:2;6351:8;6348:16;6345:109;;;6406:1;6436:3;6431;6424:16;6345:109;6493:60;6538:14;6533:2;6522:8;6518:2;6514:17;6510:26;6493:60;:::i;:::-;6474:17;;;6467:87;;;;-1:-1:-1;6606:11:9;;;;6593:25;6574:17;;;6567:52;6632:20;;6672:12;;;;5296;;5263:1431;;;-1:-1:-1;6710:16:9;;;6703:31;;;;-1:-1:-1;6714:7:9;;4318:2451;-1:-1:-1;;;;;;4318:2451:9:o;6774:289::-;6813:3;6834:17;;;6831:197;;-1:-1:-1;;;6881:1:9;6874:88;6985:4;6982:1;6975:15;7013:4;7010:1;7003:15;6831:197;-1:-1:-1;7055:1:9;7044:13;;6774:289::o;7068:2590::-;7290:4;7319:2;7359;7348:9;7344:18;7389:2;7378:9;7371:21;7412:6;7447;7441:13;7478:6;7470;7463:22;7504:2;7494:12;;7537:2;7526:9;7522:18;7515:25;;7599:2;7589:6;7586:1;7582:14;7571:9;7567:30;7563:39;7637:2;7629:6;7625:15;7658:1;7668:1961;7682:6;7679:1;7676:13;7668:1961;;;-1:-1:-1;;7747:22:9;;;7743:36;7731:49;;7803:13;;7886:9;;7871:25;;7935:11;;7929:18;7967:15;;;7960:27;;;8048:19;;7843:15;;;8080:24;;;8235:21;;;;8138:2;8188:1;8184:16;;;8172:29;;8168:38;;;8126:15;;;;8280:1;8294:1226;8310:8;8305:3;8302:17;8294:1226;;;8416:2;8412:7;8403:6;8395;8391:19;8387:33;8380:5;8373:48;8454:8;8448:15;-1:-1:-1;;;;;8505:2:9;8499:9;8495:58;8487:6;8480:74;8619:18;8613:2;8609;8605:11;8599:18;8595:43;8590:2;8582:6;8578:15;8571:68;8708:2;8704;8700:11;8694:18;8687:26;8680:34;8675:2;8667:6;8663:15;8656:59;8770:2;8766;8762:11;8756:18;8751:2;8743:6;8739:15;8732:43;8828:4;8824:2;8820:13;8814:20;8877:4;8870;8862:6;8858:17;8851:31;8921:14;8915:21;8979:8;8972:4;8964:6;8960:17;8953:35;9016:1;9034:182;9050:8;9045:3;9042:17;9034:182;;;9193:2;9187:3;9171:14;9167:24;9163:33;9157:40;9151:3;9145;9137:6;9133:16;9129:26;9122:76;9078:2;9073:3;9069:12;9062:19;;9034:182;;;-1:-1:-1;9273:1:9;9244:21;;;9267:3;9240:31;;;9233:42;;;;9332:4;9324:13;;;9318:20;9299:17;;;9292:47;;;;9449:17;;;;9409:2;9386:17;-1:-1:-1;;9382:31:9;9370:44;;;9366:54;;-1:-1:-1;9492:14:9;;;;8338:1;8329:11;8294:1226;;;-1:-1:-1;;;9607:12:9;;;;9543:6;-1:-1:-1;;9572:15:9;;;;7704:1;7697:9;7668:1961;;;-1:-1:-1;9646:6:9;;7068:2590;-1:-1:-1;;;;;;;;7068:2590:9:o;9663:903::-;9758:6;9789:2;9832;9820:9;9811:7;9807:23;9803:32;9800:52;;;9848:1;9845;9838:12;9800:52;9881:9;9875:16;9914:18;9906:6;9903:30;9900:50;;;9946:1;9943;9936:12;9900:50;9969:22;;10022:4;10014:13;;10010:27;-1:-1:-1;10000:55:9;;10051:1;10048;10041:12;10000:55;10080:2;10074:9;10103:82;10119:65;10181:2;10119:65;:::i;10103:82::-;10219:15;;;10301:1;10297:10;;;;10289:19;;10285:28;;;10250:12;;;;10325:19;;;10322:39;;;10357:1;10354;10347:12;10322:39;10381:11;;;;10401:135;10417:6;10412:3;10409:15;10401:135;;;10483:10;;10471:23;;10434:12;;;;10514;;;;10401:135;;;10555:5;9663:903;-1:-1:-1;;;;;;;9663:903:9:o"},"gasEstimates":{"creation":{"codeDepositCost":"656600","executionCost":"689","totalCost":"657289"},"external":{"eas()":"2370","initialize(address)":"infinite","multiSequentialAttest((bytes32,(bytes32,(address,uint64,bool,bytes32,bytes,uint256)[]),uint256)[])":"infinite","owner()":"2319","renounceOwnership()":"infinite","transferOwnership(address)":"28368"}},"methodIdentifiers":{"eas()":"8150864d","initialize(address)":"c4d66de8","multiSequentialAttest((bytes32,(bytes32,(address,uint64,bool,bytes32,bytes,uint256)[]),uint256)[])":"5913a31c","owner()":"8da5cb5b","renounceOwnership()":"715018a6","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"eas\",\"outputs\":[{\"internalType\":\"contract IEAS\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"easAddr\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"uid\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"schema\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"expirationTime\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"revocable\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"refUID\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct AttestationRequestData[]\",\"name\":\"data\",\"type\":\"tuple[]\"}],\"internalType\":\"struct MultiAttestationRequest\",\"name\":\"multiRequest\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"refIdx\",\"type\":\"uint256\"}],\"internalType\":\"struct Gap.AttestationRequestNode[]\",\"name\":\"requestNodes\",\"type\":\"tuple[]\"}],\"name\":\"multiSequentialAttest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Gap.sol\":\"Gap\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@ethereum-attestation-service/eas-contracts/contracts/Common.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// A representation of an empty/uninitialized UID.\\nbytes32 constant EMPTY_UID = 0;\\n\\n// A zero expiration represents an non-expiring attestation.\\nuint64 constant NO_EXPIRATION_TIME = 0;\\n\\nerror AccessDenied();\\nerror InvalidEAS();\\nerror InvalidLength();\\nerror InvalidSignature();\\nerror NotFound();\\n\\n/**\\n * @dev A struct representing EIP712 signature data.\\n */\\nstruct EIP712Signature {\\n    uint8 v; // The recovery ID.\\n    bytes32 r; // The x-coordinate of the nonce R.\\n    bytes32 s; // The signature data.\\n}\\n\\n/**\\n * @dev A struct representing a single attestation.\\n */\\nstruct Attestation {\\n    bytes32 uid; // A unique identifier of the attestation.\\n    bytes32 schema; // The unique identifier of the schema.\\n    uint64 time; // The time when the attestation was created (Unix timestamp).\\n    uint64 expirationTime; // The time when the attestation expires (Unix timestamp).\\n    uint64 revocationTime; // The time when the attestation was revoked (Unix timestamp).\\n    bytes32 refUID; // The UID of the related attestation.\\n    address recipient; // The recipient of the attestation.\\n    address attester; // The attester/sender of the attestation.\\n    bool revocable; // Whether the attestation is revocable.\\n    bytes data; // Custom attestation data.\\n}\\n\\n/**\\n * @dev A helper function to work with unchecked iterators in loops.\\n */\\nfunction uncheckedInc(uint256 i) pure returns (uint256 j) {\\n    unchecked {\\n        j = i + 1;\\n    }\\n}\\n\",\"keccak256\":\"0x4bab9ec76bdb009e9fb505c45a679d39c9e80771eb13ed901029a1068025752a\",\"license\":\"MIT\"},\"@ethereum-attestation-service/eas-contracts/contracts/IEAS.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { ISchemaRegistry } from \\\"./ISchemaRegistry.sol\\\";\\nimport { Attestation, EIP712Signature } from \\\"./Common.sol\\\";\\n\\n/**\\n * @dev A struct representing the arguments of the attestation request.\\n */\\nstruct AttestationRequestData {\\n    address recipient; // The recipient of the attestation.\\n    uint64 expirationTime; // The time when the attestation expires (Unix timestamp).\\n    bool revocable; // Whether the attestation is revocable.\\n    bytes32 refUID; // The UID of the related attestation.\\n    bytes data; // Custom attestation data.\\n    uint256 value; // An explicit ETH amount to send to the resolver. This is important to prevent accidental user errors.\\n}\\n\\n/**\\n * @dev A struct representing the full arguments of the attestation request.\\n */\\nstruct AttestationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    AttestationRequestData data; // The arguments of the attestation request.\\n}\\n\\n/**\\n * @dev A struct representing the full arguments of the full delegated attestation request.\\n */\\nstruct DelegatedAttestationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    AttestationRequestData data; // The arguments of the attestation request.\\n    EIP712Signature signature; // The EIP712 signature data.\\n    address attester; // The attesting account.\\n}\\n\\n/**\\n * @dev A struct representing the full arguments of the multi attestation request.\\n */\\nstruct MultiAttestationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    AttestationRequestData[] data; // The arguments of the attestation request.\\n}\\n\\n/**\\n * @dev A struct representing the full arguments of the delegated multi attestation request.\\n */\\nstruct MultiDelegatedAttestationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    AttestationRequestData[] data; // The arguments of the attestation requests.\\n    EIP712Signature[] signatures; // The EIP712 signatures data. Please note that the signatures are assumed to be signed with increasing nonces.\\n    address attester; // The attesting account.\\n}\\n\\n/**\\n * @dev A struct representing the arguments of the revocation request.\\n */\\nstruct RevocationRequestData {\\n    bytes32 uid; // The UID of the attestation to revoke.\\n    uint256 value; // An explicit ETH amount to send to the resolver. This is important to prevent accidental user errors.\\n}\\n\\n/**\\n * @dev A struct representing the full arguments of the revocation request.\\n */\\nstruct RevocationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    RevocationRequestData data; // The arguments of the revocation request.\\n}\\n\\n/**\\n * @dev A struct representing the arguments of the full delegated revocation request.\\n */\\nstruct DelegatedRevocationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    RevocationRequestData data; // The arguments of the revocation request.\\n    EIP712Signature signature; // The EIP712 signature data.\\n    address revoker; // The revoking account.\\n}\\n\\n/**\\n * @dev A struct representing the full arguments of the multi revocation request.\\n */\\nstruct MultiRevocationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    RevocationRequestData[] data; // The arguments of the revocation request.\\n}\\n\\n/**\\n * @dev A struct representing the full arguments of the delegated multi revocation request.\\n */\\nstruct MultiDelegatedRevocationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    RevocationRequestData[] data; // The arguments of the revocation requests.\\n    EIP712Signature[] signatures; // The EIP712 signatures data. Please note that the signatures are assumed to be signed with increasing nonces.\\n    address revoker; // The revoking account.\\n}\\n\\n/**\\n * @title EAS - Ethereum Attestation Service interface.\\n */\\ninterface IEAS {\\n    /**\\n     * @dev Emitted when an attestation has been made.\\n     *\\n     * @param recipient The recipient of the attestation.\\n     * @param attester The attesting account.\\n     * @param uid The UID the revoked attestation.\\n     * @param schema The UID of the schema.\\n     */\\n    event Attested(address indexed recipient, address indexed attester, bytes32 uid, bytes32 indexed schema);\\n\\n    /**\\n     * @dev Emitted when an attestation has been revoked.\\n     *\\n     * @param recipient The recipient of the attestation.\\n     * @param attester The attesting account.\\n     * @param schema The UID of the schema.\\n     * @param uid The UID the revoked attestation.\\n     */\\n    event Revoked(address indexed recipient, address indexed attester, bytes32 uid, bytes32 indexed schema);\\n\\n    /**\\n     * @dev Emitted when a data has been timestamped.\\n     *\\n     * @param data The data.\\n     * @param timestamp The timestamp.\\n     */\\n    event Timestamped(bytes32 indexed data, uint64 indexed timestamp);\\n\\n    /**\\n     * @dev Emitted when a data has been revoked.\\n     *\\n     * @param revoker The address of the revoker.\\n     * @param data The data.\\n     * @param timestamp The timestamp.\\n     */\\n    event RevokedOffchain(address indexed revoker, bytes32 indexed data, uint64 indexed timestamp);\\n\\n    /**\\n     * @dev Returns the address of the global schema registry.\\n     *\\n     * @return The address of the global schema registry.\\n     */\\n    function getSchemaRegistry() external view returns (ISchemaRegistry);\\n\\n    /**\\n     * @dev Attests to a specific schema.\\n     *\\n     * @param request The arguments of the attestation request.\\n     *\\n     * Example:\\n     *\\n     * attest({\\n     *     schema: \\\"0facc36681cbe2456019c1b0d1e7bedd6d1d40f6f324bf3dd3a4cef2999200a0\\\",\\n     *     data: {\\n     *         recipient: \\\"0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf\\\",\\n     *         expirationTime: 0,\\n     *         revocable: true,\\n     *         refUID: \\\"0x0000000000000000000000000000000000000000000000000000000000000000\\\",\\n     *         data: \\\"0xF00D\\\",\\n     *         value: 0\\n     *     }\\n     * })\\n     *\\n     * @return The UID of the new attestation.\\n     */\\n    function attest(AttestationRequest calldata request) external payable returns (bytes32);\\n\\n    /**\\n     * @dev Attests to a specific schema via the provided EIP712 signature.\\n     *\\n     * @param delegatedRequest The arguments of the delegated attestation request.\\n     *\\n     * Example:\\n     *\\n     * attestByDelegation({\\n     *     schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n     *     data: {\\n     *         recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',\\n     *         expirationTime: 1673891048,\\n     *         revocable: true,\\n     *         refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\\n     *         data: '0x1234',\\n     *         value: 0\\n     *     },\\n     *     signature: {\\n     *         v: 28,\\n     *         r: '0x148c...b25b',\\n     *         s: '0x5a72...be22'\\n     *     },\\n     *     attester: '0xc5E8740aD971409492b1A63Db8d83025e0Fc427e'\\n     * })\\n     *\\n     * @return The UID of the new attestation.\\n     */\\n    function attestByDelegation(\\n        DelegatedAttestationRequest calldata delegatedRequest\\n    ) external payable returns (bytes32);\\n\\n    /**\\n     * @dev Attests to multiple schemas.\\n     *\\n     * @param multiRequests The arguments of the multi attestation requests. The requests should be grouped by distinct\\n     * schema ids to benefit from the best batching optimization.\\n     *\\n     * Example:\\n     *\\n     * multiAttest([{\\n     *     schema: '0x33e9094830a5cba5554d1954310e4fbed2ef5f859ec1404619adea4207f391fd',\\n     *     data: [{\\n     *         recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',\\n     *         expirationTime: 1673891048,\\n     *         revocable: true,\\n     *         refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\\n     *         data: '0x1234',\\n     *         value: 1000\\n     *     },\\n     *     {\\n     *         recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',\\n     *         expirationTime: 0,\\n     *         revocable: false,\\n     *         refUID: '0x480df4a039efc31b11bfdf491b383ca138b6bde160988222a2a3509c02cee174',\\n     *         data: '0x00',\\n     *         value: 0\\n     *     }],\\n     * },\\n     * {\\n     *     schema: '0x5ac273ce41e3c8bfa383efe7c03e54c5f0bff29c9f11ef6ffa930fc84ca32425',\\n     *     data: [{\\n     *         recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',\\n     *         expirationTime: 0,\\n     *         revocable: true,\\n     *         refUID: '0x75bf2ed8dca25a8190c50c52db136664de25b2449535839008ccfdab469b214f',\\n     *         data: '0x12345678',\\n     *         value: 0\\n     *     },\\n     * }])\\n     *\\n     * @return The UIDs of the new attestations.\\n     */\\n    function multiAttest(MultiAttestationRequest[] calldata multiRequests) external payable returns (bytes32[] memory);\\n\\n    /**\\n     * @dev Attests to multiple schemas using via provided EIP712 signatures.\\n     *\\n     * @param multiDelegatedRequests The arguments of the delegated multi attestation requests. The requests should be\\n     * grouped by distinct schema ids to benefit from the best batching optimization.\\n     *\\n     * Example:\\n     *\\n     * multiAttestByDelegation([{\\n     *     schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n     *     data: [{\\n     *         recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',\\n     *         expirationTime: 1673891048,\\n     *         revocable: true,\\n     *         refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\\n     *         data: '0x1234',\\n     *         value: 0\\n     *     },\\n     *     {\\n     *         recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',\\n     *         expirationTime: 0,\\n     *         revocable: false,\\n     *         refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\\n     *         data: '0x00',\\n     *         value: 0\\n     *     }],\\n     *     signatures: [{\\n     *         v: 28,\\n     *         r: '0x148c...b25b',\\n     *         s: '0x5a72...be22'\\n     *     },\\n     *     {\\n     *         v: 28,\\n     *         r: '0x487s...67bb',\\n     *         s: '0x12ad...2366'\\n     *     }],\\n     *     attester: '0x1D86495b2A7B524D747d2839b3C645Bed32e8CF4'\\n     * }])\\n     *\\n     * @return The UIDs of the new attestations.\\n     */\\n    function multiAttestByDelegation(\\n        MultiDelegatedAttestationRequest[] calldata multiDelegatedRequests\\n    ) external payable returns (bytes32[] memory);\\n\\n    /**\\n     * @dev Revokes an existing attestation to a specific schema.\\n     *\\n     * Example:\\n     *\\n     * revoke({\\n     *     schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n     *     data: {\\n     *         uid: '0x101032e487642ee04ee17049f99a70590c735b8614079fc9275f9dd57c00966d',\\n     *         value: 0\\n     *     }\\n     * })\\n     *\\n     * @param request The arguments of the revocation request.\\n     */\\n    function revoke(RevocationRequest calldata request) external payable;\\n\\n    /**\\n     * @dev Revokes an existing attestation to a specific schema via the provided EIP712 signature.\\n     *\\n     * Example:\\n     *\\n     * revokeByDelegation({\\n     *     schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n     *     data: {\\n     *         uid: '0xcbbc12102578c642a0f7b34fe7111e41afa25683b6cd7b5a14caf90fa14d24ba',\\n     *         value: 0\\n     *     },\\n     *     signature: {\\n     *         v: 27,\\n     *         r: '0xb593...7142',\\n     *         s: '0x0f5b...2cce'\\n     *     },\\n     *     revoker: '0x244934dd3e31bE2c81f84ECf0b3E6329F5381992'\\n     * })\\n     *\\n     * @param delegatedRequest The arguments of the delegated revocation request.\\n     */\\n    function revokeByDelegation(DelegatedRevocationRequest calldata delegatedRequest) external payable;\\n\\n    /**\\n     * @dev Revokes existing attestations to multiple schemas.\\n     *\\n     * @param multiRequests The arguments of the multi revocation requests. The requests should be grouped by distinct\\n     * schema ids to benefit from the best batching optimization.\\n     *\\n     * Example:\\n     *\\n     * multiRevoke([{\\n     *     schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n     *     data: [{\\n     *         uid: '0x211296a1ca0d7f9f2cfebf0daaa575bea9b20e968d81aef4e743d699c6ac4b25',\\n     *         value: 1000\\n     *     },\\n     *     {\\n     *         uid: '0xe160ac1bd3606a287b4d53d5d1d6da5895f65b4b4bab6d93aaf5046e48167ade',\\n     *         value: 0\\n     *     }],\\n     * },\\n     * {\\n     *     schema: '0x5ac273ce41e3c8bfa383efe7c03e54c5f0bff29c9f11ef6ffa930fc84ca32425',\\n     *     data: [{\\n     *         uid: '0x053d42abce1fd7c8fcddfae21845ad34dae287b2c326220b03ba241bc5a8f019',\\n     *         value: 0\\n     *     },\\n     * }])\\n     */\\n    function multiRevoke(MultiRevocationRequest[] calldata multiRequests) external payable;\\n\\n    /**\\n     * @dev Revokes existing attestations to multiple schemas via provided EIP712 signatures.\\n     *\\n     * @param multiDelegatedRequests The arguments of the delegated multi revocation attestation requests. The requests should be\\n     * grouped by distinct schema ids to benefit from the best batching optimization.\\n     *\\n     * Example:\\n     *\\n     * multiRevokeByDelegation([{\\n     *     schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n     *     data: [{\\n     *         uid: '0x211296a1ca0d7f9f2cfebf0daaa575bea9b20e968d81aef4e743d699c6ac4b25',\\n     *         value: 1000\\n     *     },\\n     *     {\\n     *         uid: '0xe160ac1bd3606a287b4d53d5d1d6da5895f65b4b4bab6d93aaf5046e48167ade',\\n     *         value: 0\\n     *     }],\\n     *     signatures: [{\\n     *         v: 28,\\n     *         r: '0x148c...b25b',\\n     *         s: '0x5a72...be22'\\n     *     },\\n     *     {\\n     *         v: 28,\\n     *         r: '0x487s...67bb',\\n     *         s: '0x12ad...2366'\\n     *     }],\\n     *     revoker: '0x244934dd3e31bE2c81f84ECf0b3E6329F5381992'\\n     * }])\\n     *\\n     */\\n    function multiRevokeByDelegation(\\n        MultiDelegatedRevocationRequest[] calldata multiDelegatedRequests\\n    ) external payable;\\n\\n    /**\\n     * @dev Timestamps the specified bytes32 data.\\n     *\\n     * @param data The data to timestamp.\\n     *\\n     * @return The timestamp the data was timestamped with.\\n     */\\n    function timestamp(bytes32 data) external returns (uint64);\\n\\n    /**\\n     * @dev Timestamps the specified multiple bytes32 data.\\n     *\\n     * @param data The data to timestamp.\\n     *\\n     * @return The timestamp the data was timestamped with.\\n     */\\n    function multiTimestamp(bytes32[] calldata data) external returns (uint64);\\n\\n    /**\\n     * @dev Revokes the specified bytes32 data.\\n     *\\n     * @param data The data to timestamp.\\n     *\\n     * @return The timestamp the data was revoked with.\\n     */\\n    function revokeOffchain(bytes32 data) external returns (uint64);\\n\\n    /**\\n     * @dev Revokes the specified multiple bytes32 data.\\n     *\\n     * @param data The data to timestamp.\\n     *\\n     * @return The timestamp the data was revoked with.\\n     */\\n    function multiRevokeOffchain(bytes32[] calldata data) external returns (uint64);\\n\\n    /**\\n     * @dev Returns an existing attestation by UID.\\n     *\\n     * @param uid The UID of the attestation to retrieve.\\n     *\\n     * @return The attestation data members.\\n     */\\n    function getAttestation(bytes32 uid) external view returns (Attestation memory);\\n\\n    /**\\n     * @dev Checks whether an attestation exists.\\n     *\\n     * @param uid The UID of the attestation to retrieve.\\n     *\\n     * @return Whether an attestation exists.\\n     */\\n    function isAttestationValid(bytes32 uid) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the timestamp that the specified data was timestamped with.\\n     *\\n     * @param data The data to query.\\n     *\\n     * @return The timestamp the data was timestamped with.\\n     */\\n    function getTimestamp(bytes32 data) external view returns (uint64);\\n\\n    /**\\n     * @dev Returns the timestamp that the specified data was timestamped with.\\n     *\\n     * @param data The data to query.\\n     *\\n     * @return The timestamp the data was timestamped with.\\n     */\\n    function getRevokeOffchain(address revoker, bytes32 data) external view returns (uint64);\\n}\\n\",\"keccak256\":\"0xd530be686226f3c8d7b02bb59797901620f64749a02228539afc8b082a1ee036\",\"license\":\"MIT\"},\"@ethereum-attestation-service/eas-contracts/contracts/ISchemaRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { ISchemaResolver } from \\\"./resolver/ISchemaResolver.sol\\\";\\n\\n/**\\n * @title A struct representing a record for a submitted schema.\\n */\\nstruct SchemaRecord {\\n    bytes32 uid; // The unique identifier of the schema.\\n    ISchemaResolver resolver; // Optional schema resolver.\\n    bool revocable; // Whether the schema allows revocations explicitly.\\n    string schema; // Custom specification of the schema (e.g., an ABI).\\n}\\n\\n/**\\n * @title The global schema registry interface.\\n */\\ninterface ISchemaRegistry {\\n    /**\\n     * @dev Emitted when a new schema has been registered\\n     *\\n     * @param uid The schema UID.\\n     * @param registerer The address of the account used to register the schema.\\n     */\\n    event Registered(bytes32 indexed uid, address registerer);\\n\\n    /**\\n     * @dev Submits and reserves a new schema\\n     *\\n     * @param schema The schema data schema.\\n     * @param resolver An optional schema resolver.\\n     * @param revocable Whether the schema allows revocations explicitly.\\n     *\\n     * @return The UID of the new schema.\\n     */\\n    function register(string calldata schema, ISchemaResolver resolver, bool revocable) external returns (bytes32);\\n\\n    /**\\n     * @dev Returns an existing schema by UID\\n     *\\n     * @param uid The UID of the schema to retrieve.\\n     *\\n     * @return The schema data members.\\n     */\\n    function getSchema(bytes32 uid) external view returns (SchemaRecord memory);\\n}\\n\",\"keccak256\":\"0xef47e449dd02bd034e26b1dea505ce533906f8462fc674c938ed0e872a68d640\",\"license\":\"MIT\"},\"@ethereum-attestation-service/eas-contracts/contracts/resolver/ISchemaResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { Attestation } from \\\"../Common.sol\\\";\\n\\n/**\\n * @title The interface of an optional schema resolver.\\n */\\ninterface ISchemaResolver {\\n    /**\\n     * @dev Returns whether the resolver supports ETH transfers.\\n     */\\n    function isPayable() external pure returns (bool);\\n\\n    /**\\n     * @dev Processes an attestation and verifies whether it's valid.\\n     *\\n     * @param attestation The new attestation.\\n     *\\n     * @return Whether the attestation is valid.\\n     */\\n    function attest(Attestation calldata attestation) external payable returns (bool);\\n\\n    /**\\n     * @dev Processes multiple attestations and verifies whether they are valid.\\n     *\\n     * @param attestations The new attestations.\\n     * @param values Explicit ETH amounts which were sent with each attestation.\\n     *\\n     * @return Whether all the attestations are valid.\\n     */\\n    function multiAttest(\\n        Attestation[] calldata attestations,\\n        uint256[] calldata values\\n    ) external payable returns (bool);\\n\\n    /**\\n     * @dev Processes an attestation revocation and verifies if it can be revoked.\\n     *\\n     * @param attestation The existing attestation to be revoked.\\n     *\\n     * @return Whether the attestation can be revoked.\\n     */\\n    function revoke(Attestation calldata attestation) external payable returns (bool);\\n\\n    /**\\n     * @dev Processes revocation of multiple attestation and verifies they can be revoked.\\n     *\\n     * @param attestations The existing attestations to be revoked.\\n     * @param values Explicit ETH amounts which were sent with each revocation.\\n     *\\n     * @return Whether the attestations can be revoked.\\n     */\\n    function multiRevoke(\\n        Attestation[] calldata attestations,\\n        uint256[] calldata values\\n    ) external payable returns (bool);\\n}\\n\",\"keccak256\":\"0xc628c6540da258f76192eaa34c21699c9cbcc4a4029d7ee04e88dc9c18c981fd\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x4075622496acc77fd6d4de4cc30a8577a744d5c75afad33fdeacf1704d6eda98\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"contracts/Gap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport {IEAS, AttestationRequest, AttestationRequestData, MultiAttestationRequest} from \\\"@ethereum-attestation-service/eas-contracts/contracts/IEAS.sol\\\";\\n\\ncontract Gap is Initializable, OwnableUpgradeable {\\n    IEAS public eas;\\n\\n    struct AttestationRequestNode {\\n        bytes32 uid;\\n        MultiAttestationRequest multiRequest;\\n        uint refIdx;\\n    }\\n\\n    function initialize(address easAddr) public initializer {\\n        eas = IEAS(easAddr);\\n        __Ownable_init();\\n    }\\n\\n    function multiSequentialAttest(AttestationRequestNode[] calldata requestNodes) public {\\n        bytes32[][] memory totalUids = new bytes32[][](requestNodes.length);\\n        for(uint256 i = 0; i < requestNodes.length; i++) {\\n            MultiAttestationRequest memory request = requestNodes[i].multiRequest;\\n            if (i > 0) {\\n                for(uint256 j = 0; j < request.data.length; j++) {\\n                    AttestationRequestData memory data = request.data[j];\\n                    data.refUID = totalUids[requestNodes[i].refIdx][0];\\n                    request.data[j] = data;\\n                }\\n            }\\n            MultiAttestationRequest[] memory requests = new MultiAttestationRequest[](1);\\n            requests[0] = request;\\n            totalUids[i] = eas.multiAttest(requests);\\n        }\\n    }\\n\\n/*\\n\\n    function multiSequentialAttest(MultiAttestationRequest[] calldata multiRequests) external {\\n        bytes32[][] memory totalUids = new bytes32[][](multiRequests.length);\\n\\n        for (uint256 i = 0; i < multiRequests.length; i++) {\\n            MultiAttestationRequest[] memory requests = new MultiAttestationRequest[](1);\\n            requests[0] = multiRequests[i];\\n            if (i > 0) {\\n                for(uint256 j = 0; j < requests[0].data.length; j++) {\\n                    AttestationRequestData memory data = requests[0].data[j];\\n                    data.refUID = totalUids[i-1][0];\\n                    requests[0].data[j] = data;\\n                }\\n            }\\n            totalUids[i] = eas.multiAttest(requests);\\n        }\\n    }\\n    */\\n}\",\"keccak256\":\"0x27d1aa140e13a8861e4aa87b5da2543679b36b6e6743963929b9b2b6e90fa6c0\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":586,"contract":"contracts/Gap.sol:Gap","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":589,"contract":"contracts/Gap.sol:Gap","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":1119,"contract":"contracts/Gap.sol:Gap","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"},{"astId":458,"contract":"contracts/Gap.sol:Gap","label":"_owner","offset":0,"slot":"51","type":"t_address"},{"astId":578,"contract":"contracts/Gap.sol:Gap","label":"__gap","offset":0,"slot":"52","type":"t_array(t_uint256)49_storage"},{"astId":1136,"contract":"contracts/Gap.sol:Gap","label":"eas","offset":0,"slot":"101","type":"t_contract(IEAS)346"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_uint256)49_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[49]","numberOfBytes":"1568"},"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_contract(IEAS)346":{"encoding":"inplace","label":"contract IEAS","numberOfBytes":"20"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}}}}}